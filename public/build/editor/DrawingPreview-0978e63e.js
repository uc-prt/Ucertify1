
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, e as element, p as append_dev, a7 as Lang, v as validate_slots, o as onMount, A as AH, a8 as swal, a9 as afterUpdate, X as XMLToJSON, _ as onUserAnsChange, w as writable, f as space, h as text, ai as svg_element, j as attr_dev, k as add_location, n as insert_dev, q as listen_dev, F as set_data_dev, B as noop, x as detach_dev } from './main-b83e0690.js';
import { s as styleInject } from './style-inject.es-1c867377.js';

var css_248z = "body, html{     \r\n    -webkit-touch-callout: none;\r\n    -webkit-user-select: none;\r\n    -khtml-user-select: none;\r\n    -moz-user-select: none;\r\n    -ms-user-select: none;\r\n    user-select: none;  \r\n}\r\n\r\n[tabindex=\"0\"]:focus {\r\n    box-shadow: 0 0 0 .09rem #89ace4!important;\r\n    outline: 0;\r\n}\r\n\r\n.compass_route {\r\n    stroke: #979797;\r\n    fill: transparent;\r\n    stroke-width: 2;\r\n    stroke-linecap: round;\r\n    stroke-dasharray: 0,9;\r\n}\r\n\r\n.compass_radius {\r\n    stroke: #979797;\r\n    stroke-width: 2;\r\n}\r\n\r\n.compass_center {\r\n    cursor: move;\r\n    stroke: #979797;\r\n    stroke-width: 2;\r\n}\r\n\r\n.compass_radius_icon {\r\n    stroke: #979797;\r\n    stroke-width: 2;\r\n}\r\n\r\n.compass_center:hover,\r\n.compass_center:focus,\r\n.compass_radius:focus,\r\n.compass_radius:hover,\r\n.compass_radius_icon:focus,\r\n.compass_radius_icon:hover {\r\n    stroke: #666666;\r\n}\r\n\r\n.compass_rotation:hover,\r\n.compass_radius_icon:hover,\r\n.compass_center:hover,\r\n.compass_rotation:focus,\r\n.compass_radius_icon:focus,\r\n.compass_center:focus {\r\n    opacity: 1;\r\n}\r\n\r\n.compass_rotation,\r\n.compassRotationBar,\r\n.compass_radius_icon {\r\n    cursor: pointer;\r\n    opacity: 0.6;\r\n}\r\n\r\n.centerImg svg {\r\n    position: absolute;\r\n    top: 0; \r\n    left: 0;\r\n    cursor: crosshair;\r\n}\r\n\r\n.eraserHover:hover,\r\n.eraserHover:focus {\r\n    opacity: 0.5;\r\n}\r\n\r\n.drawing-compass-pointer-border {\r\n    opacity: 0.6;\r\n    stroke-width: 2;\r\n    stroke: #979797;\r\n    fill: #f8f8ff;\r\n}\r\n\r\n#svgImgPreview,\r\n#svgImg {\r\n    max-width: none;\r\n}\r\n\r\n.lastCircle_hover {\r\n    stroke: #000;\r\n    fill: #aaa;\r\n    cursor: grab;\r\n}\r\n\r\n.resize {\r\n    z-index: 20!important;\r\n    cursor: move;\r\n    background-color: rgba(240,240,240,.6)!important;\r\n    box-shadow: 0 0 1px #000 inset;\r\n    position:absolute;\r\n    top: 35px;\r\n    left: 57px;\r\n    height: 66px;\r\n    width: 66px;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    border-radius: 100%;\r\n}\r\n#moveDrawIcon {\r\n    top: 50px;\r\n    left: 50px;\r\n    z-index: 500;\r\n    margin-top: -7px;\r\n    margin-left: -7px;\r\n}\r\n.drawing_module_container .btn-light {\r\n    background-color: #ebebeb !important;\r\n}\r\n.previewDrawingPaths path:focus {\r\n    opacity: 0.5;\r\n    outline: none;\r\n}\r\n\r\n.drawing_module_container .btn-light:not(:disabled):not(.disabled):active:focus,\r\n.drawing_module_container .btn-light:not(:disabled):not(.disabled).active:focus {\r\n    box-shadow: 0 0 0 0.2rem #aaa9!important;\r\n}\r\n\r\n.currentFocusPoint {\r\n    stroke: #027f02!important;\r\n}\r\n\r\n.centerImg svg:focus {\r\n    -webkit-box-shadow: inset 1px 1px 12px #ccc !important;\r\n    -moz-box-shadow: inset 1px 1px 12px #ccc !important;\r\n    box-shadow: inset 1px 1px 12px #ccc !important;\r\n    outline: 0;\r\n}\r\n\r\npath.answer_mark:focus {\r\n    opacity: 0.5;\r\n}\r\n\r\n.resizer {\r\n    width: 15px;\r\n    height: 15px;\r\n    position: absolute;\r\n    right: 0;\r\n    bottom: 0;\r\n    cursor: se-resize\r\n}\r\n\r\n#drawing-modal .modal-body,\r\n#drawing_shortcut_modal .modal-body {\r\n    max-height: 350px;\r\n}\r\n\r\n.shortcutTable [tabindex=\"0\"]:focus {\r\n    outline: -webkit-focus-ring-color auto 1px;\r\n}\r\n\r\n#drawingPreviewMain .h {\r\n    display: none !important;\r\n}\r\n\r\n.drawing_bgimg {\r\n    margin-right: 32px;\r\n    pointer-events: none;\r\n    opacity: 0.4;\r\n}\r\n\r\n#upload_media {\r\n    margin-top: 28px;\r\n}\r\n\r\n.setting_btn {\r\n    right: 1px;\r\n    top: 1px;\r\n    z-index: 1;\r\n}\r\n\r\n.drawing_module_container button:disabled {\r\n    pointer-events: auto !important;\r\n}";
styleInject(css_248z);

/* clsSMDrawing\DrawingPreview.svelte generated by Svelte v3.29.0 */

const { console: console_1, document: document_1 } = globals;
const file = "clsSMDrawing\\DrawingPreview.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-1tmjbvw-style";
	style.textContent = ".mr-2.svelte-1tmjbvw{margin-right:0.5em !important}#previewSvg.svelte-1tmjbvw{width:600px;height:520px;margin-top:-550px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1.head, style);
}

function create_fragment(ctx) {
	let main;
	let div17;
	let div16;
	let div15;
	let div0;
	let h4;
	let t1;
	let button0;
	let t3;
	let div13;
	let table;
	let tbody;
	let tr0;
	let td0;
	let td1;
	let div1;
	let span0;
	let t6;
	let tr1;
	let td2;
	let td3;
	let div2;
	let span1;
	let t9;
	let tr2;
	let td4;
	let td5;
	let div3;
	let span2;
	let t12;
	let tr3;
	let td6;
	let td7;
	let div4;
	let span3;
	let t15;
	let tr4;
	let td8;
	let td9;
	let div5;
	let span4;
	let t18;
	let tr5;
	let td10;
	let td11;
	let div6;
	let span5;
	let t21;
	let tr6;
	let td12;
	let td13;
	let div7;
	let span6;
	let t24;
	let tr7;
	let td14;
	let td15;
	let div8;
	let span7;
	let t27;
	let tr8;
	let td16;
	let td17;
	let div9;
	let span8;
	let t30;
	let tr9;
	let td18;
	let td19;
	let div10;
	let span9;
	let t33;
	let tr10;
	let td20;
	let td21;
	let div11;
	let span10;
	let t36;
	let tr11;
	let td22;
	let td23;
	let div12;
	let span11;
	let t39;
	let div14;
	let button1;
	let t41;
	let div28;
	let button2;
	let t42;
	let button3;
	let t43;
	let center;
	let div24;
	let div23;
	let div18;
	let button4;
	let i0;
	let button4_aria_label_value;
	let button4_title_value;
	let t44;
	let button5;
	let t45;
	let button5_aria_label_value;
	let button5_title_value;
	let t46;
	let button6;
	let i1;
	let button6_aria_label_value;
	let button6_title_value;
	let div18_aria_label_value;
	let t47;
	let div19;
	let button7;
	let i2;
	let button7_aria_label_value;
	let button7_title_value;
	let t48;
	let button8;
	let i3;
	let button8_title_value;
	let button8_aria_label_value;
	let t49;
	let button9;
	let i4;
	let button9_title_value;
	let button9_aria_label_value;
	let t50;
	let button10;
	let i5;
	let button10_title_value;
	let button10_aria_label_value;
	let div19_aria_label_value;
	let t51;
	let div20;
	let button11;
	let t52_value = Lang.mark_pnt + "";
	let t52;
	let button11_title_value;
	let button11_aria_label_value;
	let div20_aria_label_value;
	let t53;
	let div21;
	let button12;
	let i6;
	let button12_title_value;
	let button12_aria_label_value;
	let div21_aria_label_value;
	let t54;
	let div22;
	let button13;
	let t55_value = Lang.shortcuts + "";
	let t55;
	let button13_title_value;
	let button13_aria_label_value;
	let div22_aria_label_value;
	let div23_aria_label_value;
	let t56;
	let div27;
	let div26;
	let img;
	let img_src_value;
	let t57;
	let div25;
	let span12;
	let t58;
	let svg6;
	let title0;
	let t59_value = /*state*/ ctx[2].alt + "";
	let t59;
	let g0;
	let g1;
	let g2;
	let g3;
	let g4;
	let svg5;
	let svg4;
	let g21;
	let circle0;
	let g5;
	let line;
	let g6;
	let circle1;
	let title1;
	let t60_value = Lang.compass_center + "";
	let t60;
	let desc0;
	let t61_value = Lang.shift_arrow_use + "";
	let t61;
	let defs0;
	let pattern0;
	let svg0;
	let path0;
	let path1;
	let path2;
	let path3;
	let circle2;
	let g13;
	let circle3;
	let title2;
	let t62_value = Lang.compass_radius + (/*previewCompassRadius*/ ctx[0] * 0.02649).toFixed(2) + "";
	let t62;
	let desc1;
	let t63_value = Lang.shift_arrow_radius + "";
	let t63;
	let defs1;
	let pattern1;
	let svg1;
	let g9;
	let g7;
	let rect0;
	let g8;
	let rect1;
	let g12;
	let g10;
	let path4;
	let g11;
	let path5;
	let g14;
	let circle4;
	let title3;
	let t64_value = Lang.compass_angle + /*previewCompassAngle*/ ctx[1] + Lang.degree + "";
	let t64;
	let desc2;
	let t65_value = Lang.shift_arrow_angle + "";
	let t65;
	let defs2;
	let pattern2;
	let svg2;
	let path6;
	let g15;
	let circle5;
	let circle5_fill_value;
	let circle6;
	let title4;
	let t66_value = Lang.compass_draw + "";
	let t66;
	let desc3;
	let t67_value = Lang.shift_arrow_draw + "";
	let t67;
	let g20;
	let circle7;
	let defs3;
	let pattern3;
	let svg3;
	let g19;
	let g18;
	let g17;
	let g16;
	let path7;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			main = element("main");
			div17 = element("div");
			div16 = element("div");
			div15 = element("div");
			div0 = element("div");
			h4 = element("h4");
			h4.textContent = `${Lang.shortcuts}`;
			t1 = space();
			button0 = element("button");
			button0.textContent = "×";
			t3 = space();
			div13 = element("div");
			table = element("table");
			tbody = element("tbody");
			tr0 = element("tr");
			td0 = element("td");
			td0.textContent = `${Lang.keys}`;
			td1 = element("td");
			div1 = element("div");
			span0 = element("span");
			span0.textContent = `${Lang.des_txt}`;
			t6 = space();
			tr1 = element("tr");
			td2 = element("td");
			td2.textContent = `${Lang.ctrl_z}`;
			td3 = element("td");
			div2 = element("div");
			span1 = element("span");
			span1.textContent = `${Lang.undo}`;
			t9 = space();
			tr2 = element("tr");
			td4 = element("td");
			td4.textContent = `${Lang.ctrl_x}`;
			td5 = element("td");
			div3 = element("div");
			span2 = element("span");
			span2.textContent = `${Lang.cut}`;
			t12 = space();
			tr3 = element("tr");
			td6 = element("td");
			td6.textContent = `${Lang.ctrl_y}`;
			td7 = element("td");
			div4 = element("div");
			span3 = element("span");
			span3.textContent = `${Lang.redo}`;
			t15 = space();
			tr4 = element("tr");
			td8 = element("td");
			td8.textContent = `${Lang.enter}`;
			td9 = element("td");
			div5 = element("div");
			span4 = element("span");
			span4.textContent = `${Lang.enable_tool}`;
			t18 = space();
			tr5 = element("tr");
			td10 = element("td");
			td10.textContent = `${Lang.shift_enter}`;
			td11 = element("td");
			div6 = element("div");
			span5 = element("span");
			span5.textContent = `${Lang.start_stop_tool}`;
			t21 = space();
			tr6 = element("tr");
			td12 = element("td");
			td12.textContent = `${Lang.shift_arrow}`;
			td13 = element("td");
			div7 = element("div");
			span6 = element("span");
			span6.textContent = `${Lang.compass_tools}`;
			t24 = space();
			tr7 = element("tr");
			td14 = element("td");
			td14.textContent = `${Lang.locking}`;
			td15 = element("td");
			div8 = element("div");
			span7 = element("span");
			span7.textContent = `${Lang.locking_txt}`;
			t27 = space();
			tr8 = element("tr");
			td16 = element("td");
			td16.textContent = `${Lang.draw_key}`;
			td17 = element("td");
			div9 = element("div");
			span8 = element("span");
			span8.textContent = `${Lang.draw_txt}`;
			t30 = space();
			tr9 = element("tr");
			td18 = element("td");
			td18.textContent = `${Lang.tab}`;
			td19 = element("td");
			div10 = element("div");
			span9 = element("span");
			span9.textContent = `${Lang.focus_next}`;
			t33 = space();
			tr10 = element("tr");
			td20 = element("td");
			td20.textContent = `${Lang.shift_tab}`;
			td21 = element("td");
			div11 = element("div");
			span10 = element("span");
			span10.textContent = `${Lang.focus_prev}`;
			t36 = space();
			tr11 = element("tr");
			td22 = element("td");
			td22.textContent = `${Lang.esc}`;
			td23 = element("td");
			div12 = element("div");
			span11 = element("span");
			span11.textContent = `${Lang.exit_txt}`;
			t39 = space();
			div14 = element("div");
			button1 = element("button");
			button1.textContent = `${Lang.close}`;
			t41 = space();
			div28 = element("div");
			button2 = element("button");
			t42 = space();
			button3 = element("button");
			t43 = space();
			center = element("center");
			div24 = element("div");
			div23 = element("div");
			div18 = element("div");
			button4 = element("button");
			i0 = element("i");
			t44 = space();
			button5 = element("button");
			t45 = text("/");
			t46 = space();
			button6 = element("button");
			i1 = element("i");
			t47 = space();
			div19 = element("div");
			button7 = element("button");
			i2 = element("i");
			t48 = space();
			button8 = element("button");
			i3 = element("i");
			t49 = space();
			button9 = element("button");
			i4 = element("i");
			t50 = space();
			button10 = element("button");
			i5 = element("i");
			t51 = space();
			div20 = element("div");
			button11 = element("button");
			t52 = text(t52_value);
			t53 = space();
			div21 = element("div");
			button12 = element("button");
			i6 = element("i");
			t54 = space();
			div22 = element("div");
			button13 = element("button");
			t55 = text(t55_value);
			t56 = space();
			div27 = element("div");
			div26 = element("div");
			img = element("img");
			t57 = space();
			div25 = element("div");
			span12 = element("span");
			t58 = space();
			svg6 = svg_element("svg");
			title0 = svg_element("title");
			t59 = text(t59_value);
			g0 = svg_element("g");
			g1 = svg_element("g");
			g2 = svg_element("g");
			g3 = svg_element("g");
			g4 = svg_element("g");
			svg5 = svg_element("svg");
			svg4 = svg_element("svg");
			g21 = svg_element("g");
			circle0 = svg_element("circle");
			g5 = svg_element("g");
			line = svg_element("line");
			g6 = svg_element("g");
			circle1 = svg_element("circle");
			title1 = svg_element("title");
			t60 = text(t60_value);
			desc0 = svg_element("desc");
			t61 = text(t61_value);
			defs0 = svg_element("defs");
			pattern0 = svg_element("pattern");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			path2 = svg_element("path");
			path3 = svg_element("path");
			circle2 = svg_element("circle");
			g13 = svg_element("g");
			circle3 = svg_element("circle");
			title2 = svg_element("title");
			t62 = text(t62_value);
			desc1 = svg_element("desc");
			t63 = text(t63_value);
			defs1 = svg_element("defs");
			pattern1 = svg_element("pattern");
			svg1 = svg_element("svg");
			g9 = svg_element("g");
			g7 = svg_element("g");
			rect0 = svg_element("rect");
			g8 = svg_element("g");
			rect1 = svg_element("rect");
			g12 = svg_element("g");
			g10 = svg_element("g");
			path4 = svg_element("path");
			g11 = svg_element("g");
			path5 = svg_element("path");
			g14 = svg_element("g");
			circle4 = svg_element("circle");
			title3 = svg_element("title");
			t64 = text(t64_value);
			desc2 = svg_element("desc");
			t65 = text(t65_value);
			defs2 = svg_element("defs");
			pattern2 = svg_element("pattern");
			svg2 = svg_element("svg");
			path6 = svg_element("path");
			g15 = svg_element("g");
			circle5 = svg_element("circle");
			circle6 = svg_element("circle");
			title4 = svg_element("title");
			t66 = text(t66_value);
			desc3 = svg_element("desc");
			t67 = text(t67_value);
			g20 = svg_element("g");
			circle7 = svg_element("circle");
			defs3 = svg_element("defs");
			pattern3 = svg_element("pattern");
			svg3 = svg_element("svg");
			g19 = svg_element("g");
			g18 = svg_element("g");
			g17 = svg_element("g");
			g16 = svg_element("g");
			path7 = svg_element("path");
			attr_dev(h4, "class", "modal-title");
			add_location(h4, file, 2246, 20, 133183);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "close");
			attr_dev(button0, "data-bs-dismiss", "modal");
			add_location(button0, file, 2247, 20, 133247);
			attr_dev(div0, "class", "modal-header");
			add_location(div0, file, 2245, 16, 133135);
			attr_dev(td0, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td0, file, 2254, 61, 133716);
			attr_dev(span0, "class", "pl-3 font-weight-bold");
			add_location(span0, file, 2254, 155, 133810);
			attr_dev(div1, "class", "d-flex");
			add_location(div1, file, 2254, 135, 133790);
			attr_dev(td1, "class", "py-1");
			add_location(td1, file, 2254, 118, 133773);
			attr_dev(tr0, "tabindex", "0");
			attr_dev(tr0, "role", "shortcut");
			add_location(tr0, file, 2254, 28, 133683);
			attr_dev(td2, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td2, file, 2255, 61, 133943);
			attr_dev(span1, "class", "pl-3");
			add_location(span1, file, 2255, 157, 134039);
			attr_dev(div2, "class", "d-flex");
			add_location(div2, file, 2255, 137, 134019);
			attr_dev(td3, "class", "py-1");
			add_location(td3, file, 2255, 120, 134002);
			attr_dev(tr1, "tabindex", "0");
			attr_dev(tr1, "role", "shortcut");
			add_location(tr1, file, 2255, 28, 133910);
			attr_dev(td4, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td4, file, 2256, 62, 134153);
			attr_dev(span2, "class", "pl-3");
			add_location(span2, file, 2256, 158, 134249);
			attr_dev(div3, "class", "d-flex");
			add_location(div3, file, 2256, 138, 134229);
			attr_dev(td5, "class", "py-1");
			add_location(td5, file, 2256, 121, 134212);
			attr_dev(tr2, "tabindex", "0");
			attr_dev(tr2, "role", "shortcut");
			add_location(tr2, file, 2256, 28, 134119);
			attr_dev(td6, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td6, file, 2257, 62, 134362);
			attr_dev(span3, "class", "pl-3");
			add_location(span3, file, 2257, 158, 134458);
			attr_dev(div4, "class", "d-flex");
			add_location(div4, file, 2257, 138, 134438);
			attr_dev(td7, "class", "py-1");
			add_location(td7, file, 2257, 121, 134421);
			attr_dev(tr3, "tabindex", "0");
			attr_dev(tr3, "role", "shortcut");
			add_location(tr3, file, 2257, 28, 134328);
			attr_dev(td8, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td8, file, 2258, 62, 134572);
			attr_dev(span4, "class", "pl-3");
			add_location(span4, file, 2258, 157, 134667);
			attr_dev(div5, "class", "d-flex");
			add_location(div5, file, 2258, 137, 134647);
			attr_dev(td9, "class", "py-1");
			add_location(td9, file, 2258, 120, 134630);
			attr_dev(tr4, "tabindex", "0");
			attr_dev(tr4, "role", "shortcut");
			add_location(tr4, file, 2258, 28, 134538);
			attr_dev(td10, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td10, file, 2259, 62, 134788);
			attr_dev(span5, "class", "pl-3");
			add_location(span5, file, 2259, 163, 134889);
			attr_dev(div6, "class", "d-flex");
			add_location(div6, file, 2259, 143, 134869);
			attr_dev(td11, "class", "py-1");
			add_location(td11, file, 2259, 126, 134852);
			attr_dev(tr5, "tabindex", "0");
			attr_dev(tr5, "role", "shortcut");
			add_location(tr5, file, 2259, 28, 134754);
			attr_dev(td12, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td12, file, 2260, 62, 135014);
			attr_dev(span6, "class", "pl-3");
			add_location(span6, file, 2260, 163, 135115);
			attr_dev(div7, "class", "d-flex");
			add_location(div7, file, 2260, 143, 135095);
			attr_dev(td13, "class", "py-1");
			add_location(td13, file, 2260, 126, 135078);
			attr_dev(tr6, "tabindex", "0");
			attr_dev(tr6, "role", "shortcut");
			add_location(tr6, file, 2260, 28, 134980);
			attr_dev(td14, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td14, file, 2261, 62, 135238);
			attr_dev(span7, "class", "pl-3");
			add_location(span7, file, 2261, 159, 135335);
			attr_dev(div8, "class", "d-flex");
			add_location(div8, file, 2261, 139, 135315);
			attr_dev(td15, "class", "py-1");
			add_location(td15, file, 2261, 122, 135298);
			attr_dev(tr7, "tabindex", "0");
			attr_dev(tr7, "role", "shortcut");
			add_location(tr7, file, 2261, 28, 135204);
			attr_dev(td16, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td16, file, 2262, 62, 135456);
			attr_dev(span8, "class", "pl-3");
			add_location(span8, file, 2262, 160, 135554);
			attr_dev(div9, "class", "d-flex");
			add_location(div9, file, 2262, 140, 135534);
			attr_dev(td17, "class", "py-1");
			add_location(td17, file, 2262, 123, 135517);
			attr_dev(tr8, "tabindex", "0");
			attr_dev(tr8, "role", "shortcut");
			add_location(tr8, file, 2262, 28, 135422);
			attr_dev(td18, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td18, file, 2263, 62, 135672);
			attr_dev(span9, "class", "pl-3");
			add_location(span9, file, 2263, 155, 135765);
			attr_dev(div10, "class", "d-flex");
			add_location(div10, file, 2263, 135, 135745);
			attr_dev(td19, "class", "py-1");
			add_location(td19, file, 2263, 118, 135728);
			attr_dev(tr9, "tabindex", "0");
			attr_dev(tr9, "role", "shortcut");
			add_location(tr9, file, 2263, 28, 135638);
			attr_dev(td20, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td20, file, 2264, 62, 135885);
			attr_dev(span10, "class", "pl-3");
			add_location(span10, file, 2264, 161, 135984);
			attr_dev(div11, "class", "d-flex");
			add_location(div11, file, 2264, 141, 135964);
			attr_dev(td21, "class", "py-1");
			add_location(td21, file, 2264, 124, 135947);
			attr_dev(tr10, "tabindex", "0");
			attr_dev(tr10, "role", "shortcut");
			add_location(tr10, file, 2264, 28, 135851);
			attr_dev(td22, "class", "py-1 font-weight-bold w-50 pr-0");
			add_location(td22, file, 2265, 62, 136104);
			attr_dev(span11, "class", "pl-3");
			add_location(span11, file, 2265, 155, 136197);
			attr_dev(div12, "class", "d-flex");
			add_location(div12, file, 2265, 135, 136177);
			attr_dev(td23, "class", "py-1");
			add_location(td23, file, 2265, 118, 136160);
			attr_dev(tr11, "tabindex", "0");
			attr_dev(tr11, "role", "shortcut");
			add_location(tr11, file, 2265, 28, 136070);
			attr_dev(tbody, "tabindex", "0");
			attr_dev(tbody, "role", "shortcut");
			add_location(tbody, file, 2253, 24, 133617);
			attr_dev(table, "role", "shortcut");
			attr_dev(table, "class", "shortcutTable m-0 p-2 border-0 common-shortcut-table table-striped font15");
			add_location(table, file, 2252, 20, 133486);
			attr_dev(div13, "class", "modal-body overflow-y");
			add_location(div13, file, 2249, 16, 133365);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-light");
			attr_dev(button1, "data-bs-dismiss", "modal");
			add_location(button1, file, 2270, 20, 136405);
			attr_dev(div14, "class", "modal-footer");
			add_location(div14, file, 2269, 16, 136357);
			attr_dev(div15, "class", "modal-content");
			add_location(div15, file, 2244, 12, 133090);
			attr_dev(div16, "class", "modal-dialog modal-dialog-centered");
			add_location(div16, file, 2243, 8, 133028);
			attr_dev(div17, "id", "drawing_shortcut_modal");
			attr_dev(div17, "class", "modal fade");
			attr_dev(div17, "tabindex", "-1");
			add_location(div17, file, 2242, 4, 132952);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "class", "h h-imp");
			attr_dev(button2, "id", "set-review");
			add_location(button2, file, 2276, 8, 136617);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "class", "h h-imp");
			attr_dev(button3, "id", "unset-review");
			add_location(button3, file, 2277, 8, 136690);
			attr_dev(i0, "class", "icomoon-pencil");
			add_location(i0, file, 2282, 257, 137330);
			attr_dev(button4, "type", "button");
			attr_dev(button4, "data-title", "scribble");
			attr_dev(button4, "tabindex", "0");
			attr_dev(button4, "aria-label", button4_aria_label_value = Lang.scribble_tool);
			attr_dev(button4, "title", button4_title_value = Lang.scribble);
			attr_dev(button4, "name", "preview_scribble");
			attr_dev(button4, "id", "preview_scribble");
			attr_dev(button4, "class", "geometryToolPreview tooltip_btn btn btn-light preview_toolbar preview_btn");
			add_location(button4, file, 2282, 24, 137097);
			attr_dev(button5, "type", "button");
			attr_dev(button5, "data-title", "line");
			attr_dev(button5, "tabindex", "0");
			attr_dev(button5, "aria-label", button5_aria_label_value = Lang.line_tool);
			attr_dev(button5, "title", button5_title_value = Lang.line);
			attr_dev(button5, "name", "preview_line");
			attr_dev(button5, "id", "preview_line");
			attr_dev(button5, "class", "geometryToolPreview btn btn-light tooltip_btn preview_toolbar preview_btn");
			add_location(button5, file, 2283, 24, 137395);
			attr_dev(i1, "class", "icomoon-compass1");
			add_location(i1, file, 2284, 252, 137872);
			attr_dev(button6, "type", "button");
			attr_dev(button6, "data-title", "compass");
			attr_dev(button6, "tabindex", "0");
			attr_dev(button6, "aria-label", button6_aria_label_value = Lang.compass_tool);
			attr_dev(button6, "title", button6_title_value = Lang.compass);
			attr_dev(button6, "name", "preview_compass");
			attr_dev(button6, "id", "preview_compass");
			attr_dev(button6, "class", "geometryToolPreview tooltip_btn btn btn-light preview_toolbar preview_btn");
			add_location(button6, file, 2284, 24, 137644);
			attr_dev(div18, "class", "btn-group mr-2 svelte-1tmjbvw");
			attr_dev(div18, "role", "group");
			attr_dev(div18, "tabindex", "0");
			attr_dev(div18, "aria-label", div18_aria_label_value = Lang.draw_tools);
			add_location(div18, file, 2281, 20, 136991);
			attr_dev(i2, "class", "icomoon-delete-sm");
			add_location(i2, file, 2287, 224, 138273);
			attr_dev(button7, "type", "button");
			attr_dev(button7, "data-title", "eraser");
			attr_dev(button7, "tabindex", "0");
			attr_dev(button7, "aria-label", button7_aria_label_value = Lang.delete_tool);
			attr_dev(button7, "title", button7_title_value = Lang.delete_tool);
			attr_dev(button7, "name", "eraser");
			attr_dev(button7, "id", "preview_eraser");
			attr_dev(button7, "class", "btn btn-light tooltip_btn preview_toolbar preview_btn");
			add_location(button7, file, 2287, 24, 138073);
			attr_dev(i3, "class", "icomoon-close-2");
			add_location(i3, file, 2288, 209, 138526);
			attr_dev(button8, "type", "button");
			attr_dev(button8, "title", button8_title_value = Lang.clear_screen);
			attr_dev(button8, "tabindex", "0");
			attr_dev(button8, "aria-label", button8_aria_label_value = Lang.clear_screen);
			attr_dev(button8, "name", "clearScreen");
			attr_dev(button8, "id", "preview_clearScreen");
			button8.disabled = "disabled";
			attr_dev(button8, "class", "btn btn-light tooltip_btn");
			add_location(button8, file, 2288, 24, 138341);
			attr_dev(i4, "class", "icomoon-redo-2");
			add_location(i4, file, 2289, 178, 138746);
			attr_dev(button9, "type", "button");
			attr_dev(button9, "title", button9_title_value = Lang.redo);
			attr_dev(button9, "name", "redo");
			attr_dev(button9, "tabindex", "0");
			attr_dev(button9, "aria-label", button9_aria_label_value = Lang.redo);
			attr_dev(button9, "id", "preview_redo");
			button9.disabled = "disabled";
			attr_dev(button9, "class", "btn btn-light tooltip_btn");
			add_location(button9, file, 2289, 24, 138592);
			attr_dev(i5, "class", "icomoon-undo-2");
			add_location(i5, file, 2290, 178, 138965);
			attr_dev(button10, "type", "button");
			attr_dev(button10, "title", button10_title_value = Lang.undo);
			attr_dev(button10, "name", "undo");
			attr_dev(button10, "tabindex", "0");
			attr_dev(button10, "aria-label", button10_aria_label_value = Lang.undo);
			attr_dev(button10, "id", "preview_undo");
			button10.disabled = "disabled";
			attr_dev(button10, "class", "btn btn-light tooltip_btn");
			add_location(button10, file, 2290, 24, 138811);
			attr_dev(div19, "class", "btn-group mr-2 svelte-1tmjbvw");
			attr_dev(div19, "role", "group");
			attr_dev(div19, "tabindex", "0");
			attr_dev(div19, "aria-label", div19_aria_label_value = Lang.removing_tools);
			add_location(div19, file, 2286, 20, 137963);
			attr_dev(button11, "type", "button");
			attr_dev(button11, "title", button11_title_value = Lang.mark_finish_point);
			attr_dev(button11, "name", "mark_points");
			attr_dev(button11, "tabindex", "0");
			attr_dev(button11, "aria-label", button11_aria_label_value = Lang.mark_ans_point);
			attr_dev(button11, "id", "mark_points");
			attr_dev(button11, "class", "btn tooltip_btn btn-light");
			add_location(button11, file, 2293, 24, 139164);
			attr_dev(div20, "class", "btn-group mr-2 marking_group svelte-1tmjbvw");
			attr_dev(div20, "role", "group");
			attr_dev(div20, "aria-label", div20_aria_label_value = Lang.marking_tools);
			add_location(div20, file, 2292, 20, 139054);
			attr_dev(i6, "class", "icomoon-new-24px-reset-1");
			add_location(i6, file, 2296, 182, 139656);
			attr_dev(button12, "type", "button");
			attr_dev(button12, "title", button12_title_value = Lang.reset);
			attr_dev(button12, "name", "preview_reset_btn");
			attr_dev(button12, "tabindex", "0");
			attr_dev(button12, "aria-label", button12_aria_label_value = Lang.reset_btn);
			attr_dev(button12, "id", "preview_reset_btn");
			attr_dev(button12, "class", "btn tooltip_btn btn-light");
			add_location(button12, file, 2296, 24, 139498);
			attr_dev(div21, "class", "btn-group mr-2 reset_group svelte-1tmjbvw");
			attr_dev(div21, "role", "group");
			attr_dev(div21, "aria-label", div21_aria_label_value = Lang.reset);
			add_location(div21, file, 2295, 20, 139398);
			attr_dev(button13, "type", "button");
			attr_dev(button13, "title", button13_title_value = Lang.shortcuts);
			attr_dev(button13, "name", "shortcut_modal_btn");
			attr_dev(button13, "aria-label", button13_aria_label_value = Lang.shortcuts);
			attr_dev(button13, "tabindex", "0");
			attr_dev(button13, "id", "shortcut_modal_btn");
			attr_dev(button13, "class", "tooltip_btn btn btn-primary");
			add_location(button13, file, 2299, 24, 139847);
			attr_dev(div22, "class", "btn-group mr-2 svelte-1tmjbvw");
			attr_dev(div22, "role", "group");
			attr_dev(div22, "aria-label", div22_aria_label_value = Lang.shortcuts);
			add_location(div22, file, 2298, 20, 139755);
			attr_dev(div23, "class", "btn-toolbar preview_drawing_toolbar");
			attr_dev(div23, "role", "toolbar");
			attr_dev(div23, "aria-label", div23_aria_label_value = Lang.drawing_tools);
			add_location(div23, file, 2280, 16, 136876);
			attr_dev(div24, "class", "mt-2 mb-3 previewBtnGrp");
			add_location(div24, file, 2279, 12, 136821);
			attr_dev(img, "class", "border");
			attr_dev(img, "alt", "");
			if (img.src !== (img_src_value = /*bgImgPath*/ ctx[3] + /*state*/ ctx[2].bgImg)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "id", "svgImgPreview");
			add_location(img, file, 2305, 20, 140267);
			attr_dev(span12, "class", "icomoon-plus s2 move_icon position-absolute h");
			attr_dev(span12, "id", "moveDrawIcon");
			add_location(span12, file, 2307, 24, 140398);
			add_location(div25, file, 2306, 20, 140367);
			attr_dev(title0, "id", "previewSvgTitle");
			add_location(title0, file, 2310, 24, 140676);
			attr_dev(g0, "class", "backgroundFocusPathPreview");
			add_location(g0, file, 2311, 24, 140749);
			attr_dev(g1, "class", "previewDrawingPaths");
			add_location(g1, file, 2312, 24, 140817);
			attr_dev(g2, "class", "correct_answer_container");
			add_location(g2, file, 2313, 24, 140878);
			attr_dev(g3, "class", "backgroundFocusPointPreview");
			add_location(g3, file, 2314, 24, 140944);
			attr_dev(g4, "class", "previewMarkingPaths");
			add_location(g4, file, 2315, 24, 141013);
			attr_dev(circle0, "class", "drawingCompassRoute compass_route");
			attr_dev(circle0, "cx", "267.984375");
			attr_dev(circle0, "cy", "173");
			attr_dev(circle0, "r", "80");
			attr_dev(circle0, "fill-opacity", "0");
			attr_dev(circle0, "stroke", "#C9C9C9");
			attr_dev(circle0, "stroke-dasharray", "2,10");
			attr_dev(circle0, "stroke-width", "2");
			add_location(circle0, file, 2319, 36, 141235);
			attr_dev(line, "class", "compassRotationBar compass_radius");
			attr_dev(line, "x1", "267.984375");
			attr_dev(line, "y1", "173");
			attr_dev(line, "x2", "267.984375");
			attr_dev(line, "y2", "253");
			attr_dev(line, "stroke", "#C9C9C9");
			attr_dev(line, "stroke-width", "2");
			add_location(line, file, 2321, 40, 141484);
			add_location(g5, file, 2320, 36, 141439);
			attr_dev(circle1, "tabindex", "0");
			attr_dev(circle1, "class", "drawingCompassCenter compass_center");
			attr_dev(circle1, "cx", "267.984375");
			attr_dev(circle1, "cy", "173");
			attr_dev(circle1, "r", "17");
			attr_dev(circle1, "aria-labelledby", "compassCenterTitle compassCenterDesc");
			attr_dev(circle1, "focusable", "true");
			attr_dev(circle1, "fill", "url(#previewDrawingCenter)");
			attr_dev(circle1, "stroke", "#C9C9C9");
			add_location(circle1, file, 2324, 40, 141749);
			attr_dev(title1, "id", "compassCenterTitle");
			add_location(title1, file, 2325, 40, 142020);
			attr_dev(desc0, "id", "compassCenterDesc");
			add_location(desc0, file, 2326, 40, 142119);
			attr_dev(path0, "fill", "#808080");
			attr_dev(path0, "class", "st0");
			attr_dev(path0, "d", "M3.22,15.1L1,12l2.22-3.1C3.22,10.97,3.22,13.03,3.22,15.1z");
			add_location(path0, file, 2330, 52, 142506);
			attr_dev(path1, "fill", "#808080");
			attr_dev(path1, "class", "st0");
			attr_dev(path1, "d", "M8.9,3.22L12,1l3.1,2.22C13.03,3.22,10.97,3.22,8.9,3.22z");
			add_location(path1, file, 2331, 52, 142657);
			attr_dev(path2, "fill", "#808080");
			attr_dev(path2, "class", "st0");
			attr_dev(path2, "d", "M15.1,20.78L12,23l-3.1-2.22C10.97,20.78,13.03,20.78,15.1,20.78z");
			add_location(path2, file, 2332, 52, 142806);
			attr_dev(path3, "fill", "#808080");
			attr_dev(path3, "class", "st0");
			attr_dev(path3, "d", "M20.78,8.9L23,12l-2.22,3.1C20.78,13.03,20.78,10.97,20.78,8.9z");
			add_location(path3, file, 2333, 52, 142963);
			attr_dev(circle2, "cx", "12");
			attr_dev(circle2, "cy", "12");
			attr_dev(circle2, "r", "2");
			attr_dev(circle2, "fill", "#333333");
			add_location(circle2, file, 2334, 52, 143118);
			attr_dev(svg0, "x", "0px");
			attr_dev(svg0, "y", "0px");
			attr_dev(svg0, "viewBox", "1 -3 21 35");
			attr_dev(svg0, "width", "33");
			attr_dev(svg0, "height", "41");
			add_location(svg0, file, 2329, 48, 142387);
			attr_dev(pattern0, "id", "previewDrawingCenter");
			attr_dev(pattern0, "width", "20");
			attr_dev(pattern0, "height", "20");
			attr_dev(pattern0, "fill", "red");
			add_location(pattern0, file, 2328, 44, 142268);
			add_location(defs0, file, 2327, 40, 142216);
			add_location(g6, file, 2323, 36, 141703);
			attr_dev(circle3, "class", "compass_radius_icon mid_circle");
			attr_dev(circle3, "cx", "267.984375");
			attr_dev(circle3, "cy", "213");
			attr_dev(circle3, "r", "17");
			attr_dev(circle3, "fill", "url(#previewDrawingRadius)");
			attr_dev(circle3, "transform", "rotate(90,160,168)");
			attr_dev(circle3, "aria-labelledby", "compassRadiusTitle compassRadiusDesc");
			attr_dev(circle3, "tabindex", "0");
			attr_dev(circle3, "focusable", "true");
			attr_dev(circle3, "stroke", "#C9C9C9");
			add_location(circle3, file, 2340, 40, 143451);
			attr_dev(title2, "id", "compassRadiusTitle");
			add_location(title2, file, 2341, 40, 143748);
			attr_dev(desc1, "id", "compassRadiusDesc");
			add_location(desc1, file, 2342, 40, 143893);
			attr_dev(rect0, "x", "8.53");
			attr_dev(rect0, "y", "1.11");
			attr_dev(rect0, "width", "1.5");
			attr_dev(rect0, "height", "21.79");
			add_location(rect0, file, 2348, 60, 144398);
			add_location(g7, file, 2347, 56, 144333);
			attr_dev(rect1, "x", "13.97");
			attr_dev(rect1, "y", "1.11");
			attr_dev(rect1, "width", "1.5");
			attr_dev(rect1, "height", "21.79");
			add_location(rect1, file, 2351, 60, 144636);
			add_location(g8, file, 2350, 56, 144571);
			add_location(g9, file, 2346, 52, 144272);
			attr_dev(path4, "d", "M5.87,16.87L1,12l4.87-4.87C5.87,10.38,5.87,13.62,5.87,16.87z");
			add_location(path4, file, 2356, 60, 144990);
			add_location(g10, file, 2355, 56, 144925);
			attr_dev(path5, "d", "M18.13,16.87L23,12l-4.87-4.87C18.13,10.38,18.13,13.62,18.13,16.87z");
			add_location(path5, file, 2359, 60, 145248);
			add_location(g11, file, 2358, 56, 145183);
			add_location(g12, file, 2354, 52, 144864);
			attr_dev(svg1, "x", "0px");
			attr_dev(svg1, "y", "0px");
			attr_dev(svg1, "viewBox", "1 -5 21 34");
			attr_dev(svg1, "width", "33");
			attr_dev(svg1, "height", "33");
			add_location(svg1, file, 2345, 48, 144153);
			attr_dev(pattern1, "id", "previewDrawingRadius");
			attr_dev(pattern1, "width", "20");
			attr_dev(pattern1, "height", "20");
			add_location(pattern1, file, 2344, 44, 144045);
			add_location(defs1, file, 2343, 40, 143993);
			add_location(g13, file, 2339, 36, 143406);
			attr_dev(circle4, "class", "compass_rotation midSmallCircle");
			attr_dev(circle4, "cx", "267.984375");
			attr_dev(circle4, "cy", "233");
			attr_dev(circle4, "r", "8");
			attr_dev(circle4, "fill", "url(#previewMidSmallCircle_icon)");
			attr_dev(circle4, "area-label", "Compass Angle Use Shift and arrow keys to increase or decrease the radius");
			attr_dev(circle4, "aria-labelledby", "compassRotationTitle compassRotationDesc");
			attr_dev(circle4, "tabindex", "0");
			attr_dev(circle4, "focusable", "true");
			attr_dev(circle4, "transform", "rotate(90,160,193)");
			add_location(circle4, file, 2367, 40, 145733);
			attr_dev(title3, "id", "compassRotationTitle");
			add_location(title3, file, 2368, 40, 146110);
			attr_dev(desc2, "id", "compassRotationDesc");
			add_location(desc2, file, 2369, 40, 146243);
			attr_dev(path6, "fill", "#000");
			attr_dev(path6, "opacity", "0.8");
			attr_dev(path6, "d", "M7,14 C3.13400675,14 0,10.8659932 0,7 C0,3.13400675 3.13400675,0 7, 0 C10.8659932,0 14,3.13400675 14,7 C14,10.8659932 10.8659932,14 7, 14 Z M4.66666667,8.16666667 L7,11.6666667 L9.33333333,8.16666667 L4.66666667,8.16666667 Z M4.66666667,5.83333333 L9.33333333,5.83333333 L7,2.33333333 L4.66666667,5.83333333 Z");
			add_location(path6, file, 2373, 52, 146630);
			attr_dev(svg2, "width", "16px");
			attr_dev(svg2, "height", "16px");
			attr_dev(svg2, "viewBox", "0 0 14 14");
			attr_dev(svg2, "version", "1.1");
			add_location(svg2, file, 2372, 48, 146510);
			attr_dev(pattern2, "id", "previewMidSmallCircle_icon");
			attr_dev(pattern2, "width", "20");
			attr_dev(pattern2, "height", "20");
			add_location(pattern2, file, 2371, 44, 146396);
			add_location(defs2, file, 2370, 40, 146344);
			add_location(g14, file, 2366, 36, 145688);
			attr_dev(circle5, "class", "drawing-compass-pointer lastCircle");
			attr_dev(circle5, "cx", "267.984375");
			attr_dev(circle5, "cy", "253");
			attr_dev(circle5, "r", "3");
			attr_dev(circle5, "fill", circle5_fill_value = /*state*/ ctx[2].lineColor);
			add_location(circle5, file, 2379, 40, 147269);
			attr_dev(circle6, "class", "drawing-compass-pointer-border lastCircle lastbigcircle");
			attr_dev(circle6, "aria-labelledby", "compassAngleTitle compassAngleDesc");
			attr_dev(circle6, "cx", "267.984375");
			attr_dev(circle6, "cy", "253");
			attr_dev(circle6, "r", "17");
			attr_dev(circle6, "tabindex", "0");
			attr_dev(circle6, "focusable", "true");
			attr_dev(circle6, "fill-opacity", "0");
			attr_dev(circle6, "stroke", "#C9C9C9");
			add_location(circle6, file, 2380, 40, 147425);
			attr_dev(title4, "id", "compassAngleTitle");
			add_location(title4, file, 2381, 40, 147697);
			attr_dev(desc3, "id", "compassAngleDesc");
			add_location(desc3, file, 2382, 40, 147793);
			add_location(g15, file, 2378, 36, 147224);
			attr_dev(circle7, "class", "lastCircleMid");
			attr_dev(circle7, "fill", "url(#previewLastCircleMid_icon)");
			attr_dev(circle7, "transform", "rotate(90,160,243)");
			attr_dev(circle7, "cx", "267.984375");
			attr_dev(circle7, "cy", "293");
			attr_dev(circle7, "r", "12");
			attr_dev(circle7, "opacity", "0");
			add_location(circle7, file, 2385, 40, 147973);
			attr_dev(path7, "d", "M3.76491276,22.4309727 C5.88207272,19.902578 7.10843487, 16.447736 7.10843487,12.7446281 C7.10843487,9.90533039 6.38974128, 7.20188959 5.07542401,4.93464319 L1.71316547,5.67221801 L4.9100909, 0.48305188 L10.1719173,3.81663137 L7.11351005,4.48755064 C8.4088902, 6.93966677 9.10843487,9.78181395 9.10843487,12.7446281 C9.10843487, 16.6677555 7.87827881,20.3638018 5.71250857,23.1972812 L8.63385425, 24.3467251 L2.93165771,26.8255625 L0.595287046,21.1838396 L3.76491276, 22.4309727 Z");
			attr_dev(path7, "class", "");
			add_location(path7, file, 2393, 68, 149086);
			attr_dev(g16, "transform", "translate(313.742737, 140.576561) rotate(-2.000000) translate(-313.742737, -140.576561) translate(308.242737, 127.076561)");
			add_location(g16, file, 2392, 64, 148879);
			attr_dev(g17, "transform", "translate(207.000000, 318.000000)");
			add_location(g17, file, 2391, 60, 148764);
			attr_dev(g18, "transform", "translate(-516.000000, -445.000000)");
			attr_dev(g18, "fill", "#333333");
			attr_dev(g18, "fillrule", "nonzero");
			add_location(g18, file, 2390, 56, 148617);
			attr_dev(g19, "stroke", "none");
			attr_dev(g19, "strokewidth", "1");
			attr_dev(g19, "fill", "none");
			attr_dev(g19, "fillrule", "evenodd");
			attr_dev(g19, "opacity", "0.5");
			add_location(g19, file, 2389, 52, 148481);
			attr_dev(svg3, "width", "24");
			attr_dev(svg3, "height", "23");
			attr_dev(svg3, "viewBox", "0 0 11 27");
			attr_dev(svg3, "version", "1.1");
			attr_dev(svg3, "enablebackground", "new 0 0 8 24");
			add_location(svg3, file, 2388, 48, 148333);
			attr_dev(pattern3, "id", "previewLastCircleMid_icon");
			attr_dev(pattern3, "width", "20");
			attr_dev(pattern3, "height", "20");
			add_location(pattern3, file, 2387, 44, 148220);
			add_location(defs3, file, 2386, 40, 148168);
			add_location(g20, file, 2384, 36, 147928);
			add_location(g21, file, 2318, 32, 141194);
			add_location(svg4, file, 2317, 28, 141155);
			attr_dev(svg5, "class", "drawingCompassSvg h");
			attr_dev(svg5, "focusable", "false");
			add_location(svg5, file, 2316, 24, 141074);
			attr_dev(svg6, "width", "100%");
			attr_dev(svg6, "height", "100%");
			attr_dev(svg6, "id", "previewSvg");
			attr_dev(svg6, "class", "previewKeySvg svelte-1tmjbvw");
			attr_dev(svg6, "tabindex", "0");
			attr_dev(svg6, "aria-labelledby", "previewSvgTitle");
			add_location(svg6, file, 2309, 20, 140533);
			attr_dev(div26, "id", "centerImg");
			attr_dev(div26, "class", "centerImg centerImgPreview my-auto relative ml-0");
			add_location(div26, file, 2304, 16, 140168);
			add_location(div27, file, 2303, 12, 140145);
			attr_dev(center, "class", "preview_drawing_container");
			add_location(center, file, 2278, 8, 136765);
			attr_dev(div28, "class", "drawing_module_container");
			add_location(div28, file, 2275, 4, 136569);
			attr_dev(main, "id", "drawingPreviewMain");
			add_location(main, file, 2241, 0, 132916);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div17);
			append_dev(div17, div16);
			append_dev(div16, div15);
			append_dev(div15, div0);
			append_dev(div0, h4);
			append_dev(div0, t1);
			append_dev(div0, button0);
			append_dev(div15, t3);
			append_dev(div15, div13);
			append_dev(div13, table);
			append_dev(table, tbody);
			append_dev(tbody, tr0);
			append_dev(tr0, td0);
			append_dev(tr0, td1);
			append_dev(td1, div1);
			append_dev(div1, span0);
			append_dev(tbody, t6);
			append_dev(tbody, tr1);
			append_dev(tr1, td2);
			append_dev(tr1, td3);
			append_dev(td3, div2);
			append_dev(div2, span1);
			append_dev(tbody, t9);
			append_dev(tbody, tr2);
			append_dev(tr2, td4);
			append_dev(tr2, td5);
			append_dev(td5, div3);
			append_dev(div3, span2);
			append_dev(tbody, t12);
			append_dev(tbody, tr3);
			append_dev(tr3, td6);
			append_dev(tr3, td7);
			append_dev(td7, div4);
			append_dev(div4, span3);
			append_dev(tbody, t15);
			append_dev(tbody, tr4);
			append_dev(tr4, td8);
			append_dev(tr4, td9);
			append_dev(td9, div5);
			append_dev(div5, span4);
			append_dev(tbody, t18);
			append_dev(tbody, tr5);
			append_dev(tr5, td10);
			append_dev(tr5, td11);
			append_dev(td11, div6);
			append_dev(div6, span5);
			append_dev(tbody, t21);
			append_dev(tbody, tr6);
			append_dev(tr6, td12);
			append_dev(tr6, td13);
			append_dev(td13, div7);
			append_dev(div7, span6);
			append_dev(tbody, t24);
			append_dev(tbody, tr7);
			append_dev(tr7, td14);
			append_dev(tr7, td15);
			append_dev(td15, div8);
			append_dev(div8, span7);
			append_dev(tbody, t27);
			append_dev(tbody, tr8);
			append_dev(tr8, td16);
			append_dev(tr8, td17);
			append_dev(td17, div9);
			append_dev(div9, span8);
			append_dev(tbody, t30);
			append_dev(tbody, tr9);
			append_dev(tr9, td18);
			append_dev(tr9, td19);
			append_dev(td19, div10);
			append_dev(div10, span9);
			append_dev(tbody, t33);
			append_dev(tbody, tr10);
			append_dev(tr10, td20);
			append_dev(tr10, td21);
			append_dev(td21, div11);
			append_dev(div11, span10);
			append_dev(tbody, t36);
			append_dev(tbody, tr11);
			append_dev(tr11, td22);
			append_dev(tr11, td23);
			append_dev(td23, div12);
			append_dev(div12, span11);
			append_dev(div15, t39);
			append_dev(div15, div14);
			append_dev(div14, button1);
			append_dev(main, t41);
			append_dev(main, div28);
			append_dev(div28, button2);
			append_dev(div28, t42);
			append_dev(div28, button3);
			append_dev(div28, t43);
			append_dev(div28, center);
			append_dev(center, div24);
			append_dev(div24, div23);
			append_dev(div23, div18);
			append_dev(div18, button4);
			append_dev(button4, i0);
			append_dev(div18, t44);
			append_dev(div18, button5);
			append_dev(button5, t45);
			append_dev(div18, t46);
			append_dev(div18, button6);
			append_dev(button6, i1);
			append_dev(div23, t47);
			append_dev(div23, div19);
			append_dev(div19, button7);
			append_dev(button7, i2);
			append_dev(div19, t48);
			append_dev(div19, button8);
			append_dev(button8, i3);
			append_dev(div19, t49);
			append_dev(div19, button9);
			append_dev(button9, i4);
			append_dev(div19, t50);
			append_dev(div19, button10);
			append_dev(button10, i5);
			append_dev(div23, t51);
			append_dev(div23, div20);
			append_dev(div20, button11);
			append_dev(button11, t52);
			append_dev(div23, t53);
			append_dev(div23, div21);
			append_dev(div21, button12);
			append_dev(button12, i6);
			append_dev(div23, t54);
			append_dev(div23, div22);
			append_dev(div22, button13);
			append_dev(button13, t55);
			append_dev(center, t56);
			append_dev(center, div27);
			append_dev(div27, div26);
			append_dev(div26, img);
			append_dev(div26, t57);
			append_dev(div26, div25);
			append_dev(div25, span12);
			append_dev(div26, t58);
			append_dev(div26, svg6);
			append_dev(svg6, title0);
			append_dev(title0, t59);
			append_dev(svg6, g0);
			append_dev(svg6, g1);
			append_dev(svg6, g2);
			append_dev(svg6, g3);
			append_dev(svg6, g4);
			append_dev(svg6, svg5);
			append_dev(svg5, svg4);
			append_dev(svg4, g21);
			append_dev(g21, circle0);
			append_dev(g21, g5);
			append_dev(g5, line);
			append_dev(g21, g6);
			append_dev(g6, circle1);
			append_dev(g6, title1);
			append_dev(title1, t60);
			append_dev(g6, desc0);
			append_dev(desc0, t61);
			append_dev(g6, defs0);
			append_dev(defs0, pattern0);
			append_dev(pattern0, svg0);
			append_dev(svg0, path0);
			append_dev(svg0, path1);
			append_dev(svg0, path2);
			append_dev(svg0, path3);
			append_dev(svg0, circle2);
			append_dev(g21, g13);
			append_dev(g13, circle3);
			append_dev(g13, title2);
			append_dev(title2, t62);
			append_dev(g13, desc1);
			append_dev(desc1, t63);
			append_dev(g13, defs1);
			append_dev(defs1, pattern1);
			append_dev(pattern1, svg1);
			append_dev(svg1, g9);
			append_dev(g9, g7);
			append_dev(g7, rect0);
			append_dev(g9, g8);
			append_dev(g8, rect1);
			append_dev(svg1, g12);
			append_dev(g12, g10);
			append_dev(g10, path4);
			append_dev(g12, g11);
			append_dev(g11, path5);
			append_dev(g21, g14);
			append_dev(g14, circle4);
			append_dev(g14, title3);
			append_dev(title3, t64);
			append_dev(g14, desc2);
			append_dev(desc2, t65);
			append_dev(g14, defs2);
			append_dev(defs2, pattern2);
			append_dev(pattern2, svg2);
			append_dev(svg2, path6);
			append_dev(g21, g15);
			append_dev(g15, circle5);
			append_dev(g15, circle6);
			append_dev(g15, title4);
			append_dev(title4, t66);
			append_dev(g15, desc3);
			append_dev(desc3, t67);
			append_dev(g21, g20);
			append_dev(g20, circle7);
			append_dev(g20, defs3);
			append_dev(defs3, pattern3);
			append_dev(pattern3, svg3);
			append_dev(svg3, g19);
			append_dev(g19, g18);
			append_dev(g18, g17);
			append_dev(g17, g16);
			append_dev(g16, path7);

			if (!mounted) {
				dispose = listen_dev(button13, "click", /*openShortcut*/ ctx[4], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4 && img.src !== (img_src_value = /*bgImgPath*/ ctx[3] + /*state*/ ctx[2].bgImg)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*state*/ 4 && t59_value !== (t59_value = /*state*/ ctx[2].alt + "")) set_data_dev(t59, t59_value);
			if (dirty[0] & /*previewCompassRadius*/ 1 && t62_value !== (t62_value = Lang.compass_radius + (/*previewCompassRadius*/ ctx[0] * 0.02649).toFixed(2) + "")) set_data_dev(t62, t62_value);
			if (dirty[0] & /*previewCompassAngle*/ 2 && t64_value !== (t64_value = Lang.compass_angle + /*previewCompassAngle*/ ctx[1] + Lang.degree + "")) set_data_dev(t64, t64_value);

			if (dirty[0] & /*state*/ 4 && circle5_fill_value !== (circle5_fill_value = /*state*/ ctx[2].lineColor)) {
				attr_dev(circle5, "fill", circle5_fill_value);
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function arrayCopy(array) {
	// creates a temporary array
	let tempArray = [];

	for (let index = 0; index < array.length; index++) {
		// pushes default initialized object into array tempArray
		tempArray.push({
			mode: "mode",
			order: 2,
			type: "scribble_0",
			index: 0,
			d: "path"
		});

		// update the value of mode key of array tempArray at index specified in variable 'index' with the value of mode key of array passed in argument at index specified in variable 'index'
		tempArray[index].mode = array[index].mode;

		// update the value of order key of array tempArray at index specified in variable 'index' with the value of order key of array passed in argument at index specified in variable 'index'
		tempArray[index].order = array[index].order;

		// update the value of type key of array tempArray at index specified in variable 'index' with the value of type key of array passed in argument at index specified in variable 'index'
		tempArray[index].type = array[index].type;

		// update the value of index key of array tempArray at index specified in variable 'index' with the value of index key of array passed in argument at index specified in variable 'index'
		tempArray[index].index = array[index].index;

		// update the value of d key of array tempArray at index specified in variable 'index' with the value of d key of array passed in argument at index specified in variable 'index'
		tempArray[index].d = array[index].d;
	}

	// retuns array after copied data from array passed in arguments
	return tempArray;
}

// Center of the circle (cx, cy)
// Radius of circle: r
// First Point (ax,ay) and second Point (bx,by)
function checkIntersection(ax, ay, bx, by, cx, cy, r) {
	ax -= cx;
	ay -= cy;
	bx -= cx;
	by -= cy;
	let a = (bx - ax) * (bx - ax) + (by - ay) * (by - ay);
	let b = 2 * (ax * (bx - ax) + ay * (by - ay));
	let c = ax * ax + ay * ay - r * r;

	// Applying Shri Dharacharya method by comparing the quadratic values a, b, c
	let disc = b * b - 4 * a * c;

	if (disc <= 0) {
		return false;
	}

	let t1 = (-b + Math.sqrt(disc)) / (2 * a);
	let t2 = (-b - Math.sqrt(disc)) / (2 * a);

	if (0 < t1 && t1 < 1 || 0 < t2 && t2 < 1) {
		return true;
	}

	return false;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("DrawingPreview", slots, []);
	let { xml } = $$props;
	let { uxml } = $$props;
	let { isReview } = $$props;
	let { showAns } = $$props;
	let { editorState } = $$props;
	let bgImgPath = "https://s3.amazonaws.com/jigyaasa_content_static/";
	let xmlns = "http://www.w3.org/2000/svg";

	// denotes that drawing is not sketching
	let isDrawingPreview = false;

	// allow to draw the drawing using compass
	let isDrawCompassPreview = true;

	// indicates that starting position should be store when perform using keyboard and compass
	let isStoreStart = false;

	// indicates that drawing is not started
	let isDrawStop = 0;

	// shows that is drawing started by keyboard
	let startDrawingByKey = 0;

	// used to creates an element with the specified namespace URI and qualified name
	let scribble;

	// denotes mouse co-ordinates
	let preview_mouseX, preview_mouseY;

	// scribble drawing tool is enable
	let previewMode = "scribble";

	// strike color of drawing
	let previewColor = "#00BCD4";

	// stroke width of the drawing
	let previewThickness = 5;

	// contains object that have key type, index, mode, order and d
	let previewScribblePath = [];

	// shows number of drawing sketched with the help of drawing tools
	let previewScribbleCount = 0;

	// contains current mouse x position
	let checkCurrentPositionX;

	// contains current mouse y position
	let checkCurrentPositionY;

	// denoes no of undo done
	let previewUndoCount = 0;

	// contains undo data
	let previewUndoList = [];

	// contains redo data
	let previewRedoList = [];

	// contains the focusPoints
	let accessibilityPointsPreview = [];

	// number of focus point exist
	let focusPointCountPreview = 1;

	// used for not focus on perticular point
	let lockFocus = 0;

	// denotes that scribble drawing is not sketching
	let isScribble = 0;

	// for compass variable
	// denotes x co-ordinate of the center
	let cx;

	// denotes y co-ordinate of the center
	let cy;

	// denotes x co-ordinate of the center of middle circle lies on rotationbar
	let midCircle_cx;

	// denotes y co-ordinate of the center of middle circle lies on rotationbar
	let midCircle_cy;

	// denotes x co-ordinate of the center of small middle circle lies on rotationbar
	let midSmallCircle_cx;

	// denotes y co-ordinate of the center of small middle circle lies on rotationbar
	let midSmallCircle_cy;

	// denotes x co-ordinate of the center of last circle lies on rotationbar
	let lastCircle_cx;

	// denotes y co-ordinate of the center of last circle lies on rotationbar
	let lastCircle_cy;

	// denotes x co-ordinate of the center of rotation indicator that can be seen after last circle on rotationbar
	let lastSmallCircle_cx;

	// denotes y co-ordinate of the center of rotation indicator that can be seen after last circle on rotationbar
	let lastSmallCircle_cy;

	// defines the compass radius
	let previewCompassRadius = 100;

	// denotes that compass is not moved
	let isPreviewCompassMove = false;

	// sets the default angle of compass
	let previewCompassAngle = 90;

	// denotes that compass radius not increased
	let isPreviewRadiusIncrease = 0;

	// denotes initial points co-ordinate
	let initialPoint = { x: null, y: null };

	// denotes final points co-ordinate
	let finalPoint = { x: null, y: null };

	// denotes no angle displaced
	let compassAngleDisplacement = { start: null, end: null };

	// denotes that is radius rotated
	let isPreviewRadiusRotate = 0;

	// y co-ordinate of the marked point
	let cursorTop = 50;

	// x co-ordinate of the marked point
	let cursorLeft = 50;

	// used for answer recording
	let defaultXML = "";

	let cdata = "";

	// denotes that answer is incorrect
	let isAnswerCorrect = false;

	// for marking
	let isMarking = 1;

	// contains the co-ordinates of marked point
	let markPoints = [];

	// denotes array of drawing tools
	let selectedToolsArray = ["_scribble", "_line", "_compass"];

	// for user answer
	let userAnsPath = [];

	// initial layout of user answer xml
	let userAnsXML = "<smans type=\"41\"></smans>";

	// contains the x and y co-ordinate of the points marked by user
	let userMarkingPoint = [];

	// contains drawing sketched by user by the help of drawing tools
	let userDrawPath = [];

	// denotes that answer is incorrect
	let userAnsCorrect = false;

	// contains the co-ordinates of marked point
	let markPointsData = [];

	// for browsers
	let is_mac = false;

	let prev_store = writable({
		// contains status of the answer
		correctAnswer: false,
		// contains the xml of the props
		xml: "",
		// not used any where
		openImg: false,
		// not used any where
		openDrag: false,
		// denotes background image
		bgImg: "useraccount_000ANv.png",
		// not used any where 
		cdata: "",
		// contains cdata value of backgroundPoint of smxml 
		focusDATA: "",
		// not used any where 
		userXML: "",
		// stroke color of the drawing sketch by the help of drawing tools
		lineColor: "#00BCD4",
		// contains drawing tools array
		selectedTools: selectedToolsArray,
		// denotes remediation mode is off
		remediationMode: "off",
		// width of the background image
		imgWidth: "600",
		// alt message of background image
		alt: "Triangle image",
		// sets color of the mark points
		markPointColor: "#00ff00"
	});

	// subscribing the store in the state variable
	let state = {};

	const unsubscribe = prev_store.subscribe(value => {
		$$invalidate(2, state = value);
	});

	// for adding all the necessary events and the css files
	onMount(async () => {
		// checked for mac device
		is_mac = navigator.userAgent.indexOf("Mac") != -1;

		// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
		updatePreviewCompassCalculation(160, 118, 100, 90);

		AH.listen("body", "click", "#set-review", function () {
			setReview();
		});

		AH.listen("body", "click", "#unset-review", function () {
			unsetReview();
		});

		AH.listen("body", "click", "#preview_reset_btn", function () {
			swal({
				text: Lang.reset_module,
				icon: "warning",
				buttons: true
			}).then(value => {
				if (value) {
					// reset all the activity and makes it in initial condition as it looks like just after load
					parseXMLForGettingData();

					reinitializeFoucsEvent();
				}
			});
		});

		/** Start of key events **/
		// to stop scrolling of page by space and arrow keys
		AH.bind("body", "keydown", function (event) {
			if (!editorState && (event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40)) {
				return false;
			}
		});

		AH.listen("body", "keyup", ".previewKeySvg .previewDrawingPaths path", function (current, event) {
			if (event.keyCode == 46 || event.keyCode == 8 && is_mac) {
				// removes drawing on which keyup event triggered and update the user answer xml
				eraser(current, previewScribblePath);
			}
		});

		AH.listen("body", "keyup", ".previewKeySvg", function (current, event) {
			if (event.keyCode == 90 && event.ctrlKey && !AH.select("#preview_undo").disabled) {
				if (startDrawingByKey && isDrawStop) {
					// stop the drawing and store the drawing sketched by the user and sets the user answer xml
					stopDraw();
				}

				// click the undo button
				AH.select("#preview_undo").click();
			}

			if (event.keyCode == 89 && event.ctrlKey && !AH.select("#preview_redo").disabled) {
				if (startDrawingByKey && isDrawStop) {
					// stop the drawing and store the drawing sketched by the user and sets the user answer xml
					stopDraw();
				}

				// click the redo button
				AH.select("#preview_redo").click();
			}

			if (event.keyCode == 88 && event.ctrlKey) {
				// click the clear screen (x) button
				AH.select("#preview_clearScreen").click();
			}

			if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != "compass" && previewMode != "eraser") {
				// hides the icon (+) used to sketch the drawing using keyboard
				AH.select("#moveDrawIcon", "removeClass", "h");

				// sets the cursor style to auto
				AH.select(".previewKeySvg", "css", { "cursor": "auto" });
			}

			if (event.shiftKey && (event.keyCode == 13 || event.keyCode == 32) && AH.select("#moveDrawIcon").offsetHeight != 0) {
				if (previewMode == "markPoints") {
					// Creates an element with the specified namespace URI and qualified name.
					scribble = document.createElementNS(xmlns, "circle");

					// sets the stroke color and width
					setPreviewColor(state.markPointColor, previewThickness);

					// adds a new attribute 'class' (with a namespace null)
					scribble.setAttributeNS(null, "class", "answer_mark");

					// adds a new attribute 'cx' (with a namespace null)
					scribble.setAttributeNS(null, "cx", cursorLeft);

					// adds a new attribute 'cy' (with a namespace null)
					scribble.setAttributeNS(null, "cy", cursorTop);

					// adds a new attribute 'r' (with a namespace null)
					scribble.setAttributeNS(null, "r", "2px");

					// pushes the x and y co-ordinate of the mouse into markPoints array
					markPoints.push({ x: cursorLeft, y: cursorTop });

					// prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons
					AH.select(".previewMarkingPaths").prepend(scribble);

					// checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' 
					parseXMLForAnswer(false);

					// updates user answer xml
					createUXML();
				} else {
					if (isDrawStop) {
						// stop the drawing and store the drawing sketched by the user and sets the user answer xml
						stopDraw();
					} else {
						startDrawingByKey = 1;

						// removes the all mark points and sets the value of the variable 'isMArking' to 1
						clearMarking();

						// Creates an element with the value of variable xmlns namespace URI and 'path' name
						scribble = document.createElementNS(xmlns, "path");

						// sets the stroke color and width
						setPreviewColor(previewColor, previewThickness);

						// adds a new attribute 'data-type' (with a namespace null)
						scribble.setAttributeNS(null, "data-type", previewMode + "_" + previewScribbleCount);

						// adds a new attribute 'data-order' (with a namespace null)
						scribble.setAttributeNS(null, "data-order", previewScribbleCount);

						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", "M" + cursorLeft + " " + cursorTop);

						// adds a new attribute 'tabindex' (with a namespace null)
						scribble.setAttributeNS(null, "tabindex", "0");

						// contains the cursor left position
						checkCurrentPositionX = cursorLeft;

						// contains the cursor top position
						checkCurrentPositionY = cursorTop;

						// pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath
						previewScribblePath.push({
							// define that perticular sequence element will be removed or added on drawing board
							mode: "add",
							// defines what is the sequence of perticular drawing on drawing board means when it is drawn then how many drawing already done and it starts with 0
							order: previewScribbleCount,
							// defines which drawing tool is used for sketch the drawing with its sequence on drawing board combind with underscore (_)
							type: previewMode + "_" + previewScribbleCount,
							// not used as its requirement completed by order key
							index: previewScribbleCount,
							// specify the position from where drawing will start
							d: "M" + cursorLeft + " " + cursorTop
						});

						// indicates that drawing is sketched
						isDrawStop = 1;
					}
				}
			}
		});

		AH.listen("body", "keydown", ".previewKeySvg", function (current, event) {
			if (AH.select("#moveDrawIcon").offsetHeight) {
				// contains width of the background image
				let imageWidth = AH.select("#svgImgPreview").clientWidth;

				// contains width of the background image 
				let imageHeight = AH.select("#svgImgPreview").clientHeight;

				if (event.shiftKey && (event.keyCode == 38 || event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 40) && !lockFocus) {
					switch (event.keyCode) {
						case 38:
							// decreases the value of variable cursorTop by 1 after down the up arrow key
							cursorTop--;
							break;
						case 40:
							// increases the value of variable cursorTop by 1 after down the down arrow key
							cursorTop++;
							break;
						case 39:
							// increases the value of variable cursorLeft by 1 after down the right arrow key
							cursorLeft++;
							break;
						case 37:
							// decreases the value of variable cursorLeft by 1 after down the left arrow key
							cursorLeft--;
							break;
					}

					if (cursorTop < 0 || cursorLeft > imageWidth || cursorLeft < 0 || cursorTop > imageHeight) {
						return;
					}

					// sets the top and left position of the icon (+) used for sketch the drawing
					AH.select("#moveDrawIcon", "css", {
						"top": cursorTop + "px",
						"left": cursorLeft + "px"
					});

					if (startDrawingByKey) {
						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop);

						if (previewMode != "line") {
							// adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
							previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop;
						}

						// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
						AH.select(".previewDrawingPaths").prepend(scribble);

						// sets the value of the variable isDrawStop by 1 to indicate that sketching of the drawing is stopped
						isDrawStop = 1;
					}
				}

				if (event.shiftKey && event.keyCode == 76) {
					if (!lockFocus) {
						// fixed the mark point from where drawing will be start when performed via keyboard
						lockFocus = 1;

						startDrawingByKey = 1;

						// removes the all mark points and sets the value of the variable 'isMArking' to 1
						clearMarking();

						// contains the x co-ordinate of the mark point circle after converting it into number from string
						cursorLeft = Number(AH.select(".currentFocusPoint").getAttribute("cx"));

						// contains the y co-ordinate of the mark point circle after converting it into number from string
						cursorTop = Number(AH.select(".currentFocusPoint").getAttribute("cy"));

						// Creates an element with the value of variable xmlns namespace URI and 'path' name
						scribble = document.createElementNS(xmlns, "path");

						// sets the stroke color and width
						setPreviewColor(previewColor, previewThickness);

						// adds a new attribute 'data-type' (with a namespace null)
						scribble.setAttributeNS(null, "data-type", previewMode + "_" + previewScribbleCount);

						// adds a new attribute 'data-order' (with a namespace null)
						scribble.setAttributeNS(null, "data-order", previewScribbleCount);

						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", "M" + cursorLeft + " " + cursorTop);

						// adds a new attribute 'tabindex' (with a namespace null)
						scribble.setAttributeNS(null, "tabindex", "0");

						// assign the value of current x position
						checkCurrentPositionX = cursorLeft;

						// assign the value of current y position
						checkCurrentPositionY = cursorTop;

						// pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath
						previewScribblePath.push({
							mode: "add",
							order: previewScribbleCount,
							type: previewMode + "_" + previewScribbleCount,
							index: previewScribbleCount,
							d: "M" + cursorLeft + " " + cursorTop
						});
					} else {
						// unlock the focus point
						lockFocus = 0;

						// stop the drawing and store the drawing sketched by the user and sets the user answer xml
						stopDraw();
					}
				}

				if (event.keyCode == 9 && lockFocus && (previewMode == "line" || previewMode == "scribble")) {
					let drawLine = setTimeout(
						function () {
							if (!AH.select(".currentFocusPoint").nodeName) {
								return;
							}

							// contains the x co-ordinate of the mark point circle after converting it into number from string
							cursorLeft = Number(AH.select(".currentFocusPoint").getAttribute("cx"));

							// contains the y co-ordinate of the mark point circle after converting it into number from string
							cursorTop = Number(AH.select(".currentFocusPoint").getAttribute("cy"));

							if (isNaN(cursorLeft) && isNaN(cursorTop)) {
								return;
							}

							if (previewMode == "scribble" || previewMode == "line") {
								// indicates that scribble drawing is sketching
								isScribble = 1;
							}

							// adds a new attribute 'd' (with a namespace null)
							scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop);

							// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
							AH.select(".previewDrawingPaths").prepend(scribble);

							clearTimeout(drawLine);
						},
						10
					);
				}

				if (event.keyCode == 68 && lockFocus && isScribble) {
					let draw_scribble = setTimeout(
						function () {
							if (isNaN(cursorLeft) && isNaN(cursorTop)) {
								return;
							}

							// adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
							previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop;

							// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
							AH.select(".previewDrawingPaths").prepend(scribble);

							clearTimeout(draw_scribble);

							// indicates that scribble drawing is not sketching
							isScribble = 0;
						},
						10
					);
				}
			}
		});

		AH.listen("body", "keydown", ".previewKeySvg .drawingCompassCenter", function (current, event) {
			// change the center position of the compass element
			compassKeyEvent("move", event);
		});

		AH.listen("body", "keydown", ".previewKeySvg .mid_circle", function (current, event) {
			// change the radius of the compass element
			compassKeyEvent("radius", event);
		});

		AH.listen("body", "keydown", ".previewKeySvg .midSmallCircle", function (current, event) {
			// change the angle of the compass element when focus is on small middle circle
			compassKeyEvent("rotate", event);
		});

		AH.listen("body", "keydown", ".previewKeySvg .lastCircle", function (current, event) {
			// change the angle of the compass element when focus is on last circle
			compassKeyEvent("draw", event);
		});

		AH.listen("body", "keydown", ".focusPoints", function (current, event) {
			if (event.shiftKey && event.keyCode == 13) {
				return false;
			}

			if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != "markPoints" && previewMode != "eraser") {
				// contains the x co-ordinate of the mark point circle after converting it into number from string
				cursorLeft = Number(AH.select(".currentFocusPoint").getAttribute("cx"));

				// contains the y co-ordinate of the mark point circle after converting it into number from string
				cursorTop = Number(AH.select(".currentFocusPoint").getAttribute("cy"));

				if (previewMode != "compass") {
					// sets the position of the icon (+) used to sketch the drawing by the help of keyboard
					AH.select("#moveDrawIcon", "css", {
						"top": cursorTop + "px",
						"left": cursorLeft + "px"
					});
				} else {
					// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
					updatePreviewCompassCalculation(cursorLeft, cursorTop, previewCompassRadius, previewCompassAngle);
				}
			}
		});

		AH.listen("body", "keyup", ".previewKeySvg .lastCircle", function (current, event) {
			if (!isDrawCompassPreview && isStoreStart && event.keyCode == 16) {
				// stores the drawing sketched by user using keyboard and sets the user answer xml
				storeCompassPathByKey();
			}
		});

		/** End of key events **/
		AH.bind(".previewKeySvg .lastCircle", "blur", function () {
			if (!isDrawCompassPreview && isStoreStart) {
				// stores the drawing sketched by user using keyboard and sets the user answer xml
				storeCompassPathByKey();
			}
		});

		AH.listen("body", "mousedown", "#previewSvg .midSmallCircle", function () {
			if (previewMode == "compass") {
				// indicates that radius rotated
				isPreviewRadiusRotate = 1;

				// updates the value of compass radius and angle
				checkPreviewRadiusAndAngle();

				// contains the value of start angle
				compassAngleDisplacement.start = previewCompassAngle;
			}
		});

		AH.listen("body", "mousedown", "#previewSvg .drawingCompassCenter", function () {
			if (previewMode == "compass") {
				// sets the x and y co-ordinate of the mouse position
				setPreviewMouseCoordinates(event);

				// contains x co-ordinate of the mouse
				cx = preview_mouseX;

				// contains y co-ordinate of the mouse
				cy = preview_mouseY;

				// contains radius of the compass
				$$invalidate(0, previewCompassRadius = AH.select(".drawingCompassRoute").getAttribute("r"));

				// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
				updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);

				// indicates that compass is moved
				isPreviewCompassMove = true;
			}
		});

		AH.listen("body", "mousedown", "#previewSvg .mid_circle", function () {
			if (previewMode == "compass") {
				// allows to change the value of radius of the compass
				isPreviewRadiusIncrease = 1;
			}
		});

		AH.listen("body", "mousedown", "#previewSvg .lastCircle", function (current, event) {
			compassLastcircleEvent(event);
		});

		AH.listen("body", "keydown", "#previewSvg .lastCircle", function (current, event) {
			compassLastcircleEvent(event);
		});

		// Mouse down event
		AH.listen("body", "mousedown", "#previewSvg", function (current, event) {
			// sets the cursor style as crosshair (+)
			AH.select("#previewSvg", "css", { "cursor": "crosshair" });

			// hides the icon used to sketch the drawing by the help of keyboard
			AH.select("#moveDrawIcon", "addClass", "h");

			if (startDrawingByKey && isDrawStop || lockFocus) {
				// stop the drawing and store the drawing sketched by the user and sets the user answer xml
				stopDraw();
			}

			switch (previewMode) {
				case "line":
				case "scribble":
					// removes the all mark points and sets the value of the variable 'isMArking' to 1
					clearMarking();
					// denotes that drawing is on going
					isDrawingPreview = true;
					// sets the x and y co-ordinate of the mouse position
					setPreviewMouseCoordinates(event);
					// Creates an element with the value of variable xmlns namespace URI and 'path' name
					scribble = document.createElementNS(xmlns, "path");
					// sets the stroke color and width
					setPreviewColor(previewColor, previewThickness);
					// adds a new attribute 'data-type' (with a namespace null)
					scribble.setAttributeNS(null, "data-type", previewMode + "_" + previewScribbleCount);
					// adds a new attribute 'data-order' (with a namespace null)
					scribble.setAttributeNS(null, "data-order", previewScribbleCount);
					// adds a new attribute 'd' (with a namespace null)
					scribble.setAttributeNS(null, "d", "M" + preview_mouseX + " " + preview_mouseY);
					// adds a new attribute 'tabindex' (with a namespace null)
					scribble.setAttributeNS(null, "tabindex", "0");
					// contains the x co-ordinate of the mouse
					checkCurrentPositionX = preview_mouseX;
					// contains the y co-ordinate of the mouse
					checkCurrentPositionY = preview_mouseY;
					// pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath
					previewScribblePath.push({
						mode: "add",
						order: previewScribbleCount,
						type: previewMode + "_" + previewScribbleCount,
						index: previewScribbleCount,
						d: "M" + preview_mouseX + " " + preview_mouseY
					});
					break;
				case "eraser":
					// removes drawing on which keyup event triggered and update the user answer xml
					eraser(".currentSvg", previewScribblePath);
					break;
				case "markPoints":
					if (!isMarking) {
						// sets the x and y co-ordinate of the mouse position
						setPreviewMouseCoordinates(event);

						// Creates an element with the specified namespace URI and qualified name.
						scribble = document.createElementNS(xmlns, "circle");

						// sets the stroke color and width
						setPreviewColor(state.markPointColor, previewThickness);

						// adds a new attribute 'class' (with a namespace null)
						scribble.setAttributeNS(null, "class", "answer_mark");

						// adds a new attribute 'cx' (with a namespace null)
						scribble.setAttributeNS(null, "cx", preview_mouseX);

						// adds a new attribute 'cy' (with a namespace null)
						scribble.setAttributeNS(null, "cy", preview_mouseY);

						// adds a new attribute 'r' (with a namespace null)
						scribble.setAttributeNS(null, "r", "2px");

						// pushes the x and y co-ordinate of mouse into markPoints array
						markPoints.push({ x: preview_mouseX, y: preview_mouseY });

						// prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons
						AH.select(".previewMarkingPaths").prepend(scribble);

						// checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' 
						parseXMLForAnswer(false);

						// updates user answer xml
						createUXML();
					}
					break;
			}
		});

		// Mouse Move event
		AH.listen("body", "mousemove", "#previewSvg", function (current, event) {
			switch (previewMode) {
				case "line":
					if (isDrawingPreview) {
						// sets the x and y co-ordinate of the mouse position
						setPreviewMouseCoordinates(event);

						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + preview_mouseX + " " + preview_mouseY);

						if (!(checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY)) {
							// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
							AH.select(".previewDrawingPaths").prepend(scribble);
						}
					}
					break;
				case "scribble":
					if (isDrawingPreview) {
						// sets the x and y co-ordinate of the mouse position
						setPreviewMouseCoordinates(event);

						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + preview_mouseX + " " + preview_mouseY);

						// adds value of variables preview_mouseX and preview_mouseY separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
						previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + preview_mouseX + " " + preview_mouseY;

						if (!(previewScribblePath[previewScribbleCount].d.split("L").length - 1 < 3)) {
							// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
							AH.select(".previewDrawingPaths").prepend(scribble);
						}
					}
					break;
				case "compass":
					// sets the x and y co-ordinate of the mouse position
					setPreviewMouseCoordinates(event);
					if (isPreviewCompassMove) {
						// contains the x co-ordinate of the mouse 
						cx = preview_mouseX;

						// contains the y co-ordinate of the mouse 
						cy = preview_mouseY;

						// contains radius of the compass
						$$invalidate(0, previewCompassRadius = AH.select(".drawingCompassRoute").getAttribute("r"));

						// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
						updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);
					}
					if (isPreviewRadiusIncrease) {
						// updates the value of compass radius and angle
						checkPreviewRadiusAndAngle();

						// calculates the radius by the help of start and end points co-ordinate of the rotation bar
						$$invalidate(0, previewCompassRadius = 2 * Math.sqrt(Math.pow(preview_mouseX - initialPoint.x, 2) + Math.pow(preview_mouseY - initialPoint.y, 2)));

						if (previewCompassRadius < 80) {
							// sets the value 80 of the variable previewCompassRadius
							$$invalidate(0, previewCompassRadius = 80);
						}

						if (previewCompassRadius > 360) {
							// sets the value 360 of the variable previewCompassRadius
							$$invalidate(0, previewCompassRadius = 360);
						}

						// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
						updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);
					}
					if (isPreviewRadiusRotate) {
						// updates the value of compass radius and angle
						checkPreviewRadiusAndAngle();

						// calculates the angle by the help of start and end points co-ordinate of the rotation bar
						$$invalidate(1, previewCompassAngle = Math.atan2(preview_mouseY - initialPoint.y, preview_mouseX - initialPoint.x) * 180 / Math.PI);

						if (previewCompassAngle < 0) {
							// adds 360 into the value of the variable previewCompassAngle
							$$invalidate(1, previewCompassAngle = 360 + previewCompassAngle);
						}

						// contains the value of end angle
						compassAngleDisplacement.end = previewCompassAngle;

						// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
						updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);
					}
					if (isDrawingPreview) {
						if (!(AH.select("#previewSvg .lastCircle").classList.contains("lastCircle_hover") || AH.select("#previewSvg .lastbigcircle").classList.contains("lastCircle_hover"))) {
							// trigger the event mouseleave on the element have id previewSvg
							previewMouseLeave(event);
						} else {
							// adds a new attribute 'd' (with a namespace null)
							scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy);

							// adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
							previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy;

							if (!(previewScribblePath[previewScribbleCount].d.split("L").length - 1 < 4)) {
								// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
								AH.select(".previewDrawingPaths").prepend(scribble);
							}
						}
					}
					break;
			}
		});

		// Mouse Up Event
		AH.listen("body", "mouseup", "#previewSvg", function (current, event) {
			previewMouseLeave(event);
		});

		// Mouse leave Event
		AH.bind("#previewSvg", "mouseleave", function (event) {
			previewMouseLeave(event);
		});

		// For toolbar
		AH.listen("body", "click", ".preview_toolbar", function (current, event) {
			toolbarAction(current, event);
		});

		AH.listen("body", "keyup", ".preview_toolbar", function (current, event) {
			toolbarAction(current, event);
		});

		AH.listen("body", "mouseover", ".previewDrawingPaths path", function (current) {
			if (previewMode == "eraser") {
				// removes the class currentSvg from the element 'path' inside the element have class 'previewDrawingPaths'
				AH.selectAll(".previewDrawingPaths path", "removeClass", "currentSvg");

				// adds the class 'currentSvg' to the element 'path' inside the element have class 'previewDrawingPaths' on which mouseover
				current.classList.add("currentSvg");
			}
		});

		AH.listen("body", "mouseout", ".previewDrawingPaths path", function (current) {
			if (previewMode == "eraser") {
				// removes the class 'currentSvg' to the element 'path' inside the element have class 'previewDrawingPaths' on which mouseout
				current.classList.remove("currentSvg");
			}
		});

		// last circle events
		AH.listen("body", "mousemove", "#previewSvg .lastCircle", function (current) {
			// adds the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass
			current.classList.add("lastCircle_hover");

			// shows the rotational indicator
			AH.selectAll("#previewSvg .lastCircleMid", "attr", { "opacity": 1 });
		});

		AH.listen("body", "mouseout", "#previewSvg .lastCircle", function (current) {
			// removes the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass
			current.classList.remove("lastCircle_hover");

			// hides the rotational indicator
			AH.selectAll("#previewSvg .lastCircleMid", "attr", { "opacity": 0 });
		});

		AH.listenAll("#previewSvg .lastCircle", "focus", function (current) {
			// adds the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass
			current.target.classList.add("lastCircle_hover");

			// shows the rotational indicator
			AH.selectAll("#previewSvg .lastCircleMid", "attr", { "opacity": 1 });
		});

		AH.listenAll("#previewSvg .lastCircle", "blur", function (current) {
			// removes the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass
			current.target.classList.remove("lastCircle_hover");

			// hides the rotational indicator
			AH.selectAll("#previewSvg .lastCircleMid", "attr", { "opacity": 0 });
		});

		// for changing the active buttons
		AH.listen("body", "click", ".preview_btn", function (current) {
			// removes the class active from drawing tools, delete and  'Mark Points' buttons
			AH.selectAll(".preview_btn, #mark_points", "removeClass", "active");

			// adds the class active which is clicked
			current.classList.add("active");
		});

		// for clearing the screen
		AH.listen("body", "click", "#preview_clearScreen", function () {
			// makes drawing container empty in which drawing is done by using drawing tools
			AH.selectAll(".previewDrawingPaths path", "remove");

			// sets the value of variable 'previewUndoCount' to  0
			previewUndoCount = 0;

			// sets the value of variable 'previewScribbleCount' to  0
			previewScribbleCount = 0;

			// makes array 'previewScribblePath' empty to denote that no drawing is sketched
			previewScribblePath = [];

			// contains copy of array previewScribblePath
			let tempArrayContainer = arrayCopy(previewScribblePath);

			// stores the drawing sketched by user and sets the user answer xml
			storeUserPaths(tempArrayContainer);

			// disabled the undo, redo, cross (x) buttons
			AH.select("#preview_undo").disabled = true;

			AH.select("#preview_redo").disabled = true;
			AH.select("#preview_clearScreen").disabled = true;
		});

		// for undo
		AH.listen("body", "click", "#preview_undo", function (current) {
			if (previewUndoCount == 1) {
				// disabled the undo button
				current.disabled = true;
			}

			// enabled the redo button
			AH.select("#preview_redo").disabled = false;

			if (previewScribblePath[previewScribblePath.length - 1].mode == "add") {
				// removes the element that have data-order attribute and value of this attribute is equals to subtacting 1 from the value of length of the array previewScribblePath, means removes the last drawing sketched by the help of drawing tools
				AH.selectAll("#previewSvg [data-order=\"" + (previewScribblePath.length - 1) + "\"]", "remove");
			} else if (previewScribblePath[previewScribblePath.length - 1].mode == "remove") {
				// Creates an element with the value of variable xmlns namespace URI and 'path' name
				scribble = document.createElementNS(xmlns, "path");

				// sets the stroke color and width
				setPreviewColor(previewColor, previewThickness);

				// adds a new attribute 'data-type' (with a namespace null)
				scribble.setAttributeNS(null, "data-type", previewScribblePath[previewScribblePath.length - 1].type);

				// adds a new attribute 'data-order' (with a namespace null)
				scribble.setAttributeNS(null, "data-order", previewScribblePath[previewScribblePath.length - 1].order);

				// adds a new attribute 'd' (with a namespace null)
				scribble.setAttributeNS(null, "d", previewScribblePath[previewScribblePath.length - 1].d);

				// adds a new attribute 'tabindex' (with a namespace null)
				scribble.setAttributeNS(null, "tabindex", "0");

				if (previewMode == "eraser") {
					// adds a new attribute 'class' (with a namespace null)
					scribble.setAttributeNS(null, "class", "eraserHover");
				}

				// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
				AH.select(".previewDrawingPaths").prepend(scribble);
			}

			// pushes the last data of array previewScribblePath into array previewUndoList
			previewUndoList.push(previewScribblePath.pop());

			// contains copy of array previewScribblePath
			let tempArrayContainer = arrayCopy(previewScribblePath);

			// stores the drawing sketched by user and sets the user answer xml
			storeUserPaths(tempArrayContainer);

			// decreases the value of the variable previewScribbleCount by 1
			previewScribbleCount--;

			// decreases the value of the variable previewUndoCount by 1
			previewUndoCount--;

			AH.select("#preview_clearScreen").disabled = AH.selectAll(".previewDrawingPaths path").length == 0;

			if (previewScribblePath.length == 0) {
				// disabled the undo button
				current.disabled = true;
			}
		});

		// for redo
		AH.listen("body", "click", "#preview_redo", function (current) {
			// increases the value of the variable previewScribbleCount by 1
			previewScribbleCount++;

			if (previewUndoList.length > 0) {
				// pushes the last data of array previewUndoList into array previewRedoList
				previewRedoList.push(previewUndoList.pop());
			}

			if (previewRedoList[previewRedoList.length - 1].mode == "add") {
				// Creates an element with the value of variable xmlns namespace URI and 'path' name
				scribble = document.createElementNS(xmlns, "path");

				// sets the stroke color and width
				setPreviewColor(previewColor, previewThickness);

				// adds a new attribute 'data-type' (with a namespace null)
				scribble.setAttributeNS(null, "data-type", previewRedoList[previewRedoList.length - 1].type);

				// adds a new attribute 'data-order' (with a namespace null)
				scribble.setAttributeNS(null, "data-order", previewRedoList[previewRedoList.length - 1].order);

				// adds a new attribute 'd' (with a namespace null)
				scribble.setAttributeNS(null, "d", previewRedoList[previewRedoList.length - 1].d);

				// adds a new attribute 'tabindex' (with a namespace null)
				scribble.setAttributeNS(null, "tabindex", "0");

				if (previewMode == "eraser") {
					// adds a new attribute 'class' (with a namespace null)
					scribble.setAttributeNS(null, "class", "eraserHover");
				}

				// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
				AH.select(".previewDrawingPaths").prepend(scribble);
			} else if (previewRedoList[previewRedoList.length - 1].mode == "remove") {
				// removes the element that have data-order attribute and value of this attribute is equals to the value of order key of the last index value of array previewRedoList, means removes the last drawing stored in array previewRedoList
				AH.selectAll("#previewSvg [data-order=\"" + previewRedoList[previewRedoList.length - 1].order + "\"]", "remove");
			}

			// increases the value of the variable previewUndoCount by 1
			previewUndoCount++;

			// pushes the last data of array previewRedoList into array previewScribblePath
			previewScribblePath.push(previewRedoList.pop());

			// contains copy of array previewScribblePath
			let tempArrayContainer = arrayCopy(previewScribblePath);

			// stores the drawing sketched by user and sets the user answer xml
			storeUserPaths(tempArrayContainer);

			AH.select("#preview_clearScreen").disabled = AH.selectAll(".previewDrawingPaths path").length == 0;

			if (previewUndoList.length == 0) {
				// disabled the redo button
				current.disabled = true;
			}

			// enabled the undo button
			AH.select("#preview_undo").disabled = false;
		});

		AH.listen("body", "click", "#mark_points", function (current, event) {
			markPointEvent(event);
		});

		AH.listen("body", "keyup", "#mark_points", function (current, event) {
			markPointEvent(event);
		});
	});

	// call the function after update in the store/state
	afterUpdate(async () => {
		// for changing the xml and loading the module according to the xml
		if (state.xml != xml) {
			parseXMLForGettingData();
			$$invalidate(2, state.xml = xml, state);
			reinitializeFoucsEvent();
			checkUserAns();
		}

		// for calling the setreview and unsetreview function on change of review mode
		if (state.review != isReview && editorState) {
			prev_store.update(item => {
				item.review = isReview;
				return item;
			});

			if (isReview) {
				setReview();
			} else {
				unsetReview();
			}
		}
	});

	// function responsible for the compass lastcircle keyevent
	function compassLastcircleEvent(event) {
		if (isScribble) {
			stopDraw();
		}

		if (event.shiftKey) {
			if (!isDrawCompassPreview) return;

			// sets the value  false of the variable isDrawCompassPreview
			isDrawCompassPreview = false;

			// sets the value true of the variable isStoreStart to store the starting position
			isStoreStart = true;

			// adds class lastCircle_hover to the last circle on the rotation bar
			AH.selectAll("#previewSvg .lastCircle", "addClass", "lastCircle_hover");
		}

		if (previewMode == "compass" && event.type == "mousedown" || event.shiftKey) {
			// removes the all mark points and sets the value of the variable 'isMArking' to 1
			clearMarking();

			// sets the cursor style to grabbing when mouse reached inside last circle on the rotation bar
			AH.selectAll("#previewSvg .lastCircle", "css", { "cursor": "grabbing" });

			if (isDrawCompassPreview || event.type == "mousedown") {
				// indicates that drawing is sketching
				isDrawingPreview = true;

				// indicates that radius is rotating
				isPreviewRadiusRotate = 1;
			}

			// updates the value of compass radius and angle
			checkPreviewRadiusAndAngle();

			// contains the value of start angle
			compassAngleDisplacement.start = previewCompassAngle;

			// Creates an element with the value of variable xmlns namespace URI and 'path' name
			scribble = document.createElementNS(xmlns, "path");

			// sets the stroke color and width
			setPreviewColor(previewColor, previewThickness);

			// adds a new attribute 'data-type' (with a namespace null)
			scribble.setAttributeNS(null, "data-type", previewMode + "_" + previewScribbleCount);

			// adds a new attribute 'data-order' (with a namespace null)
			scribble.setAttributeNS(null, "data-order", previewScribbleCount);

			// adds a new attribute 'd' (with a namespace null)
			scribble.setAttributeNS(null, "d", "M" + lastCircle_cx + " " + lastCircle_cy);

			// adds a new attribute 'tabindex' (with a namespace null)
			scribble.setAttributeNS(null, "tabindex", "0");

			// contains current x position
			checkCurrentPositionX = lastCircle_cx;

			// contains current y position
			checkCurrentPositionY = lastCircle_cy;

			// pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath
			previewScribblePath.push({
				mode: "add",
				order: previewScribbleCount,
				type: previewMode + "_" + previewScribbleCount,
				index: previewScribbleCount,
				d: "M" + lastCircle_cx + " " + lastCircle_cy
			});
		}
	}

	// for adding the focus and blur event
	function reinitializeFoucsEvent() {
		AH.listenAll(".focusPoints", "focus", function (event) {
			// removes the class currentFocusPoint from the elements have class focusPoints
			AH.selectAll(".focusPoints", "removeClass", "currentFocusPoint");

			// adds the class currentFocusPoint to the element which got the focus and have class focusPoints 
			event.target.classList.add("currentFocusPoint");
		});

		AH.listenAll(".focusPoints", "blur", function () {
			// removes the class currentFocusPoint from the elements have class focusPoints
			AH.selectAll(".focusPoints", "removeClass", "currentFocusPoint");
		});
	}

	// for adding the mark point from the key event
	function markPointEvent(event) {
		if (event.screenX == undefined) {
			return;
		}

		if (startDrawingByKey && isDrawStop) {
			// stop the drawing and store the drawing sketched by the user and sets the user answer xml
			stopDraw();
		}

		if (event.keyCode == 13 || event.keyCode == 32 || event.screenX === 0) {
			// stops the events from being bubbled
			event.preventDefault();

			// joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order
			markFinalPoints();

			if (isMarking) {
				// hides plus icon (+) that is used for sketch the graph via keyboard
				AH.select("#moveDrawIcon", "addClass", "h");

				// sets the cursor style to crosshair (+)
				AH.select("#previewSvg", "css", { "cursor": "crosshair" });
			} else {
				// shows plus icon (+) that is used for sketch the graph via keyboard
				AH.select("#moveDrawIcon", "removeClass", "h");

				// sets the cursor style to auto
				AH.select("#previewSvg", "css", { "cursor": "auto" });
			}
		} else if (event.type == "click" && event.screenX !== 0) {
			// joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order
			markFinalPoints();
		}
	}

	// this function calls whenever there is click on toolbar buttons
	function toolbarAction(current, event) {
		if (isScribble) {
			stopDraw();
		}

		if (event.type == "click" || (event.keyCode == 13 || event.keyCode == 32)) {
			// assign the value of the data-title attribute of the drawing tool buttons or of delete button on which is clicked or on which keyuped
			previewMode = current.getAttribute("data-title");

			// sets the style of the cursor to crosshair (+)
			AH.select("#previewSvg", "css", { "cursor": "crosshair" });

			// hides the icon (+) that is used for sketch the drawing by the help of keyboard
			AH.select("#moveDrawIcon", "addClass", "h");

			// sets the value 0 of variable startDrawingByKey to indicate that drawing is not started by the keyboard
			startDrawingByKey = 0;

			// sets the value of the variable isDrawStop by 0 to indicate that sketching of the drawing either not started or in progress
			isDrawStop = 0;

			if (previewMode == "eraser") {
				// adds the class eraserHover to the element path that contains the drawing sketched by the help of drawing tools
				AH.selectAll(".previewDrawingPaths path", "addClass", "eraserHover");
			} else {
				// removes the class eraserHover to the element path that contains the drawing sketched by the help of drawing tools
				AH.selectAll(".previewDrawingPaths path", "removeClass", "eraserHover");
			}

			// hides the compass element
			AH.selectAll(".drawingCompassSvg", "addClass", "h");

			if (previewMode == "compass") {
				// shows the compass tool
				AH.selectAll(".drawingCompassSvg", "removeClass", "h");
			}

			// removes the all mark points and sets the value of the variable 'isMArking' to 1
			clearMarking();
		}

		if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != "eraser" && previewMode != "compass") {
			// hides the icon (+), which is used to sketch the drawing using keyboard
			AH.select("#moveDrawIcon", "removeClass", "h");

			// sets the cursor style auto
			AH.select("#previewSvg", "css", { "cursor": "auto" });
		}

		if (startDrawingByKey && isDrawStop) {
			// stop the drawing and store the drawing sketched by the user and sets the user answer xml
			stopDraw();
		}
	}

	// this function calls when we are leaving the drawable area or on mouseup
	function previewMouseLeave(event) {
		switch (previewMode) {
			case "line":
			case "scribble":
				if (isDrawingPreview) {
					// sets the x and y co-ordinate of the mouse position
					setPreviewMouseCoordinates(event);

					if (lockFocus && (checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY && previewMode == "line" || previewMode == "scribble" && previewScribblePath[previewScribbleCount].d.split("L").length - 1 < 3)) {
						// removes the last element from the array previewScribblePath
						previewScribblePath.pop();
					}

					if (checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY && previewMode == "line" || previewMode == "scribble" && previewScribblePath[previewScribbleCount].d.split("L").length - 1 < 3) {
						// removes the last element from the array previewScribblePath
						previewScribblePath.pop();
					} else {
						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + preview_mouseX + " " + preview_mouseY);

						// adds value of variables preview_mouseX and preview_mouseY separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
						previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + preview_mouseX + " " + preview_mouseY;

						// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
						AH.select(".previewDrawingPaths").prepend(scribble);

						// increases the value of the variable previewScribbleCount by 1 
						previewScribbleCount++;

						// increases the value of the variable previewUndoCount by 1 
						previewUndoCount++;

						// makes array previewUndoList blank
						previewUndoList = [];

						// enabled clear screen and undo button
						AH.select("#preview_clearScreen").disabled = false;

						AH.select("#preview_undo").disabled = false;

						// disabled redo button
						AH.select("#preview_redo").disabled = true;
					}
				}
				// sets the value false of the variable isDrawingPreview 
				isDrawingPreview = false;
				break;
			case "compass":
				// indicates that radius is not increased
				isPreviewRadiusIncrease = 0;
				// indicates that radius is not rotated
				isPreviewRadiusRotate = 0;
				if (isPreviewCompassMove) {
					// sets the x and y co-ordinate of the mouse position
					setPreviewMouseCoordinates(event);

					// contains the x co-ordinate of the mouse position
					cx = preview_mouseX;

					// contains the y co-ordinate of the mouse position
					cy = preview_mouseY;

					// contains radius of the compass
					$$invalidate(0, previewCompassRadius = AH.select(".drawingCompassRoute").getAttribute("r"));

					// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
					updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);

					// indicates that compass is not moved
					isPreviewCompassMove = false;
				}
				if (isDrawingPreview) {
					if (previewScribblePath[previewScribbleCount].d.split("L").length - 1 < 4) {
						// removes the last element from the array previewScribblePath
						previewScribblePath.pop();
					} else {
						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy);

						// adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
						previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy;

						// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
						AH.select(".previewDrawingPaths").prepend(scribble);

						// increases the value of the variable previewScribbleCount by 1
						previewScribbleCount++;

						// increases the value of the variable previewUndoCount by 1
						previewUndoCount++;

						// makes array previewUndoList blank
						previewUndoList = [];

						// enabled clear screen (x) and undo button
						AH.select("#preview_clearScreen").disabled = false;

						AH.select("#preview_undo").disabled = false;

						// disabled the redo button
						AH.select("#preview_redo").disabled = true;
					}

					// sets value false of variable isDrawingPreview
					isDrawingPreview = false;
				}
				// sets the cursor style to grab when it lies on last circle on the rotation bar
				AH.selectAll("#previewSvg .lastCircle", "css", { "cursor": "grab" });
				break;
		}

		// contains copy of array previewScribblePath
		let tempArrayContainer = arrayCopy(previewScribblePath);

		// stores the drawing sketched by user and sets the user answer xml
		storeUserPaths(tempArrayContainer);
	}

	// checks the answer and shows the status of the answer
	function setReview() {
		$$invalidate(5, isReview = true);

		if (startDrawingByKey && isDrawStop || lockFocus) {
			// stop the drawing and store the drawing sketched by the user and sets the user answer xml
			stopDraw();
		}

		if (!isDrawCompassPreview && isStoreStart) {
			// stores the drawing sketched by user using keyboard and sets the user answer xml
			storeCompassPathByKey();
		}

		// checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' 
		parseXMLForAnswer(true);

		// contains the value of state array selectedTools at index 0 after removing the first character 
		previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));

		// removes the class active from drawing tools, delete, and 'Mark Points' or 'Finish Marking' buttons
		AH.selectAll(".preview_btn,#mark_points", "removeClass", "active");

		// adds the class active to the drawing tool button which exist at index 0 in state array selectedTools
		AH.select("#preview" + state.selectedTools[0], "addClass", "active");

		if (previewMode == "compass") {
			// shows the compass tool
			AH.selectAll(".drawingCompassSvg", "removeClass", "h");
		} else {
			// hides the compass tool
			AH.selectAll(".drawingCompassSvg", "addClass", "h");
		}

		$$invalidate(2, state.remediationMode = "on", state);
		AH.selectAll(".previewBtnGrp", "addClass", "h");

		// sets the value 'none' of the variable previewMode
		previewMode = "none";

		// not allowed user to perform the task
		AH.selectAll(".preview_drawing_container", "css", { pointerEvents: "none" });

		// removes the class previewKeySvg from the svg element have id previewSvg
		AH.select("#previewSvg", "removeClass", "previewKeySvg");

		// removes the marked points and also the path that is sketched by the help of mark points
		AH.selectAll(".previewMarkingPaths .answer_mark", "remove");

		// updates user answer xml
		createUXML();

		// draw the marked points and the lines connecting to these points
		addMarkPointOnLoad(JSON.parse(markPointsData));

		// sets the tabindex and aria-label to the elements have class 'answer_mark' and tag name is path
		AH.selectAll("path.answer_mark", "attr", {
			"tabindex": "0",
			"aria-labelledby": "answerLine"
		});

		if (state.correctAnswer) {
			// append the title element inside the element previewMarkingPaths with correct message
			AH.insert(".previewMarkingPaths", "<title id=\"answerLine\">" + Lang.ans_correct + "</title>", "beforeend");

			// sets the stroke color of the mark points to #0F9D58
			AH.selectAll(".answer_mark", "css", { "stroke": "#0F9D58" });
		} else {
			// append the title element inside the element previewMarkingPaths with incorrect message
			AH.insert(".previewMarkingPaths", "<title id=\"answerLine\">" + Lang.ans_incorrect + "</title>", "beforeend");

			// sets the stroke color of the mark points to red
			AH.selectAll(".answer_mark", "css", { "stroke": "#FF0000" });

			// sets the stroke color of the answer point to #0F9D58
			AH.selectAll(".answer_circle", "css", { "stroke": "#0F9D58" });
		}
	}

	// allowed user to perform the task and changes the stroke color of mark points 
	function unsetReview() {
		$$invalidate(5, isReview = false);

		// allowed user to perform the task
		AH.selectAll(".preview_drawing_container", "css", { pointerEvents: "" });

		// shows all buttons
		AH.selectAll(".previewBtnGrp", "removeClass", "h");

		// adds the class previewKeySvg to the svg element have id previewSvg
		AH.select("#previewSvg", "addClass", "previewKeySvg");

		// contains the value of state array selectedTools at index 0 after removing the first character
		previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));

		// it's also used below in this function so it can be removed
		AH.selectAll(".preview_btn,#mark_points", "removeClass", "active");

		// it's also used below in this function so it can be removed
		AH.select("#preview" + state.selectedTools[0], "addClass", "active");

		if (previewMode == "compass") {
			// shows compass tool
			AH.selectAll(".drawingCompassSvg", "removeClass", "h");

			// sets the style of the cursor to crosshair (+)
			AH.select("#previewSvg", "css", { "cursor": "crosshair" });

			// hides the icon (+) which is used to sketch the drawing using keyboard
			AH.select("#moveDrawIcon", "addClass", "h");
		} else {
			// hides compass tool
			AH.selectAll(".drawingCompassSvg", "addClass", "h");
		}

		// removes the class active from drawing tools, delete, and 'Mark Points' or 'Finish Marking' buttons
		AH.selectAll(".preview_btn,#mark_points", "removeClass", "active");

		// adds the class active to the drawing tool button which exist at index 0 in state array selectedTools
		AH.selectAll("#preview" + state.selectedTools[0], "addClass", "active");

		// removes the correct answer circle that can be seen on remediation mode in green stroke color
		AH.selectAll(".correct_answer_container .answer_mark", "remove");

		// enables the element have id mark_points and updates its text as 'Mark Points'
		AH.select("#mark_points").innerText = "Mark Points";

		AH.select("#mark_points").disabled = false;

		// sets the value of the variable 'isMarking' to 1
		isMarking = 1;

		$$invalidate(2, state.remediationMode = "off", state);

		// removes the title element inside the element have class previewMarkingPaths
		AH.selectAll(".previewMarkingPaths title", "remove");

		// sets the value state markPointColor into the value of attribute stroke of the element have class answer_mark and removes attribute tabindex
		AH.selectAll(".answer_mark", "css", { "stroke": state.markPointColor });

		AH.selectAll(".answer_mark", "removeAttr", "tabindex");
	}

	// parses the xml and updates the values of variables and states and width, src, alt of the background image, shows the enabled drawing tools and sets the mark point position and draw the lines using mark points
	function parseXMLForGettingData() {
		try {
			// contains json data of the xml
			defaultXML = XMLToJSON(xml);

			if (defaultXML.smxml._markPointColor == undefined) {
				// sets the value of the key markPointColor to #00ff00 of json defaultXML
				defaultXML.smxml._markPointColor = "#00ff00";
			}

			if (defaultXML.smxml._color == undefined) {
				// sets the value of the key color to rgb(0, 188, 212) of json defaultXML
				defaultXML.smxml._color = "rgb(0, 188, 212)";
			}

			prev_store.update(item => {
				// sets the value of state bgImg to the value of key bgimg of json defaultXML
				item.bgImg = defaultXML.smxml._bgimg;

				// sets the value of state alt to the value of key imgAlt of json defaultXML
				item.alt = defaultXML.smxml._imgAlt;

				// sets the value of state imgWidth to the value of key width of json defaultXML
				item.imgWidth = defaultXML.smxml._width;

				// sets the value of state lineColor to the value of key color of json defaultXML
				item.lineColor = defaultXML.smxml._color;

				// sets the value of state focusDATA to the value of subkey cdata of key backgroundPoint of json defaultXML
				item.focusDATA = defaultXML.smxml.backgroundPoint.__cdata;

				// sets the value of state markPointColor to the value of key markPointColor of json defaultXML
				item.markPointColor = defaultXML.smxml._markPointColor;

				// sets the value of state selectedTools to the value of key 'selectedDrawingType' after joining it with commam of json defaultXML
				item.selectedTools = defaultXML.smxml.div._selectedDrawingType.split(",");

				return item;
			});

			// makes array 'accessibilityPoints' to empty
			accessibilityPointsPreview = [];

			// assign the value 1 to the variable focusPointCountPreview
			focusPointCountPreview = 1;

			// assign the value of state focusDATA into variable updatedFocusCDATA
			let updatedFocusCDATA = state.focusDATA;

			// replaces the character '!' to ',' and wraps the value into square bracket
			updatedFocusCDATA = "[" + updatedFocusCDATA.replace(/!/g, ",") + "]";

			// contains javascript object 
			updatedFocusCDATA = JSON.parse(updatedFocusCDATA);

			// removes the element circle, path and title from element have class 'backgroundFocusPathPreview' and 'backgroundFocusPointPreview'
			AH.selectAll(".backgroundFocusPointPreview circle,.backgroundFocusPathPreview path, .backgroundFocusPointPreview title", "remove");

			for (let index = 0; index < updatedFocusCDATA.length; index++) {
				// pushes data of multi dimesion array updatedFocusCDATA specified at perticular row and column where value of row and column is equals to the value of variable 'index' into array previewScribblePath
				accessibilityPointsPreview.push(updatedFocusCDATA[index][index]);
			}

			for (let index = 0; index < updatedFocusCDATA.length; index++) {
				for (let subPoints = 0; subPoints < updatedFocusCDATA[index][index].length; subPoints++) {
					// updates the value of key x of multi dimention array object 'accessibilityPointsPreview' where row and column values are value of variable 'index' and 'subPoints' with the value of key x of multi dimention array updatedFocusCDATA object where row and column values are the value of variables 'index' and 'subPoints'
					accessibilityPointsPreview[index][subPoints].x = updatedFocusCDATA[index][index][subPoints].x;

					// updates the value of key y of multi dimention array object 'accessibilityPointsPreview' where row and column values are value of variable 'index' and 'subPoints' with the value of key y of multi dimention array object updatedFocusCDATA where row and column values are the value of variables 'index' and 'subPoints'
					accessibilityPointsPreview[index][subPoints].y = updatedFocusCDATA[index][index][subPoints].y;

					// Creates an element with the specified namespace URI and qualified name.
					scribble = document.createElementNS(xmlns, "circle");

					// sets the stroke color and width
					setPreviewColor("#808080", previewThickness);

					// adds a new attribute 'aria-labelledby' (with a namespace null)
					scribble.setAttributeNS(null, "aria-labelledby", "focusPoint_" + focusPointCountPreview + "_title focusPoint_" + focusPointCountPreview + "_desc");

					// adds a new attribute 'tabindex' (with a namespace null)
					scribble.setAttributeNS(null, "tabindex", "0");

					// adds a new attribute 'class' (with a namespace null)
					scribble.setAttributeNS(null, "class", "focusPoints");

					// adds a new attribute 'data-focusOrder' (with a namespace null)
					scribble.setAttributeNS(null, "data-focusOrder", focusPointCountPreview);

					// adds a new attribute 'cx' (with a namespace null)
					scribble.setAttributeNS(null, "cx", accessibilityPointsPreview[index][subPoints].x);

					// adds a new attribute 'cy' (with a namespace null)
					scribble.setAttributeNS(null, "cy", accessibilityPointsPreview[index][subPoints].y);

					// adds a new attribute 'r' (with a namespace null)
					scribble.setAttributeNS(null, "r", "2px");

					// place the scribble element before very first element inside the element have class 'backgroundFocusPointPreview'
					AH.select(".backgroundFocusPointPreview").append(scribble);

					// adds title and description of focus point for screen reader
					AH.insert(".backgroundFocusPointPreview", "<title id=\"focusPoint_" + focusPointCountPreview + "_title\">You are on the " + focusPointCountPreview + " Point </title><desc id=\"focusPoint_" + focusPointCountPreview + "_desc\">Press shift + tab to move towards the previous point or tab to move towards the next points</desc>", "beforeend");

					// increases the value of variable 'focusPointCountPreview' by 1
					focusPointCountPreview++;
				}

				// join the marked points and sets the color and width of the stroke 
				joinMarkedPoint(accessibilityPointsPreview[index], 1);
			}

			// contains the stroke color
			previewColor = state.lineColor;

			// makes array previewScribblePath blank for remove the drawing sketched by the help of drawing tools
			previewScribblePath = [];

			// sets the value true of the variable isDrawCompassPreview
			isDrawCompassPreview = true;

			// sets the value false of the variable isStoreStart
			isStoreStart = false;

			// sets the value 0 of the variable isDrawStop
			isDrawStop = 0;

			// shows that drawing is not start via keyboard
			startDrawingByKey = 0;

			// shows number of drawing sketched with the help of drawing tools
			previewScribbleCount = 0;

			// counts the number of undo can be done
			previewUndoCount = 0;

			// makes array previewUndoList blank to remove the all undo done
			previewUndoList = [];

			// makes array previewRedoList blank to remove the all redo done
			previewRedoList = [];

			// sets the value of the variable 'isMarking' to 1
			isMarking = 1;

			// makes array markPoints blank to remove the mark point
			markPoints = [];

			// removes the first character from the string exist in state array selectedTools at index 0
			previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));

			if (editorState) {
				// removes drawing sketched by the help of drawing tools and marked points and also lines that is drawn automatically using mark points
				AH.selectAll(".previewMarkingPaths .answer_mark,.previewDrawingPaths path", "remove");
			}

			if (previewMode == "compass") {
				// shows the compass tool
				AH.selectAll(".drawingCompassSvg", "removeClass", "h");

				// sets the cursor style to crosshair (+)
				AH.select("#previewSvg", "css", { "cursor": "crosshair" });

				// hides icon (+) used for sketch the drawing using keyboard
				AH.select("#moveDrawIcon", "addClass", "h");
			} else {
				// hides the compass element
				AH.selectAll(".drawingCompassSvg", "addClass", "h");
			}

			// enabled the button have id mark_points and update its text to 'Mark Points' 
			AH.select("#mark_points").disabled = false;

			AH.select("#mark_points").innerText = "Mark Points";

			// disabled the undo, redo and clear screen (x) buttons
			AH.select("#preview_undo").disabled = true;

			AH.select("#preview_redo").disabled = true;
			AH.select("#preview_clearScreen").disabled = true;

			// removes the drawing tool buttons
			AH.selectAll(".geometryToolPreview", "addClass", "h");

			for (let toolsIndex = 0; toolsIndex < state.selectedTools.length; toolsIndex++) {
				// shows the drawing tools buttons that exist in state array selectedTools
				AH.select("#preview" + state.selectedTools[toolsIndex], "removeClass", "h");
			}

			// removes the class active from drawing tools, delete and 'Mark Points' buttons
			AH.selectAll(".preview_btn,#mark_points", "removeClass", "active");

			// adds the class active to scribble drawing tool button
			AH.select("#preview" + state.selectedTools[0], "addClass", "active");

			// sets the width of the background image container
			AH.selectAll(".preview_drawing_toolbar, .centerImgPreview", "attr", {
				"style": "width:" + (Number(state.imgWidth) + 2) + "px"
			});

			// sets the width, src and alt message of the background image
			AH.select(".centerImg #svgImgPreview", "attr", {
				"src": bgImgPath + "" + state.bgImg,
				"alt": state.alt,
				"width": state.imgWidth
			});

			AH.enableBsAll(".tooltip_btn", "Tooltip", { container: "body" });
		} catch(error) {
			console.warn({
				error,
				func: "parseXMLForGettingData @271"
			});
		}
	}

	// joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order
	function markFinalPoints() {
		// hides the compass container
		AH.selectAll(".drawingCompassSvg", "addClass", "h");

		// removes the class 'eraserHover' from the element 'path' inside the element have id 'previewSvg'
		AH.selectAll("#previewSvg path", "removeClass", "eraserHover");

		if (isMarking) {
			// removes the class active from the drawing tools and delete buttons
			AH.selectAll(".preview_btn", "removeClass", "active");

			// sets the text of the button 'Mark Points' to 'Finish MArking' and adds class active to it
			AH.select("#mark_points").innerText = "Finish Marking";

			AH.select("#mark_points", "addClass", "active");

			// sets the value of the variable 'isMarking' to 0
			isMarking = 0;

			// removes the mark points and lines
			AH.selectAll(".previewMarkingPaths .answer_mark", "remove");

			// makes array userMarkingPoint to empty
			userMarkingPoint = [];

			// makes array markPoints to empty
			markPoints = [];

			if (!editorState) {
				// removes the correct answer circle that can be seen on remediation mode in green stroke color
				AH.selectAll(".correct_answer_container .answer_mark", "remove");
			}

			// sets value of variable 'previewMode' to 'markPoints'
			previewMode = "markPoints";
		} else {
			// stes the test of the button 'Finish Marking' to 'Mark Points' and adds class active to it
			AH.select("#mark_points").innerText = "Mark Points";

			AH.select("#mark_points", "removeClass", "active");

			if (markPoints.length >= 1) {
				// join the marked points and sets the color and width of the stroke 
				joinMarkedPoint(markPoints);

				if (state.remediationMode == "on") {
					// checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' 
					parseXMLForAnswer();
				}
			}

			// contains the value of index 0 of state array selectedTools after removing the first character
			previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));

			// hides the icon (+) used to sketch the drawing by the help of keyboard
			AH.select("#moveDrawIcon", "addClass", "h");

			// styles the cursor to crosshair (+)
			AH.select("#previewSvg", "css", { "cursor": "crosshair" });

			// adds the active class to the drawing tool exist at index 0 in state array selectedTools
			AH.select("#preview" + state.selectedTools[0], "addClass", "active");

			if (previewMode == "compass") {
				// shows the compass tool
				AH.selectAll(".drawingCompassSvg", "removeClass", "h");
			} else {
				// hides the compass tool
				AH.selectAll(".drawingCompassSvg", "addClass", "h");
			}

			// sets the value of the variable 'isMarking' to 1
			isMarking = 1;
		}
	}

	// draw the marked points and the lines connecting to these points
	function addMarkPointOnLoad(array) {
		for (let index = 0; index < array.length; index++) {
			// Creates an element with the specified namespace URI and qualified name.
			scribble = document.createElementNS(xmlns, "circle");

			// sets the stroke color and width
			setPreviewColor(state.markPointColor, previewThickness);

			// adds a new attribute 'class' (with a namespace null)
			scribble.setAttributeNS(null, "class", "answer_mark");

			// adds a new attribute 'cx' (with a namespace null)
			scribble.setAttributeNS(null, "cx", array[index].x);

			// adds a new attribute 'cy' (with a namespace null)
			scribble.setAttributeNS(null, "cy", array[index].y);

			// adds a new attribute 'r' (with a namespace null)
			scribble.setAttributeNS(null, "r", "2px");

			// prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons
			AH.select(".previewMarkingPaths").prepend(scribble);
		}

		// join the marked points and sets the color and width of the stroke 
		joinMarkedPoint(array);
	}

	// used to load the module according to the data of smxml and smans xml
	function loadModule(uaXML, drawMark) {
		// contains the json data of user answer xml
		uaXML = XMLToJSON(uaXML);

		// contains the x and y co-ordinate of the points marked by user
		userMarkingPoint = JSON.parse(uaXML.smans.markpoints);

		if (uaXML.smans.userDrawPath == undefined) {
			// sets the value of userDataPath to blank that indicates that no drawing is sketched
			uaXML.smans.userDrawPath = "";
		}

		// contains drawing data sketched by the help of drawing tools in the form of javascript object 
		userDrawPath = JSON.parse(uaXML.smans.userDrawPath);

		// defines the value true or false of the variable userAnsCorrect according to the value of ansCorrect of user answer xml
		userAnsCorrect = uaXML.smans.ansCorrect.toLowerCase() == "true"
		? true
		: false;

		// contains json data of xml props
		defaultXML = XMLToJSON(xml);

		// contains cdata of drawing of smxml that have to be performed by the help of drawing tools for correct answer
		cdata = defaultXML.smxml.div.__cdata;

		// replace the character '!' with ',' from cdata and wrap it in square bracket
		cdata = "[" + cdata.replace(/!/g, ",") + "]";

		// converts cdata string into javascript object
		cdata = JSON.parse(cdata);

		// draw the marked points and the lines connecting to these points
		addMarkPointOnLoad(userMarkingPoint);

		// creates the drawing sketched by user
		createUserPath();

		// checks the answer is correct or incorrect
		checkCorrectAnswer(userMarkingPoint, drawMark);

		// sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)
		setStatusOfAns(userAnsCorrect, userMarkingPoint, drawMark);
	}

	// removes drawing on which keyup event triggered and update the user answer xml
	function eraser(curClass, curArray) {
		if (AH.select(curClass).getAttribute("data-order") != undefined) {
			// makes array previewUndoList blank
			previewUndoList = [];

			// a temporary variable used of 
			let tempArrayContainer = "";

			// find the index of the drawing on which keyup event fired exist in array curArray
			let currentIndex = curArray.indexOf(curArray[AH.select(curClass).getAttribute("data-order")]);

			// contains current element from array curArray after converting it into string and wraping in square bracket
			let convertJSONtoArray = "[" + JSON.stringify(curArray[currentIndex]) + "]";

			// contains copy of array convertJSONtoArray
			tempArrayContainer = arrayCopy(JSON.parse(convertJSONtoArray));

			// adds the value remove of mode key exist at index 0 in array tempArrayContainer
			tempArrayContainer[0].mode = "remove";

			// pushes the data of array 'tempArrayContainer' exist on index 0 into array curArray
			curArray.push(tempArrayContainer[0]);

			// contains copy of array curArray
			let eraserArrayContainer = arrayCopy(curArray);

			// stores the drawing sketched by user and sets the user answer xml
			storeUserPaths(eraserArrayContainer);

			// increases the value of the variable previewScribbleCount by 1
			previewScribbleCount++;

			// increases the value of the variable previewUndoCount by 1
			previewUndoCount++;

			// removes the current drawing on which keyup event fired
			AH.select(curClass, "remove");

			// disabled the redo button
			AH.select("#preview_redo").disabled = true;

			// enables undo button
			AH.select("#preview_undo").disabled = false;

			if (AH.selectAll(".previewDrawingPaths path").length == 0) {
				// disabled the clear screen button (x)
				AH.select("#preview_clearScreen").disabled = true;
			}
		}
	}

	// stores the drawing sketched by user and sets the user answer xml
	function storeUserPaths(drawPathArray) {
		// makes array userAnsPath blank
		userAnsPath = [];

		// creates the variable subindex and assign the value 0
		let subindex = 0;

		for (let index = 0; index < drawPathArray.length; index++) {
			subindex = index + 1;

			while (subindex < drawPathArray.length) {
				if (drawPathArray[index].type == drawPathArray[subindex].type) {
					if (drawPathArray[index].mode == "add" && drawPathArray[subindex].mode == "remove") {
						// sets the value null of mode key of array drawPathArray have index defined in variable 'index'
						drawPathArray[index].mode = null;

						// sets the value null of mode key of array drawPathArray have index defined in variable 'subindex'
						drawPathArray[subindex].mode = null;
					}
				}

				// increases the value of the variable subindex by 1
				subindex++;
			}
		}

		for (let index = 0; index < drawPathArray.length; index++) {
			// Return an array of all the values in the drawPathArray array whose value of mode key is not null
			drawPathArray = drawPathArray.filter(function (element) {
				return element.mode != null;
			});
		}

		// pushes data of array drawPathArray into array userAnsPath
		userAnsPath.push(drawPathArray);

		// updates user answer xml
		createUXML();
	}

	// creates user answer xml
	function createUXML() {
		// makes array markPointsData empty
		markPointsData = [];

		if (markPoints.length == 0) {
			// contains the x and y co-ordinate of the points marked by user
			markPointsData = JSON.stringify(userMarkingPoint);
		} else {
			// contains the x and y co-ordinate of the points marked by user
			markPointsData = JSON.stringify(markPoints);
		}

		// contains proforma of user answer xml with points marked by user, drawing sketched by user and state of answer  
		userAnsXML = "<smans type=\"41\"><markpoints>" + markPointsData + "</markpoints><userDrawPath>" + JSON.stringify(userAnsPath[0]) + "</userDrawPath><ansCorrect>" + isAnswerCorrect + "</ansCorrect></smans>";

		// defined that user answer xml changed
		window.ISSPECIALMODULEUSERXMLCHANGE = 1;

		// sets the user answer xml
		AH.select("#special_module_user_xml", "value", userAnsXML);
	}

	// creates the drawing sketched by user
	function createUserPath() {
		if (userDrawPath.length) {
			// enables the cross and undo buttons 
			AH.select("#preview_undo").disabled = false;

			AH.select("#preview_undo").disabled = false;
		}

		for (let index = 0; index < userDrawPath.length; index++) {
			// sets the type key value of the object exist at index defined in variable 'index' of array userDrawPath by adding the value of variable 'index' in its previous value
			userDrawPath[index].type = userDrawPath[index].type.substr(0, userDrawPath[index].type.indexOf("_")) + "_" + index;

			// sets the order key value of the object exist at index defined in variable 'index' of array userDrawPath by adding the value of variable 'index'
			userDrawPath[index].order = index;

			// Creates an element with the value of variable xmlns namespace URI and 'path' name
			scribble = document.createElementNS(xmlns, "path");

			// sets the stroke color and width
			setPreviewColor(previewColor, previewThickness);

			// adds a new attribute 'data-type' (with a namespace null)
			scribble.setAttributeNS(null, "data-type", userDrawPath[index].type);

			// adds a new attribute 'data-order' (with a namespace null)
			scribble.setAttributeNS(null, "data-order", userDrawPath[index].order);

			// adds a new attribute 'd' (with a namespace null)
			scribble.setAttributeNS(null, "d", userDrawPath[index].d);

			// adds a new attribute 'tabindex' (with a namespace null)
			scribble.setAttributeNS(null, "tabindex", "0");

			// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
			AH.select(".previewDrawingPaths").prepend(scribble);
		}

		// sets the value of the variable 'previewScribbleCount' to  the value of length of the array 'userDrawPath'
		previewScribbleCount = userDrawPath.length;

		// contains copy of array userDrawPath
		previewScribblePath = arrayCopy(userDrawPath);
	}

	// join the marked points and sets the color and width of the stroke 
	function joinMarkedPoint(markArray, focusPoint) {
		if (markArray.length == 0) {
			return;
		}

		// Creates an element with the value of variable xmlns namespace URI and 'path' name
		scribble = document.createElementNS(xmlns, "path");

		// sets the starting position of the drawing
		let pointStartValues = "M " + markArray[0].x + " " + markArray[0].y;

		// variable for end point
		let pointEndValues = "";

		for (let index = 1; index < markArray.length; index++) {
			// adds the value of x and y into previous value of the variable pointEndValues from the array 'markArray' at index defined in variable 'index'
			pointEndValues += " L " + markArray[index].x + " " + markArray[index].y;
		}

		// adds a new attribute 'd' (with a namespace null)
		scribble.setAttributeNS(null, "d", pointStartValues + "" + pointEndValues);

		if (focusPoint) {
			// sets the stroke color and width
			setPreviewColor("rgb(128, 128, 128)", previewThickness);

			// prepend the element assigned into variable 'scribble' in background focus container element
			AH.select(".backgroundFocusPathPreview").prepend(scribble);
		} else {
			// sets the stroke color and width
			setPreviewColor(state.markPointColor, previewThickness);

			// adds a new attribute 'class' (with a namespace null)
			scribble.setAttributeNS(null, "class", "answer_mark");

			// prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons
			AH.select(".previewMarkingPaths").prepend(scribble);
		}
	}

	// checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' 
	function parseXMLForAnswer(drawMark) {
		// contains the json data of the xml of props
		defaultXML = XMLToJSON(state.xml);

		// contains the value of cdata inside div of smxml
		cdata = defaultXML.smxml.div.__cdata;

		// replaces the character '!' with ',' and wraps in square bracket of the value of cdata variable
		cdata = "[" + cdata.replace(/!/g, ",") + "]";

		// parses the cdata string value into javascript object
		cdata = JSON.parse(cdata);

		// creates an array markPointsAnsData
		let markPointsAnsData = [];

		// assign the value of array markPoints into array markPointsAnsData
		markPointsAnsData = markPoints;

		if (!editorState) {
			if (uxml) {
				if (markPoints.length == 0) {
					// contains the x and y co-ordinate of the points marked by user
					markPointsAnsData = userMarkingPoint;
				}
			}
		}

		// checks the answer is correct or incorrect
		checkCorrectAnswer(markPointsAnsData, drawMark);

		// sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)
		setStatusOfAns(isAnswerCorrect, markPointsAnsData, drawMark);

		if (drawMark) {
			// enables the element have id mark_points and updates its text as 'Mark Points'
			AH.select("#mark_points").innerText = "Mark Points";

			AH.select("#mark_points").disabled = false;

			// sets the value of the variable 'isMarking' to 1
			isMarking = 1;
		}
	}

	// stores the drawing sketched by user using keyboard and sets the user answer xml
	function storeCompassPathByKey() {
		// removes the class lastCircle_hover from the last circle that exist on rotation bar of the compass
		AH.selectAll("#previewSvg .lastCircle", "removeClass", "lastCircle_hover");

		// sets the style of the cursor to grab when cursor lies inside last circle
		AH.selectAll("#previewSvg .lastCircle", "css", { "cursor": "grab" });

		// sets the value true of variable isDrawCompassPreview
		isDrawCompassPreview = true;

		if (previewScribblePath[previewScribbleCount].d.indexOf("L") == -1) {
			// removes the last element from the array previewScribblePath
			previewScribblePath.pop();
		} else {
			// adds a new attribute 'd' (with a namespace null)
			scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy);

			// adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
			previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy;

			// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools 
			AH.select(".previewDrawingPaths").prepend(scribble);

			// increases the value of variable previewScribbleCount by 1
			previewScribbleCount++;

			// increases the value of variable previewUndoCount by 1
			previewUndoCount++;

			// makes array previewUndoList blank 
			previewUndoList = [];

			// enables the cross (x) and undo button
			AH.select("#preview_undo").disabled = false;

			AH.select("#preview_clearScreen").disabled = false;

			// disabled the redo button
			AH.select("#preview_redo").disabled = true;
		}

		// contains copy of array previewScribblePath
		let tempArrayContainer = arrayCopy(previewScribblePath);

		// stores the drawing sketched by user and sets the user answer xml
		storeUserPaths(tempArrayContainer);
	}

	// removes the all mark points and sets the value of the variable 'isMArking' to 1
	function clearMarking() {
		// removes the mark points and lines 
		AH.selectAll(".previewMarkingPaths .answer_mark", "remove");

		if (!editorState) {
			// removes the correct answer circle that can be seen on remediation mode in green stroke color
			AH.selectAll(".correct_answer_container .answer_mark", "remove");
		}

		// makes array markPoints empty
		markPoints = [];

		// sets the text 'Mark Points' of the element having id 'mark_points' and enabled that element
		AH.select("#mark_points").innerText = "Mark Points";

		AH.select("#mark_points").disabled = false;

		// sets the value of variable isMArking to 1 that indicates that mark can be draw
		isMarking = 1;
	}

	// checks the answer is correct or incorrect
	function checkCorrectAnswer(markArray, drawMark) {
		// creates correctAnswer array
		let correctAnswer = [];

		if (drawMark) {
			for (let index = 0; index < cdata.length; index++) {
				// Creates an element with the specified namespace URI and qualified name.
				scribble = document.createElementNS(xmlns, "circle");

				// sets the stroke color and width
				setPreviewColor("#0F9D58", "2");

				// adds a new attribute 'class' (with a namespace null)
				scribble.setAttributeNS(null, "class", "answer_mark answer_circle");

				// adds a new attribute 'cx' (with a namespace null)
				scribble.setAttributeNS(null, "cx", cdata[index].x);

				// adds a new attribute 'cy' (with a namespace null)
				scribble.setAttributeNS(null, "cy", cdata[index].y);

				// adds a new attribute 'r' (with a namespace null)
				scribble.setAttributeNS(null, "r", cdata[index].r);

				// prepend the created element with the value of variable 'xmlns' namespace URI and circle name in element have class 'correct_answer_container'
				AH.select(".correct_answer_container").prepend(scribble);
			}
		}

		if (cdata.length == 0 || markArray.length == 0) {
			// sets the value of variable 'isAnswerCorrect' to false
			isAnswerCorrect = false;

			return;
		}

		// sets the value of the variable 'lineCount' according to the length of the array markArray
		let lineCount = markArray.length == 1
		? markArray.length
		: markArray.length - 1;

		for (let cdataIndex = 0; cdataIndex < cdata.length; cdataIndex++) {
			for (let index = 0; index < lineCount; index++) {
				if (lineCount == 1 && markArray.length == 1 && checkIntersection(markArray[index].x, markArray[index].y, 0, 0, cdata[cdataIndex].x, cdata[cdataIndex].y, cdata[cdataIndex].r)) {
					// push data 'Match' into array correctAnswer
					correctAnswer.push("Match");

					break;
				}

				if (lineCount >= 1 && markArray.length > 1 && checkIntersection(markArray[index].x, markArray[index].y, markArray[index + 1].x, markArray[index + 1].y, cdata[cdataIndex].x, cdata[cdataIndex].y, cdata[cdataIndex].r)) {
					// push data 'Match' into array correctAnswer
					correctAnswer.push("Match");

					break;
				}
			}
		}

		if (correctAnswer.length == cdata.length) {
			// sets the value of variable 'isAnswerCorrect' to true
			isAnswerCorrect = true;
		} else {
			// sets the value of variable 'isAnswerCorrect' to false
			isAnswerCorrect = false;
		}

		// makes correctAnswer array empty
		correctAnswer = [];
	}

	// sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)
	function setStatusOfAns(isAnswerCorrect, markArray, drawMark) {
		if (isAnswerCorrect) {
			// stes the value of the state correctAnswer to true
			$$invalidate(2, state.correctAnswer = true, state);

			if (drawMark) {
				if (cdata.length && markArray.length) {
					// join the marked points and sets the color and width of the stroke 
					joinMarkedPoint(markArray);
				}

				// sets the stroke color of element have class 'answer_mark' to #0F9D58
				AH.selectAll(".answer_mark", "css", { "stroke": "#0F9D58" });

				// sets the value of the message variable to correct
				if (editorState) {
					// shows correct
					showAns(Lang.correct);
				}
			}
		} else {
			$$invalidate(2, state.correctAnswer = false, state);

			if (drawMark) {
				if (cdata.length && markArray.length) {
					// join the marked points and sets the color and width of the stroke 
					joinMarkedPoint(markArray);
				}

				// sets the stroke color of the mark points and lines that are draw using mark points to #ff0000
				AH.selectAll(".answer_mark", "css", { "stroke": "#ff0000" });

				AH.selectAll(".answer_circle", "css", { "stroke": "#0F9D58" });

				if (editorState) {
					// shows answer incorrect
					showAns(Lang.incorrect);
				}
			}
		}

		// check or uncheck the element have id 'answer' according to the value of variable isAnswerCorrect
		// AH.select("#answer").checked = state.correctAnswer;
		onUserAnsChange({
			uXml: userAnsXML,
			ans: state.correctAnswer
		});
	}

	// updates the value of compass radius and angle
	function checkPreviewRadiusAndAngle() {
		// contains the value of initial x co-ordinate of compass rotation bar 
		initialPoint.x = Number(AH.select(".compassRotationBar").getAttribute("x1"));

		// contains the value of initial y co-ordinate of compass rotation bar
		initialPoint.y = Number(AH.select(".compassRotationBar").getAttribute("y1"));

		// contains the value of final x co-ordinate of compass rotation bar
		finalPoint.x = Number(AH.select(".compassRotationBar").getAttribute("x2"));

		// contains the value of final y co-ordinate of compass rotation bar
		finalPoint.y = Number(AH.select(".compassRotationBar").getAttribute("y2"));

		// // contains the length of compass rotation bar
		$$invalidate(0, previewCompassRadius = Number(AH.select(".drawingCompassRoute").getAttribute("r")));

		// contains the value of compass angle using the co-ordinates of the initial and final points
		$$invalidate(1, previewCompassAngle = Math.atan2(finalPoint.y - initialPoint.y, finalPoint.x - initialPoint.x) * 180 / Math.PI);
	}

	// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
	function updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle) {
		// sets the center of x of middle circle lies on compass rotationbar
		midCircle_cx = cx + previewCompassRadius / 2 * Math.cos(previewCompassAngle * (Math.PI / 180));

		// sets the center of y of middle circle lies on compass rotationbar
		midCircle_cy = cy + previewCompassRadius / 2 * Math.sin(previewCompassAngle * (Math.PI / 180));

		// sets the center of x of small middle circle lies on compass rotationbar
		midSmallCircle_cx = cx + 3 * previewCompassRadius / 4 * Math.cos(previewCompassAngle * (Math.PI / 180));

		// sets the center of y of small middle circle lies on compass rotationbar
		midSmallCircle_cy = cy + 3 * previewCompassRadius / 4 * Math.sin(previewCompassAngle * (Math.PI / 180));

		// sets the center of x of last circle lies on compass rotationbar
		lastCircle_cx = cx + previewCompassRadius * Math.cos(previewCompassAngle * (Math.PI / 180));

		// sets the center of y of last circle lies on compass rotationbar
		lastCircle_cy = cy + previewCompassRadius * Math.sin(previewCompassAngle * (Math.PI / 180));

		// sets the center of x of rotation icon that can be seen just in front of the last circle to indication that move the rotationbar in these directions to draw the circular curve
		lastSmallCircle_cx = cx + 5 * previewCompassRadius / 4 * Math.cos(previewCompassAngle * (Math.PI / 180));

		// sets the center of x of rotation icon that can be seen just in front of the last circle to indication that move the rotationbar in these directions to draw the circular curve
		lastSmallCircle_cy = cy + 5 * previewCompassRadius / 4 * Math.sin(previewCompassAngle * (Math.PI / 180));

		// sets the center co-ordinate of the compass and of its route
		AH.selectAll(".drawingCompassRoute,.drawingCompassCenter", "attr", { cx, cy });

		// sets the radius of the compass or length of the rotationbar
		AH.selectAll(".drawingCompassRoute", "attr", { "r": previewCompassRadius });

		// sets the co-ordinates of start and end points of the compass rotation bar
		AH.selectAll(".compassRotationBar", "attr", {
			"x1": cx,
			"y1": cy,
			"x2": lastCircle_cx,
			"y2": lastCircle_cy
		});

		// sets the values of the center of the rotation indicator and rotate it in 3D dimention for defined variables value that can be seen after hover on the last circle lies on rotation bar
		AH.selectAll("#previewSvg .lastCircleMid", "attr", {
			"cx": lastSmallCircle_cx,
			"cy": lastSmallCircle_cy,
			"transform": "rotate(" + previewCompassAngle + "," + lastSmallCircle_cx + "," + lastSmallCircle_cy + ")"
		});

		// sets the center of the last circle lies on rotation bar
		AH.selectAll("#previewSvg .lastCircle", "attr", { "cx": lastCircle_cx, "cy": lastCircle_cy });

		// sets the values of the center of small middle circle and rotate it in 3D dimention for defined variables value
		AH.selectAll("#previewSvg .midSmallCircle", "attr", {
			"cx": midSmallCircle_cx,
			"cy": midSmallCircle_cy,
			"transform": "rotate(" + previewCompassAngle + "," + midSmallCircle_cx + "," + midSmallCircle_cy + ")"
		});

		// sets the values of the center of middle circle and rotate it in 3D dimention for defined variables value
		AH.selectAll("#previewSvg .mid_circle", "attr", {
			"cx": midCircle_cx,
			"cy": midCircle_cy,
			"transform": "rotate(" + previewCompassAngle + "," + midCircle_cx + "," + midCircle_cy + ")"
		});

		// assign the value of variable previewCompassAngle into variable curAngle
		let curAngle = previewCompassAngle;

		if (curAngle < 0) {
			// adds 360 degree value in it's previous value of variable curAngle
			curAngle = 360 + curAngle;
		}

		// sets the message about angle for screen reader
		AH.select("#compassRotationTitle").innerText = "Compass Angle, Your Current Angle is " + curAngle.toFixed(0) + " degree";

		// sets the message about radius for screen reader
		AH.select("#compassRadiusTitle").innerText = "Compass Radius, Your Current Radius is " + (previewCompassRadius * 0.02649).toFixed(1) + "cm";
	}

	// sets the x and y co-ordinate of the mouse position
	function setPreviewMouseCoordinates(event) {
		// contains the size of element having id 'authoringSvg' and its position relative to the viewport
		let boundary = document.getElementById("previewSvg").getBoundingClientRect();

		// sets the x position of the mouse co-ordinate
		preview_mouseX = event.clientX - boundary.left;

		// sets the y position of the mouse co-ordinate
		preview_mouseY = event.clientY - boundary.top;
	}

	// sets the stroke color and width
	function setPreviewColor(previewColor, previewThickness) {
		// sets the stroke color of the drawing
		scribble.style.stroke = previewColor;

		// sets the stroke width of the drawing
		scribble.style.strokeWidth = previewThickness;

		scribble.style.fill = "none";
	}

	// changes the value of radius, angle, and center of the compass when it is performed via keyboard
	function compassKeyEvent(mode, event) {
		if (!AH.select(".drawingCompassSvg").classList.contains("h") && previewMode == "compass") {
			// contains width of the background image
			let imageWidth = AH.select("#svgImgPreview").clientWidth;

			// contains width of the background image 
			let imageHeight = AH.select("#svgImgPreview").clientHeight;

			// updates the value of compass radius and angle
			checkPreviewRadiusAndAngle();

			if (event.shiftKey && (event.keyCode == 38 || event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 40)) {
				if (mode == "radius") {
					switch (event.keyCode) {
						case 38:
							// increases the radius value by 1 after down the key shift and up arrow
							$$invalidate(0, previewCompassRadius++, previewCompassRadius);
							break;
						case 37:
							// decreases the radius value by 1 after down the key shift and left arrow
							$$invalidate(0, previewCompassRadius--, previewCompassRadius);
							break;
						case 39:
							// increases the radius value by 1 after down the key shift and right arrow
							$$invalidate(0, previewCompassRadius++, previewCompassRadius);
							break;
						case 40:
							// decreases the radius value by 1 after down the key shift and down arrow
							$$invalidate(0, previewCompassRadius--, previewCompassRadius);
							break;
					}
				}

				if (mode == "move") {
					switch (event.keyCode) {
						case 38:
							// decreases the value of y co-ordinate of compass center by 1 after down the key shift and up arrow
							initialPoint.y--;
							break;
						case 37:
							// decreases the value of x co-ordinate of compass center by 1 after down the key shift and left arrow
							initialPoint.x--;
							break;
						case 39:
							// increases the value of x co-ordinate of compass center by 1 after down the key shift and right arrow
							initialPoint.x++;
							break;
						case 40:
							// increases the value of y co-ordinate of compass center by 1 after down the key shift and down arrow
							initialPoint.y++;
							break;
					}
				}

				if (mode == "rotate" || mode == "draw") {
					switch (event.keyCode) {
						case 38:
							// increases the value of compass angle by 1 after down the key shift and up arrow
							$$invalidate(1, previewCompassAngle++, previewCompassAngle);
							break;
						case 39:
							// decreases the value of compass angle by 1 after down the key shift and right arrow
							$$invalidate(1, previewCompassAngle--, previewCompassAngle);
							break;
						case 37:
							// increases the value of compass angle by 1 after down the key shift and left arrow
							$$invalidate(1, previewCompassAngle++, previewCompassAngle);
							break;
						case 40:
							// decreases the value of compass angle by 1 after down the key shift and down arrow
							$$invalidate(1, previewCompassAngle--, previewCompassAngle);
							break;
					}
				}

				if (mode == "draw") {
					if (AH.select("#previewSvg .lastCircle").classList.contains("lastCircle_hover") || AH.select("#previewSvg .lastbigcircle").classList.contains("lastCircle_hover")) {
						// adds a new attribute 'd' (with a namespace null)
						scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy);

						// adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
						previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + lastCircle_cx + " " + lastCircle_cy;

						// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
						AH.select(".previewDrawingPaths").prepend(scribble);
					}
				}

				if (initialPoint.x < 10 || previewCompassRadius < 80 || previewCompassRadius > 360 || initialPoint.x > imageWidth || initialPoint.y < 10 || initialPoint.y > imageHeight) {
					return;
				}

				// updates the position of rotationbar and change the center position of the circles that lies on rotationbar
				updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);
			}
		}
	}

	// stop the drawing and store the drawing sketched by the user and sets the user answer xml 
	function stopDraw() {
		if (checkCurrentPositionX == cursorLeft && checkCurrentPositionY == cursorTop && previewMode == "line" || previewMode == "scribble" && previewScribblePath[previewScribbleCount].d.indexOf("L") == -1) {
			// removes the last element from the array previewScribblePath
			previewScribblePath.pop();
		} else {
			if (!(isNaN(cursorLeft) && isNaN(cursorTop))) {
				// adds a new attribute 'd' (with a namespace null)
				scribble.setAttributeNS(null, "d", previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop);

				// adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath
				previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + " L" + cursorLeft + " " + cursorTop;

				// prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools
				AH.select(".previewDrawingPaths").prepend(scribble);
			}

			// increases the value of the variable previewScribbleCount by 1
			previewScribbleCount++;

			// increases the value of the variable previewUndoCount by 1
			previewUndoCount++;

			// makes array previewUndoList blank
			previewUndoList = [];

			// enables undo and cross (x) buttons
			AH.select("#preview_undo").disabled = false;

			AH.select("#preview_clearScreen").disabled = false;

			// disabled redo button
			AH.select("#preview_redo").disabled = true;
		}

		// indicates that scribble drawing is not sketching
		isScribble = 0;

		// sets the value of variable startDrawingByKey to 0
		startDrawingByKey = 0;

		// sets the value of variable isDrawStop to 0
		isDrawStop = 0;

		// sets the value of variable lockFocus to 0
		lockFocus = 0;

		// contains copy of array previewScribblePath
		let tempArrayContainer = arrayCopy(previewScribblePath);

		// stores the drawing sketched by user and sets the user answer xml
		storeUserPaths(tempArrayContainer);
	}

	// function for opening the shortcut modal
	function openShortcut() {
		AH.getBS("#drawing_shortcut_modal", "Modal").show();
	}

	// function for checking the user ans and loading the module on the basis of it
	function checkUserAns() {
		if (typeof editorState == "undefined") {
			// removes the reset button
			AH.selectAll(".reset_group", "remove");

			if (uxml) {
				if (uxml.search("<smans type=\"41\">") == -1 || uxml.search("<smans type=\"41\"></smans>") == 0 || uxml.search("undefined") != -1) {
					// blanks the user answer xml
					AH.select("#special_module_user_xml", "value", "");
				} else {
					if (isReview) {
						AH.selectAll(".previewBtnGrp", "addClass", "h");

						// sets the value 'none' of the variable previewMode
						previewMode = "none";

						// not allowed user to perform the task
						AH.selectAll(".preview_drawing_container", "css", { pointerEvents: "none" });

						// removes the class previewKeySvg from the svg element have id previewSvg
						AH.select("#previewSvg", "removeClass", "previewKeySvg");
					} else {
						// allowed user to perform the task
						AH.selectAll(".preview_drawing_container", "css", { pointerEvents: "" });

						// shows all buttons
						AH.selectAll(".previewBtnGrp", "removeClass", "h");

						// adds the class previewKeySvg to the svg element have id previewSvg
						AH.select("#previewSvg", "addClass", "previewKeySvg");

						// contains the value of state array selectedTools at index 0 after removing the first character
						previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));

						// it's also used below in this function so it can be removed
						AH.selectAll(".preview_btn,#mark_points", "removeClass", "active");

						// it's also used below in this function so it can be removed
						AH.select("#preview" + state.selectedTools[0], "addClass", "active");
					}

					loadModule(AH.select("#special_module_user_xml").value, isReview);
				}
			}
		}
	}

	const writable_props = ["xml", "uxml", "isReview", "showAns", "editorState"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<DrawingPreview> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("xml" in $$props) $$invalidate(6, xml = $$props.xml);
		if ("uxml" in $$props) $$invalidate(7, uxml = $$props.uxml);
		if ("isReview" in $$props) $$invalidate(5, isReview = $$props.isReview);
		if ("showAns" in $$props) $$invalidate(8, showAns = $$props.showAns);
		if ("editorState" in $$props) $$invalidate(9, editorState = $$props.editorState);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		onMount,
		AH,
		onUserAnsChange,
		XMLToJSON,
		l: Lang,
		swal,
		writable,
		xml,
		uxml,
		isReview,
		showAns,
		editorState,
		bgImgPath,
		xmlns,
		isDrawingPreview,
		isDrawCompassPreview,
		isStoreStart,
		isDrawStop,
		startDrawingByKey,
		scribble,
		preview_mouseX,
		preview_mouseY,
		previewMode,
		previewColor,
		previewThickness,
		previewScribblePath,
		previewScribbleCount,
		checkCurrentPositionX,
		checkCurrentPositionY,
		previewUndoCount,
		previewUndoList,
		previewRedoList,
		accessibilityPointsPreview,
		focusPointCountPreview,
		lockFocus,
		isScribble,
		cx,
		cy,
		midCircle_cx,
		midCircle_cy,
		midSmallCircle_cx,
		midSmallCircle_cy,
		lastCircle_cx,
		lastCircle_cy,
		lastSmallCircle_cx,
		lastSmallCircle_cy,
		previewCompassRadius,
		isPreviewCompassMove,
		previewCompassAngle,
		isPreviewRadiusIncrease,
		initialPoint,
		finalPoint,
		compassAngleDisplacement,
		isPreviewRadiusRotate,
		cursorTop,
		cursorLeft,
		defaultXML,
		cdata,
		isAnswerCorrect,
		isMarking,
		markPoints,
		selectedToolsArray,
		userAnsPath,
		userAnsXML,
		userMarkingPoint,
		userDrawPath,
		userAnsCorrect,
		markPointsData,
		is_mac,
		prev_store,
		state,
		unsubscribe,
		compassLastcircleEvent,
		reinitializeFoucsEvent,
		markPointEvent,
		toolbarAction,
		previewMouseLeave,
		setReview,
		unsetReview,
		parseXMLForGettingData,
		markFinalPoints,
		addMarkPointOnLoad,
		loadModule,
		arrayCopy,
		eraser,
		storeUserPaths,
		createUXML,
		createUserPath,
		joinMarkedPoint,
		parseXMLForAnswer,
		storeCompassPathByKey,
		clearMarking,
		checkCorrectAnswer,
		setStatusOfAns,
		checkIntersection,
		checkPreviewRadiusAndAngle,
		updatePreviewCompassCalculation,
		setPreviewMouseCoordinates,
		setPreviewColor,
		compassKeyEvent,
		stopDraw,
		openShortcut,
		checkUserAns
	});

	$$self.$inject_state = $$props => {
		if ("xml" in $$props) $$invalidate(6, xml = $$props.xml);
		if ("uxml" in $$props) $$invalidate(7, uxml = $$props.uxml);
		if ("isReview" in $$props) $$invalidate(5, isReview = $$props.isReview);
		if ("showAns" in $$props) $$invalidate(8, showAns = $$props.showAns);
		if ("editorState" in $$props) $$invalidate(9, editorState = $$props.editorState);
		if ("bgImgPath" in $$props) $$invalidate(3, bgImgPath = $$props.bgImgPath);
		if ("xmlns" in $$props) xmlns = $$props.xmlns;
		if ("isDrawingPreview" in $$props) isDrawingPreview = $$props.isDrawingPreview;
		if ("isDrawCompassPreview" in $$props) isDrawCompassPreview = $$props.isDrawCompassPreview;
		if ("isStoreStart" in $$props) isStoreStart = $$props.isStoreStart;
		if ("isDrawStop" in $$props) isDrawStop = $$props.isDrawStop;
		if ("startDrawingByKey" in $$props) startDrawingByKey = $$props.startDrawingByKey;
		if ("scribble" in $$props) scribble = $$props.scribble;
		if ("preview_mouseX" in $$props) preview_mouseX = $$props.preview_mouseX;
		if ("preview_mouseY" in $$props) preview_mouseY = $$props.preview_mouseY;
		if ("previewMode" in $$props) previewMode = $$props.previewMode;
		if ("previewColor" in $$props) previewColor = $$props.previewColor;
		if ("previewThickness" in $$props) previewThickness = $$props.previewThickness;
		if ("previewScribblePath" in $$props) previewScribblePath = $$props.previewScribblePath;
		if ("previewScribbleCount" in $$props) previewScribbleCount = $$props.previewScribbleCount;
		if ("checkCurrentPositionX" in $$props) checkCurrentPositionX = $$props.checkCurrentPositionX;
		if ("checkCurrentPositionY" in $$props) checkCurrentPositionY = $$props.checkCurrentPositionY;
		if ("previewUndoCount" in $$props) previewUndoCount = $$props.previewUndoCount;
		if ("previewUndoList" in $$props) previewUndoList = $$props.previewUndoList;
		if ("previewRedoList" in $$props) previewRedoList = $$props.previewRedoList;
		if ("accessibilityPointsPreview" in $$props) accessibilityPointsPreview = $$props.accessibilityPointsPreview;
		if ("focusPointCountPreview" in $$props) focusPointCountPreview = $$props.focusPointCountPreview;
		if ("lockFocus" in $$props) lockFocus = $$props.lockFocus;
		if ("isScribble" in $$props) isScribble = $$props.isScribble;
		if ("cx" in $$props) cx = $$props.cx;
		if ("cy" in $$props) cy = $$props.cy;
		if ("midCircle_cx" in $$props) midCircle_cx = $$props.midCircle_cx;
		if ("midCircle_cy" in $$props) midCircle_cy = $$props.midCircle_cy;
		if ("midSmallCircle_cx" in $$props) midSmallCircle_cx = $$props.midSmallCircle_cx;
		if ("midSmallCircle_cy" in $$props) midSmallCircle_cy = $$props.midSmallCircle_cy;
		if ("lastCircle_cx" in $$props) lastCircle_cx = $$props.lastCircle_cx;
		if ("lastCircle_cy" in $$props) lastCircle_cy = $$props.lastCircle_cy;
		if ("lastSmallCircle_cx" in $$props) lastSmallCircle_cx = $$props.lastSmallCircle_cx;
		if ("lastSmallCircle_cy" in $$props) lastSmallCircle_cy = $$props.lastSmallCircle_cy;
		if ("previewCompassRadius" in $$props) $$invalidate(0, previewCompassRadius = $$props.previewCompassRadius);
		if ("isPreviewCompassMove" in $$props) isPreviewCompassMove = $$props.isPreviewCompassMove;
		if ("previewCompassAngle" in $$props) $$invalidate(1, previewCompassAngle = $$props.previewCompassAngle);
		if ("isPreviewRadiusIncrease" in $$props) isPreviewRadiusIncrease = $$props.isPreviewRadiusIncrease;
		if ("initialPoint" in $$props) initialPoint = $$props.initialPoint;
		if ("finalPoint" in $$props) finalPoint = $$props.finalPoint;
		if ("compassAngleDisplacement" in $$props) compassAngleDisplacement = $$props.compassAngleDisplacement;
		if ("isPreviewRadiusRotate" in $$props) isPreviewRadiusRotate = $$props.isPreviewRadiusRotate;
		if ("cursorTop" in $$props) cursorTop = $$props.cursorTop;
		if ("cursorLeft" in $$props) cursorLeft = $$props.cursorLeft;
		if ("defaultXML" in $$props) defaultXML = $$props.defaultXML;
		if ("cdata" in $$props) cdata = $$props.cdata;
		if ("isAnswerCorrect" in $$props) isAnswerCorrect = $$props.isAnswerCorrect;
		if ("isMarking" in $$props) isMarking = $$props.isMarking;
		if ("markPoints" in $$props) markPoints = $$props.markPoints;
		if ("selectedToolsArray" in $$props) selectedToolsArray = $$props.selectedToolsArray;
		if ("userAnsPath" in $$props) userAnsPath = $$props.userAnsPath;
		if ("userAnsXML" in $$props) userAnsXML = $$props.userAnsXML;
		if ("userMarkingPoint" in $$props) userMarkingPoint = $$props.userMarkingPoint;
		if ("userDrawPath" in $$props) userDrawPath = $$props.userDrawPath;
		if ("userAnsCorrect" in $$props) userAnsCorrect = $$props.userAnsCorrect;
		if ("markPointsData" in $$props) markPointsData = $$props.markPointsData;
		if ("is_mac" in $$props) is_mac = $$props.is_mac;
		if ("prev_store" in $$props) prev_store = $$props.prev_store;
		if ("state" in $$props) $$invalidate(2, state = $$props.state);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		previewCompassRadius,
		previewCompassAngle,
		state,
		bgImgPath,
		openShortcut,
		isReview,
		xml,
		uxml,
		showAns,
		editorState
	];
}

class DrawingPreview extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-1tmjbvw-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				xml: 6,
				uxml: 7,
				isReview: 5,
				showAns: 8,
				editorState: 9
			},
			[-1, -1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "DrawingPreview",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*xml*/ ctx[6] === undefined && !("xml" in props)) {
			console_1.warn("<DrawingPreview> was created without expected prop 'xml'");
		}

		if (/*uxml*/ ctx[7] === undefined && !("uxml" in props)) {
			console_1.warn("<DrawingPreview> was created without expected prop 'uxml'");
		}

		if (/*isReview*/ ctx[5] === undefined && !("isReview" in props)) {
			console_1.warn("<DrawingPreview> was created without expected prop 'isReview'");
		}

		if (/*showAns*/ ctx[8] === undefined && !("showAns" in props)) {
			console_1.warn("<DrawingPreview> was created without expected prop 'showAns'");
		}

		if (/*editorState*/ ctx[9] === undefined && !("editorState" in props)) {
			console_1.warn("<DrawingPreview> was created without expected prop 'editorState'");
		}
	}

	get xml() {
		throw new Error("<DrawingPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<DrawingPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get uxml() {
		throw new Error("<DrawingPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set uxml(value) {
		throw new Error("<DrawingPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isReview() {
		throw new Error("<DrawingPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isReview(value) {
		throw new Error("<DrawingPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showAns() {
		throw new Error("<DrawingPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showAns(value) {
		throw new Error("<DrawingPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get editorState() {
		throw new Error("<DrawingPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<DrawingPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default DrawingPreview;
//# sourceMappingURL=DrawingPreview-0978e63e.js.map
