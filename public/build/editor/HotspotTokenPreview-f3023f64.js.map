{"version":3,"file":"HotspotTokenPreview-f3023f64.js","sources":["../../../clsSMHotspot/HotspotTokenPreview.svelte"],"sourcesContent":["<script>\n    import { beforeUpdate, onMount, tick } from \"svelte\";\n    import { writable } from \"svelte/store\";\n    import ItemHelper from \"../helper/ItemHelper.svelte\";\n    import { AH, onUserAnsChange, XMLToJSON } from \"../helper/HelperAI.svelte\";\n    import l from '../src/libs/editorLib/language';\n    export let xml;\n    export let editorState;\n    export let isReview;\n    export let showAns;\n    export let uxml;\n    let ansSwitch = 0;\n    let state = {};\n    let hdd = writable({\n            xml: \"\",\n            itemType: \"\",\n            cdata: \"\",\n            correctAns: \"\",\n            userAns: [],\n            itemLayout: [],\n            smController: \"h\",\n            pointerEvents: \"auto\",\n            iconVisible: \"h\",\n            isReview: false,\n    });\n    let onError = \"\";\n    const unsubs = hdd.subscribe((items)=> {\n        state = items;\n    })\n\n\n    // go in block if there is change in remediation mode\n    $:{\n        \n        if (isReview) {\n            setReview(); \n            if(editorState && ansSwitch == 0) {\n                // check tha answer\n                ansSwitch = 1;\n                checkAns();\n            }\n        } else {\n            // if review mode is off\n            ansSwitch = 0;\n            if (editorState) unsetReview();\n        }\n    }\n\n    // calls whenever there is change in props or state\n    beforeUpdate(()=> {\n        // go in block if there is change in xml\n        if (xml != state.xml) {\n            // set the state of xml to the current(changed) xml\n            state.xml = xml;\n            // reset the correct and user ans\n            resetValue();\n            // load the module\n            loadModule(xml);\n        }\n\n        // go in block if there is change in remediation mode\n        // if (isReview) {\n        //     // check tha answer\n        //     checkAns();\n        //     setReview(); \n        // } else {\n        //     // if review mode is off\n        //     if (editorState) unsetReview();\n        // }\n    })\n\n    // run just after rendering\n    onMount(()=> {\n\n        // select token press the Enter Key ADA\n        AH.listen('body', 'keydown', '.token', (_this, e)=> { \n            if (e.which === 13) {\n                _this.click();\n            }\n        });\n\n        if (window.inNative) {\n            window.getHeight && window.getHeight();\n        }\n        // //Toggle Button Color\n        // AH.bind('#sm_controller button').click(function() {\n        //     $('#sm_controller button').removeClass(\"active btn-primary text-white bg-primary\");\n        //     $(this).addClass('active btn-primary text-white bg-primary');\n        // });\n\n        // Binding set-review and unset-review with the click event\n        //For modeOn functions in prepkit\n        // $(\"#set-review\").on('click', function() {\n        //     setReview();\n        // });\n        \n        // $(\"#unset-review\").on('click', function() {\n        //     unsetReview();\n        // });\n        // binding token with enter key in case of IE\n        // if (isIE) {\n        //     AH.listen(document, \"keyup\", \".hotspot-token-preview .token\", (_this, event)=> {\n        //         if (event.which == 13) {\n        //             _this.click();\n        //         }\n        //     });\n        // }\n    });\n\n    // when review mode is on\n    function setReview() {\n        state.isReview = true;\n        state.smController = \"\";\n        state.pointerEvents = \"none\";\n        showAnswer(\"yans\", \"showIcon\");\n        //$('#sm_controller .your-ans').addClass(\"btn-light active\"); \n        AH.select(\".tokenHeader\", 'attr', {tabIndex: \"0\"});\n    }\n\n    // when review mode is off\n    function unsetReview() {\n        state.isReview = false;\n        state.smController = \"h\";\n        state.pointerEvents = \"auto\";\n        showAnswer(\"yans\", \"hideIcon\");\n        AH.select(\".tokenHeader\", 'removeAttr', 'tabindex');\n        //$('#sm_controller button').removeClass(\"active btn-primary text-white bg-primary\");\n    }\n\n    // for resetting the value\n    function resetValue() {\n        state.correctAns = [];\n        state.userAns = [];\n    }\n\n    // load the module\n    function loadModule(loadXml) {\n        // Here xml is converted into the json and pass into the parseXMLAuthoring for xml parsing\n        loadXml = XMLToJSON(loadXml);\n        parseXMLPreview(loadXml);\n    }\n\n    // parse function for the preview\n    async function parseXMLPreview(MYXML) {\n        try {\n            // split the correctAns by , & stored it in the current state \n            state.correctAns = MYXML.smxml.div._correctAns.split(\",\");\n            // set the type of module wether it is w,p or s\n            state.itemType = MYXML.smxml.div._type;\n            // set the state of cdata on the basis of xml and after that parse the xml according to its type\n            state.cdata = MYXML.smxml.div.__cdata;\n            await tick();\n            switch(MYXML.smxml.div._type) {\n                case \"w\" :\n                    // if the type is word\n                    // function for parse word\n                    parseWord(state.cdata);\n                    break;\n                case \"s\" :\n                    // if the type is sentence\n                    // function for parse sentence\n                    parseSentance(state.cdata);\n                    break;\n                case \"p\" :\n                    // if the type is paragraph\n                    // function for parse paragraph\n                    parseParagraph(state.cdata);\n                    break;\n                default :\n                    console.warn(\"No type found to parse\");\n                    break;\n            }\n            if (uxml) {\n               // parse the user ans\n               parseUserAns(uxml);\n            }\n        } catch (error) {\n            onError = error;\n            console.warn({'error':error.message,'function name':'parseXMLPreview','File name':'HotspotTokenPreview.js'});\n        }\n    }\n\n    // in case of word \n    function parseWord(str) {\n        // replace the newline with \" #newline# \"\n        str = str.replace(/\\n/g, \" #newline# \");\n        //Split the string with space and remove array which contain null value\n        let word = str.split(\" \").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\n        let wordArray = [];\n        let tempWord = [];\n        /* split punctuation mark in word and store in the tempWord array */\n        word.map((data, i)=> {\n            let special_symbol = data.match(/[.,]/g);\n            if (special_symbol) {\n                let splitText = data.split(special_symbol[0]);\n                tempWord.push(splitText[0]);\n                tempWord.push(special_symbol[0]);\n                if (splitText[1].trim()) {\n                    tempWord.push(splitText[1]);\n                }\n            } else {\n                tempWord.push(data)\n            }\n        });\n        /*end*/\n        // store id, value and selected in wordArray\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\n        tempWord.map((data, i)=> {\n            wordArray.push({\n                id: \"ID\"+i,\n                value: data,\n                selected: false,\n            });\n        });\n       state.itemLayout = wordArray;\n    }\n\n    // in case of sentence\n    function parseSentance(str) {\n        //Split the string with fullstop and remove array which contain null value\n        let sentance = str.split(\".\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\n        let sentanceArray = [];\n        // store id, value and selected in sentanceArray\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\n        sentance.map((data, i)=> {\n            sentanceArray.push({\n                id: \"ID\"+i,\n                value: data+\".\",\n                selected: false\n            });\n        });\n        state.itemLayout = sentanceArray;\n    }\n\n    // in case of paragraph\n    function parseParagraph(str) {\n        //Split the string with paragraph and remove array which contain null value\n        let paragraph = str.split(\"\\n\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\n        let paragraphArray = [];\n        // store id, value and selected in paragraphArray\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\n        paragraph.map((data, i)=> {\n            paragraphArray.push({\n                id: \"ID\"+i,\n                value: data,\n                selected: false\n            });\n        });\n        state.itemLayout = paragraphArray;\n    }\n\n    function getCorrect(id) {\n        //Return true if this id is correct answer\n        return (AH.findInArray(id, state.correctAns) ? true: false);\n    }\n\n    // for checking the answer\n    function checkAns() {\n        // used for switch on next question in prepengine if current question is attempted\n\t\tISSPECIALMODULEUSERXMLCHANGE = 1;\n        let resultLength = 0;\n        const correctLength = state.correctAns.length;\n        //Check if correct answer is equal to user answer\n        state.correctAns.map((data, i)=> {\n            state.userAns.map((data2, j)=> {\n                if (data == data2) {\n                    resultLength = resultLength + 1;\n                }\n            });\n        });\n        let ans = (correctLength == resultLength && resultLength == state.userAns.length) ? true : false;\n        onUserAnsChange({ans: ans, uXml: uxml});\n\n        showAns && showAns(ans ? \"Correct\" : \"Incorrect\");\n    }\n\n    // for stting the user answer for selected one\n    function setSelected(pos) {\n        state.itemLayout[pos].selected = !state.itemLayout[pos].selected;\n        setUserAns(pos, state.itemLayout[pos].selected);\n    }\n\n    function setUserAns(id,selected) {\n        let tempUserAns = state.userAns;\n        //Push the index in user answer array if clicked first time\n        //and delete the index from user answer if it is already selected\n        if (selected == true) {\n            // push in the userAns if it is selected\n            tempUserAns.push(\"ID\"+id);\n            state.userAns = tempUserAns;\n        } else if (selected == false) {\n            let deleteValue = tempUserAns.indexOf(\"ID\"+id);\n            if (deleteValue > -1) {\n                // delete from the user ans if it is deselected\n                tempUserAns.splice(deleteValue, 1);\n            }\n            state.userAns = tempUserAns;\n        }\n\n        // getting height in native\n        if (window.inNative) {\n            window.getHeight && window.getHeight();\n        }\n        // updating the uaXml\n        uxml = \"<smans><div userAns='\" + state.userAns.join()+\"'></div></smans>\";\n        // AH.select(\"#special_module_user_xml\", 'value', \"<smans><div userAns='\"+state.userAns.join()+\"'></div></smans>\")\n        // check for correct answer\n        checkAns();\n    }\n\n    // for showing answer\n    function showAnswer(val,iconState) {\n        //show correct incorrect icon with respect to iconState\n        state.iconVisible = (iconState == \"showIcon\") ? \"\" : \"h\";\n        //change token highlight with respect to val\n        //either to show correct answer or user answer\n        let ans = [];\n        if (val == \"cans\") {\n            // if correct ans tab\n            ans = state.correctAns;\n        } else if (val == \"yans\") {\n            // if user answer tab\n            ans = state.userAns;\n        }\n        state.itemLayout.map((data, j)=> {\n            data.selected =  AH.findInArray(data.id, ans) ? true : false;\n            //return data;\n        });\n    }\n\n    // for parsing the user ans function\n    function parseUserAns(uans) {\n        // converting the xml into the json and stored in userAnswer\n        let userAnswer = XMLToJSON(uans);\n        // cheking for the 2 elements smans,div, and one attribute of div i.e, userAns\n        if (userAnswer.smans && userAnswer.smans.div && userAnswer.smans.div._userAns) {\n            // splitting the userAns with ,\n            state.userAns = userAnswer.smans.div._userAns.split(\",\");\n            // get the selection on the basis of the user answer\n            state.itemLayout.map((data, j)=> {\n                data.selected =  AH.findInArray(data.id, state.userAns) ? true :false;\n            });\n        }\n    }\n\n    function handleReviewClick(mode, event) {\n        if (mode == 'c') {\n            showAnswer(\"cans\", \"hideIcon\");\n        } else {\n            showAnswer(\"yans\", \"showIcon\");\n        }\n    }\n</script>\n   \n{#if onError != \"\"}\n    <div class=\"alert alert-danger font-weight-bold\">\n        <span>Oops Something went wrong please check your ParseXML Function </span>\n    </div>\n{:else}\n    <div class=\"hotspot-token-preview\" tabindex=\"0\">\n        <center>\n        <ItemHelper \n            on:setReview={setReview}\n            on:unsetReview={unsetReview}\n            handleReviewClick={handleReviewClick}\n            reviewMode={state.isReview}\n        />\n        <div \n            class=\"token_highlight_heading font17 p-2 text-left\"\n            style=\"\n                max-width: 600px;\n                border-top: 2px solid #96bbf6;\n                background-color: #d9e7fd;\n            \"\n        >\n            {l.token_highlight}\n        </div>\n        <div\n            class=\"p-2\"\n            style=\"\n                max-width: 600px;\n                border: 2px solid #d9e7fd;\n                display: flow-root;\n                text-align: left;\n                justify-content: left;\n            \"\n        >\n            {#if state.itemLayout}   \n                {#each state.itemLayout as data, i }\n                    <div class=\"h\">\n                        {#if data.value.indexOf('##pt') > -1 }\n                            {data.value = data.value.replace(/##pt/g, '.')}\n                        {/if}\n                        {#if data.value.indexOf('#cm') > -1 }\n                            {data.value = data.value.replace(/#cm/g, ',')}\n                        {/if}\n                    </div>\n                    {#if data.value == \",\" || data.value == \".\"}\n                        <div class=\"float-left position-relative d-inline\" style=\"width: 1.5px; height: 1px\">\n                            <span\n                                class=\"float-left position-absolute\"\n                                style=\"left: -2.5px\"\n                            >{data.value}</span>\n                        </div>\n                    {:else if data.value == \"#newline#\"}\n                        <br/>\n                    {:else}\n                        <div key={i} class=\"tokenHeader position-relative float-left d-inline\">\n                            <span\n                                data-id={\"ID\"+i}\n                                data-correct={AH.findInArray(\"ID\"+i, state.correctAns)}\n                                on:click={setSelected.bind(this, i)}\n                                data-selected={data.selected}\n                                tabIndex={(state.pointerEvents == \"auto\") ? \"0\" : \"1\"}\n                                class=\"pointer float-left text-left font14 token {(data.selected) ? 'token_selected' : ''}\"\n                                style=\"\n                                    margin: 2px;\n                                    user-select: none;\n                                    border: 1px solid transparent;\n                                    padding: 1px 3px;\n                                    border-radius: 3px;\n                                    pointer-events: {state.pointerEvents}\n                                \"\n                            >\n                                {data.value}\n                            </span>\n                            <span\n                                class={state.iconVisible} \n                                style=\"\n                                    position: absolute;\n                                    width: 17px;\n                                    height: 17px;\n                                    right: -8px;\n                                    top: -9px;\n                                    background: white;\n                                    border-radius: 15px 12px 12px;\n                                    font-size: 18px;\n                                    z-index: 1;\n                                    display: {(state.iconVisible == \"\" && data.selected) ? 'block' : 'none'}\n                                \"\n                            >\n                                <span \n                                    class=\"position-relative {AH.findInArray(\"ID\"+i, state.correctAns) ? 'icomoon-new-24px-checkmark-circle-1': 'icomoon-new-24px-cancel-circle-1'}\" \n                                    style=\"color: {AH.findInArray(\"ID\"+i, state.correctAns) ? 'green' : 'red'}; bottom: 3px; left: 0;\" \n                                    aria-label={AH.findInArray(\"ID\"+i, state.correctAns) ? \"marked as correct\":\"marked as incorrect\"}\n                                ></span>\n                            </span>\n                        </div>\n                    {/if}\n                {/each}\n            {/if}\n        </div>\n        </center>\n    </div>\n{/if}\n<style>\n    .token:hover {\n        border: 1px solid #000!important;\n    }\n\n    :global(.bla .token:hover){\n        border: 1px solid #fff!important;\n    }\n\n    .token_selected {\n        background-color: #64bb63;\n        color: #fff;\n    }\n\n    :global(.bla .token_highlight_heading) {\n        color: #000!important;\n    }\n\n    .hotspot-token-preview br {\n        clear: both;\n    }\n</style>"],"names":["ctx","isReview","itemLayout","l","token_highlight","length","value","replace","AH","findInArray","correctAns","selected","pointerEvents","iconVisible","bind","this","indexOf","xml","editorState","showAns","uxml","ansSwitch","state","hdd","writable","itemType","cdata","userAns","smController","onError","subscribe","items","setReview","showAnswer","select","tabIndex","unsetReview","checkAns","ISSPECIALMODULEUSERXMLCHANGE","resultLength","correctLength","map","data","i","data2","j","ans","onUserAnsChange","uXml","val","iconState","id","beforeUpdate","MYXML","smxml","div","_correctAns","split","_type","__cdata","tick","str","word","item","trim","filter","arr","wordArray","tempWord","special_symbol","match","splitText","push","parseWord","sentance","sentanceArray","parseSentance","paragraph","paragraphArray","parseParagraph","console","warn","uans","userAnswer","XMLToJSON","smans","_userAns","parseUserAns","error","message","function name","File name","parseXMLPreview","onMount","listen","_this","e","which","click","window","inNative","getHeight","pos","tempUserAns","deleteValue","splice","join","setUserAns","mode","event"],"mappings":"ibA4W+BA,gBACPA,KAAMC,8BAHJD,0BACEA,YAwBXA,KAAME,wGAZVC,EAAEC,wiBAVSJ,KAAMC,oBAsBbD,KAAME,4ZACAF,KAAME,gCAAXG,yKAAKL,KAAME,mBAAXG,qIAAAA,sDAGWL,MAAKM,MAAQN,MAAKM,MAAMC,QAAQ,QAAS,iEAAzCP,MAAKM,MAAQN,MAAKM,MAAMC,QAAQ,QAAS,yDAGzCP,MAAKM,MAAQN,MAAKM,MAAMC,QAAQ,OAAQ,iEAAxCP,MAAKM,MAAQN,MAAKM,MAAMC,QAAQ,OAAQ,0FA8BpCP,MAAKM,sGAfG,KAAKN,4BACAQ,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,mCAE5BV,MAAKW,2BACc,QAAvBX,KAAMY,cAA2B,IAAM,iEACCZ,MAAKW,SAAY,iBAAmB,mLAOlEX,KAAMY,wFAqBGJ,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,sCAAuC,iDAC7FF,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,QAAU,8DACxDF,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,oBAAoB,uCAjBxEV,KAAMa,mQAWuB,IAArBb,KAAMa,aAAqBb,MAAKW,SAAY,QAAU,0DA/BnEX,qJAIQA,KAAYc,KAAKC,KAAMf,sCAahCA,MAAKM,8BAdQE,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,gDAE5BV,MAAKW,8CACc,QAAvBX,KAAMY,cAA2B,IAAM,kFACCZ,MAAKW,SAAY,iBAAmB,gEAOlEX,KAAMY,sFAqBGJ,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,sCAAuC,sEAC7FF,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,QAAU,mBACxDF,EAAGC,YAAY,KAAKT,MAAGA,KAAMU,YAAc,oBAAoB,0DAjBxEV,KAAMa,mEAWuB,IAArBb,KAAMa,aAAqBb,MAAKW,SAAY,QAAU,8MApCvEX,MAAKM,iRAALN,MAAKM,8DAZNN,MAAKM,MAAMU,QAAQ,SAAW,IAG9BhB,MAAKM,MAAMU,QAAQ,QAAU,4CAInB,KAAdhB,MAAKM,OAA8B,KAAdN,MAAKM,QAOP,aAAdN,MAAKM,8MAdNN,MAAKM,MAAMU,QAAQ,SAAW,mEAG9BhB,MAAKM,MAAMU,QAAQ,QAAU,kQAvC1C,IAAXhB,yUA5VUiB,kBACAC,eACAjB,cACAkB,WACAC,KACPC,EAAY,EACZC,KACAC,EAAMC,GACFP,IAAK,GACLQ,SAAU,GACVC,MAAO,GACPhB,WAAY,GACZiB,WACAzB,cACA0B,aAAc,IACdhB,cAAe,OACfC,YAAa,IACbZ,UAAU,IAEd4B,EAAU,GACCN,EAAIO,WAAWC,QAC1BT,EAAQS,eAmFHC,QACLV,EAAMrB,UAAW,SACjBqB,EAAMM,aAAe,UACrBN,EAAMV,cAAgB,UACtBqB,EAAW,OAAQ,YAEnBzB,EAAG0B,OAAO,eAAgB,QAASC,SAAU,eAIxCC,QACLd,EAAMrB,UAAW,SACjBqB,EAAMM,aAAe,WACrBN,EAAMV,cAAgB,UACtBqB,EAAW,OAAQ,YACnBzB,EAAG0B,OAAO,eAAgB,aAAc,qBAoInCG,IAEXC,6BAA+B,MACrBC,EAAe,QACbC,EAAgBlB,EAAMZ,WAAWL,OAEvCiB,EAAMZ,WAAW+B,MAAKC,EAAMC,KACxBrB,EAAMK,QAAQc,MAAKG,EAAOC,KAClBH,GAAQE,IACRL,GAA8B,aAItCO,EAAON,GAAiBD,GAAgBA,GAAgBjB,EAAMK,QAAQtB,OAC1E0C,GAAsBD,IAAAA,EAAKE,KAAM5B,IAEjCD,GAAWA,EAAQ2B,EAAM,UAAY,sBAsChCb,EAAWgB,EAAIC,OAEpB5B,EAAMT,YAA4B,YAAbqC,EAA2B,GAAK,WAGjDJ,KACO,QAAPG,EAEAH,EAAMxB,EAAMZ,WACE,QAAPuC,IAEPH,EAAMxB,EAAMK,SAEhBL,EAAMpB,WAAWuC,MAAKC,EAAMG,KACxBH,EAAK/B,WAAYH,EAAGC,YAAYiC,EAAKS,GAAIL,aApRjDM,QAEQnC,GAAOK,EAAML,UAEbK,EAAML,IAAMA,SA8EhBK,EAAMZ,qBACNY,EAAMK,6BAWqB0B,kBAGvB/B,EAAMZ,WAAa2C,EAAMC,MAAMC,IAAIC,YAAYC,MAAM,YAErDnC,EAAMG,SAAW4B,EAAMC,MAAMC,IAAIG,aAEjCpC,EAAMI,MAAQ2B,EAAMC,MAAMC,IAAII,iBACxBC,IACCP,EAAMC,MAAMC,IAAIG,WACd,cA8BEG,OAIXC,GAFJD,EAAMA,EAAItD,QAAQ,MAAO,gBAEVkD,MAAM,KAAKhB,KAAMsB,GAAiBA,EAAKC,SAAWC,QAASC,GAAuB,IAAPA,IACtFC,KACAC,KAEJN,EAAKrB,MAAKC,EAAMC,SACR0B,EAAiB3B,EAAK4B,MAAM,YAC5BD,OACIE,EAAY7B,EAAKe,MAAMY,EAAe,IAC1CD,EAASI,KAAKD,EAAU,IACxBH,EAASI,KAAKH,EAAe,IACzBE,EAAU,GAAGP,QACbI,EAASI,KAAKD,EAAU,SAG5BH,EAASI,KAAK9B,MAMtB0B,EAAS3B,MAAKC,EAAMC,KAChBwB,EAAUK,MACNrB,GAAI,KAAKR,EACTrC,MAAOoC,EACP/B,UAAU,WAGnBW,EAAMpB,WAAaiE,KA1DNM,CAAUnD,EAAMI,iBAEf,cA4DMmC,OAEfa,EAAWb,EAAIJ,MAAM,KAAKhB,KAAMsB,GAAiBA,EAAKC,SAAWC,QAASC,GAAuB,IAAPA,IAC1FS,KAGJD,EAASjC,MAAKC,EAAMC,KAChBgC,EAAcH,MACVrB,GAAI,KAAKR,EACTrC,MAAOoC,EAAK,IACZ/B,UAAU,WAGlBW,EAAMpB,WAAayE,KAtEPC,CAActD,EAAMI,iBAEnB,cAwEOmC,OAEhBgB,EAAYhB,EAAIJ,MAAM,MAAMhB,KAAMsB,GAAiBA,EAAKC,SAAWC,QAASC,GAAuB,IAAPA,IAC5FY,KAGJD,EAAUpC,MAAKC,EAAMC,KACjBmC,EAAeN,MACXrB,GAAI,KAAKR,EACTrC,MAAOoC,EACP/B,UAAU,WAGlBW,EAAMpB,WAAa4E,KAlFPC,CAAezD,EAAMI,qBAGrBsD,QAAQC,KAAK,0BAGjB7D,YA+JU8D,OAEdC,EAAaC,EAAUF,GAEvBC,EAAWE,OAASF,EAAWE,MAAM9B,KAAO4B,EAAWE,MAAM9B,IAAI+B,eAEjEhE,EAAMK,QAAUwD,EAAWE,MAAM9B,IAAI+B,SAAS7B,MAAM,QAEpDnC,EAAMpB,WAAWuC,MAAKC,EAAMG,KACxBH,EAAK/B,WAAYH,EAAGC,YAAYiC,EAAKS,GAAI7B,EAAMK,aAtKhD4D,CAAanE,SAEXoE,OACL3D,EAAU2D,GACVR,QAAQC,MAAMO,MAAQA,EAAMC,QAAQC,gBAAgB,kBAAkBC,YAAY,4BAvCtFC,CADUR,EAjFKnE,QAenB4E,QAGIrF,EAAGsF,OAAO,OAAQ,UAAW,WAAWC,EAAOC,KAC3B,KAAZA,EAAEC,OACFF,EAAMG,WAIVC,OAAOC,UACPD,OAAOE,WAAaF,OAAOE,4NAhD3BpG,GACA+B,IACGd,GAA4B,GAAbG,SAEdA,EAAY,GACZgB,YAIJhB,EAAY,GACRH,GAAakB,yBAyOJkE,OACjBhF,EAAMpB,WAAWoG,GAAK3F,UAAYW,EAAMpB,WAAWoG,GAAK3F,qBAIxCwC,EAAGxC,OACf4F,EAAcjF,EAAMK,WAGR,GAAZhB,EAEA4F,EAAY/B,KAAK,KAAKrB,OACtB7B,EAAMK,QAAU4E,aACG,GAAZ5F,OACH6F,EAAcD,EAAYvF,QAAQ,KAAKmC,GACvCqD,GAAe,GAEfD,EAAYE,OAAOD,EAAa,OAEpClF,EAAMK,QAAU4E,KAIhBJ,OAAOC,UACPD,OAAOE,WAAaF,OAAOE,gBAG/BjF,EAAO,wBAA0BE,EAAMK,QAAQ+E,OAAO,oBAGtDrE,IA5BAsE,CAAWL,EAAKhF,EAAMpB,WAAWoG,GAAK3F,oBAkEfiG,EAAMC,GACjB,KAARD,EACA3E,EAAW,OAAQ,YAEnBA,EAAW,OAAQ"}