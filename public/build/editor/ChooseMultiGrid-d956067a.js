
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, y as language, C as validate_each_argument, v as validate_slots, o as onMount, X as XMLToJSON, A as AH, M as JSONToXML, z as empty, n as insert_dev, x as detach_dev, e as element, f as space, j as attr_dev, k as add_location, p as append_dev, q as listen_dev, H as run_all, h as text, l as set_style, G as prop_dev, F as set_data_dev, B as noop, K as destroy_each, E as is_function } from './main-d0c8cb3a.js';

/* clsSMChooseMultiGrid\ChooseMultiGrid.svelte generated by Svelte v3.29.0 */
const file = "clsSMChooseMultiGrid\\ChooseMultiGrid.svelte";

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	child_ctx[38] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	child_ctx[38] = i;
	return child_ctx;
}

// (421:6) {:else}
function create_else_block_2(ctx) {
	let th;

	const block = {
		c: function create() {
			th = element("th");
			attr_dev(th, "class", "bg-white");
			add_location(th, file, 421, 7, 13331);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(421:6) {:else}",
		ctx
	});

	return block;
}

// (415:6) {#if i != 0}
function create_if_block_8(ctx) {
	let th;
	let div;
	let span;
	let div_id_value;
	let div_key_value;
	let t;
	let th_key_value;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[20](/*data*/ ctx[39], ...args);
	}

	const block = {
		c: function create() {
			th = element("th");
			div = element("div");
			span = element("span");
			t = space();
			attr_dev(span, "aria-hidden", "true");
			attr_dev(span, "class", "remove-item icomoon-24px-delete-1 s3 text-dark");
			add_location(span, file, 417, 9, 13190);
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "title", "Delete Column");
			attr_dev(div, "role", "button");
			attr_dev(div, "id", div_id_value = "delcol" + (/*i*/ ctx[38] - 1));
			attr_dev(div, "key", div_key_value = "delcol" + (/*i*/ ctx[38] - 1));
			add_location(div, file, 416, 8, 13012);
			attr_dev(th, "key", th_key_value = /*i*/ ctx[38] - 1);
			attr_dev(th, "class", "text-left bg-white align-middle");
			add_location(th, file, 415, 7, 12948);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, div);
			append_dev(div, span);
			append_dev(th, t);

			if (!mounted) {
				dispose = [
					listen_dev(div, "keydown", keydownAda, false, false, false),
					listen_dev(div, "click", click_handler, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(415:6) {#if i != 0}",
		ctx
	});

	return block;
}

// (414:5) {#each authoring_data.localCData1.slice(0, parseInt(state.maxcol)+1) as data, i }
function create_each_block_2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*i*/ ctx[38] != 0) return create_if_block_8;
		return create_else_block_2;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if_block.p(ctx, dirty);
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(414:5) {#each authoring_data.localCData1.slice(0, parseInt(state.maxcol)+1) as data, i }",
		ctx
	});

	return block;
}

// (435:6) {#if table_row && table_row.length > 0}
function create_if_block_2(ctx) {
	let each_1_anchor;
	let each_value_1 = /*table_row*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*table_row, editCdata, updateXML, deleteimage, openImageDialog, updateCorrect*/ 1268) {
				each_value_1 = /*table_row*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(435:6) {#if table_row && table_row.length > 0}",
		ctx
	});

	return block;
}

// (437:8) {#if data.row == i}
function create_if_block_3(ctx) {
	let td;
	let div1;
	let input;
	let input_checked_value;
	let input_name_value;
	let input_id_value;
	let input_key_value;
	let t0;
	let i;
	let t1;
	let div0;
	let span;
	let t2;
	let show_if_3 = /*data*/ ctx[39].colData.value.charAt(0) == "*" || /*data*/ ctx[39].colData.value.charAt(0) == "!" && /*data*/ ctx[39].colData.value.charAt(1) == "*";
	let div1_key_value;
	let t3;
	let show_if_2 = /*data*/ ctx[39].colData.value.indexOf("*") != 0 && /*data*/ ctx[39].colData.value.indexOf("*") != 1;
	let t4;
	let show_if_1 = /*data*/ ctx[39].colData.value.charAt(0) == "*";
	let t5;
	let show_if = /*data*/ ctx[39].colData.value.charAt(0) == "!" && /*data*/ ctx[39].colData.value.charAt(1) == "*";
	let t6;
	let td_id_value;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[22](/*data*/ ctx[39], ...args);
	}

	let if_block0 = show_if_3 && create_if_block_7(ctx);
	let if_block1 = show_if_2 && create_if_block_6(ctx);
	let if_block2 = show_if_1 && create_if_block_5(ctx);
	let if_block3 = show_if && create_if_block_4(ctx);

	const block = {
		c: function create() {
			td = element("td");
			div1 = element("div");
			input = element("input");
			t0 = space();
			i = element("i");
			t1 = space();
			div0 = element("div");
			span = element("span");
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			if (if_block3) if_block3.c();
			t6 = space();
			attr_dev(input, "tabindex", "0");
			attr_dev(input, "type", "checkbox");
			input.checked = input_checked_value = /*data*/ ctx[39].colData.value.charAt(0) == "!";
			attr_dev(input, "name", input_name_value = /*data*/ ctx[39].name);
			attr_dev(input, "id", input_id_value = /*data*/ ctx[39].name);
			attr_dev(input, "aria-label", "fix cell checkbox");
			attr_dev(input, "key", input_key_value = /*data*/ ctx[39].name);
			attr_dev(input, "class", "m-2 position-relative top1");
			attr_dev(input, "role", "button");
			add_location(input, file, 439, 11, 14118);
			attr_dev(i, "class", "icomoon-lock-sm s3 m-2 text-dark");
			add_location(i, file, 451, 11, 14566);
			attr_dev(span, "class", "icomoon-images s4");
			add_location(span, file, 453, 12, 14827);
			attr_dev(div0, "tabindex", "0");
			attr_dev(div0, "role", "button");
			attr_dev(div0, "data-bs-toggle", "tooltip");
			attr_dev(div0, "title", "Add Image");
			attr_dev(div0, "class", "edit_btn text-dark mt-1 ml-2");
			add_location(div0, file, 452, 11, 14627);
			attr_dev(div1, "key", div1_key_value = /*data*/ ctx[39].key);
			attr_dev(div1, "class", "light-cyan-bg p-2 width200 d-flex");
			add_location(div1, file, 438, 10, 14043);
			attr_dev(td, "class", "columnContainer p-0 width200");
			attr_dev(td, "id", td_id_value = /*data*/ ctx[39].id);
			add_location(td, file, 437, 9, 13976);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, div1);
			append_dev(div1, input);
			append_dev(div1, t0);
			append_dev(div1, i);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(div1, t2);
			if (if_block0) if_block0.m(div1, null);
			append_dev(td, t3);
			if (if_block1) if_block1.m(td, null);
			append_dev(td, t4);
			if (if_block2) if_block2.m(td, null);
			append_dev(td, t5);
			if (if_block3) if_block3.m(td, null);
			append_dev(td, t6);

			if (!mounted) {
				dispose = [
					listen_dev(
						input,
						"click",
						function () {
							if (is_function(/*updateCorrect*/ ctx[5].bind(this, /*data*/ ctx[39].colData.value, /*data*/ ctx[39].count))) /*updateCorrect*/ ctx[5].bind(this, /*data*/ ctx[39].colData.value, /*data*/ ctx[39].count).apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(div0, "keydown", keydownAda, false, false, false),
					listen_dev(div0, "click", click_handler_2, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*table_row*/ 4 && input_checked_value !== (input_checked_value = /*data*/ ctx[39].colData.value.charAt(0) == "!")) {
				prop_dev(input, "checked", input_checked_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_name_value !== (input_name_value = /*data*/ ctx[39].name)) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_id_value !== (input_id_value = /*data*/ ctx[39].name)) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_key_value !== (input_key_value = /*data*/ ctx[39].name)) {
				attr_dev(input, "key", input_key_value);
			}

			if (dirty[0] & /*table_row*/ 4) show_if_3 = /*data*/ ctx[39].colData.value.charAt(0) == "*" || /*data*/ ctx[39].colData.value.charAt(0) == "!" && /*data*/ ctx[39].colData.value.charAt(1) == "*";

			if (show_if_3) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_7(ctx);
					if_block0.c();
					if_block0.m(div1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*table_row*/ 4 && div1_key_value !== (div1_key_value = /*data*/ ctx[39].key)) {
				attr_dev(div1, "key", div1_key_value);
			}

			if (dirty[0] & /*table_row*/ 4) show_if_2 = /*data*/ ctx[39].colData.value.indexOf("*") != 0 && /*data*/ ctx[39].colData.value.indexOf("*") != 1;

			if (show_if_2) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_6(ctx);
					if_block1.c();
					if_block1.m(td, t4);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*table_row*/ 4) show_if_1 = /*data*/ ctx[39].colData.value.charAt(0) == "*";

			if (show_if_1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					if_block2.m(td, t5);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*table_row*/ 4) show_if = /*data*/ ctx[39].colData.value.charAt(0) == "!" && /*data*/ ctx[39].colData.value.charAt(1) == "*";

			if (show_if) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_4(ctx);
					if_block3.c();
					if_block3.m(td, t6);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty[0] & /*table_row*/ 4 && td_id_value !== (td_id_value = /*data*/ ctx[39].id)) {
				attr_dev(td, "id", td_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(437:8) {#if data.row == i}",
		ctx
	});

	return block;
}

// (456:11) {#if (data.colData.value.charAt(0) == "*") || ((data.colData.value.charAt(0) == "!") &&  (data.colData.value.charAt(1) == "*"))}
function create_if_block_7(ctx) {
	let div;
	let div_id_value;
	let mounted;
	let dispose;

	function click_handler_3(...args) {
		return /*click_handler_3*/ ctx[23](/*data*/ ctx[39], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "id", div_id_value = /*data*/ ctx[39].delbtn);
			attr_dev(div, "role", "button");
			attr_dev(div, "class", "icomoon-close-2 s3 image_delete text-dark pointer float-right ml-3 mt-2");
			add_location(div, file, 456, 12, 15040);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(div, "keydown", keydownAda, false, false, false),
					listen_dev(div, "click", click_handler_3, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*table_row*/ 4 && div_id_value !== (div_id_value = /*data*/ ctx[39].delbtn)) {
				attr_dev(div, "id", div_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(456:11) {#if (data.colData.value.charAt(0) == \\\"*\\\") || ((data.colData.value.charAt(0) == \\\"!\\\") &&  (data.colData.value.charAt(1) == \\\"*\\\"))}",
		ctx
	});

	return block;
}

// (460:10) {#if (data.colData.value.indexOf("*") != 0 && data.colData.value.indexOf("*") != 1)}
function create_if_block_6(ctx) {
	let div;
	let input;
	let input_rows_value;
	let input_id_value;
	let input_name_value;
	let input_key_value;
	let input_value_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			input = element("input");
			attr_dev(input, "type", "text");
			attr_dev(input, "multiline", "");
			attr_dev(input, "rows", input_rows_value = 2);
			attr_dev(input, "id", input_id_value = /*data*/ ctx[39].authTA);
			attr_dev(input, "name", input_name_value = /*data*/ ctx[39].authTA);
			attr_dev(input, "key", input_key_value = /*data*/ ctx[39].authTA);
			attr_dev(input, "aria-label", "Option Value");

			input.value = input_value_value = /*data*/ ctx[39].colData.value.charAt(0) == "!"
			? /*data*/ ctx[39].colData.value.slice(1)
			: /*data*/ ctx[39].colData.value;

			attr_dev(input, "class", "px-2 pb-2 form-control");
			add_location(input, file, 461, 12, 15422);
			attr_dev(div, "class", "p-2");
			add_location(div, file, 460, 11, 15391);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, input);

			if (!mounted) {
				dispose = [
					listen_dev(
						input,
						"change",
						function () {
							if (is_function(/*editCdata*/ ctx[6].bind(/*data*/ ctx[39].colData.value, /*data*/ ctx[39].count))) /*editCdata*/ ctx[6].bind(/*data*/ ctx[39].colData.value, /*data*/ ctx[39].count).apply(this, arguments);
						},
						false,
						false,
						false
					),
					listen_dev(input, "blur", /*updateXML*/ ctx[4], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*table_row*/ 4 && input_id_value !== (input_id_value = /*data*/ ctx[39].authTA)) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_name_value !== (input_name_value = /*data*/ ctx[39].authTA)) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_key_value !== (input_key_value = /*data*/ ctx[39].authTA)) {
				attr_dev(input, "key", input_key_value);
			}

			if (dirty[0] & /*table_row*/ 4 && input_value_value !== (input_value_value = /*data*/ ctx[39].colData.value.charAt(0) == "!"
			? /*data*/ ctx[39].colData.value.slice(1)
			: /*data*/ ctx[39].colData.value) && input.value !== input_value_value) {
				prop_dev(input, "value", input_value_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(460:10) {#if (data.colData.value.indexOf(\\\"*\\\") != 0 && data.colData.value.indexOf(\\\"*\\\") != 1)}",
		ctx
	});

	return block;
}

// (477:10) {#if data.colData.value.charAt(0) == "*"}
function create_if_block_5(ctx) {
	let img;
	let img_id_value;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "id", img_id_value = /*data*/ ctx[39].authTA);
			set_style(img, "height", "70px");
			set_style(img, "width", "100%");
			set_style(img, "object-fit", "contain");
			attr_dev(img, "class", "authoringImage px-2");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[39].colData.value.split("##")[0].slice(1))) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[39].colData.value.split("##")[1]
			? /*data*/ ctx[39].colData.value.split("##")[1]
			: null);

			add_location(img, file, 477, 11, 16061);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*table_row*/ 4 && img_id_value !== (img_id_value = /*data*/ ctx[39].authTA)) {
				attr_dev(img, "id", img_id_value);
			}

			if (dirty[0] & /*table_row*/ 4 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[39].colData.value.split("##")[0].slice(1))) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*table_row*/ 4 && img_alt_value !== (img_alt_value = /*data*/ ctx[39].colData.value.split("##")[1]
			? /*data*/ ctx[39].colData.value.split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(477:10) {#if data.colData.value.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (480:10) {#if (data.colData.value.charAt(0) == "!") &&  (data.colData.value.charAt(1) == "*")}
function create_if_block_4(ctx) {
	let img;
	let img_id_value;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "id", img_id_value = /*data*/ ctx[39].authTA);
			attr_dev(img, "class", "authoringImage px-2");
			set_style(img, "height", "70px");
			set_style(img, "width", "100%");
			set_style(img, "object-fit", "contain");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[39].colData.value.split("##")[0].slice(2))) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[39].colData.value.split("##")[1]
			? /*data*/ ctx[39].colData.value.split("##")[1]
			: null);

			add_location(img, file, 480, 11, 16478);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*table_row*/ 4 && img_id_value !== (img_id_value = /*data*/ ctx[39].authTA)) {
				attr_dev(img, "id", img_id_value);
			}

			if (dirty[0] & /*table_row*/ 4 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[39].colData.value.split("##")[0].slice(2))) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*table_row*/ 4 && img_alt_value !== (img_alt_value = /*data*/ ctx[39].colData.value.split("##")[1]
			? /*data*/ ctx[39].colData.value.split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(480:10) {#if (data.colData.value.charAt(0) == \\\"!\\\") &&  (data.colData.value.charAt(1) == \\\"*\\\")}",
		ctx
	});

	return block;
}

// (436:7) {#each table_row as data}
function create_each_block_1(ctx) {
	let if_block_anchor;
	let if_block = /*data*/ ctx[39].row == /*i*/ ctx[38] && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*data*/ ctx[39].row == /*i*/ ctx[38]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_3(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(436:7) {#each table_row as data}",
		ctx
	});

	return block;
}

// (428:4) {#each authoring_data.localCData1.slice(0, parseInt(state.maxrow)) as item, i}
function create_each_block(ctx) {
	let tr;
	let td;
	let span1;
	let span0;
	let span1_id_value;
	let t0;
	let t1;
	let mounted;
	let dispose;

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[21](/*i*/ ctx[38], ...args);
	}

	let if_block = /*table_row*/ ctx[2] && /*table_row*/ ctx[2].length > 0 && create_if_block_2(ctx);

	const block = {
		c: function create() {
			tr = element("tr");
			td = element("td");
			span1 = element("span");
			span0 = element("span");
			t0 = space();
			if (if_block) if_block.c();
			t1 = space();
			attr_dev(span0, "aria-hidden", "true");
			attr_dev(span0, "class", "remove-item icomoon-24px-delete-1 s3 text-dark");
			add_location(span0, file, 431, 8, 13739);
			attr_dev(span1, "tabindex", "0");
			attr_dev(span1, "title", "Delete Row");
			attr_dev(span1, "class", "pointer font18 position-relative");
			attr_dev(span1, "id", span1_id_value = "delrow" + /*i*/ ctx[38]);
			add_location(span1, file, 430, 7, 13564);
			attr_dev(td, "class", "text-center width46");
			add_location(td, file, 429, 6, 13523);
			add_location(tr, file, 428, 5, 13511);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td);
			append_dev(td, span1);
			append_dev(span1, span0);
			append_dev(tr, t0);
			if (if_block) if_block.m(tr, null);
			append_dev(tr, t1);

			if (!mounted) {
				dispose = [
					listen_dev(span1, "keydown", keydownAda, false, false, false),
					listen_dev(span1, "click", click_handler_1, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*table_row*/ ctx[2] && /*table_row*/ ctx[2].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(tr, t1);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(428:4) {#each authoring_data.localCData1.slice(0, parseInt(state.maxrow)) as item, i}",
		ctx
	});

	return block;
}

// (521:4) {:else}
function create_else_block_1(ctx) {
	let button0;
	let t1;
	let button1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button0 = element("button");
			button0.textContent = "No";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Yes";
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-light");
			attr_dev(button0, "data-bs-dismiss", "modal");
			add_location(button0, file, 521, 5, 18311);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "id", "cdata");
			attr_dev(button1, "class", "btn btn-primary");
			attr_dev(button1, "data-bs-dismiss", "modal");
			add_location(button1, file, 522, 5, 18397);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, button1, anchor);

			if (!mounted) {
				dispose = listen_dev(button1, "click", /*removeRow*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(button1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(521:4) {:else}",
		ctx
	});

	return block;
}

// (519:4) {#if state.maxrow<=2}
function create_if_block_1(ctx) {
	let button;

	const block = {
		c: function create() {
			button = element("button");
			button.textContent = "OK";
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-light");
			attr_dev(button, "data-bs-dismiss", "modal");
			add_location(button, file, 519, 5, 18212);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(519:4) {#if state.maxrow<=2}",
		ctx
	});

	return block;
}

// (547:4) {:else}
function create_else_block(ctx) {
	let button0;
	let t1;
	let button1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button0 = element("button");
			button0.textContent = "No";
			t1 = space();
			button1 = element("button");
			button1.textContent = "Yes";
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-light");
			attr_dev(button0, "data-bs-dismiss", "modal");
			add_location(button0, file, 547, 5, 19277);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "id", "cdata");
			attr_dev(button1, "class", "btn btn-primary");
			attr_dev(button1, "data-bs-dismiss", "modal");
			add_location(button1, file, 548, 5, 19363);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, button1, anchor);

			if (!mounted) {
				dispose = listen_dev(button1, "click", /*removeOption*/ ctx[14], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(button1);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(547:4) {:else}",
		ctx
	});

	return block;
}

// (545:4) {#if state.maxcol<=2}
function create_if_block(ctx) {
	let button;

	const block = {
		c: function create() {
			button = element("button");
			button.textContent = "OK";
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-light");
			attr_dev(button, "data-bs-dismiss", "modal");
			add_location(button, file, 545, 5, 19178);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(545:4) {#if state.maxcol<=2}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div5;
	let div2;
	let div1;
	let label0;
	let t1;
	let div0;
	let input0;
	let input0_value_value;
	let t2;
	let div3;
	let table;
	let thead;
	let tr;
	let t3;
	let tbody;
	let t4;
	let button0;
	let span0;
	let t5;
	let t6;
	let div4;
	let button1;
	let span1;
	let t7;
	let t8;
	let input1;
	let t9;
	let input2;
	let input2_defaultvalue_value;
	let t10;
	let div13;
	let div12;
	let div11;
	let div6;
	let h40;

	let t11_value = (/*state*/ ctx[0].maxrow <= 2
	? "Warning!"
	: "Confirmation") + "";

	let t11;
	let t12;
	let button2;
	let t14;
	let div9;
	let div8;
	let div7;
	let p0;

	let t15_value = (/*state*/ ctx[0].maxrow <= 2
	? language.row_limit
	: language.del_confirmation) + "";

	let t15;
	let t16;
	let div10;
	let t17;
	let div21;
	let div20;
	let div19;
	let div14;
	let h41;

	let t18_value = (/*state*/ ctx[0].maxcol <= 2
	? "Warning!"
	: "Confirmation") + "";

	let t18;
	let t19;
	let button3;
	let t21;
	let div17;
	let div16;
	let div15;
	let p1;

	let t22_value = (/*state*/ ctx[0].maxcol <= 2
	? language.col_limit
	: language.del_confirmation) + "";

	let t22;
	let t23;
	let div18;
	let t24;
	let div35;
	let div34;
	let div33;
	let div22;
	let h42;
	let t26;
	let button4;
	let t28;
	let div31;
	let div30;
	let div29;
	let div24;
	let div23;
	let label1;
	let t30;
	let input3;
	let t31;
	let div26;
	let div25;
	let label2;
	let t33;
	let input4;
	let t34;
	let div28;
	let button5;
	let t36;
	let div27;
	let t37;
	let div32;
	let button6;
	let t39;
	let button7;
	let mounted;
	let dispose;
	let each_value_2 = /*authoring_data*/ ctx[1].localCData1.slice(0, parseInt(/*state*/ ctx[0].maxcol) + 1);
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value = /*authoring_data*/ ctx[1].localCData1.slice(0, parseInt(/*state*/ ctx[0].maxrow));
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function select_block_type_1(ctx, dirty) {
		if (/*state*/ ctx[0].maxrow <= 2) return create_if_block_1;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_2(ctx, dirty) {
		if (/*state*/ ctx[0].maxcol <= 2) return create_if_block;
		return create_else_block;
	}

	let current_block_type_1 = select_block_type_2(ctx);
	let if_block1 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			div5 = element("div");
			div2 = element("div");
			div1 = element("div");
			label0 = element("label");
			label0.textContent = "Title";
			t1 = space();
			div0 = element("div");
			input0 = element("input");
			t2 = space();
			div3 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t3 = space();
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			button0 = element("button");
			span0 = element("span");
			t5 = text(" Add Column");
			t6 = space();
			div4 = element("div");
			button1 = element("button");
			span1 = element("span");
			t7 = text(" Add Row");
			t8 = space();
			input1 = element("input");
			t9 = space();
			input2 = element("input");
			t10 = space();
			div13 = element("div");
			div12 = element("div");
			div11 = element("div");
			div6 = element("div");
			h40 = element("h4");
			t11 = text(t11_value);
			t12 = space();
			button2 = element("button");
			button2.textContent = "×";
			t14 = space();
			div9 = element("div");
			div8 = element("div");
			div7 = element("div");
			p0 = element("p");
			t15 = text(t15_value);
			t16 = space();
			div10 = element("div");
			if_block0.c();
			t17 = space();
			div21 = element("div");
			div20 = element("div");
			div19 = element("div");
			div14 = element("div");
			h41 = element("h4");
			t18 = text(t18_value);
			t19 = space();
			button3 = element("button");
			button3.textContent = "×";
			t21 = space();
			div17 = element("div");
			div16 = element("div");
			div15 = element("div");
			p1 = element("p");
			t22 = text(t22_value);
			t23 = space();
			div18 = element("div");
			if_block1.c();
			t24 = space();
			div35 = element("div");
			div34 = element("div");
			div33 = element("div");
			div22 = element("div");
			h42 = element("h4");
			h42.textContent = "Add Image";
			t26 = space();
			button4 = element("button");
			button4.textContent = "×";
			t28 = space();
			div31 = element("div");
			div30 = element("div");
			div29 = element("div");
			div24 = element("div");
			div23 = element("div");
			label1 = element("label");
			label1.textContent = "Background Image";
			t30 = space();
			input3 = element("input");
			t31 = space();
			div26 = element("div");
			div25 = element("div");
			label2 = element("label");
			label2.textContent = "Background Alt";
			t33 = space();
			input4 = element("input");
			t34 = space();
			div28 = element("div");
			button5 = element("button");
			button5.textContent = "Upload image";
			t36 = space();
			div27 = element("div");
			t37 = space();
			div32 = element("div");
			button6 = element("button");
			button6.textContent = "Cancel";
			t39 = space();
			button7 = element("button");
			button7.textContent = "Done";
			attr_dev(label0, "for", "headingCorrect");
			attr_dev(label0, "class", "mt-2 width80 float-start font15");
			add_location(label0, file, 403, 3, 12313);
			attr_dev(input0, "id", "headingCorrect");
			attr_dev(input0, "name", "headingCorrect");
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "form-control");
			input0.value = input0_value_value = /*state*/ ctx[0].headingCorrect;
			add_location(input0, file, 405, 4, 12441);
			attr_dev(div0, "class", "width10 ml-3 float-end");
			add_location(div0, file, 404, 3, 12399);
			attr_dev(div1, "class", "form-group row mx-0 mb-1");
			add_location(div1, file, 402, 2, 12270);
			attr_dev(div2, "class", "choose_head_content bg-white text-left border-bottom px-2 pt-2 pb-2 mt-1");
			set_style(div2, "overflow-x", "'hidden'");
			add_location(div2, file, 401, 1, 12146);
			attr_dev(tr, "class", "table-head border-top");
			add_location(tr, file, 412, 4, 12796);
			add_location(thead, file, 411, 3, 12783);
			add_location(tbody, file, 426, 3, 13413);
			attr_dev(table, "class", "table relative");
			attr_dev(table, "id", "mytable");
			add_location(table, file, 410, 2, 12735);
			attr_dev(span0, "class", "icomoon-new-24px-add-circle-1 s3 mr-1");
			add_location(span0, file, 491, 3, 17057);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-sm btn-outline-primary mx-1 width109 align-items-center d-flex mb-3 add_cat_btn");
			attr_dev(button0, "id", "addColumn");
			add_location(button0, file, 490, 2, 16898);
			attr_dev(div3, "class", "choose_item_container d-flex align-items-center text-left bg-white overflow-auto m-2");
			add_location(div3, file, 409, 1, 12633);
			attr_dev(span1, "class", "icomoon-new-24px-add-circle-1 s3 mr-1 top1 position-relative");
			add_location(span1, file, 496, 3, 17311);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-sm btn-outline-primary mx-1 width94 mb-2 mt-2 pr-md");
			attr_dev(button1, "id", "addRow");
			add_location(button1, file, 495, 2, 17186);
			attr_dev(div4, "class", "text-center my-2");
			add_location(div4, file, 494, 1, 17152);
			attr_dev(input1, "id", "check");
			attr_dev(input1, "type", "hidden");
			attr_dev(input1, "class", "");
			input1.value = "";
			add_location(input1, file, 499, 1, 17432);
			attr_dev(input2, "type", "hidden");
			attr_dev(input2, "name", "special_module_xml");
			attr_dev(input2, "id", "special_module_xml");
			attr_dev(input2, "defaultvalue", input2_defaultvalue_value = /*state*/ ctx[0].xml);
			add_location(input2, file, 500, 1, 17488);
			attr_dev(div5, "id", "main");
			attr_dev(div5, "class", "pb-2 border float-none mx-auto my-0");
			set_style(div5, "min-width", "'300px', min-height: '1px'");
			add_location(div5, file, 400, 0, 12037);
			attr_dev(h40, "class", "modal-title");
			add_location(h40, file, 507, 4, 17762);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "class", "close");
			attr_dev(button2, "data-bs-dismiss", "modal");
			attr_dev(button2, "aria-hidden", "true");
			add_location(button2, file, 508, 4, 17841);
			attr_dev(div6, "class", "modal-header");
			add_location(div6, file, 506, 3, 17730);
			add_location(p0, file, 513, 6, 18050);
			attr_dev(div7, "class", "col-sm-12");
			add_location(div7, file, 512, 5, 18019);
			attr_dev(div8, "class", "row");
			add_location(div8, file, 511, 4, 17995);
			attr_dev(div9, "class", "modal-body text-center");
			add_location(div9, file, 510, 3, 17953);
			attr_dev(div10, "class", "modal-footer mt-0");
			add_location(div10, file, 517, 3, 18147);
			attr_dev(div11, "class", "modal-content");
			add_location(div11, file, 505, 2, 17698);
			attr_dev(div12, "class", "modal-dialog modal-dialog-centered");
			add_location(div12, file, 504, 1, 17646);
			attr_dev(div13, "class", "modal");
			attr_dev(div13, "id", "confirmationRowModal");
			add_location(div13, file, 503, 0, 17598);
			attr_dev(h41, "class", "modal-title");
			add_location(h41, file, 533, 4, 18728);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "class", "close");
			attr_dev(button3, "data-bs-dismiss", "modal");
			attr_dev(button3, "aria-hidden", "true");
			add_location(button3, file, 534, 4, 18807);
			attr_dev(div14, "class", "modal-header");
			add_location(div14, file, 532, 3, 18696);
			add_location(p1, file, 539, 6, 19016);
			attr_dev(div15, "class", "col-sm-12");
			add_location(div15, file, 538, 5, 18985);
			attr_dev(div16, "class", "row");
			add_location(div16, file, 537, 4, 18961);
			attr_dev(div17, "class", "modal-body text-center");
			add_location(div17, file, 536, 3, 18919);
			attr_dev(div18, "class", "modal-footer mt-0");
			add_location(div18, file, 543, 3, 19113);
			attr_dev(div19, "class", "modal-content");
			add_location(div19, file, 531, 2, 18664);
			attr_dev(div20, "class", "modal-dialog modal-dialog-centered");
			add_location(div20, file, 530, 1, 18612);
			attr_dev(div21, "class", "modal");
			attr_dev(div21, "id", "confirmationColModal");
			add_location(div21, file, 529, 0, 18564);
			attr_dev(h42, "class", "modal-title");
			add_location(h42, file, 559, 4, 19690);
			attr_dev(button4, "type", "button");
			attr_dev(button4, "class", "close");
			attr_dev(button4, "data-bs-dismiss", "modal");
			attr_dev(button4, "aria-hidden", "true");
			add_location(button4, file, 560, 4, 19734);
			attr_dev(div22, "class", "modal-header");
			add_location(div22, file, 558, 3, 19658);
			attr_dev(label1, "class", "control-label font-weight-normal mb-0");
			attr_dev(label1, "for", "MatchlistImg");
			add_location(label1, file, 567, 8, 20008);
			attr_dev(input3, "type", "text");
			attr_dev(input3, "class", "form-control form-control-md");
			attr_dev(input3, "id", "MatchlistImg");
			attr_dev(input3, "placeholder", "Image url");
			add_location(input3, file, 568, 8, 20114);
			attr_dev(div23, "class", "form-group");
			add_location(div23, file, 566, 7, 19974);
			attr_dev(div24, "class", "col-md-6 px-1");
			add_location(div24, file, 565, 6, 19938);
			attr_dev(label2, "class", "control-label font-weight-normal mb-0");
			attr_dev(label2, "for", "MatchlistAlt");
			add_location(label2, file, 573, 8, 20321);
			attr_dev(input4, "type", "text");
			attr_dev(input4, "class", "form-control form-control-md");
			attr_dev(input4, "id", "MatchlistAlt");
			attr_dev(input4, "placeholder", "Background alt text");
			add_location(input4, file, 574, 8, 20425);
			attr_dev(div25, "class", "form-group");
			add_location(div25, file, 572, 7, 20287);
			attr_dev(div26, "class", "col-md-6 px-1");
			add_location(div26, file, 571, 6, 20251);
			attr_dev(button5, "type", "button");
			attr_dev(button5, "class", "btn btn-md btn-outline-primary");
			attr_dev(button5, "id", "upload_img");
			attr_dev(button5, "name", "upload_img");
			add_location(button5, file, 578, 7, 20608);
			attr_dev(div27, "class", "upload_status");
			add_location(div27, file, 579, 7, 20758);
			attr_dev(div28, "class", "col-md-6 px-1");
			add_location(div28, file, 577, 6, 20572);
			attr_dev(div29, "class", "row mx-0");
			add_location(div29, file, 564, 5, 19908);
			attr_dev(div30, "class", "imageDialog");
			add_location(div30, file, 563, 4, 19876);
			attr_dev(div31, "class", "modal-body");
			add_location(div31, file, 562, 3, 19846);
			attr_dev(button6, "type", "button");
			attr_dev(button6, "class", "btn btn-light");
			attr_dev(button6, "data-bs-dismiss", "modal");
			add_location(button6, file, 585, 4, 20883);
			attr_dev(button7, "type", "button");
			attr_dev(button7, "id", "cdata");
			attr_dev(button7, "class", "btn btn-primary");
			attr_dev(button7, "data-bs-dismiss", "modal");
			add_location(button7, file, 586, 4, 21000);
			attr_dev(div32, "class", "modal-footer mt-0");
			add_location(div32, file, 584, 3, 20846);
			attr_dev(div33, "class", "modal-content");
			add_location(div33, file, 557, 2, 19626);
			attr_dev(div34, "class", "modal-dialog modal-dialog-centered");
			add_location(div34, file, 556, 1, 19574);
			attr_dev(div35, "class", "modal");
			attr_dev(div35, "id", "addImageModal");
			add_location(div35, file, 555, 0, 19533);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div2);
			append_dev(div2, div1);
			append_dev(div1, label0);
			append_dev(div1, t1);
			append_dev(div1, div0);
			append_dev(div0, input0);
			append_dev(div5, t2);
			append_dev(div5, div3);
			append_dev(div3, table);
			append_dev(table, thead);
			append_dev(thead, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append_dev(table, t3);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}

			append_dev(div3, t4);
			append_dev(div3, button0);
			append_dev(button0, span0);
			append_dev(button0, t5);
			append_dev(div5, t6);
			append_dev(div5, div4);
			append_dev(div4, button1);
			append_dev(button1, span1);
			append_dev(button1, t7);
			append_dev(div5, t8);
			append_dev(div5, input1);
			append_dev(div5, t9);
			append_dev(div5, input2);
			insert_dev(target, t10, anchor);
			insert_dev(target, div13, anchor);
			append_dev(div13, div12);
			append_dev(div12, div11);
			append_dev(div11, div6);
			append_dev(div6, h40);
			append_dev(h40, t11);
			append_dev(div6, t12);
			append_dev(div6, button2);
			append_dev(div11, t14);
			append_dev(div11, div9);
			append_dev(div9, div8);
			append_dev(div8, div7);
			append_dev(div7, p0);
			append_dev(p0, t15);
			append_dev(div11, t16);
			append_dev(div11, div10);
			if_block0.m(div10, null);
			insert_dev(target, t17, anchor);
			insert_dev(target, div21, anchor);
			append_dev(div21, div20);
			append_dev(div20, div19);
			append_dev(div19, div14);
			append_dev(div14, h41);
			append_dev(h41, t18);
			append_dev(div14, t19);
			append_dev(div14, button3);
			append_dev(div19, t21);
			append_dev(div19, div17);
			append_dev(div17, div16);
			append_dev(div16, div15);
			append_dev(div15, p1);
			append_dev(p1, t22);
			append_dev(div19, t23);
			append_dev(div19, div18);
			if_block1.m(div18, null);
			insert_dev(target, t24, anchor);
			insert_dev(target, div35, anchor);
			append_dev(div35, div34);
			append_dev(div34, div33);
			append_dev(div33, div22);
			append_dev(div22, h42);
			append_dev(div22, t26);
			append_dev(div22, button4);
			append_dev(div33, t28);
			append_dev(div33, div31);
			append_dev(div31, div30);
			append_dev(div30, div29);
			append_dev(div29, div24);
			append_dev(div24, div23);
			append_dev(div23, label1);
			append_dev(div23, t30);
			append_dev(div23, input3);
			append_dev(div29, t31);
			append_dev(div29, div26);
			append_dev(div26, div25);
			append_dev(div25, label2);
			append_dev(div25, t33);
			append_dev(div25, input4);
			append_dev(div29, t34);
			append_dev(div29, div28);
			append_dev(div28, button5);
			append_dev(div28, t36);
			append_dev(div28, div27);
			append_dev(div33, t37);
			append_dev(div33, div32);
			append_dev(div32, button6);
			append_dev(div32, t39);
			append_dev(div32, button7);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*updateSetting*/ ctx[3], false, false, false),
					listen_dev(input0, "blur", /*updateXML*/ ctx[4], false, false, false),
					listen_dev(button0, "click", /*addColumn*/ ctx[13], false, false, false),
					listen_dev(button1, "click", /*addRow*/ ctx[11], false, false, false),
					listen_dev(button5, "click", /*uploadImage*/ ctx[17], false, false, false),
					listen_dev(button6, "click", /*closeImageDialog*/ ctx[8], false, false, false),
					listen_dev(button7, "click", /*insertImage*/ ctx[9], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 1 && input0_value_value !== (input0_value_value = /*state*/ ctx[0].headingCorrect) && input0.value !== input0_value_value) {
				prop_dev(input0, "value", input0_value_value);
			}

			if (dirty[0] & /*openConfirmationCol, authoring_data, state*/ 65539) {
				each_value_2 = /*authoring_data*/ ctx[1].localCData1.slice(0, parseInt(/*state*/ ctx[0].maxcol) + 1);
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tr, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty[0] & /*table_row, editCdata, updateXML, deleteimage, openImageDialog, updateCorrect, openConfirmationRow, authoring_data, state*/ 34039) {
				each_value = /*authoring_data*/ ctx[1].localCData1.slice(0, parseInt(/*state*/ ctx[0].maxrow));
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty[0] & /*state*/ 1 && input2_defaultvalue_value !== (input2_defaultvalue_value = /*state*/ ctx[0].xml)) {
				attr_dev(input2, "defaultvalue", input2_defaultvalue_value);
			}

			if (dirty[0] & /*state*/ 1 && t11_value !== (t11_value = (/*state*/ ctx[0].maxrow <= 2
			? "Warning!"
			: "Confirmation") + "")) set_data_dev(t11, t11_value);

			if (dirty[0] & /*state*/ 1 && t15_value !== (t15_value = (/*state*/ ctx[0].maxrow <= 2
			? language.row_limit
			: language.del_confirmation) + "")) set_data_dev(t15, t15_value);

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div10, null);
				}
			}

			if (dirty[0] & /*state*/ 1 && t18_value !== (t18_value = (/*state*/ ctx[0].maxcol <= 2
			? "Warning!"
			: "Confirmation") + "")) set_data_dev(t18, t18_value);

			if (dirty[0] & /*state*/ 1 && t22_value !== (t22_value = (/*state*/ ctx[0].maxcol <= 2
			? language.col_limit
			: language.del_confirmation) + "")) set_data_dev(t22, t22_value);

			if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div18, null);
				}
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t10);
			if (detaching) detach_dev(div13);
			if_block0.d();
			if (detaching) detach_dev(t17);
			if (detaching) detach_dev(div21);
			if_block1.d();
			if (detaching) detach_dev(t24);
			if (detaching) detach_dev(div35);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function keydownAda(event) {
	if (event.which === 13) {
		// click the icons or image upload icon on which keydown
		this.click();
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ChooseMultiGrid", slots, []);

	let state = {
		xml: "",
		headingCorrect: "",
		CDATA: "",
		maxrow: 0,
		maxcol: 0,
		openImageDialog: false,
		imageClass: "",
		delid: "",
		imgVal: "",
		altVal: ""
	};

	let authoring_data = { localCData1: [], rowindex: [] };
	let { xml } = $$props;
	let { getChildXml } = $$props;
	let cols, counter, counter1, count, table_row;

	onMount(() => {
		$$invalidate(0, state.xml = xml, state);
		loadModule(xml);
	});

	// loads the module and update the xml
	function loadModule(loadXml) {
		// contains the json data of xml
		loadXml = XMLToJSON(loadXml);

		$$invalidate(0, state.headingCorrect = loadXml.smxml.list._headingCorrect, state);
		$$invalidate(0, state.maxrow = loadXml.smxml.list._row, state);
		$$invalidate(0, state.maxcol = loadXml.smxml.list._col, state);

		// parses the xml and updates the elements value
		parseXMLAuthoring(loadXml);
	}

	// parses the xml and updates the values of elements
	function parseXMLAuthoring(MYXML) {
		$$invalidate(1, authoring_data.localCData1 = [], authoring_data);
		let cdata = MYXML.smxml.list.__cdata.split("\n");

		for (let i in cdata) {
			if (cdata[i].trim() != "") {
				dataToPush(cdata[i], i);
			} else {
				let istobepushed = false;

				for (let j = i; j < cdata.length; j++) {
					if (cdata[j].trim() == "" && j != cdata.length - 1) {
						istobepushed = false;
					} else {
						istobepushed = true;
						break;
					}
				}

				if (istobepushed == true) {
					dataToPush(cdata[i], i);
				}
			}
		}

		storeCorrectXYValue(authoring_data.localCData1);
		storeIndexValue(authoring_data.localCData1);
		$$invalidate(0, state.headingCorrect = MYXML.smxml.list._headingCorrect, state);
	}

	// add values in the array
	function dataToPush(value, index) {
		authoring_data.localCData1.push({
			value: value.replace(/^\s+/g, ""),
			colval: "",
			rowval: "",
			mainseq: "",
			x: 0,
			y: 0,
			id: index
		});
	}

	//to update multigrid table heading
	function updateSetting(e) {
		let xml = XMLToJSON(state.xml);

		switch (e.target.id) {
			case "headingCorrect":
				{
					$$invalidate(0, state.headingCorrect = e.target.value, state);
					xml.smxml.list._headingCorrect = e.target.value;
					break;
				}
		}

		$$invalidate(0, state.xml = JSONToXML(xml), state);
	}

	//to update xml
	function updateXML() {
		let xml = XMLToJSON(state.xml);

		setTimeout(
			function () {
				let newCData = "";

				authoring_data.localCData1.forEach(function (localCDataVal, i) {
					i < authoring_data.localCData1.length - 1
					? newCData += localCDataVal.value + "\n"
					: newCData += localCDataVal.value;
				});

				xml.smxml.list.__cdata = newCData;
				getChildXml(JSONToXML(xml));
			},
			200
		);
	}

	//to update fixed box via checkbox
	function updateCorrect(data, index_no, event) {
		$$invalidate(
			1,
			authoring_data.localCData1[index_no].value = event.target.checked == true && authoring_data.localCData1[index_no].value.trim().charAt(0) != "!"
			? "!" + authoring_data.localCData1[index_no].value.trim()
			: authoring_data.localCData1[index_no].value.trim().slice(1),
			authoring_data
		);

		updateXML();
	}

	//to edit values in multigrid table
	function editCdata(i, e) {
		$$invalidate(
			1,
			authoring_data.localCData1[i].value = authoring_data.localCData1[i].value.charAt(0) == "!"
			? "!" + e.target.value.replace(/\n/gm, "")
			: e.target.value.replace(/\n/gm, ""),
			authoring_data
		);
	}

	//to store correct x y value
	function storeCorrectXYValue(layout) {
		let temporary = 0, counter_new = 0;

		for (let i = 0; i < layout.length; i++) {
			if (temporary == state.maxcol) {
				temporary = 0;
				counter_new = counter_new + 3;
			}

			layout[i].x = temporary;
			layout[i].y = counter_new;
			temporary++;
		}
	}

	//to set index value in array
	function storeIndexValue(array) {
		let k = 1, j = 1, count = 1, ref = 0;
		$$invalidate(1, authoring_data.rowindex = [], authoring_data);

		for (let i = 0; i < array.length; i++) {
			array[i].colval = j;
			array[i].rowval = k;
			array[i].ischecked = false;
			array[i].mainseq = k + "-" + j;
			j++;

			if (count == state.maxcol) {
				authoring_data.rowindex.push({ ["row" + k]: [] });

				for (let l = ref; l <= i; l++) {
					authoring_data.rowindex[k - 1]["row" + k].push(l);
				}

				ref = i + 1;
				j = 1;
				k++;
				count = 0;
			}

			count++;
		}

		return array;
	}

	//to open upload image dialog
	function openImageDialog(class_name) {
		$$invalidate(0, state.openImageDialog = true, state);
		$$invalidate(0, state.imageClass = class_name, state);
		let timer;

		if (state.imgVal || state.altVal) {
			timer ? clearTimeout(timer) : null;

			timer = setTimeout(
				function () {
					clearTimeout(timer);
					AH.select("#MatchlistImg").value = state.imgVal;
					AH.select("#MatchlistAlt").value = state.altVal;
				},
				200
			);
		}

		AH.getBS(AI.select("#addImageModal"), "Modal").show();
	}

	//close upload image dialog
	function closeImageDialog() {
		$$invalidate(0, state.openImageDialog = false, state);
	}

	//to insert image in multigrid table
	function insertImage() {
		let image = {};
		image.name = AH.select("#MatchlistImg").value;
		image.alt = AH.select("#MatchlistAlt").value;
		let id = state.imageClass.substr(6, state.imageClass.length);
		$$invalidate(0, state.imgVal = AH.select("#MatchlistImg").value, state);
		$$invalidate(0, state.altVal = AH.select("#MatchlistAlt").value, state);
		image.oldValue = AH.select("#" + state.imageClass).value;

		if (image.name != "") {
			$$invalidate(0, state.openImageDialog = false, state);
		} else {
			AH.alert(language.validate_dialog, 4, true);
			return;
		}

		if (authoring_data.localCData1[id].value.charAt(0) == "!") {
			image.newValue = "!*" + image.name + "##" + image.alt;
		} else {
			image.newValue = "*" + image.name + "##" + image.alt;
		}

		setTimeout(
			() => {
				$$invalidate(1, authoring_data.localCData1[id].value = image.newValue, authoring_data);
			},
			50
		);

		let xml = XMLToJSON(state.xml);

		setTimeout(
			function () {
				let newCData = "";

				authoring_data.localCData1.forEach(function (localCDataValue, i) {
					i < authoring_data.localCData1.length - 1
					? newCData += localCDataValue.value + "\n"
					: newCData += localCDataValue.value;
				});

				xml.smxml.list.__cdata = newCData;
				getChildXml(JSONToXML(xml));
			},
			200
		);
	}

	//to delete image
	function deleteimage(id) {
		let oldImage = authoring_data.localCData1[id].value;

		let newValue = oldImage.charAt(0) == "!"
		? "!Option value"
		: "Option value";

		setTimeout(
			() => {
				$$invalidate(1, authoring_data.localCData1[id].value = newValue, authoring_data);
			},
			50
		);

		let xml = XMLToJSON(state.xml);

		setTimeout(
			function () {
				let newCData = "";

				authoring_data.localCData1.forEach(function (localCDataValue, i) {
					i < authoring_data.localCData1.length - 1
					? newCData += localCDataValue.value + "\n"
					: newCData += localCDataValue.value;
				});

				xml.smxml.list.__cdata = newCData;
				getChildXml(JSONToXML(xml));
			},
			200
		);
	}

	//to manipulate row col to get desired value
	function manipulateRowCol(roworcol, bool) {
		let xml = XMLToJSON(state.xml);

		setTimeout(
			function () {
				let newCData = "";

				authoring_data.localCData1.forEach(function (localCDataValue, i) {
					i < authoring_data.localCData1.length - 1
					? newCData += localCDataValue.value + "\n"
					: newCData += localCDataValue.value;
				});

				roworcol == "row"
				? xml.smxml.list._row = bool == true
					? (parseInt(xml.smxml.list._row) + 1).toString()
					: (parseInt(xml.smxml.list._row) - 1).toString()
				: xml.smxml.list._col = bool == true
					? (parseInt(xml.smxml.list._col) + 1).toString()
					: (parseInt(xml.smxml.list._col) - 1).toString();

				xml.smxml.list.__cdata = newCData;
				$$invalidate(0, state.xml = JSONToXML(xml), state);
				getChildXml(state.xml);
			},
			200
		);
	}

	//add new row to the multigrid table
	function addRow() {
		if (state.maxrow <= 9) {
			addRowAfterPassedLimitCriteria();
		} else {
			AH.alert("Maximum possible value of rows are 10.");
		}
	}

	// to add row if condition satisfied
	function addRowAfterPassedLimitCriteria() {
		$$invalidate(0, state.maxrow = parseInt(state.maxrow) + 1, state);

		setTimeout(
			() => {
				for (let index_no = authoring_data.localCData1.length; index_no < parseInt(state.maxrow) * parseInt(state.maxcol); index_no += 1) {
					authoring_data.localCData1.push({
						value: "Option value" + index_no,
						colval: "",
						rowval: "",
						mainseq: "",
						x: 0,
						y: 0,
						id: index_no
					});
				}

				storeCorrectXYValue(authoring_data.localCData1);
				storeIndexValue(authoring_data.localCData1);
			},
			50
		);

		manipulateRowCol("row", true);
	}

	//to remove row from multigrid table
	function removeRow() {
		if (state.maxrow > 2) {
			$$invalidate(0, state.maxrow = parseInt(state.maxrow) - 1, state);
			let array = [];
			storeCorrectXYValue(authoring_data.localCData1);

			setTimeout(
				() => {
					for (var i = parseInt(state.maxcol) - 1; i >= 0; i--) {
						array = authoring_data.localCData1.splice(authoring_data.rowindex[state.delid]["row" + (state.delid + 1)][i], 1);
					}
				},
				50
			);

			manipulateRowCol("row", false);
		} else {
			alert(language.row_limit);
		}
	}

	// to add col if condition satisfied
	function addColumn() {
		if (state.maxcol <= 4) {
			addColumnAfterPassedLimitCriteria();
		} else {
			AH.alert("Maximum possible value of columns are 5.");
		}
	}

	// to add col if condition satisfied
	function addColumnAfterPassedLimitCriteria() {
		$$invalidate(0, state.maxcol = parseInt(state.maxcol) + 1, state);

		setTimeout(
			() => {
				let indexNum = state.maxcol - 1;
				let originalColLength = state.maxcol - 1;

				for (let index_no = authoring_data.localCData1.length; index_no < parseInt(state.maxrow) * parseInt(state.maxcol); index_no += 1) {
					authoring_data.localCData1.splice(indexNum, 0, {
						value: "Option value" + index_no,
						colval: "",
						rowval: "",
						mainseq: "",
						x: 0,
						y: 0,
						id: index_no
					});

					indexNum = indexNum + originalColLength + 1;
				}

				storeCorrectXYValue(authoring_data.localCData1);
				storeIndexValue(authoring_data.localCData1);
			},
			50
		);

		manipulateRowCol("col", true);
	}

	//to remove row from multigrid table
	function removeOption() {
		let array = [];
		$$invalidate(0, state.maxcol = parseInt(state.maxcol) - 1, state);
		storeCorrectXYValue(authoring_data.localCData1);

		setTimeout(
			() => {
				for (let i = parseInt(state.maxrow) - 1; i >= 0; i--) {
					array = authoring_data.localCData1.splice(authoring_data.rowindex[i]["row" + (i + 1)][state.delid], 1);
				}
			},
			50
		);

		manipulateRowCol("col", false);
	}

	function openConfirmationRow(id) {
		$$invalidate(0, state.delid = id, state);
		AH.getBS(AI.select("#confirmationRowModal"), "Modal").show();
	}

	function openConfirmationCol(id) {
		$$invalidate(0, state.delid = id, state);
		AH.getBS(AI.select("#confirmationColModal"), "Modal").show();
	}

	//to open upload image modal
	function uploadImage() {
		AH.getBS(AI.select("#modal-media-upload"), "Modal").show();
	}

	const writable_props = ["xml", "getChildXml"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<ChooseMultiGrid> was created with unknown prop '${key}'`);
	});

	const click_handler = data => {
		openConfirmationCol(data.id - 1);
	};

	const click_handler_1 = i => {
		openConfirmationRow(i);
	};

	const click_handler_2 = data => {
		openImageDialog(data.authTA);
	};

	const click_handler_3 = data => {
		deleteimage(data.count);
	};

	$$self.$$set = $$props => {
		if ("xml" in $$props) $$invalidate(18, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(19, getChildXml = $$props.getChildXml);
	};

	$$self.$capture_state = () => ({
		onMount,
		l: language,
		XMLToJSON,
		AH,
		JSONToXML,
		state,
		authoring_data,
		xml,
		getChildXml,
		cols,
		counter,
		counter1,
		count,
		table_row,
		loadModule,
		parseXMLAuthoring,
		dataToPush,
		updateSetting,
		updateXML,
		updateCorrect,
		editCdata,
		storeCorrectXYValue,
		storeIndexValue,
		openImageDialog,
		closeImageDialog,
		insertImage,
		deleteimage,
		manipulateRowCol,
		addRow,
		addRowAfterPassedLimitCriteria,
		removeRow,
		addColumn,
		addColumnAfterPassedLimitCriteria,
		removeOption,
		openConfirmationRow,
		openConfirmationCol,
		uploadImage,
		keydownAda
	});

	$$self.$inject_state = $$props => {
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
		if ("authoring_data" in $$props) $$invalidate(1, authoring_data = $$props.authoring_data);
		if ("xml" in $$props) $$invalidate(18, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(19, getChildXml = $$props.getChildXml);
		if ("cols" in $$props) $$invalidate(24, cols = $$props.cols);
		if ("counter" in $$props) $$invalidate(25, counter = $$props.counter);
		if ("counter1" in $$props) $$invalidate(26, counter1 = $$props.counter1);
		if ("count" in $$props) $$invalidate(27, count = $$props.count);
		if ("table_row" in $$props) $$invalidate(2, table_row = $$props.table_row);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*state, cols, authoring_data, counter, counter1, count, table_row*/ 251658247) {
			 {
				$$invalidate(27, count = 0);
				$$invalidate(25, counter = 0);
				$$invalidate(24, cols = parseInt(state.maxcol));
				$$invalidate(26, counter1 = cols);
				$$invalidate(2, table_row = []);

				authoring_data.localCData1.slice(0, parseInt(state.maxrow)).map(function (data, index) {
					authoring_data.localCData1.slice(counter, counter1).map(value => {
						$$invalidate(27, count++, count);

						$$invalidate(2, table_row = [
							...table_row,
							{
								id: "td" + (count - 1),
								key: "heading" + (count - 1),
								name: "authcheck" + (count - 1),
								delbtn: "delbtn" + (count - 1),
								count: count - 1,
								authTA: "authTA" + (count - 1),
								colData: value,
								row: index
							}
						]);
					});

					$$invalidate(25, counter = counter1);
					$$invalidate(26, counter1 = counter1 + cols);
				});
			}
		}
	};

	return [
		state,
		authoring_data,
		table_row,
		updateSetting,
		updateXML,
		updateCorrect,
		editCdata,
		openImageDialog,
		closeImageDialog,
		insertImage,
		deleteimage,
		addRow,
		removeRow,
		addColumn,
		removeOption,
		openConfirmationRow,
		openConfirmationCol,
		uploadImage,
		xml,
		getChildXml,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3
	];
}

class ChooseMultiGrid extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { xml: 18, getChildXml: 19 }, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ChooseMultiGrid",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*xml*/ ctx[18] === undefined && !("xml" in props)) {
			console.warn("<ChooseMultiGrid> was created without expected prop 'xml'");
		}

		if (/*getChildXml*/ ctx[19] === undefined && !("getChildXml" in props)) {
			console.warn("<ChooseMultiGrid> was created without expected prop 'getChildXml'");
		}
	}

	get xml() {
		throw new Error("<ChooseMultiGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<ChooseMultiGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getChildXml() {
		throw new Error("<ChooseMultiGrid>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<ChooseMultiGrid>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ChooseMultiGrid;
//# sourceMappingURL=ChooseMultiGrid-d956067a.js.map
