{"version":3,"file":"AudioPreview-209ab0fa.js","sources":["../../../clsSMAudioRecorder/AudioPreview.svelte"],"sourcesContent":["<!--\r\n *  File Name   : AudioPreview.svelte\r\n *  Description : Container for all AudioRecorder Preview Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 01-Dec-21\r\n *  Last Updated By : Sundaram Tripathi\r\n-->\r\n<script>\r\n    import { onMount, afterUpdate } from \"svelte\";\r\n    import { XMLToJSON, AH, onUserAnsChange} from '../helper/HelperAI.svelte';\r\n    import ItemHelper from '../helper/ItemHelper.svelte';\r\n    import l from '../src/libs/editorLib/language.js';\r\n    import \"./css/AudioStyle.min.css\";\r\n    export let xml;\r\n    export let uxml;\r\n    export let showAns;\r\n    export let isReview;\r\n    export let editorState;\r\n    let customIsReview = isReview;\r\n    let recognition;\r\n    let synth;\r\n    let previewResetClicked = 'no';\r\n    let areaLabelForPreviewStopButton = \"Play Audio\";\r\n    let areaLabelForPreviewModalContent;\r\n    let areaLabelForPreviewRecordButton = \"Start Recording\";\r\n    let previewTimeForRecording = 15;\r\n    let previewManageTimer;\r\n    let state = {\r\n        disabled: true,\r\n        cdata: '',\r\n        language: '',\r\n        correctAns: '',\r\n        xml: '',\r\n        status: '',\r\n        pointerEvents: \"auto\",\r\n        isReset: true,\r\n        showTranscript: false,\r\n        counter: 0,\r\n    }\r\n\r\n    // Called once throughout the programm execution\r\n    onMount(() => {\r\n\r\n\r\n        ///////////////  For ADA //////////////\r\n        AH.listen('#controls_container','keydown','#preview_recordButton',function(_this,e){\r\n            if(e.which === 13) {\r\n                AH.select(\"#preview_recordButton\").click();\r\n               // startRecording();\r\n            }\r\n        })\r\n\r\n        ////// ADA for close dialogbox with close icon /////\r\n        AH.listen(\".preview_modal_container #preview_confirm_modal\",\"keydown\",\".close\",function(_this,e){\r\n            if(e.which === 13) {\r\n                AI.find('.preview_modal_container #preview_confirm_modal','.close').click()\r\n            }\r\n        })\r\n        ////// ADA for close dialogbox with close button /////\r\n        AH.listen(\".preview_modal_container #preview_confirm_modal\",\"keydown\",\".preview_dismiss_modal\",function(_this,e){\r\n            if(e.which === 13) {\r\n                AI.find('.preview_modal_container #preview_confirm_modal','.preview_dismiss_modal').click();\r\n            }\r\n        })\r\n        ////// ADA for override voice /////////\r\n        AH.listen(\".preview_modal_container #preview_confirm_modal\",\"keydown\",\"#StopRecord\",function(_this,e){\r\n            if(e.which === 13) {\r\n                AH.select(\"#StopRecord\").click()\r\n            }\r\n        })\r\n\r\n        // AH.listen(\"#controls_container\",\"keydown\",\"#preview_recordButton\",function() {\r\n        //     if(e.which === 13) {\r\n        //         startRecording();\r\n        //     }\r\n        // })\r\n\r\n        ///// ADA for stop and play button ////\r\n        AH.listen('#controls_container','keydown','#preview_stopButton',function(_this,e){\r\n            if(e.which === 13) {\r\n                playRecording();\r\n                AH.find('#controls_container','#preview_stopButton').style.disabled = state.disabled;\r\n            }\r\n        })\r\n\r\n        //// ADA for reset/////\r\n        AH.listen('#controls_container','keydown','#resetButton',function(_this,e){\r\n            if(e.which === 13) {\r\n                AI.select(\"#resetButton\").click();\r\n                //setData();\r\n            }\r\n        })\r\n\r\n\r\n      \r\n\r\n\r\n        if (!(window.webkitSpeechRecognition || window.SpeechRecognition)) {\r\n            // shows the warning message that your browser does not support the speechRecognition\r\n            AH.alert(l.browser_support_msg);\r\n        }\r\n        if (xml != state.xml) {\r\n            // sets the state xml\r\n            state.xml = xml;\r\n            /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\r\n            resetValue();\r\n            // load the module according to the value of xml\r\n            loadModule(xml);\r\n        }\r\n    })\r\n\r\n    // Called every time when any state gets changed\r\n    $: {\r\n        loadModule(xml);\r\n\t\tif (isReview) {\r\n            setReview();\r\n\t\t} else {\r\n            unsetReview();\r\n        }\r\n\t}\r\n\r\n    // load the module according to the value of xml\r\n    function loadModule(loadXml) {\r\n        // contains json data of xml\r\n        let newXml = XMLToJSON(loadXml);\r\n        // parses the xml data and update the xml\r\n        parseXMLPreview(newXml);\r\n    }\r\n\r\n    // parses the xml data and update the xml\r\n    function parseXMLPreview(MYXML) {\r\n        try {\r\n            // used to set the value of the state language from the value of language key of xml json\r\n            state.language = MYXML.smxml._language,\r\n            // used to set the value of the state cdata from the value of cdata key of xml json\r\n            state.correctAns = MYXML.smxml.__cdata,\r\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\r\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\r\n            if (uxml) {\r\n                // parses the user answer xml and update the xml\r\n                parseUserAns(uxml);\r\n            }\r\n        } catch(event) {\r\n            console.warn({\r\n                'error': event.message,\r\n                'function name': 'parseXMLPreview',\r\n                'File name': 'AudioPreview.svelte'\r\n            });\r\n        }\r\n    }\r\n\r\n    // parses the user answer xml and update the xml\r\n    function parseUserAns(userAns) {\r\n        // contains json data of user answer xml\r\n        let MYXML = XMLToJSON(userAns);\r\n        // used to set the value of the state language from the value of language key of the user answer xml json\r\n        state.language = MYXML.smans._language;\r\n        // used to set the value of the state cdata from the value of cdata key of the user answer xml json\r\n        state.cdata = MYXML.smans.__cdata;\r\n        // used to set the value of the state status from the value of status key of the user answer xml json\r\n        state.status = MYXML.smans._status;\r\n        // used to sets the value of the state disabled to false if the value of 'status' key of the user answer xml json is 'recordingStopped' otherwise 'true'\r\n        state.disabled = ((MYXML.smans._status == 'recordingStopped') ? false: true);\r\n        // used to set the value of the state isReset from the value of isReset key of user answer xml json\r\n        state.isReset = ((MYXML.smans._isReset == 'true') ? true: false);\r\n        // used to set the value of the state showTranscript from the value of showTranscript key of the user answer xml json\r\n        state.showTranscript = ((MYXML.smans._showTranscript == 'true') ? true: false);\r\n    }\r\n\r\n    /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\r\n    function resetValue() {\r\n        state.disabled = true;\r\n        state.cdata = '';\r\n        state.xml = '';\r\n        state.status = '';\r\n        state.isReset = true;\r\n    }\r\n\r\n    // reset the previous recorded data\r\n    function manageData() {\r\n        // when reset modalbox open after click on reset button\r\n        if (previewResetClicked == 'yes') {\r\n            // reset the previously recorded data\r\n            resetAudioData();\r\n            previewResetClicked = 'no';\r\n        } else {\r\n            // when reset modalbox open after click on record button\r\n            state.cdata = '',\r\n            state.disabled = true,\r\n            state.status = '',\r\n            state.pauseRecording = ''\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n            let manage_data_timer = setTimeout(function() {\r\n                // called for start the recording\r\n                startRecording();\r\n                // clear the timeout\r\n                clearTimeout(manage_data_timer);\r\n            }, 120);\r\n        }\r\n    }\r\n\r\n    // disabled the reset and play button and blanks the value of cdata and xml of state\r\n    function resetAudioData() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        if (state.status == 'recording') {\r\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n            recognition.stop();\r\n        }\r\n        state.cdata = '';\r\n        state.disabled = true;\r\n        state.xml = '';\r\n        state.status = '';\r\n        state.isReset = true;\r\n        // clears the timeout which is started when recording stared\r\n        clearTimeout(previewManageTimer);\r\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n        previewCheckState();\r\n    }\r\n\r\n    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n    function previewCheckState() {\r\n        setTimeout(function() {\r\n            let uXml = '<smans type=\"43\" name=\"AudioRecorder\" disabled=\"' + state.disabled + '\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><![CDATA[' + state.cdata + ']]></smans>';\r\n            AH.select(\"#special_module_user_xml\").value = uXml;\r\n            ISSPECIALMODULEUSERXMLCHANGE = 1;\r\n            // stores user answer xml data in uaXML variable of window object to access it globally\r\n            uxml = AH.select(\"#special_module_user_xml\").value;\r\n            // used for screen reader to read the message when user reached on play button\r\n            areaLabelForPreviewStopButton = AH.select('#stopButtonTooltip').getAttribute('title');\r\n            // used for screen reader to read the message when user reached on record button\r\n            areaLabelForPreviewRecordButton = AH.select('#recordButtonTooltip').getAttribute('title');\r\n            // used for screen reader to read the message when user open the reset modalbox\r\n            areaLabelForPreviewModalContent = AH.select('#previewDialogBody').innerText;\r\n            if (state.correctAns.trim() != '') {\r\n                // check the answer\r\n                checkAns();\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    // stops capturing incoming audio\r\n    function stopRecording() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        clearTimeout(previewManageTimer);\r\n        state.status = 'recordingStopped';\r\n        state.disabled = false;\r\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n        previewCheckState();\r\n        // hides recording gif\r\n        AH.selectAll('.previewRecordingOn', 'addClass', 'h');\r\n        // shows the initial state image\r\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n        recognition.stop();\r\n    }\r\n\r\n    // ends recording after 15 sec\r\n    function previewManageTime() {\r\n        previewTimeForRecording = previewTimeForRecording - 1;\r\n        state.counter = state.counter + 1;\r\n        previewManageTimer = setTimeout(function() {\r\n            if (previewTimeForRecording > 0) {\r\n                // calls again the method previewManageTime for counting the second value\r\n                previewManageTime();\r\n            } else {\r\n                // stops the recording\r\n                stopRecording();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \r\n    function dictate() {\r\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n        isSpeechRecognitionSupported();\r\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\r\n        recognition.start();\r\n        // enables reset button\r\n        AH.select('#preview_container #resetButton').disabled = false;\r\n        // hides the initial state image of the audio container and play gif\r\n        AH.selectAll('.previewAudioPlaying, .previewInitialState', 'addClass', 'h');\r\n        // shows recording gif\r\n        AH.selectAll('.previewRecordingOn', 'removeClass', 'h');\r\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\r\n        recognition.onresult = (event) => {\r\n            let speechToText = '';\r\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\r\n                speechToText += event.results[index_no][0].transcript;\r\n            }\r\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\r\n            state.cdata = speechToText.trim();\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n        }\r\n    }\r\n\r\n    // handles with gif of recording and play and icon of record button\r\n    function manageStopStatus() {\r\n        // hides the gif of recording and playing\r\n        AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\r\n        // shows the initial state image of the audio container\r\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n        // removes the stop icon from recording button and adds start recording icon\r\n        AH.selectAll('#preview_recordButton span', 'removeClass', 'icomoon-24px-stop');\r\n        AH.selectAll('#preview_recordButton span', 'addClass', ['icomoon-circle-2', 'text-danger']);\r\n    }\r\n\r\n    // speak the text after defining some properties value and adding event\r\n    function isSpeechSynthesisSupported() {\r\n        // Returns a new SpeechSynthesisUtterance object instance\r\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\r\n        // array of available voices\r\n        let voiceForSpeech = synth.getVoices();\r\n        // sets the voice name according to the value of language state\r\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\r\n        // event listener fired when the utterance has finished being spoken.\r\n        utterThis.addEventListener('end', function() {\r\n            // hides the gif of recording and play\r\n            AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\r\n            // shows the initial state image of the audio container\r\n            AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n            // enables the play button\r\n            state.disabled = false;\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n            // removes all utterances from the utterance queue.\r\n            synth.cancel();\r\n        });\r\n        for (let index_no = 0; index_no < voiceForSpeech.length; index_no = index_no + 1) {\r\n            if (voiceForSpeech[index_no].name == voice_name) {\r\n                //  sets the voice that will be used to speak the utterance.\r\n                utterThis.voice = voiceForSpeech[index_no];\r\n                // sets the pitch at which the utterance will be spoken at.\r\n                utterThis.pitch = 1;\r\n                // sets the speed at which the utterance will be spoken at.\r\n                utterThis.rate = 1;\r\n                // sets the language of the utterance\r\n                utterThis.lang = state.language;\r\n                // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\r\n                synth.speak(utterThis);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // starts the recording\r\n    function startRecording() {\r\n        switch(state.status) {\r\n            case 'recording':\r\n                // stops the recording when stop recording button clicked\r\n                stopRecording();\r\n                break;\r\n            case 'recordingStopped':\r\n                // for show the reset modalbox when start recording button clicked and recording is done previously\r\n                AH.getBS('#preview_confirm_modal','Modal').show();\r\n                // focus on reset modalbox for screen reader purpose\r\n                AH.select('.modal-body').focus();\r\n                break;\r\n            default:\r\n                dictate();\r\n                state.status = 'recording',\r\n                state.isReset = false,\r\n                // used for count the second after recording start\r\n                state.counter = 0;\r\n                // used for automatically end the recording after 15 sec\r\n                previewTimeForRecording = 15;\r\n                // ends recording after 15 sec\r\n                previewManageTime();\r\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                previewCheckState();\r\n                // adds the stop recording icon to record button\r\n                AH.selectAll('#preview_recordButton span', 'removeClass', ['icomoon-circle-2', 'text-danger']);\r\n                AH.selectAll('#preview_recordButton span', 'addClass', 'icomoon-24px-stop');\r\n        }\r\n    }\r\n\r\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n    function isSpeechRecognitionSupported() {\r\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\r\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\n            // creates new recognition object\r\n            recognition = new SpeechRecognition();\r\n            //Controls whether continuous results are returned for each recognition\r\n            recognition.continuous = true;\r\n            // returns interim results \r\n            recognition.interimResults = true;\r\n            //  sets the language of the current SpeechRecognition\r\n            recognition.lang = state.language;\r\n            // used for globally access the recogniton \r\n            window.recognitionData = recognition;\r\n            recognition.addEventListener('end', function() {\r\n                if (!state.isReset) {\r\n                    // clears the timeout which is started when recording stared\r\n                    clearTimeout(previewManageTimer);\r\n                    // shows message that recording ended\r\n                    AH.showmsg(l.recording_ended,3000);\r\n                    // handles with gif of recording and play and icon of record button\r\n                    manageStopStatus();\r\n                    // shows the initial state image of the audio container\r\n                    AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n                    state.status = 'recordingStopped';\r\n                    state.disabled = false;\r\n                    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                    previewCheckState();\r\n                }\r\n            });\r\n        } else {\r\n            // shows the message that SpeechRecognition not supported\r\n\t\t\tAH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    }\r\n\r\n    //check that reset button is clicked or not\r\n    function setData() {\r\n        previewResetClicked = 'yes';\r\n    }\r\n\r\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\r\n    function modalResponse() {\r\n        previewResetClicked = 'no';\r\n    }\r\n\r\n    // called for speak the recorded text\r\n    function playRecording() {\r\n        if (window.speechSynthesis) {\r\n            synth = window.speechSynthesis;\r\n            if (state.cdata != '') {\r\n                // hides the initial state image of the audio container and recording gif\r\n                AH.selectAll('.previewRecordingOn, .previewInitialState', 'addClass', 'h');\r\n                // shows the play gif\r\n                AH.selectAll('.previewAudioPlaying', 'removeClass', 'h');\r\n                state.disabled = true;\r\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                previewCheckState();\r\n                // removes all utterances from the utterance queue.\r\n                //synth.cancel();\r\n                // speak the recorded text after defining some properties value and adding event\r\n                isSpeechSynthesisSupported();\r\n            } else {\r\n                // hides the play and recording gif\r\n                AH.selectAll('.previewRecordingOn, .previewAudioPlaying', 'addClass', 'h');\r\n                // shows the initial state image of the audio container\r\n                AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n                // message for no data recorded\r\n\t\t\t\tAH.alert(l.no_data_msg);\r\n            }\r\n        } else {\r\n            // message for not supported speechSynthesis\r\n\t\t\tAH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    } \r\n\r\n    // checks the answer\r\n    function checkAns() {\r\n        let ans = \"\";\r\n        if  (state.correctAns.trim() != '') {\r\n            if (state.correctAns.toLowerCase() == state.cdata.toLowerCase()) {\r\n                // label of message\r\n                ans = l.correct;\r\n                AH.select(\"#answer\").checked = true;\r\n                state.useransstatus = true;\r\n            } else {\r\n                // label of message\r\n                ans = l.incorrect;\r\n                AH.select(\"#answer\").checked = false;\r\n                state.useransstatus = false;\r\n            }\r\n            \r\n            // shows the answer\r\n            if (editorState) {\r\n                showAns(ans);\r\n            } else {\r\n                ans = (ans == 'Correct') ? true : false;\r\n                onUserAnsChange({uXml: uxml, ans: ans});\r\n            }\r\n        } else {\r\n            // message, no data found for match the answer\r\n            AH.alert(l.matching_msg);\r\n            return;\r\n        }\r\n    }\r\n    let answer_status;\r\n    function setReview() {\r\n        isReview = true;\r\n        state.pointerEvents = \"none\";\r\n        answer_status = true;\r\n        // check the answer\r\n        checkAns();\r\n        if (state.useransstatus == true) {\r\n            // change the user answer data container's text and border color to #50af50\r\n            AH.setCss('#preview_data_container', {'color': '#50af50'});\r\n        } else {\r\n            // change the user answer data container's text and border color to #c30f0f\r\n            AH.setCss('#preview_data_container', {'color': '#c30f0f'});\r\n        }\r\n        /* hides the answer container in which correct answer will be seen after click on correct answer button */\r\n        AH.selectAll(AH.parent(AH.selectAll('#preanswer_data_container')), 'addClass', 'h');\r\n        /* shows the answer container in which user answer will be seen after click on your answer button */\r\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'removeClass', 'h');\r\n    }\r\n\r\n    /* allows the user to perform the task, shows the recording end notification message, hides correct and your answer button */\r\n    function unsetReview() {\r\n        isReview = false;\r\n        state.pointerEvents = \"auto\";\r\n        answer_status = false;\r\n        // hides both container in which your answer and correct answer data will be seen\r\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'addClass', 'h');\r\n    }\r\n\r\n    function handleReviewMode(mode) {\r\n        if(mode == 'c') {\r\n            answer_status = false;\r\n        } else if (mode == 'u') {\r\n            answer_status = true;\r\n        }\r\n    }\r\n</script>\r\n<div id=\"preview_container\" class=\"container\">\r\n    <ItemHelper \r\n            on:setReview = {setReview}\r\n            on:unsetReview = {unsetReview}\r\n            reviewMode={isReview}\r\n            handleReviewClick = {handleReviewMode}\r\n            customReviewMode={customIsReview}\r\n        />\r\n    <div class=\"row\">\r\n        {#if isReview}\r\n            {#if answer_status != true}\r\n                <div class=\"col-12 py-3\">\r\n                    <textarea \r\n                        id=\"preanswer_data_container\" \r\n                        name=\"cdata\" \r\n                        class=\"w-100 form-control border-success typeCorrect\" \r\n                        rows=\"2\" \r\n                        value={state.correctAns} \r\n                        readOnly=\"readonly\" \r\n                        tabindex=\"0\" \r\n                        aria-label=\"correct Answer is {state.correctAns}\"></textarea>\r\n                </div>\r\n            {:else}\r\n                <div class=\"col-12 py-3\">\r\n                    <textarea \r\n                        id=\"preview_data_container\" \r\n                        name=\"cdata\" \r\n                        class=\"w-100 form-control {(state.useransstatus == true) ? 'border-success typeCorrect' : 'border-danger typeIncorrect' }\" \r\n                        rows=\"2\" \r\n                        value={(state.cdata == '') ? 'No record found' :  state.cdata} \r\n                        readOnly=\"readonly\" \r\n                        tabindex=\"0\" \r\n                        aria-label=\"Your answer is {state.cdata} which is {((state.cdata.toLowerCase().trim() == state.correctAns.toLowerCase().trim()) ? \"Correct\": \"Incorrect\")}\"></textarea>\r\n                </div>\r\n            {/if}\r\n            <div class=\"col-12 pb-3\" tabindex=\"0\" aria-label=\"matching is case insensitive\">\r\n                <b class=\"noteColor bolder\">{l.note_label}</b>\r\n                {l.insensitive_message}\r\n            </div>\r\n        {:else}\r\n            <div class=\"col-12 pb-3\">\r\n                <div class=\"\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\r\n                    <b class=\"noteColor bolder\">{l.note_label}</b>\r\n                    {l.recording_warning}\r\n                </div>\r\n            </div>\r\n            {#if state.showTranscript == true}\r\n                <div class=\"col-12 pb-3\">\r\n                    <div><label for=\"preview_show_transcript\"><b>{l.spoken_label}</b></label></div>\r\n                    <textarea id=\"preview_show_transcript\" name=\"preview_show_transcript\" class=\"w-100 form-control\" rows=\"2\" value={state.cdata} readOnly=\"readonly\" tabindex=\"0\" aria-label={l.spoken_label + \" \" + ((state.cdata.trim() != \"\") ? state.cdata.trim(): \"Nothing\")}></textarea>\r\n                </div>\r\n            {/if}\r\n            <div class=\"col-12 col-md-8 offset-md-2\">\r\n                <div class=\"border rounded shadow-sm\">\r\n                    <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\"><b>{l.audio_recorder}</b></div>\r\n                    <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\r\n                        <span class=\"align-self-center mx-auto previewInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\r\n                        <div class=\"h previewRecordingOn tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\r\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\r\n                        </div>\r\n                        <div class=\"h previewAudioPlaying tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\r\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2 {(state.pointerEvents == 'none') ? 'pointerEventOff': 'pointerEventOn'}\">\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"preview_recordButton\" \r\n                            id=\"preview_recordButton\" \r\n                            on:click={startRecording} \r\n                            class=\"btn btn-light py-0\" \r\n                            aria-label=\"Click for {areaLabelForPreviewRecordButton}\"\r\n                        >\r\n                            <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-toggle=\"tooltip\" data-bs-placement=\"top\" data-placement=\"top\" title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")} id=\"recordButtonTooltip\" name=\"recordButtonTooltip\"></span>\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"preview_stopButton\" \r\n                            id=\"preview_stopButton\" \r\n                            on:click={playRecording} \r\n                            disabled={state.disabled} \r\n                            class=\"btn btn-light py-0\" \r\n                            aria-label=\"Click for {areaLabelForPreviewStopButton}\"\r\n                        >\r\n                            <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Play Audio\" id=\"stopButtonTooltip\" name=\"stopButtonTooltip\"></span>\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"resetButton\" \r\n                            id=\"resetButton\" \r\n                            class=\"btn btn-light py-0\" \r\n                            disabled={state.isReset} \r\n                            on:click={setData} \r\n                            data-bs-toggle=\"modal\"\r\n                            data-toggle=\"modal\" \r\n                            data-bs-target=\"#preview_confirm_modal\" \r\n                            data-target=\"#preview_confirm_modal\"\r\n                            aria-label=\"Click on this button for override the previous recording\"\r\n                        >\r\n                            <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" title=\"Reset Data\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        {/if}\r\n    </div>\r\n</div>\r\n<div class=\"preview_modal_container container\">\r\n    <div class=\"modal fade\" id=\"preview_confirm_modal\">\r\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" data-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForPreviewModalContent} id=\"previewDialogBody\" name=\"previewDialogBody\">\r\n                    {l.modal_data}\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"preview_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" data-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\r\n                    <button type=\"button\" id=\"StopRecord\" class=\"preview_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" data-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"],"names":["l","recording_warning","ctx","showTranscript","note_label","audio_recorder","starting_message","status","disabled","isReset","pointerEvents","insert","append","insensitive_message","spoken_label","cdata","trim","useransstatus","toLowerCase","correctAns","modal_data","confirm_label","no_label","yes_label","recognition","synth","areaLabelForPreviewModalContent","previewManageTimer","answer_status","xml","uxml","showAns","isReview","editorState","customIsReview","previewResetClicked","areaLabelForPreviewStopButton","areaLabelForPreviewRecordButton","previewTimeForRecording","state","language","counter","loadModule","loadXml","MYXML","smxml","_language","__cdata","_showTranscript","userAns","XMLToJSON","smans","_status","_isReset","parseUserAns","event","console","warn","error","message","function name","File name","parseXMLPreview","previewCheckState","setTimeout","uXml","AH","select","value","ISSPECIALMODULEUSERXMLCHANGE","getAttribute","innerText","checkAns","stopRecording","manageStopStatus","clearTimeout","selectAll","stop","previewManageTime","dictate","window","webkitSpeechRecognition","SpeechRecognition","alert","browser_support_msg","continuous","interimResults","lang","recognitionData","addEventListener","showmsg","recording_ended","isSpeechRecognitionSupported","start","onresult","speechToText","index_no","results","length","transcript","startRecording","getBS","show","focus","playRecording","speechSynthesis","utterThis","SpeechSynthesisUtterance","voiceForSpeech","getVoices","voice_name","cancel","name","voice","pitch","rate","speak","isSpeechSynthesisSupported","no_data_msg","ans","correct","checked","incorrect","onUserAnsChange","matching_msg","setReview","setCss","color","parent","unsetReview","onMount","listen","_this","e","which","click","AI","find","style","resetAudioData","pauseRecording","manage_data_timer","mode"],"mappings":"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"}