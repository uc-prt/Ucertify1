
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, e as element, p as append_dev, C as validate_each_argument, v as validate_slots, a7 as afterUpdate, o as onMount, A as AH, X as XMLToJSON, w as writable, a5 as Lang, h as text, k as add_location, n as insert_dev, B as noop, x as detach_dev, z as empty, K as destroy_each, f as space, j as attr_dev, $ as null_to_empty, l as set_style, q as listen_dev, E as is_function, G as prop_dev, H as run_all, Y as select_option } from './main-59da555a.js';
import { p as parseCSV } from './parseCSV-c873e3bd.js';

/* clsSMChoiceMatrix/ChoiceMatrix.svelte generated by Svelte v3.29.0 */

const { console: console_1, document: document_1 } = globals;
const file = "clsSMChoiceMatrix/ChoiceMatrix.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-12kbld3-style";
	style.textContent = ".fa-check.svelte-12kbld3{color:#46A546}.fa-close.svelte-12kbld3{color:#A80000}.fa-close.svelte-12kbld3,.fa-check.svelte-12kbld3{margin-left:9px;font-size:18px}.fa-close.svelte-12kbld3,.fa-check.svelte-12kbld3,.middle_align.svelte-12kbld3{vertical-align:middle!important}.middle_align.svelte-12kbld3{width:164px;min-width:164px}.topic_input.svelte-12kbld3{min-width:257px}.preview_header.svelte-12kbld3{font-size:16pt;font-weight:bold;vertical-align:middle}.adjust_width.svelte-12kbld3{width:12%;text-align:center}.width180.svelte-12kbld3{width:180px}.width150.svelte-12kbld3{width:150px}.full_day.svelte-12kbld3{background-color:#eee !important;color:#000 !important}.width90.svelte-12kbld3{width:90px}.width20.svelte-12kbld3{width:20px}.relative.svelte-12kbld3{position:relative}.min_height_38.svelte-12kbld3{min-height:38px}.min_width_200.svelte-12kbld3{min-width:200px !important}.min_width_125.svelte-12kbld3{min-width:125px}.max_width_150.svelte-12kbld3{max-width:150px !important}.height34.svelte-12kbld3{height:34px !important}.width_90.svelte-12kbld3{width:90%}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1.head, style);
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[26] = list[i];
	child_ctx[28] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	child_ctx[25] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[23] = list[i];
	child_ctx[25] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	child_ctx[25] = i;
	return child_ctx;
}

// (364:7) {#each themeOption as theme, i}
function create_each_block_3(ctx) {
	let option;
	let t_value = Lang[/*theme*/ ctx[30]] + "";
	let t;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = "theme" + ++/*i*/ ctx[25];
			option.value = option.__value;
			add_location(option, file, 364, 8, 10555);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(364:7) {#each themeOption as theme, i}",
		ctx
	});

	return block;
}

// (401:32) {#if state.cdata}
function create_if_block_1(ctx) {
	let each_1_anchor;
	let each_value_2 = /*state*/ ctx[0].cdata.option;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, removeOption, icon_class, updateOptionValue*/ 549) {
				each_value_2 = /*state*/ ctx[0].cdata.option;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(401:32) {#if state.cdata}",
		ctx
	});

	return block;
}

// (402:36) {#each state.cdata.option as data,i}
function create_each_block_2(ctx) {
	let th;
	let div0;
	let textarea;
	let textarea_id_value;
	let textarea_value_value;
	let t0;
	let div1;
	let span;
	let span_class_value;
	let t1;
	let th_key_value;
	let th_class_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			th = element("th");
			div0 = element("div");
			textarea = element("textarea");
			t0 = space();
			div1 = element("div");
			span = element("span");
			t1 = space();
			attr_dev(textarea, "id", textarea_id_value = /*data*/ ctx[23].id);
			textarea.value = textarea_value_value = /*data*/ ctx[23].text;
			attr_dev(textarea, "class", "form-control form-control-md px-2 min_height_38 text-dark svelte-12kbld3");
			attr_dev(textarea, "cols", "10");
			attr_dev(textarea, "rows", "1");
			add_location(textarea, file, 408, 48, 13062);
			attr_dev(div0, "class", "float-left");
			add_location(div0, file, 407, 44, 12987);
			attr_dev(span, "class", span_class_value = "" + (null_to_empty(/*icon_class*/ ctx[2]) + " svelte-12kbld3"));
			add_location(span, file, 422, 48, 14042);
			attr_dev(div1, "class", "float-left pointer pt-1 ml-2 delete_column height35 top1 position-relative");
			attr_dev(div1, "tab-index", "0");
			add_location(div1, file, 417, 44, 13688);
			attr_dev(th, "key", th_key_value = /*i*/ ctx[25]);
			attr_dev(th, "class", th_class_value = "" + (null_to_empty("middle_align text-center " + /*data*/ ctx[23].id) + " svelte-12kbld3"));

			set_style(th, "background-color", /*state*/ ctx[0].theme == "theme1"
			? "#5B9BD5"
			: /*state*/ ctx[0].theme == "theme2"
				? "#3B67BC"
				: /*state*/ ctx[0].theme == "theme3"
					? "#F6C3A2"
					: /*state*/ ctx[0].theme == "theme4"
						? "#70AD47"
						: "#745998");

			add_location(th, file, 402, 40, 12534);
		},
		m: function mount(target, anchor) {
			insert_dev(target, th, anchor);
			append_dev(th, div0);
			append_dev(div0, textarea);
			append_dev(th, t0);
			append_dev(th, div1);
			append_dev(div1, span);
			append_dev(th, t1);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "change", /*updateOptionValue*/ ctx[5], false, false, false),
					listen_dev(
						div1,
						"click",
						function () {
							if (is_function(/*removeOption*/ ctx[9].bind(this, /*data*/ ctx[23].id))) /*removeOption*/ ctx[9].bind(this, /*data*/ ctx[23].id).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*state*/ 1 && textarea_id_value !== (textarea_id_value = /*data*/ ctx[23].id)) {
				attr_dev(textarea, "id", textarea_id_value);
			}

			if (dirty[0] & /*state*/ 1 && textarea_value_value !== (textarea_value_value = /*data*/ ctx[23].text)) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*state*/ 1 && th_class_value !== (th_class_value = "" + (null_to_empty("middle_align text-center " + /*data*/ ctx[23].id) + " svelte-12kbld3"))) {
				attr_dev(th, "class", th_class_value);
			}

			if (dirty[0] & /*state*/ 1) {
				set_style(th, "background-color", /*state*/ ctx[0].theme == "theme1"
				? "#5B9BD5"
				: /*state*/ ctx[0].theme == "theme2"
					? "#3B67BC"
					: /*state*/ ctx[0].theme == "theme3"
						? "#F6C3A2"
						: /*state*/ ctx[0].theme == "theme4"
							? "#70AD47"
							: "#745998");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(th);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(402:36) {#each state.cdata.option as data,i}",
		ctx
	});

	return block;
}

// (431:28) {#if state.cdata}
function create_if_block(ctx) {
	let each_1_anchor;
	let each_value = /*state*/ ctx[0].cdata.term;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, setCorrectAns, removeTerm, icon_class, updateTermValue*/ 1301) {
				each_value = /*state*/ ctx[0].cdata.term;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(431:28) {#if state.cdata}",
		ctx
	});

	return block;
}

// (450:40) {#each state.cdata.option as data2,j}
function create_each_block_1(ctx) {
	let td;
	let label;
	let input;
	let input_value_value;
	let input_name_value;
	let input_id_value;
	let input_data_correct_value;
	let label_for_value;
	let td_key_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			td = element("td");
			label = element("label");
			input = element("input");
			attr_dev(input, "type", "radio");
			attr_dev(input, "class", "preview_radio align-middle");
			input.value = input_value_value = /*data2*/ ctx[26].id;
			attr_dev(input, "name", input_name_value = /*i*/ ctx[25] + 1);
			attr_dev(input, "id", input_id_value = "a" + /*i*/ ctx[25] + /*j*/ ctx[28]);
			attr_dev(input, "data-correct", input_data_correct_value = /*data*/ ctx[23].correct);
			add_location(input, file, 454, 56, 16525);
			attr_dev(label, "class", "label_choice pointer d-block w-100 mb-0");
			attr_dev(label, "for", label_for_value = "a" + /*i*/ ctx[25] + /*j*/ ctx[28]);
			add_location(label, file, 453, 52, 16393);
			attr_dev(td, "class", "text-center align-middle h-auto min_width_125 max_width_150 svelte-12kbld3");
			attr_dev(td, "key", td_key_value = /*j*/ ctx[28]);

			set_style(td, "background-color", /*i*/ ctx[25] % 2 == 0
			? /*state*/ ctx[0].theme == "theme1"
				? "#DEEAF6"
				: /*state*/ ctx[0].theme == "theme2"
					? "#D4DEF1"
					: /*state*/ ctx[0].theme == "theme3"
						? "#FAE0CF"
						: /*state*/ ctx[0].theme == "theme4"
							? "#E2EFD9"
							: "#E1DAE9"
			: "#FFF");

			add_location(td, file, 450, 12, 16005);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, label);
			append_dev(label, input);

			if (!mounted) {
				dispose = listen_dev(input, "click", /*setCorrectAns*/ ctx[10], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 1 && input_value_value !== (input_value_value = /*data2*/ ctx[26].id)) {
				prop_dev(input, "value", input_value_value);
			}

			if (dirty[0] & /*state*/ 1 && input_data_correct_value !== (input_data_correct_value = /*data*/ ctx[23].correct)) {
				attr_dev(input, "data-correct", input_data_correct_value);
			}

			if (dirty[0] & /*state*/ 1) {
				set_style(td, "background-color", /*i*/ ctx[25] % 2 == 0
				? /*state*/ ctx[0].theme == "theme1"
					? "#DEEAF6"
					: /*state*/ ctx[0].theme == "theme2"
						? "#D4DEF1"
						: /*state*/ ctx[0].theme == "theme3"
							? "#FAE0CF"
							: /*state*/ ctx[0].theme == "theme4"
								? "#E2EFD9"
								: "#E1DAE9"
				: "#FFF");
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(450:40) {#each state.cdata.option as data2,j}",
		ctx
	});

	return block;
}

// (432:32) {#each state.cdata.term as data,i}
function create_each_block(ctx) {
	let tr;
	let td;
	let textarea;
	let textarea_id_value;
	let textarea_value_value;
	let t0;
	let div;
	let span;
	let span_class_value;
	let td_class_value;
	let t1;
	let t2;
	let tr_key_value;
	let mounted;
	let dispose;
	let each_value_1 = /*state*/ ctx[0].cdata.option;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td = element("td");
			textarea = element("textarea");
			t0 = space();
			div = element("div");
			span = element("span");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			attr_dev(textarea, "id", textarea_id_value = /*data*/ ctx[23].id);
			textarea.value = textarea_value_value = /*data*/ ctx[23].text;
			attr_dev(textarea, "class", "form-control form-control-md width_90 float-left min_height_38 mr-2 svelte-12kbld3");
			set_style(textarea, "outline", "none");
			set_style(textarea, "height", "38px");
			add_location(textarea, file, 434, 44, 14898);
			attr_dev(span, "class", span_class_value = "" + (null_to_empty(/*icon_class*/ ctx[2]) + " svelte-12kbld3"));
			add_location(span, file, 446, 48, 15783);
			attr_dev(div, "class", "pointer pt-1 mt-sm2 ml-2 delete_row height34 svelte-12kbld3");
			attr_dev(div, "tab-index", "0");
			add_location(div, file, 441, 44, 15424);
			attr_dev(td, "class", td_class_value = "" + (null_to_empty("min_width_200 h-auto " + /*data*/ ctx[23].id) + " svelte-12kbld3"));
			set_style(td, "font-weight", "bold");

			set_style(td, "background-color", /*i*/ ctx[25] % 2 == 0
			? /*state*/ ctx[0].theme == "theme1"
				? "#DEEAF6"
				: /*state*/ ctx[0].theme == "theme2"
					? "#D4DEF1"
					: /*state*/ ctx[0].theme == "theme3"
						? "#FAE0CF"
						: /*state*/ ctx[0].theme == "theme4"
							? "#E2EFD9"
							: "#E1DAE9"
			: "#FFF");

			add_location(td, file, 433, 40, 14557);
			attr_dev(tr, "key", tr_key_value = /*i*/ ctx[25]);
			add_location(tr, file, 432, 36, 14504);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td);
			append_dev(td, textarea);
			append_dev(td, t0);
			append_dev(td, div);
			append_dev(div, span);
			append_dev(tr, t1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append_dev(tr, t2);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "input", /*updateTermValue*/ ctx[4], false, false, false),
					listen_dev(
						div,
						"click",
						function () {
							if (is_function(/*removeTerm*/ ctx[8].bind(this, /*data*/ ctx[23].id))) /*removeTerm*/ ctx[8].bind(this, /*data*/ ctx[23].id).apply(this, arguments);
						},
						false,
						false,
						false
					)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*state*/ 1 && textarea_id_value !== (textarea_id_value = /*data*/ ctx[23].id)) {
				attr_dev(textarea, "id", textarea_id_value);
			}

			if (dirty[0] & /*state*/ 1 && textarea_value_value !== (textarea_value_value = /*data*/ ctx[23].text)) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*state*/ 1 && td_class_value !== (td_class_value = "" + (null_to_empty("min_width_200 h-auto " + /*data*/ ctx[23].id) + " svelte-12kbld3"))) {
				attr_dev(td, "class", td_class_value);
			}

			if (dirty[0] & /*state*/ 1) {
				set_style(td, "background-color", /*i*/ ctx[25] % 2 == 0
				? /*state*/ ctx[0].theme == "theme1"
					? "#DEEAF6"
					: /*state*/ ctx[0].theme == "theme2"
						? "#D4DEF1"
						: /*state*/ ctx[0].theme == "theme3"
							? "#FAE0CF"
							: /*state*/ ctx[0].theme == "theme4"
								? "#E2EFD9"
								: "#E1DAE9"
				: "#FFF");
			}

			if (dirty[0] & /*state, setCorrectAns*/ 1025) {
				each_value_1 = /*state*/ ctx[0].cdata.option;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t2);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(432:32) {#each state.cdata.term as data,i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let link;
	let t0;
	let main;
	let div6;
	let div5;
	let div4;
	let div1;
	let div0;
	let label0;
	let t2;
	let select;
	let select_value_value;
	let t3;
	let label1;
	let t5;
	let input;
	let input_value_value;
	let t6;
	let span;
	let t8;
	let div2;
	let table;
	let thead;
	let tr;
	let th;
	let textarea;
	let textarea_value_value;
	let textarea_style_value;
	let t9;
	let t10;
	let tbody;
	let t11;
	let small;
	let strong;
	let t14;
	let t15_value = Lang.comment_choiceMatrix + "";
	let t15;
	let t16;
	let div3;
	let button0;
	let button0_style_value;
	let t18;
	let button1;
	let button1_style_value;
	let div3_style_value;
	let mounted;
	let dispose;
	let each_value_3 = /*themeOption*/ ctx[1];
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	let if_block0 = /*state*/ ctx[0].cdata && create_if_block_1(ctx);
	let if_block1 = /*state*/ ctx[0].cdata && create_if_block(ctx);

	const block = {
		c: function create() {
			link = element("link");
			t0 = space();
			main = element("main");
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${Lang.themes}`;
			t2 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			label1 = element("label");
			label1.textContent = `${Lang.table_width}`;
			t5 = space();
			input = element("input");
			t6 = space();
			span = element("span");
			span.textContent = "px";
			t8 = space();
			div2 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th = element("th");
			textarea = element("textarea");
			t9 = space();
			if (if_block0) if_block0.c();
			t10 = space();
			tbody = element("tbody");
			if (if_block1) if_block1.c();
			t11 = space();
			small = element("small");
			strong = element("strong");
			strong.textContent = `* ${Lang.note_label}`;
			t14 = space();
			t15 = text(t15_value);
			t16 = space();
			div3 = element("div");
			button0 = element("button");
			button0.textContent = `${Lang.add_row}`;
			t18 = space();
			button1 = element("button");
			button1.textContent = `${Lang.add_column}`;
			attr_dev(link, "href", "./choiceMatrix.css");
			attr_dev(link, "rel", "stylesheet");
			add_location(link, file, 9, 1, 239);
			attr_dev(label0, "for", "select_themes");
			attr_dev(label0, "class", "mb-0 pl-1 mt-2 mr-2 float-left");
			add_location(label0, file, 351, 6, 10058);
			attr_dev(select, "class", "form-control form-control-md px-2 enroll_date_td width150 float-left svelte-12kbld3");
			attr_dev(select, "id", "select_themes");
			attr_dev(select, "name", "select_themes");
			add_location(select, file, 357, 24, 10209);
			attr_dev(label1, "for", "customWidth");
			attr_dev(label1, "class", "mb-0 mt-2 mr-2 ml-2 float-left");
			add_location(label1, file, 367, 6, 10660);
			attr_dev(input, "class", "form-control form-control-md px-2 width90 float-left svelte-12kbld3");
			attr_dev(input, "step", "10");
			attr_dev(input, "min", "500");
			attr_dev(input, "max", "1000");
			attr_dev(input, "type", "number");
			input.value = input_value_value = parseInt(/*state*/ ctx[0].maxWidth);
			attr_dev(input, "id", "customWidth");
			add_location(input, file, 368, 24, 10776);
			attr_dev(span, "class", "d-inline-block mt-2 ml-1 width20 float-left svelte-12kbld3");
			add_location(span, file, 379, 24, 11136);
			attr_dev(div0, "class", "float-left mb-1 pr-2 ");
			add_location(div0, file, 350, 20, 10014);
			attr_dev(div1, "class", "form-group row full_day mx-0 pt-2 pb-1 w-100 svelte-12kbld3");
			add_location(div1, file, 348, 16, 9842);
			textarea.value = textarea_value_value = /*state*/ ctx[0].stem;
			attr_dev(textarea, "class", "form-control form-control-md px-2 min_height_38 text-dark svelte-12kbld3");
			attr_dev(textarea, "style", textarea_style_value = "outline:none;");
			attr_dev(textarea, "cols", "15");
			attr_dev(textarea, "rows", "1");
			add_location(textarea, file, 391, 36, 11883);
			attr_dev(th, "class", "topic_input text-center svelte-12kbld3");
			attr_dev(th, "id", "hello");

			set_style(th, "background-color", /*state*/ ctx[0].theme == "theme1"
			? "#5B9BD5"
			: /*state*/ ctx[0].theme == "theme2"
				? "#3B67BC"
				: /*state*/ ctx[0].theme == "theme3"
					? "#F6C3A2"
					: /*state*/ ctx[0].theme == "theme4"
						? "#70AD47"
						: "#745998");

			add_location(th, file, 386, 32, 11553);
			attr_dev(tr, "class", "table-head");
			add_location(tr, file, 385, 28, 11495);
			add_location(thead, file, 384, 24, 11459);
			add_location(tbody, file, 429, 24, 14347);
			attr_dev(table, "class", "table table-bordered relative w-100 ml-0 mt-0 svelte-12kbld3");
			attr_dev(table, "id", "my_table");
			add_location(table, file, 383, 20, 11355);
			attr_dev(div2, "class", "table-responsive mt-4 d-flex align-items-center");
			add_location(div2, file, 382, 16, 11271);
			add_location(strong, file, 472, 52, 17593);
			attr_dev(small, "class", "text-danger font13");
			add_location(small, file, 472, 16, 17557);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-outline-primary btn-sm add_stem pr-md ml-2 px-2");
			attr_dev(button0, "id", "btn");
			attr_dev(button0, "style", button0_style_value = "width: 171px;");
			add_location(button0, file, 474, 24, 17752);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-outline-primary btn-sm add_option pr-md ml-2 px-2");
			attr_dev(button1, "id", "btn_opt");
			attr_dev(button1, "style", button1_style_value = "width: 171px;");
			add_location(button1, file, 484, 6, 18091);
			attr_dev(div3, "class", "text-center");
			attr_dev(div3, "style", div3_style_value = "width:100%;");
			add_location(div3, file, 473, 16, 17676);
			attr_dev(div4, "class", "col-12 col-lg-12 p-0");
			add_location(div4, file, 347, 12, 9789);
			attr_dev(div5, "id", "authoring");
			attr_dev(div5, "class", "p-2 border");
			add_location(div5, file, 346, 8, 9733);
			add_location(div6, file, 345, 4, 9719);
			add_location(main, file, 344, 0, 9708);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			append_dev(document_1.head, link);
			insert_dev(target, t0, anchor);
			insert_dev(target, main, anchor);
			append_dev(main, div6);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, div1);
			append_dev(div1, div0);
			append_dev(div0, label0);
			append_dev(div0, t2);
			append_dev(div0, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*state*/ ctx[0].theme);
			append_dev(div0, t3);
			append_dev(div0, label1);
			append_dev(div0, t5);
			append_dev(div0, input);
			append_dev(div0, t6);
			append_dev(div0, span);
			append_dev(div4, t8);
			append_dev(div4, div2);
			append_dev(div2, table);
			append_dev(table, thead);
			append_dev(thead, tr);
			append_dev(tr, th);
			append_dev(th, textarea);
			append_dev(tr, t9);
			if (if_block0) if_block0.m(tr, null);
			append_dev(table, t10);
			append_dev(table, tbody);
			if (if_block1) if_block1.m(tbody, null);
			append_dev(div4, t11);
			append_dev(div4, small);
			append_dev(small, strong);
			append_dev(small, t14);
			append_dev(small, t15);
			append_dev(div4, t16);
			append_dev(div4, div3);
			append_dev(div3, button0);
			append_dev(div3, t18);
			append_dev(div3, button1);

			if (!mounted) {
				dispose = [
					listen_dev(select, "click", /*changeTheme*/ ctx[11], false, false, false),
					listen_dev(input, "keyup", /*handleMaxwidth*/ ctx[12].bind(this), false, false, false),
					listen_dev(input, "change", /*handleMaxwidth*/ ctx[12].bind(this), false, false, false),
					listen_dev(textarea, "change", /*updateStem*/ ctx[3], false, false, false),
					listen_dev(button0, "click", /*addStem*/ ctx[6], false, false, false),
					listen_dev(button1, "click", /*addOption*/ ctx[7], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*themeOption*/ 2) {
				each_value_3 = /*themeOption*/ ctx[1];
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}

			if (dirty[0] & /*state*/ 1 && select_value_value !== (select_value_value = /*state*/ ctx[0].theme)) {
				select_option(select, /*state*/ ctx[0].theme);
			}

			if (dirty[0] & /*state*/ 1 && input_value_value !== (input_value_value = parseInt(/*state*/ ctx[0].maxWidth))) {
				prop_dev(input, "value", input_value_value);
			}

			if (dirty[0] & /*state*/ 1 && textarea_value_value !== (textarea_value_value = /*state*/ ctx[0].stem)) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*state*/ 1) {
				set_style(th, "background-color", /*state*/ ctx[0].theme == "theme1"
				? "#5B9BD5"
				: /*state*/ ctx[0].theme == "theme2"
					? "#3B67BC"
					: /*state*/ ctx[0].theme == "theme3"
						? "#F6C3A2"
						: /*state*/ ctx[0].theme == "theme4"
							? "#70AD47"
							: "#745998");
			}

			if (/*state*/ ctx[0].cdata) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_1(ctx);
					if_block0.c();
					if_block0.m(tr, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*state*/ ctx[0].cdata) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(tbody, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			detach_dev(link);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(main);
			destroy_each(each_blocks, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function reverseCSVFormat(data) {
	// value of stem
	let csvFormat = data.stem + ",";

	// getting values of option and appending it to the csvFormat
	data.option.map(val1 => {
		csvFormat += val1.text + ",";
	});

	csvFormat += "\n";

	data.term.map((val2, j) => {
		// adding the text of term
		csvFormat += val2.text + ",";

		// adding 1,0 n the basis of radio is checked or not
		data.option.map(val1 => {
			csvFormat += val2.correct == val1.id ? "1," : "0,";
		});

		csvFormat += "\n";
	});

	// returning all the appended data
	return csvFormat;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("ChoiceMatrix", slots, []);
	let { getChildXml } = $$props;
	let { xml } = $$props;

	// variable declaration
	let themeOption = ["light_blue", "dark_blue", "peach", "green", "purple"];

	let widthVal = "";
	let icon_class = "icomoon-new-24px-delete-1 s3";
	let lastAction;
	let state = {};

	let stateData = writable({
		cdata: "",
		stem: "",
		xml: "",
		theme: "",
		font: "",
		maxWidth: ""
	});

	const unsubscribe = stateData.subscribe(items => {
		$$invalidate(0, state = items);
	});

	////////////    Exectuing each time the xml will change //////////////
	afterUpdate(() => {
		if (xml != state.xml) {
			$$invalidate(0, state.xml = xml, state);
			loadModule(xml);
		}
	});

	onMount(() => {
		AH.listen(document, "keydown", "textarea", function (event) {
			if (event.keyCode == 13) {
				event.preventDefault();
			}
		});

		document.querySelector(".add_stem, .add_stem").addEventListener("click", function (event) {
			event.preventDefault();
		});

		// try catch block in error handling
		try {
			// check if xml is not blank
			if (xml) {
				// load the module on the basis of xml 
				loadModule(xml);

				// update the cdata accordingly
				reverseXml();
			}
		} catch(e) {
			console.log({
				Error: e.message,
				File: "choiceMatrix",
				Line: "65"
			});
		}

		AH.listen(document, "keydown", ".delete_column", function (_this, event) {
			if (event.keyCode == 13 || event.which == 13) {
				// click the element which currently get the focus and enter key is down
				AH.trigger(_this, "click");

				//_this.dispatchEvent(new Event("click"));
				event.preventDefault();
			}
		});

		AH.listen(document, "keydown", ".delete_row", function (_this, event) {
			if (event.keyCode == 13 || event.which == 13) {
				// click the element which currently get the focus and enter key is down
				_this.dispatchEvent(new Event("click"));

				event.preventDefault();
			}
		});
	});

	// it load the module 
	function loadModule(loadXml) {
		// convert the xml into json and pass it in the parseXMLAuthoring function to parse the xml
		loadXml = XMLToJSON(loadXml);

		parseXMLAuthoring(loadXml);
	}

	// it is used for parsing the xml for authoring area
	function parseXMLAuthoring(MYXML) {
		let formattedData = parseCSV.parseCSVFormat(MYXML.smxml.__cdata);
		let cdata = formattedData;
		let rawData = [];

		// copying the JSON data in the rawData and make it array 
		rawData = JSON.parse(JSON.stringify(cdata));

		$$invalidate(0, state.cdata = rawData, state);
		$$invalidate(0, state.stem = rawData.stem, state);
		$$invalidate(0, state.theme = MYXML.smxml._theme, state);
		$$invalidate(0, state.font = MYXML.smxml._font, state);

		$$invalidate(
			0,
			state.maxWidth = MYXML.smxml._maxwidth
			? parseInt(MYXML.smxml._maxwidth)
			: 800,
			state
		);

		//document.getElementById("msg").value = rawData['stem'];
		//jQuery('#msg').val(rawData.stem); // Need TO FIX
		//	for checking the radio btn according to the xml
		/*	let timer = setTimeout(function() {
		jQuery(".preview_radio").each(function() {
			jQuery(this)[0].checked = ((jQuery(this).attr('value') == jQuery(this).attr('data-correct')) ? true : false);
		});
		clearTimeout(timer);
	}.bind(this),200) // Replaced 
*/
		let timer = setTimeout(
			function () {
				let radio_len1 = document.getElementsByClassName("preview_radio");

				for (let i = 0; i < radio_len1.length; i++) {
					radio_len1[i].checked = radio_len1[i].getAttribute("value") == radio_len1[i].getAttribute("data-correct")
					? true
					: false;
				}

				clearTimeout(timer);
			},
			200
		);
	}

	// calls on change in the stem textarea
	function updateStem(e) {
		$$invalidate(0, state.stem = e.target.value, state);
		$$invalidate(0, state.cdata.stem = e.target.value, state);

		// updaing the cdata
		reverseXml();
	}

	//////////// Update the cdata ///////////////////
	function reverseXml() {
		let csvReverse = reverseCSVFormat(state.cdata);
		csvReverse = csvReverse.replace(/\’|\′/g, "'").replace(/\″|\“|\”/g, "\"");
		let updatedXml = `<smxml type="27" name="ChoiceMatrix" theme="${state.theme}" font="${state.font}" maxwidth="${state.maxWidth}"><!--[CDATA[${csvReverse}]]--></smxml>`;
		getChildXml(updatedXml);
	}

	function updateTermValue(e) {
		//it update the text of that particular term by finding the id of the changed term textarea
		state.cdata && state.cdata.term.map(function (data, i) {
			if (data.id == e.target.id) {
				data.text = e.target.value;
			}
		});

		// update the cdata
		reverseXml();
	}

	////////////// updating the option ///////////////
	function updateOptionValue(e) {
		//it update the text of that particular option by finding the id of the changed option textarea
		state.cdata && state.cdata.option.map(function (data, i) {
			if (data.id == e.target.id) {
				data.text = e.target.value;
			}
		});

		// update the cdata
		reverseXml();
	}

	///////////  Added row rows  /////////////////
	function addStem() {
		let id = state.cdata.term.length + 1;

		if (id <= 6) {
			state.cdata.term.push({
				id: "t" + id,
				correct: "",
				text: "Term Sample text"
			});

			reverseXml();
		} else {
			AH.alert("Maximum possible value of rows are 6.");
		}
	}

	/////////  This function is added the column  ///////////////
	function addOption() {
		let id = state.cdata.option.length + 1;

		if (id <= 4) {
			state.cdata.option.push({ id: "o" + id, text: "Option" });
			reverseXml();
		} else {
			AH.alert("Maximum possible value of columns are 4.");
		}
	}

	//////////// This function delete the rows /////////////
	function removeTerm(id) {
		if (state.cdata.term.length > 2) {
			let newTerm = [];
			let count = 1;

			state.cdata.term.map(function (data, i) {
				if (data.id == id) {
					state.cdata.term.splice(i, 1);
				}
			});

			state.cdata.term.map(function (data, i) {
				newTerm.push({
					id: "t" + count,
					correct: data.correct,
					text: data.text
				});

				count++;
			});

			$$invalidate(0, state.cdata.term = newTerm, state);
			let radio_len = document.getElementsByClassName("preview_radio");

			for (let i = 0; i < radio_len; i++) {
				radio_len[i].checked = false;
			}

			//updating the cdata
			reverseXml();
		} else {
			AH.showmsg("You must have at least two rows.");
		}
	}

	// when delete btn of option is cliked
	function removeOption(id) {
		// checking min no of option 
		if (state.cdata.option.length > 2) {
			let newOption = [];
			let count = 1;

			// removing that particular option
			state.cdata.option.map(function (data, i) {
				if (data.id == id) {
					state.cdata.option.splice(i, 1);
				}
			});

			state.cdata.option.map(function (data, i) {
				newOption.push({ id: "o" + count, text: data.text });
				count++;
			});

			// remove the correct answer
			removeCorrectAns();

			$$invalidate(0, state.cdata.option = newOption, state);

			// updates the xml
			reverseXml();
		} else {
			AH.alert("You must have at least two columns.");
		}
	}

	// for removing the correct ans
	function removeCorrectAns() {
		state.cdata && state.cdata.term.map(function (data, i) {
			data.correct = "";
		});
	}

	// for setting the correct answer
	function setCorrectAns(e) {
		// getting name of the clicked radio btn to find the index
		let rname = e.target.name;

		let rindex = rname - 1;

		// store the value of target in correct key of the term at that index 
		$$invalidate(0, state.cdata.term[rindex].correct = e.target.value, state);

		reverseXml();
	}

	////// This function is fired then change theme ////////////
	function changeTheme(e) {
		// update the state
		$$invalidate(0, state.theme = e.target.value, state);

		// update the cdata
		reverseXml(); // Remove setTimeout in this place
	}

	// when there is change in table
	function handleMaxwidth() {
		// getting the value of width
		widthVal = document.querySelector("#customWidth").value;

		// setting the width of the table
		//	jQuery('#test_table').width(widthVal+"px"); // Replaced
		document.getElementById("test_table").style.width = widthVal + "px";

		// check for th timeout if exist clear the timeout to save memory
		lastAction ? clearTimeout(lastAction) : "";

		lastAction = setTimeout(
			function () {
				// checking condition that the table width must between the 500 and 1000
				if (widthVal < 500) {
					//// jQuery('#customWidth').val() remove this
					$$invalidate(0, state.maxWidth = 500, state);

					let timer = setTimeout(
						function () {
							reverseXml();
							clearTimeout(timer);
						},
						100
					); //  Fixed

					swal("Width should not be less than 500px");
				}

				if (widthVal > 1000) {
					//// jQuery('#customWidth').val() remove this
					$$invalidate(0, state.maxWidth = 1000, state);

					let timer = setTimeout(
						function () {
							reverseXml();
							clearTimeout(timer);
						},
						100
					); // Fixed

					swal("Width should not be greater than 1000px");
				}
			},
			1500
		);

		// update the state
		$$invalidate(0, state.maxWidth = widthVal, state);

		// update the cdata
		reverseXml();
	}

	const writable_props = ["getChildXml", "xml"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<ChoiceMatrix> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("getChildXml" in $$props) $$invalidate(13, getChildXml = $$props.getChildXml);
		if ("xml" in $$props) $$invalidate(14, xml = $$props.xml);
	};

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		writable,
		l: Lang,
		lib1: parseCSV,
		XMLToJSON,
		AH,
		getChildXml,
		xml,
		themeOption,
		widthVal,
		icon_class,
		lastAction,
		state,
		stateData,
		unsubscribe,
		loadModule,
		parseXMLAuthoring,
		updateStem,
		reverseXml,
		reverseCSVFormat,
		updateTermValue,
		updateOptionValue,
		addStem,
		addOption,
		removeTerm,
		removeOption,
		removeCorrectAns,
		setCorrectAns,
		changeTheme,
		handleMaxwidth
	});

	$$self.$inject_state = $$props => {
		if ("getChildXml" in $$props) $$invalidate(13, getChildXml = $$props.getChildXml);
		if ("xml" in $$props) $$invalidate(14, xml = $$props.xml);
		if ("themeOption" in $$props) $$invalidate(1, themeOption = $$props.themeOption);
		if ("widthVal" in $$props) widthVal = $$props.widthVal;
		if ("icon_class" in $$props) $$invalidate(2, icon_class = $$props.icon_class);
		if ("lastAction" in $$props) lastAction = $$props.lastAction;
		if ("state" in $$props) $$invalidate(0, state = $$props.state);
		if ("stateData" in $$props) stateData = $$props.stateData;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		state,
		themeOption,
		icon_class,
		updateStem,
		updateTermValue,
		updateOptionValue,
		addStem,
		addOption,
		removeTerm,
		removeOption,
		setCorrectAns,
		changeTheme,
		handleMaxwidth,
		getChildXml,
		xml
	];
}

class ChoiceMatrix extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-12kbld3-style")) add_css();
		init(this, options, instance, create_fragment, safe_not_equal, { getChildXml: 13, xml: 14 }, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ChoiceMatrix",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*getChildXml*/ ctx[13] === undefined && !("getChildXml" in props)) {
			console_1.warn("<ChoiceMatrix> was created without expected prop 'getChildXml'");
		}

		if (/*xml*/ ctx[14] === undefined && !("xml" in props)) {
			console_1.warn("<ChoiceMatrix> was created without expected prop 'xml'");
		}
	}

	get getChildXml() {
		throw new Error("<ChoiceMatrix>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<ChoiceMatrix>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xml() {
		throw new Error("<ChoiceMatrix>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<ChoiceMatrix>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default ChoiceMatrix;
//# sourceMappingURL=ChoiceMatrix-7d44c247.js.map
