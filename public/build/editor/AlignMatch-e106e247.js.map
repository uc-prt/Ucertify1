{"version":3,"file":"AlignMatch-e106e247.js","sources":["../../../clsSMAlignMatch/AlignMatchButton.svelte","../../../clsSMAlignMatch/AlignMatch.svelte"],"sourcesContent":["<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    export let btnClass = '', btnName, id;\r\n    const dispatch = createEventDispatcher();\r\n</script>\r\n<button \r\n    type=\"button\" \r\n    class=\"btn btn-sm btn-outline-primary {btnClass}\" \r\n    id=\"{id}\"\r\n    on:click=\"{()=>dispatch('btnClick')}\"\r\n>\r\n    <span class=\"icomoon-new-24px-add-circle-1 s3\"></span>\r\n    <span class=\"position-relative top1\">{btnName}</span>\r\n</button>","<!--\r\n *  File Name   : AlignMatch.svelte\r\n *  Description : Container for AlignMatch Authoring Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 05-Jan-2021\r\n *  Last Updated By : Rashmi Kumari\r\n-->\r\n<script>\r\n\timport { onMount,beforeUpdate,afterUpdate } from \"svelte\";\r\n\timport { writable } from \"svelte/store\";\r\n    import { XMLToJSON, AH } from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    import AlignMatchButton from \"./AlignMatchButton.svelte\";\r\n    export let getChildXml;\r\n    export let editorState;\r\n    export let xml;\r\n    let files;\r\n\tlet state = {},\r\n\t// used for delete icon\r\n\ticon_class = \"icomoon-new-24px-delete-1 position-relative s3\",\r\n\t// used to uniquily define the id of the cells\r\n\tcon = 1,\r\n\t//used for update the value of state authordata\r\n\tmyObj = [],\r\n\t// container for match data\r\n\tmatchdata = {\r\n        // container for category key of matchdata\r\n        category: {\r\n            // container for categories key of category key of matchdata\r\n            categories: []\r\n        },\r\n        // container for item key of matchdata\r\n\t    item: {\r\n            // container for items key of item key of matchdata\r\n            items: []\r\n        },\r\n        // not used any where\r\n        settings: {}\r\n    };\r\n\t\r\n\t// id of the cell on which clicked for change the text\r\n\tlet blnUserChange = null;\r\n\tlet authordata = writable({ \r\n\t\t// contains the xml data\r\n\t\txml: \"\",\r\n\t\t// not used\r\n\t\tcsv: \"\",\r\n\t\t// not used\r\n\t\tjson: \"\",\r\n\t\t// used to show the UI of the component\r\n\t\tauthordata: \"\",\r\n\t\t// used to set the max with\r\n\t\tmaxWidth: \"\",\r\n\t\t// contains the type of cell that have to update such as category cell or item cell when click on it\r\n\t\teditType: \"\",\r\n\t\t// contains the cell id that have to be update when click on it\r\n\t\teditId: \"\",\r\n    });\r\n\tconst unsubscribe = authordata.subscribe((items) => {\r\n\t\tstate = items;\r\n    })\r\n\r\n\tafterUpdate(() => {\r\n        if (xml!=state.xml) {\r\n\t\t\tstate.xml = xml\r\n\t\t\tloadModule(xml); \t\r\n\t\t}\r\n    });\r\n\r\n    beforeUpdate(() => {\r\n        if (editorState) {\r\n            AH.set('alignMatchReset', true);\r\n        }\r\n        if (editorState.stopAuthoringUpdate == true) {\r\n            return;\r\n        }\r\n    })\r\n\r\n\tonMount(() => {\t\r\n        state.xml = xml;\r\n\t\tloadModule(xml);\r\n    });\r\n\r\n\tfunction loadModule(loadXml) {\r\n\t\t// convert the xml into json and pass it in the parseXMLAuthoring function to parse the xml\r\n\t\tloadXml = XMLToJSON(loadXml);\r\n\t\tparseXMLAuthoring(loadXml);\r\n    }\r\n\r\n\t// update the value of state xml, maxWidth, and authordata\r\n\tfunction parseXMLAuthoring(MYXML) {\r\n        // contains json data of cdata of xml\r\n        let jsonData = JSON.parse(MYXML.smxml.__cdata);\r\n        // sets the value of state authordata\r\n        manipulate(jsonData);\r\n\t\t// sets the value of state 'xml' with the value of variable jsonData\r\n\t\tstate.xml = jsonData;\r\n\t\t// sets the value of state 'maxWidth'\r\n\t\tstate.maxWidth = ((MYXML.smxml._maxwidth) ? parseInt(MYXML.smxml._maxwidth) : 800)\r\n    }\r\n\r\n\t// sets the value of state authordata\r\n\tfunction manipulate(qwerty) {\r\n        // creates temporary object of cdata of xml\r\n        let tempObj = JSON.parse(JSON.stringify(qwerty));\r\n        // makes blank array myObj\r\n        myObj = [];\r\n        // creates an array\r\n        let ele = [];\r\n        tempObj.category.categories.forEach(function (index) {\r\n            // creates a temporary object\r\n            let deArr = {};\r\n            // creates id key with value defined in 'id' key of object stored in varaible 'index'\r\n            deArr.id = index.id;\r\n            // creates class key with value 'categories'\r\n            deArr.class = 'categories';\r\n            // creates class key with value 'Tags 0'\r\n            deArr.tags = 'Tags 0';\r\n            // creates text key with value defined in 'text' key of object stored in varaible 'index'\r\n            deArr.text = index.text;\r\n            // pushes temporary object 'deArr' into array ele\r\n            ele.push(deArr);\r\n        });\r\n        // pushes array ele into array myObj\r\n        myObj.push(ele);\r\n        // findes no of categories available\r\n        let catLen = tempObj.category.categories.length;\r\n        let itemsArray = splitArrayIntoChunksOfLen(tempObj.item.items,catLen);\r\n        itemsArray.forEach((value) => {\r\n            let rowArr = [];\r\n            value.forEach((item_val) => {\r\n                let deArr = {};\r\n                deArr.id = item_val.id;\r\n                deArr.class = 'items';\r\n                deArr.tags = 'Tags ';\r\n                if (blnUserChange == item_val.id) {\r\n                    // sets the value null of blnUserChange\r\n                    blnUserChange = null;\r\n                    // creates 'text' key with value of key 'label' of variable item_val\r\n                    deArr.text = item_val.label;\r\n                } else {\r\n                    // creates 'text' key with value '*' + value of key 'imageurl' of variable item_val + '[' + value of key 'imagealt' of variable item_val + ']' if key 'imageurl' is not blank otherwise value will be the value of key 'label' of variable item_val\r\n                    deArr.text = (item_val.imageurl != '') ? '*' + item_val.imageurl + '[' + item_val.imagealt + ']' : item_val.label;\r\n                }\r\n                rowArr = [...rowArr, deArr];\r\n            })\r\n            myObj = [...myObj, rowArr];\r\n        });\r\n\t\t// assign the value of array myObj to state authordata\r\n\t\tstate.authordata = myObj;\r\n    }\r\n\r\n    // split xml in chunks \r\n    function splitArrayIntoChunksOfLen(arr, len) {\r\n        let chunks = [], i = 0, n = arr.length;\r\n        while (i < n) {\r\n            chunks.push(arr.slice(i, i += len));\r\n        }\r\n        return chunks;\r\n    }\r\n\r\n\t// close the edit dialog box and update the xml after click on update or close (x) button\r\n\tfunction closeDialog() {\r\n        if (AH.select('#editValue').value.trim() != '') {\r\n            AH.getBS('#editModal','Modal').hide();\r\n            // change the xml and update the xml\r\n            reverseXml();\r\n        }\r\n    }\r\n\r\n\t// change the xml and update the xml\r\n    function reverseXml() {\r\n        try {\r\n            // contains the string data of xml json\r\n            let reversedata = JSON.stringify(state.xml, null, 4);\r\n            // creates new xml \r\n            let updatedXml = '<smxml type=\"35\" name=\"AlignMatch\" maxwidth=\"' + state.maxWidth + '\"><!--[CDATA[' + reversedata + ']]--></smxml>';\r\n            // updates xml\r\n            getChildXml(updatedXml);\r\n        } catch (event) {\r\n            console.warn(event.message);\r\n        }\r\n    }\r\n\r\n\t// open the edit dialog box to update the text of that cell which is clicked\r\n    function openEditDialog(type, id, event) {\r\n        // updates the value of state 'editType'\r\n\t\tstate.editType = type,\r\n\t\t// updates the value of state 'editId' \r\n        state.editId = id;\r\n        // shows the edit dialog box when clicked on any cell for update the text of that cell\r\n        AH.getBS('#editModal','Modal').show();\r\n        // contains the value of cell, which is clicked and sets that value in the body of edit dialog box\r\n        AH.select(\"#editValue\").value = event.target.value;\r\n        // focus the body of edit dialog box\r\n        AH.select(\"#editValue\").focus();\r\n    }\r\n\r\n\t// updates the data of category\r\n    function updateCategory(xelement, event) {\r\n        state.xml.category.categories.map(function (data) {\r\n            if (data.id == xelement) {\r\n                // updates the data of category\r\n                data.text = (event.target.value != '') ? event.target.value : '';\r\n            }\r\n            if (data.text.trim() == '') {\r\n                AH.selectAll('#editValue', 'addClass', 'border-danger');\r\n                AH.selectAll('.error_msg', 'removeClass', 'h');\r\n            } else {\r\n                AH.selectAll('#editValue', 'removeClass', 'border-danger');\r\n                AH.selectAll('.error_msg', 'addClass', 'h');\r\n            }\r\n        });\r\n    }\r\n\r\n\t// used to update the cell value\r\n    function updateItem(xelement, event) {\r\n        try {\r\n            state.xml.item.items.map(function (data) {\r\n                if (data.id == xelement) {\r\n                    if (event.target.value != '') {\r\n                        if (event.target.value.charAt(0) == '*') {\r\n                            // contains the index of '[' in target element value\r\n                            let startIndex = event.target.value.indexOf('['),\r\n                                // contains the index of ']' in target element value\r\n                                endIndex = event.target.value.indexOf(']');\r\n                            if (startIndex > -1 && endIndex > -1) {\r\n                                // contains the image data\r\n                                let imageurl = event.target.value.substr(1, startIndex - 1);\r\n                                // sets the value of key 'imageurl' of array key 'items' of object key item of state object xml that is equals to the value of variable imageurl\r\n                                data.imageurl = imageurl;\r\n                                // sets the value blank of key 'label' of array key 'items' of object key item of state object xml\r\n                                data.label = '';\r\n                                // contains the alt message of image\r\n                                let imagealt = event.target.value.substring(event.target.value.lastIndexOf(\"[\") + 1, event.target.value.lastIndexOf(\"]\"));\r\n                                // sets the value of key 'imagealt' of array key 'items' of object key item of state object xml that is equals to the value of variable imagealt\r\n                                (imagealt != '') ? (data.imagealt = imagealt) : (data.imagealt = \"imagealt\");\r\n                            } else {\r\n                                // sets the value of key 'label' of array key 'items' of object key item of state object xml that is equals to the value of target element\r\n                                data.label = event.target.value;\r\n                                // makes the image value blank\r\n                                data.imageurl = \"\";\r\n                                // makes the image alt message value blank\r\n                                data.imagealt = \"\";\r\n                                // shows the warning message\r\n                                AH.alert(\"Image format is not correct\");\r\n                            }\r\n                        } else {\r\n                            // makes the image value blank\r\n                            data.imageurl = \"\";\r\n                            // makes the image alt message value blank\r\n                            data.imagealt = '';\r\n                        }\r\n                        if (AH.select('#editValue').value.trim() == '') {\r\n                            AH.selectAll('#editValue', 'addClass', 'border-danger');\r\n                            AH.selectAll('.error_msg', 'removeClass', 'h');\r\n                        } else {\r\n                            AH.selectAll('#editValue', 'removeClass', 'border-danger');\r\n                            AH.selectAll('.error_msg', 'addClass', 'h');\r\n                        }\r\n                    }\r\n                    data.label = event.target.value;\r\n                    // id of the cell on which clicked for change the text\r\n                    blnUserChange = xelement;\r\n                }\r\n            });\r\n        } catch (event) {\r\n            console.warn(event.message);\r\n        }\r\n    }\r\n\r\n\t// removes the row and updates the value of key 'tags' of each cell and update the xml\r\n    function removeItems(event) {\r\n        // find the number of categories exist\r\n        let collen = state.xml.category.categories.length;\r\n        // finds the number of items row exist\r\n        let rowlen = state.xml.item.items.length / collen;\r\n        if (rowlen > 2) {\r\n            // contains numeric data from id of delete button used for delete the row with prefix 'Tags '\r\n            let tag = 'Tags ' + this.getAttribute(\"row_tags\");\r\n            // creates temporary array\r\n            let tempArr = [];\r\n            state.xml.item.items.map(function (data, i) {\r\n                if (data.tags != tag) {\r\n                    // pushes the cell data into array tempArr which not lies in the row which we want to delete\r\n                    tempArr.push(state.xml.item.items[i]);\r\n                }\r\n            });\r\n            // used to uniquely define the 'tags' key value of array key 'items' of object key 'item' of state object 'xml'\r\n            let _count = 1;\r\n            // contains the categories used\r\n            state.authordata.map(function (datai) {\r\n                // contains the perticular category at specified index\r\n                datai.map(function (dataj) {\r\n                    tempArr.map(function (datak) {\r\n                        if (dataj.id == datak.id) {\r\n                            // defines the value for key 'tags' of array object key 'items' where column id match with category id of key object 'item' of state object xml\r\n                            datak.tags = 'Tags ' + (_count++);\r\n                        }\r\n                    });\r\n                });\r\n            });\r\n            // finds the number of row exist after removing the desired row\r\n            rowlen = tempArr.length / collen;\r\n            for (let i = 0, k = 0; i < rowlen; i++) {\r\n                for (let j = 0; j < collen; j++ , k++) {\r\n                    // updates value of key 'tags' of array object key 'items' for row 'i' and column 'j' of key object 'item' of state object xml\r\n                    tempArr[k].tags = 'Tags ' + (i + 1);\r\n                }\r\n            }\r\n            // updates the value of array key 'items' of object key 'item' of state object 'xml'\r\n            state.xml.item.items = tempArr;\r\n            // change the xml and update the xml\r\n            reverseXml();\r\n        } else {\r\n            // shows the warning message\r\n            AH.alert(\"You can't have less than 2 rows.\");\r\n        }\r\n    }\r\n\r\n\t// removes the category column have specified 'id' and update the xml\r\n    function removeCategory(id) {\r\n        if (state.xml.category.categories.length > 2) {\r\n            state.xml.category.categories.map(function (data, i) {\r\n                if (data.id == id) {\r\n                    // removes the data at index 'i' from array key 'categories' of key object 'category' of state object 'xml'\r\n                    state.xml.category.categories.splice(i, 1);\r\n                    state.xml.item.items.map(function (data1, j) {\r\n                        if (data.id == data1.category) {\r\n                            // removes the data at index 'j' from array key 'items' of object key 'item' of state object 'xml'\r\n                            state.xml.item.items.splice(j, 1);\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            // change the xml and update the xml\r\n            reverseXml();\r\n        } else {\r\n            // shows the warning message\r\n            AH.alert(\"You can't have less than 2 categories.\");\r\n        }\r\n    }\r\n\r\n\t// used to add the row\r\n    function addItem() {\r\n        // object containing numeric value from id of last category and item\r\n        let ids = getIds();\r\n        // contains category available\r\n        let cat = state.xml.category.categories;\r\n        // used to defined the unique id of the cells in added row\r\n        let itemId = ids.itemId + 1;\r\n        // contains no of column exist\r\n        let noOfCols = state.xml.category.categories.length;\r\n        // contains the value after adding 1 in no of avialable cells \r\n        let itemLen = state.xml.item.items.length + 1;\r\n        // contains no of item row available\r\n        let noOfRow = (itemLen - 1) / noOfCols;\r\n        if (state.xml.category.categories.length >= 1) {\r\n            if (noOfRow <= 3) {\r\n                for (let i = 1; i <= noOfCols; i++) {\r\n                    state.xml.item.items.push({\r\n                        imageurl: \"\",\r\n                        imagealt: \"\",\r\n                        // defines the id of the added cell \r\n                        id: 'item_' + itemId,\r\n                        label: \"\",\r\n                        // defines in which category it lies\r\n                        category: cat[i - 1].id,\r\n                        // used at the time of deletion\r\n                        tags: \"Tags \" + (noOfRow + 1)\r\n                    });\r\n                    // increases the value of item cell\r\n                    itemLen++;\r\n                    // increases the value for uniquley define the id of item cell\r\n                    itemId++;\r\n                }\r\n                // change the xml and update the xml\r\n                reverseXml();\r\n            } else {\r\n                // shows the warning message\r\n                AH.alert(\"You can't have more than 4 rows.\");\r\n            }\r\n        } else {\r\n            // shows the warning message\r\n            AH.alert('First add category.');\r\n        }\r\n    }\r\n\r\n\t// used to add the category column and update that column with cell item also update the xml\r\n    function addCategory() {\r\n        if (state.xml.category.categories.length <= 3) {\r\n            // defines category number\r\n            let catLen = state.xml.category.categories.length + 1;\r\n            // object containing numeric value from id of last category and item\r\n            let ids = getIds();\r\n            // used to set the id of the category\r\n            let catId = ids.catId + 1;\r\n            // used to set the id of the items added in last category which is currently added\r\n            let itemId = ids.itemId + 1;\r\n            // used for define the number of row exist\r\n            let itemLen = state.xml.item.items.length + 1;\r\n            // finds no of row exist for items\r\n            let noOfRow = (itemLen - 1) / (catLen - 1);\r\n            // used for define the id of new added category\r\n            let newcat = ('category_' + catId);\r\n            // sets the id and text of the category\r\n            state.xml.category.categories.push({\r\n                id: newcat,\r\n                text: \"Default Category\"\r\n            });\r\n            for (let i = 0; i < noOfRow; i++) {\r\n                // used for define the id of new added cell/item\r\n                let newitem = ('item_' + itemId);\r\n                // used to add the default cells for added category column with same category id and unique cell id\r\n                state.xml.item.items.splice((catLen - 1) * (i + 1) + i, 0, {\r\n                    imageurl: \"\",\r\n                    imagealt: \"\",\r\n                    // defines the id of the added cell \r\n                    id: newitem,\r\n                    label: \"\",\r\n                    // defines in which category it lies\r\n                    category: newcat,\r\n                    // used at the time of deletion\r\n                    tags: \"Tags \" + (i + 1)\r\n                });\r\n                // increase by 1 for defined unique id of each cell item of added category column\r\n                itemId++;\r\n            }\r\n            // enabled the button have class matchbutton\r\n            AH.select('.matchbutton').disabled = false;\r\n            // shows the element have class alignTestarea \r\n            AH.select('.alignTestarea').style.display = 'block';\r\n            // change the xml and update the xml\r\n            reverseXml();\r\n        } else {\r\n            // shows the warning message\r\n            AH.alert(\"You can't have more than 4 categories.\");\r\n        }\r\n    }\r\n\r\n\t// returns object containing numeric value from id of last category and item\r\n    function getIds() {\r\n\t\t// contains category available\r\n        let cat = state.xml.category.categories,\r\n            // contains items available\r\n            _item = state.xml.item.items;\r\n        // used for contain the category id\r\n        let catId,\r\n            // used for contain the items id\r\n            itemId;\r\n        if (cat.length > 0) {\r\n            // contains the last category\r\n            let catLast = cat[cat.length - 1];\r\n            // contains the numeric part from id of last category\r\n            catId = parseInt(catLast.id.split('_')[1]);\r\n        } else {\r\n            catId = 0;\r\n        }\r\n\r\n        if (_item.length > 0) {\r\n            // contains last item\r\n            let itemLast = _item[_item.length - 1];\r\n            // contains the numeric part from id of last item\r\n            itemId = parseInt(itemLast.id.split('_')[1]);\r\n        } else {\r\n            itemId = 0;\r\n        }\r\n        // returns object containing numeric value from id of last category and item\r\n        return {\r\n            catId: catId,\r\n            itemId: itemId\r\n        };\r\n    }\r\n\r\n\t// upload the file and change the xml and update the xml also change the textarea value of that cell with image file name\r\n    function uploadFile(container) {\r\n        // creates an empty FormData object\r\n        let fd = new FormData();\r\n        Array.prototype.forEach.call(files, (_f)=> {\r\n            // append the new value onto the end of the existing set of values of secified key\r\n            fd.append('image_file', _f); \r\n        });\r\n        AH.ajax({\r\n            // path of the server from which you want to communicate\r\n            url: baseUrl + \"sim/smartsim/imageAudioUpload.php?func=upload_pic&ajax=1&user_guid=1&extension=jpg\",\r\n            formData: true,\r\n            data: fd,\r\n        }).then((urlPath)=> {\r\n            // contains only file name after removing the path\r\n            let imagePath;\r\n            if (urlPath == \"0\") {\r\n                // shows the warning message\r\n                AH.alert('Error In Uploading Image File!');\r\n                AH.activate(0);\r\n            } else {\r\n                AH.activate(0);\r\n                // contains null or as an Array object according to not match or match of http: in return data from server\r\n                let matching = urlPath.match(/http:/g);\r\n                if (matching) {\r\n                    // removes the path of the uploaded image\r\n                    imagePath = urlPath.replace(\"http://s3.amazonaws.com/jigyaasa_content_static//\", \"\");\r\n                } else {\r\n                    // removes the path of the uploaded image\r\n                    imagePath = urlPath.replace(\"//s3.amazonaws.com/jigyaasa_content_static//\", \"\");\r\n                }\r\n\r\n                // sets the value of variable imagePath with prefix '*' and sufix '[]' in textarea of cell have id equals to the value of variable container\r\n                AH.select('#' + container).querySelector('textarea').value = '*' + imagePath + '[]';\r\n                // changes the image and alt text and update the xml\r\n                updateImageUrl(container, imagePath);\r\n            }\r\n        }).catch((e)=> {\r\n            console.warn(\"error in upload\", e);\r\n        });\r\n    }\r\n\r\n\t// changes the image and alt text and update the xml\r\n    function updateImageUrl(container, imagePath) {\r\n        state.xml.item.items.map(function (data, index) {\r\n            if (data.id == container) {\r\n                // change the value of key 'imageurl' of items object at index retuned by the map method with the value equals to the value of variable imagePath of item key of state xml \r\n                data.imageurl = imagePath;\r\n                // change the value of key 'imagealt' of items object at index retuned by the map method with the value of index retuned by the map method with prefix 'imagealt_text' of item key of state xml\r\n                data.imagealt = 'imagealt_text' + index;\r\n                // change the value of key 'label' of items object at index retuned by the map method with blank value of item key of state xml\r\n                data.label = '';\r\n            }\r\n            // change the xml and update the xml\r\n            reverseXml();\r\n        });\r\n    }\r\n\r\n\t// change and update the xml after upload the image\r\n    function getChosenFile(event) {\r\n        let container = event.target.closest('.columnContainer').id;\r\n        AH.activate(2);\r\n        // uploades the image and change the xml and update the xml\r\n        uploadFile(container);\r\n    }\r\n\r\n    // For ADA\r\n    function keydownAda(event) {\r\n        if (event.which === 13) {\r\n            // click the textarea element or image upload icon on which keydown\r\n            this.click();\r\n        }\r\n    }\r\n</script>\r\n<div class=\"border\">\r\n\t<div class=\"categoryAuthorcontainer\">\r\n\t\t<div class=\"d-flex align-items-center mx-2 mt-2\">\r\n\t\t\t<div class=\"tableContainer light-cyan-bg mx-auto\">\r\n\t\t\t\t{#if state.authordata}\r\n\t\t\t\t\t{#each state.authordata as data, i}\r\n\t\t\t\t\t\t<div key={i} class=\"rowContainer pt-2 d-flex align-items-center pe-3\">\r\n\t\t\t\t\t\t\t{#each data as data4, j}\r\n\t\t\t\t\t\t\t\t<div key={j} class=\"columnContainer border-0\" id={data4.id}>\r\n\t\t\t\t\t\t\t\t\t<div class=\"d-flex flex-column-reverse width180\">\r\n\t\t\t\t\t\t\t\t\t\t<textarea aria-label=\"{data4.text}\" class={data4.class == 'categories' ? 'categories pointer text_alignmatch' : 'items pointer text_alignmatch'}\r\n                                            value={data4.text} on:keydown=\"{keydownAda}\" \r\n                                            on:click={data4.class == 'categories' ? openEditDialog.bind(this, \"categories\", data4.id) : openEditDialog.bind(this, \"items\", data4.id)}\r\n                                            placeholder={data4.class == 'categories' ? 'Category Name' : 'Item Information'}\r\n                                            readonly=\"readonly\"\r\n                                        ></textarea>\r\n                                        {#if data4.class == 'categories'}\r\n                                            <button type=\"button\"\r\n                                                class='btn_category btn mx-auto'\r\n                                                on:click={removeCategory.bind(this, data4.id)}\r\n                                            >\r\n                                                <span title=\"{l.delete_column}\" data-bs-toggle=\"tooltip\" class={icon_class}></span>\r\n                                            </button>\r\n                                        {/if}\r\n                                    </div>\r\n                                    {#if data4.class == 'items'}\r\n                                        <label class='fileUpload btn btn-outline-primary bg-white rounded-0' tabindex=\"0\" on:keydown=\"{keydownAda}\">\r\n                                            <span title=\"{l.file_elem}\" class=\"icomoon-images position-relative\"></span>\r\n                                            <input type=\"file\" bind:files id={'imgUpload' + data4.id} class=\"imgUpload h\" on:change=\"{getChosenFile}\" />\r\n                                        </label>\r\n                                    {/if}\r\n\t\t\t\t\t\t\t\t</div>\r\n                            {/each}\r\n                            {#if i != 0}\r\n                                <button type=\"button\" id=\"tags_{i}\" row_tags={i} class='btn_category btn me-2 pt-0' on:click={removeItems}>\r\n                                    <span class=\"icomoon-new-24px-delete-1 position-relative s3\" title=\"{l.delete_row}\" data-bs-toggle=\"tooltip\"></span>\r\n                                </button>\r\n                            {/if}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t{/each}\r\n\t\t\t\t{/if}\r\n\t\t\t</div>\r\n\t\t\t<div class=\"text-center position-relative\">\r\n                <AlignMatchButton\r\n                    btnClass=\"span16 add_cat_btn w-auto\"\r\n                    id=\"add_cat_btn\"\r\n                    on:btnClick = {addCategory}\r\n                    btnName={l.add_category}\r\n                />\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t<div class=\"text-center my-2\">\r\n            <AlignMatchButton\r\n                id=\"btn\"\r\n                on:btnClick = {addItem}\r\n                btnName={l.add_item}\r\n            />\r\n\t\t</div>\r\n\t</div>\r\n\t<div class=\"modal\" id=\"editModal\">\r\n\t\t<div class=\"modal-dialog modal-dialog-centered span4\">\r\n\t\t\t<div class=\"modal-content\">\r\n\t\t\t\t<div class=\"modal-header\">\r\n\t\t\t\t\t<h4 class=\"modal-title\">{l.edit_dialog}</h4>\r\n\t\t\t\t\t<button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-hidden=\"true\"></button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"modal-body text-center\">\r\n\t\t\t\t\t<textarea class=\"text-start w-100 h-100 form-control\" id=\"editValue\" on:change={state.editType == 'categories' ? updateCategory.bind(this, state.editId) : updateItem.bind(this, state.editId)}></textarea>\r\n                    <p class=\"error_msg text-left text-danger mb-0 h\">Please enter some valid data.</p>\r\n                </div>\r\n\t\t\t\t<div class=\"modal-footer mt-0\">\r\n\t\t\t\t\t<button type=\"button\" id=\"updateButton\" class=\"sure btn btn-primary\" on:click={closeDialog.bind(this)}>{l.update}</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</div>\r\n</div>"],"names":["ctx","btnClass","btnName","id","dispatch","createEventDispatcher","authordata","length","l","delete_column","bind","this","file_elem","keydownAda","class","text","delete_row","add_category","add_item","edit_dialog","update","editType","editId","event","which","click","files","getChildXml","editorState","xml","state","myObj","blnUserChange","writable","csv","json","maxWidth","subscribe","items","loadModule","loadXml","MYXML","jsonData","JSON","parse","smxml","__cdata","qwerty","tempObj","stringify","ele","category","categories","forEach","index","deArr","tags","push","catLen","arr","len","chunks","i","n","slice","splitArrayIntoChunksOfLen","item","value","rowArr","item_val","label","imageurl","imagealt","manipulate","_maxwidth","parseInt","parseXMLAuthoring","XMLToJSON","reverseXml","reversedata","updatedXml","console","warn","message","getIds","catId","itemId","cat","_item","catLast","split","itemLast","uploadFile","container","fd","FormData","Array","prototype","call","_f","append","AH","ajax","url","baseUrl","formData","data","then","urlPath","imagePath","alert","activate","match","replace","select","querySelector","map","updateImageUrl","catch","e","afterUpdate","beforeUpdate","set","stopAuthoringUpdate","onMount","trim","getBS","hide","type","show","target","focus","xelement","selectAll","charAt","startIndex","indexOf","endIndex","substr","substring","lastIndexOf","collen","rowlen","tag","getAttribute","tempArr","_count","datai","dataj","datak","k","j","splice","data1","ids","noOfCols","itemLen","noOfRow","newcat","newitem","disabled","style","display","closest"],"mappings":"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"}