{"version":3,"file":"Drawing-52a82600.js","sources":["../../../clsSMDrawing/DrawingModal.svelte","../../../clsSMDrawing/Drawing.svelte"],"sourcesContent":["<!--\n *  File Name   : DrawingModal.svelte\n *  Description : Responsible for DrawingModal\n *  Author      : Ayush Srivastava\n *  Package     : clsSMDrawing(Drawing Modal)\n *  Last update : 09-Apr-2021\n *  Last Updated By : Ayush Srivastava\n-->\n<script>\n    export let l;\n</script>\n<div id=\"drawing-modal\" class=\"modal fade\" tabIndex=\"-1\">\n    <div class=\"modal-dialog modal-dialog-centered\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\">{l.configuration}</h4>\n                <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\">&times;</button>\n            </div>\n            <div class=\"modal-body overflow-y\">\n                <div class=\"authoring-modal\">\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"form-group text-left\">\n                                <label class=\"control-label font-weight-normal d-inline-flex\" for=\"backgroundImage\">{l.background_image}</label>\n                                <input type=\"text\" disabled=\"disabled\" readonly=\"readonly\" class=\"form-control drawing_bgimg\" id=\"backgroundImage\" name=\"backgroundImage\" />\n                            </div>\n                        </div>\n                        <div class=\"col-6 margin-top-2\">\n                            <button id=\"upload_media\" type=\"button\" value={l.upload_media_text} margin=\"normal\" class=\"btn btn-primary w-100\" >{l.upload_media_text}</button>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <div class=\"form-group text-left\">\n                                <label class=\"control-label font-weight-normal d-inline-flex\" for=\"imgAlt\" ><span class=\"mendatory_label float-left\">{l.alt_txt_image}</span></label>\n                                <input type=\"text\" class=\"form-control\" id=\"imgAlt\" value=\"\" name=\"imgAlt\" />\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                        <div class=\"col-6\">\n                            <div class=\"form-group text-left\">\n                                <label class=\"control-label font-weight-normal d-inline-flex\" for=\"imgWidth\"><span class=\"mendatory_label float-left\">{l.width_of_image}</span></label>\n                                <input type=\"number\" class=\" form-control num\" id=\"imgWidth\" value=\"\" name=\"imgWidth\" />\n                            </div>\n                        </div>\n                        <div class=\"col-6\">\n                            <span>\n                                <label for=\"lineColor\" class=\"text-dark\">{l.draw_color}</label>\n                            </span>\n                            <select id=\"lineColor\" class=\"form-control form-select\">\n                                <option value={l.red}>{l.red}</option>\n                                <option value={l.green}>{l.green}</option>\n                                <option value=\"#00BCD4\" selected=\"selected\">{l.light_blue}</option>\n                                <option value={l.blue}>{l.blue}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div class=\"row mb-3\">\n                        <div class=\"col-6\">\n                            <span>\n                                <label for=\"markPointColor\" class=\"text-dark\">{l.markPointColor}</label>\n                            </span>\n                            <select id=\"markPointColor\" class=\"form-control form-select\">\n                                <option value=\"#00FF00\" selected=\"selected\">{l.lightGreen}</option>\n                                <option value=\"#000\">{l.black}</option>\n                                <option value=\"#ff8c00\">{l.orange}</option>\n                            </select>\n                        </div>\n                    </div>\n                    <div>\n                        <span>\n                            <!-- svelte-ignore a11y-label-has-associated-control -->\n                            <label class=\"mt-2 text-dark relative\"><span class=\"mendatory_label float-left\">{l.tools}</span></label>\n                        </span>\n                    </div>\n                    <div class=\"d-block toolsCheckbox\">\n                        <div class=\"form-check form-check-inline\">\n                            <input type=\"checkbox\" value=\"_scribble\" class=\"checkbox-inline toolCheckbox form-check-input\" name=\"scribble_checkbox\" id=\"scribble_checkbox\" />\n                            <label for=\"scribble_checkbox\" class=\"text-dark form-check-label\">{l.scribble}</label>\n                        </div>\n                        <div class=\"form-check form-check-inline\">\n                            <input type=\"checkbox\" value=\"_line\" class=\"checkbox-inline toolCheckbox form-check-input\" name=\"line_checkbox\" id=\"line_checkbox\" />\n                            <label for=\"line_checkbox\" class=\"text-dark form-check-label\">{l.line}</label>\n                        </div>\n                        <div class=\"form-check form-check-inline\">\n                            <input type=\"checkbox\" value=\"_compass\" class=\"checkbox-inline toolCheckbox form-check-input\" name=\"compass_checkbox\" id=\"compass_checkbox\" />\n                            <label for=\"compass_checkbox\" class=\"text-dark form-check-label\">{l.compass}</label>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"modal-footer\">\n                <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">{l.cancel}</button>\n                <button type=\"button\" class=\"btn btn-secondary drawing_modal_submit\">{l.submit}</button>\n            </div>\n        </div>\n    </div>\n</div>","<!--\n *  File Name   : Drawing.svelte\n *  Description : Responsible for Authoring Side functionality\n *  Author      : Ayush Srivastava\n *  Package     : clsSMDrawing (Authoring)\n *  Last update : 09-April-2021\n *  Last Updated By : Ayush Srivastava\n-->\n<script>\n    import { afterUpdate, onMount } from \"svelte\";\n\timport { writable } from \"svelte/store\";\n\timport { XMLToJSON, JSONToXML , AH } from '../helper/HelperAI.svelte';\n    import swal from 'sweetalert';\n    import l from '../src/libs/Lang';\n    import Draggable from \"../clsSMDragNDrop/libs/plugins/Draggable\";\n    import Resizable from \"../clsSMDragNDrop/libs/plugins/Resizable\";\n    import DrawingModal from \"./DrawingModal.svelte\";\n    export let xml;\n    // export let editorState;\n    export let getChildXml;\n    let bgImgPath = 'https://s3.amazonaws.com/jigyaasa_content_static/';\n    let xmlns = \"http://www.w3.org/2000/svg\";\n    // denotes that drawing is not sketching\n    let isDrawing = false;\n    // used to creates an element with the specified namespace URI and qualified name\n    let scribble;\n    // denotes mouse co-ordinates\n    let auth_mouseX, auth_mouseY;\n    // container of drawing sketched by the help of drawing tools\n    let drawing_paths;\n    // scribble drawing tool is enable\n    let authoringMode = 'scribble';\n    // strike color of drawing\n    let authColor = '#00BCD4';\n    // stroke width of the drawing\n    let authThickness = 5;\n    // contains object that have key type, index, mode, order and d\n    let scribblePath = [];\n    // contains sequence of the drawing\n    let scribbleCount = 0;\n    // contains current mouse x position\n    let checkCurrentPositionX;\n    // contains current mouse y position\n    let checkCurrentPositionY;\n    // denoes no of undo done\n    let undoCount = 0;\n    // contains undo data\n    let undo_list = [];\n    // contains redo data\n    let redo_list = [];\n    // used to check validateInput\n    let isValid = true;\n    // for compass variable\n    // denotes x co-ordinate of the center\n    let cx;\n    // denotes y co-ordinate of the center\n    let cy;\n    // denotes x co-ordinate of the center of middle circle lies on rotationbar\n    let midCircle_cx;\n    // denotes x co-ordinate of the center of middle circle lies on rotationbar\n    let midCircle_cy;\n    // denotes center of x co-ordinate of small middle circle lies on rotationbar\n    let midSmallCircle_cx;\n    // denotes x co-ordinate of the center of small middle circle lies on rotationbar\n    let midSmallCircle_cy;\n    // denotes center of x co-ordinate of last circle lies on rotationbar\n    let lastCircle_cx;\n    // denotes x co-ordinate of the center of last circle lies on rotationbar\n    let lastCircle_cy;\n    // denotes center of x co-ordinate of rotation indicator\n    let lastSmallCircle_cx;\n    // denotes x co-ordinate of the center of rotation indicator\n    let lastSmallCircle_cy;\n    // radius of the compass\n    let compassRadius;\n    // denotes that compass is not moved\n    let isCompassMove = false;\n    // sets the default angle of compass\n    let compassAngle = 90;\n    // denotes that compass radius not increased\n    let isRadiusIncrease = 0;\n    // denotes initial points co-ordinate\n    let initialPoint = { x: null, y: null };\n    // denotes final points co-ordinate\n    let finalPoint = { x: null, y: null };\n    // denotes that is radius rotated\n    let isRadiusRotate = 0;\n    // used for answer recording\n    let defaultXML = '';\n    // defines that not any point added using 'Add Point' button\n    let selectionPoint = 0;\n    // used for store the point added by clicking on 'Add Point' button\n    let selectionArray = [];\n    // used to contain the x, y and radius of Point added by clicking on 'Add Point' button\n    let cdata = '';\n    // used to enables the drawing tools that can be used to draw the drawing\n    let selectedToolsArray = [\"_scribble\", \"_line\", \"_compass\"];\n    // used for access the focus points using keyboard\n    let isAccessibleMarking = 1;\n    // contains the focusPoints\n    let accessibilityPoints = [];\n    // array contains x and y co-ordinate of added focus point\n    let tempAccessPoints = [];\n    // number of focus point exist\n    let focusPointCount = 1;\n    let auth_store = writable({\n        // contains the xml\n        xml: '',\n        // used to open the configuration dialog box\n        bgImg: 'useraccount_000ANv.png',\n        snackback: false,\n        // contains points used for correct answer\n        cDATA: '',\n        // contains focus points that can be access via keyboard \n        focusDATA: '',\n        imgWidth: \"600\",\n        alt: \"Triangle image\",\n        // message for snackbar\n        message: '',\n        // contains drawing tools\n        selectedTools: selectedToolsArray,\n        // for stroke color of drawing\n        lineColor: '#00BCD4',\n        // for mark point color\n        markPointColor: '#00FF00'\n\t});\n    let state = {};\n    const unsubscribe = auth_store.subscribe(value => {\n\t\tstate = value;\n\t});\n\n    afterUpdate(async()=> {\n\t\tif (state.xml != xml) {\n            // for changing the data when XML is changed manually \n            parseXMLForGettingData();\n            state.xml = xml;\n        }\n    })\n\n    // call after html render and added the necessary events\n    onMount(async() => {\n        drawing_paths = AH.select('.drawing_paths');\n\n        AH.setAttr('.centerImg #svgImg', {\n            'src': bgImgPath + '' + state.bgImg, \n            'alt': state.alt, \n            'width': state.imgWidth,\n        });\n\n        AH.setAttr('.auth_drawing_toolbar', {\n            'style': 'width:' + (Number(state.imgWidth) + 2) + 'px'\n        });\n        \n        AH.setAttr('.authCenterImg', {\n            'style': 'width:' + (Number(state.imgWidth) + 2) + 'px'\n        });\n\n        updateCompassCalculation(160, 118, 100, 90);\n\n\n        AH.listen('body', 'mousedown', '#authoringSvg .mid_circle', function () {\n            if (authoringMode == \"compass\") {\n                // checks if radius of the circle increased\n                isRadiusIncrease = 1;\n            }\n        });\n\n        AH.listen('body', 'mousedown', '#authoringSvg .midSmallCircle', function () {\n            if (authoringMode == \"compass\") {\n                // checks if radius of the circle increased\n                isRadiusRotate = 1;\n            }\n        });\n\n        AH.listen('body', 'mousedown', '#authoringSvg .drawing_compass_center', function (current, event) {\n            if (authoringMode == \"compass\") {\n                // used to set the x and y co-ordinate of the mouse position\n                setMouseCoordinates(event);\n                // contains the value of center x\n                cx = auth_mouseX;\n                // contains the value of center y\n                cy = auth_mouseY;\n                // contains the value of compass route radius\n                compassRadius = AH.select('.drawing-compass-route').getAttribute('r');\n                // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n                updateCompassCalculation(cx, cy, compassRadius, compassAngle);\n                // rotate the small middle circle at defined angle from its center position\n                AH.selectAll('#authoringSvg .midSmallCircle', 'attr', {\"transform\" : \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .midSmallCircle').getAttribute('cx') + \",\" + AH.select('#authoringSvg .midSmallCircle').getAttribute('cy') + \")\"});\n                // rotate the middle circle at defined angle from its center position\n                AH.selectAll('#authoringSvg .mid_circle', 'attr' , {\"transform\" : \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .mid_circle').getAttribute('cx') + \",\" + AH.select('#authoringSvg .mid_circle').getAttribute('cy') + \")\"});\n                // rotate the rotation indicator circle at defined angle from its center position\n                AH.selectAll('#authoringSvg .lastCircleMid', 'attr', {\"transform\" : \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .lastCircleMid').getAttribute('cx') + \",\" + AH.select('#authoringSvg .lastCircleMid').getAttribute('cy') + \")\"});\n                // defines that compass moved\n                isCompassMove = true;\n            }\n        });\n\n        AH.listen('body', 'mousemove', '#authoringSvg .lastCircle', function (current) {\n            // adds the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\n            current.classList.add(\"lastCircle_hover\");\n            // shows the rotational indicator\n            AH.selectAll('#authoringSvg .lastCircleMid', 'attr' , {'opacity': 1});\n        });\n        \n        AH.listen('body', 'mouseout', '#authoringSvg .lastCircle', function (current) {\n            // removes the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\n            current.classList.remove(\"lastCircle_hover\");\n            // hides the rotational indicator\n            AH.selectAll('#authoringSvg .lastCircleMid', 'attr' , {'opacity': 0});\n        });\n\n        AH.listen('body', 'mousedown', '#authoringSvg .lastCircle', function (current) {\n            if (authoringMode == \"compass\") {\n                // used check that drawing \n                isDrawing = true;\n                // checks if compass rotaionbar rotated\n                isRadiusRotate = 1;\n                // change the cursor style to grabbing for the circle that lies on the compass route\n                AH.selectAll('#authoringSvg .lastCircle', 'css', {'cursor':'grabbing'});\n                // Creates an element with the value of variable xmlns namespace URI and path name.\n                scribble = document.createElementNS(xmlns, 'path');\n                // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                setAuthColor(authColor, authThickness, authoringMode);\n                // adds a new attribute 'data-type' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-type', authoringMode + '_' + scribbleCount);\n                // adds a new attribute 'data-order' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-order', scribbleCount);\n                // adds a new attribute 'd' (with a namespace null)\n                scribble.setAttributeNS(null, 'd', 'M' + lastCircle_cx + ' ' + lastCircle_cy);\n                // contains the center x of last circle on rotationbar\n                checkCurrentPositionX = lastCircle_cx;\n                // contains the center y of last circle on rotationbar\n                checkCurrentPositionY = lastCircle_cy;\n                // pushes the object containing keys mode, order, type, index and d \n                scribblePath.push({\n                    mode: 'add',\n                    order: scribbleCount,\n                    type: authoringMode + '_' + scribbleCount,\n                    index: scribbleCount,\n                    d: 'M' + lastCircle_cx + ' ' + lastCircle_cy\n                });\n            }\n        });\n\n        AH.listen('body', 'mousedown', '#authoringSvg', function (current, event) {\n            // used to set the UI of the buttons and sketch or remove the drawing and adds focus point to access via keyboard\n            authoringMousedownDraw(event);\n        });\n\n        // only for authoring area for adding answer points \n        AH.listen('body', 'click', '#authoring_point', function (current) {\n            // parses the point that can be access via keyboard on preview side\n            parseXMLForAccessPoint();\n            // removes the class active from element have class 'authoring_btn' or id 'focus_point'\n            AH.selectAll('.authoring_btn, #focus_point', 'removeClass', 'active');\n            // adds the class active to 'Add Point' button\n            current.classList.add('active')\n            // assign the value 'authoring_point' to variable 'authoringMode'\n            authoringMode = 'authoring_point';\n            // removes the class 'eraserHover' from the elements have tag name path inside the element have id authoringSvg\n            AH.selectAll('#authoringSvg path', 'removeClass','eraserHover');\n            // sets the cursor style to 'unset'\n            AH.selectAll('#authoringSvg', 'css', {'cursor': 'unset'});\n            // hides the compass element\n            AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n            if (AH.select('#authoring_point').innerText == \"Add Point\") {\n                // increases the value of variable 'selectedPoint to detect that how many points are added using 'Add Point' button\n                selectionPoint++;\n                // push the object taking the initial point of x and y co-ordinate and radius of the circle into arraay 'selectionArray' that is added using 'Add Point' button\n                selectionArray.push({ Center_X: 90, Center_Y: 68, radius: 33 });\n                // draw the point after click on 'Add Point' button\n                AH.insert('#centerImg', '<div class=\"resize\" data-point=\"' + selectionPoint + '\"><div class=\"resizer icomoon-resize\"></div></div>', 'beforeend');\n                // updates the marking points xml after to resize or drag the points\n                setPointDataInXML();\n            }\n            if (!(AH.select('.resize').nodeName && AH.select('.resize').offsetHeight) || selectionPoint == 0) {\n                // shows the points created using 'Add Point' button\n                AH.selectAll('.resize', 'removeClass', 'h');\n                // hides the compass element\n                AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n                // Adds the text 'Add Point' of the button having text 'Show Point'\n                AH.select('#authoring_point').innerText = 'Add Point';\n            }\n            AH.select('#add_point_msg').classList.remove('h');\n        });\n\n        // Mouse Move Event\n        AH.listen('body', 'mousemove', '#authoringSvg', function (current, event) {\n            // used to set the x and y co-ordinate of the mouse position\n            setMouseCoordinates(event);\n            switch (authoringMode) {\n                case 'line':\n                    if (isDrawing) {\n                        // adds a new attribute 'd' (with a namespace null)\n                        scribble.setAttributeNS(null, 'd', scribblePath[scribbleCount].d + ' L' + auth_mouseX + ' ' + auth_mouseY);\n                        // prepend the element scribble into the container have class drawing_paths\n                        drawing_paths.prepend(scribble);\n                    }\n                    break;\n                case 'scribble':\n                    if (isDrawing) {\n                        // adds a new attribute 'd' (with a namespace null)\n                        scribble.setAttributeNS(null, 'd', scribblePath[scribbleCount].d + ' L' + auth_mouseX + ' ' + auth_mouseY);\n                        // adds the x an y mouse position with prefix 'L' into the value of key 'd' of array 'scribblePath' with index no containing into variable scribbleCount\n                        scribblePath[scribbleCount].d = scribblePath[scribbleCount].d + ' L' + auth_mouseX + ' ' + auth_mouseY;\n                        // prepend the element scribble into the container have class drawing_paths\n                        drawing_paths.prepend(scribble);\n                    }\n                    break;\n                case 'compass':\n                    if (isCompassMove) {\n                        // defines the center of the x co-ordinate\n                        cx = auth_mouseX;\n                        // contains the center of the x co-ordinate\n                        cy = auth_mouseY;\n                        // radius of the compass or width of the rotationbar of the compass\n                        compassRadius = AH.select('.drawing-compass-route').getAttribute('r');\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n                        updateCompassCalculation(cx, cy, compassRadius, compassAngle);\n                    }\n                    if (isRadiusIncrease) {\n                        // calculates the angle using initial and final point and find the radius of the compass\n                        checkRadiusPointsAndAngle();\n                        // rounds the angle to make it integer value\n                        compassAngle = Math.round(compassAngle);\n                        // calculates the radius of the compass\n                        compassRadius = 2 * Math.sqrt(Math.pow(auth_mouseX - initialPoint.x, 2) + Math.pow(auth_mouseY - initialPoint.y, 2))\n                        if (compassRadius < 80) {\n                            compassRadius = 80;\n                        }\n                        if (compassRadius > 360) {\n                            compassRadius = 360;\n                        }\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n                        updateCompassCalculation(initialPoint.x, initialPoint.y, compassRadius, compassAngle);\n                    }\n                    if (isRadiusRotate) {\n                        // used to set the x and y co-ordinate of the mouse position\n                        setMouseCoordinates(event);\n                        // calculates the angle using initial and final point and find the radius of the compass\n                        checkRadiusPointsAndAngle();\n                        // calculates the angle of the compass\n                        compassAngle = Math.atan2(auth_mouseY - initialPoint.y, auth_mouseX - initialPoint.x) * 180 / Math.PI;\n                        if (compassAngle < 0) {\n                            compassAngle = 360 + compassAngle;\n                        }\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n                        updateCompassCalculation(initialPoint.x, initialPoint.y, compassRadius, compassAngle);\n                    }\n                    if (isDrawing) {\n                        if (! (AH.select('#authoringSvg .last_big_circle').classList.contains('lastCircle_hover') )) {\n                            authoringMouseLeave(event)\n                        } else {\n                            // adds a new attribute 'd' (with a namespace null)\n                            scribble.setAttributeNS(null, 'd', scribblePath[scribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\n                            // adds the values of center of x and y of last circle on rotationbar with prefix 'L' into the value of key 'd' of array 'scribblePath' with index no containing into variable scribbleCount\n                            scribblePath[scribbleCount].d = scribblePath[scribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\n                            // prepend the element scribble into the container have class drawing_paths\n                            drawing_paths.prepend(scribble);\n                        }\n                    }\n                    // rotates the small middle circle at given angle from it's center position\n                    AH.selectAll('#authoringSvg .midSmallCircle', 'attr' , {\"transform\" : \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .midSmallCircle').getAttribute('cx') + \",\" + AH.select('#authoringSvg .midSmallCircle').getAttribute('cy') + \")\"});\n                    // rotates the middle circle at given angle from it's center position\n                    AH.selectAll('#authoringSvg .mid_circle', 'attr', {\"transform\": \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .mid_circle').getAttribute('cx') + \",\" + AH.select('#authoringSvg .mid_circle').getAttribute('cy') + \")\"});\n                    // rotates the last circle at given angle from it's center position\n                    AH.selectAll('#authoringSvg .lastCircleMid','attr', {\"transform\": \"rotate(\" + compassAngle + \",\" + AH.select('#authoringSvg .lastCircleMid').getAttribute('cx') + \",\" + AH.select('#authoringSvg .lastCircleMid').getAttribute('cy') + \")\"});\n                    break;\n            }\n        });\n\n        // Mouse Up Event\n        AH.listen('body', 'mouseup', '#authoringSvg', function (current, event) {\n            authoringMouseLeave(event)\n        });\n\n        AH.bind('#authoringSvg', 'mouseleave', function (event) {\n            authoringMouseLeave(event)\n        })\n\n        AH.listen('body', 'click', '#authoring_clearScreen', function (current) {\n            // makes drawing container empty in which drawing is done by using drawing tools\n            AH.select('.drawing_paths').innerHTML = '';\n            // sets the value of variable 'undoCount' to  0\n            undoCount = 0;\n            // sets the value of variable 'scribbleCount' to  0\n            scribbleCount = 0;\n            // makes array 'scribblePath' empty \n            scribblePath = [];\n            // disabled the undo, redo, cross (x) buttons\n            AH.select('#authoring_undo').disabled = true;\n            AH.select('#authoring_redo').disabled = true;\n            AH.select('#authoring_clearScreen').disabled = true;\n        });\n\n        AH.listen('body', 'click', '.auth_toolbar', function (current) {\n            // hides the points added by clicking on 'Add Point' button\n            AH.selectAll('.resize', 'addClass', 'h');\n            // parses the point that can be access via keyboard on preview side\n            parseXMLForAccessPoint();\n            // sets the style of the cursor to crosshair (+)\n            AH.selectAction('#authoringSvg', 'css', {'cursor': 'crosshair'});\n            // contains the value of attribute 'data-title' on which currently clicked\n            authoringMode = current.getAttribute('data-title');\n\n            AH.selectAll('.authoring_btn,#authoring_point,#focus_point' ,'removeClass' ,'active');\n            current.classList.add('active');\n\n            if (authoringMode == 'eraser') {\n                // adds the class 'eraserHover' to the element 'path' inside drawing container in which drawing is done by using drawing tools\n                AH.selectAll('.drawing_paths path', 'addClass', 'eraserHover');\n            } else {\n                // removes the class 'eraserHover' to the element 'path' inside drawing container in which drawing is done by using drawing tools\n                AH.selectAll('.drawing_paths path', 'removeClass', 'eraserHover');\n\n            }\n\n            if (authoringMode == 'compass') {\n                // shows the compass tool\n                AH.selectAll('.drawing_compass_svg', 'removeClass', 'h');\n            } else {\n                // hides the compass element\n                AH.selectAll('.drawing_compass_svg', 'addClass','h');\n            }\n\n            if (selectionPoint != 0) {\n                // sets the text 'Show Point' of the element having id 'authoring_point' if the value of variable 'selectionPoint' is not equals to 0\n                AH.select('#authoring_point').innerText = 'Show Point';\n                AH.select('#add_point_msg').classList.add('h');\n            }\n        });\n\n        AH.listen('body', 'mouseover', '.drawing_paths path', function (current) {\n            if (authoringMode == 'eraser') {\n                // removes the class currentSvg from the element 'path' inside the element have class 'drawing_paths'\n                AH.selectAll('.drawing_paths path', 'removeClass' , 'currentSvg');\n                // adds the class 'currentSvg' to the element 'path' inside the element have class 'drawing_paths' on which mouseover\n                current.classList.add('currentSvg');\n            }\n        });\n\n        AH.listen('body', 'mouseout', '.drawing_paths path', function (current) {\n            if (authoringMode == 'eraser') {\n                // removes the class 'currentSvg' to the element 'path' inside the element have class 'drawing_paths' on which mouseout\n                current.classList.remove('currentSvg');\n            }\n        });\n\n        AH.listen('body', 'click', '#authoring_undo', function (current) {\n            if (undoCount == 1) {\n                // disabled the undo button\n                current.disabled = true;\n                // enabled the redo button\n                AH.select('#authoring_redo').disabled = false;\n            } else {\n                // enabled the redo button\n                AH.select('#authoring_redo').disabled = false;\n            }\n\n            if (scribblePath[scribblePath.length - 1].mode == 'add') {\n                // removes the element which 'data-order' attributes value is equals to the value of array length scribblePath reducing by 1\n                AH.select('#authoringSvg [data-order=\"' + (scribblePath.length - 1) + '\"]', 'remove');\n            } else if (scribblePath[scribblePath.length - 1].mode == 'remove') {\n                // Creates an element with the specified namespace URI and qualified name.\n                scribble = document.createElementNS(xmlns, 'path');\n                // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                setAuthColor(authColor, authThickness);\n                // adds a new attribute 'data-type' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-type', scribblePath[scribblePath.length - 1].type);\n                // adds a new attribute 'data-order' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-order', (scribblePath[scribblePath.length - 1].order));\n                // adds a new attribute 'd' (with a namespace null)\n                scribble.setAttributeNS(null, 'd', scribblePath[scribblePath.length - 1].d);\n                if (authoringMode == 'eraser') {\n                    // adds a new attribute 'class' (with a namespace null)\n                    scribble.setAttributeNS(null, 'class', 'eraserHover');\n                }\n                // prepend the element scribble into the container have class drawing_paths\n                drawing_paths.prepend(scribble);\n            }\n            // pushes the last data of array scribblePath into array undo_list\n            undo_list.push(scribblePath.pop());\n            // reduces the value of variable 'scribbleCount' by 1\n            scribbleCount--;\n            // reduces the value of variable 'undoCount' by 1\n            undoCount--;\n            if (AH.selectAll('.drawing_paths path').length == 0) {\n                // disabled the cross (x) button if no drawing sketched by using drawing tools\n                AH.select('#authoring_clearScreen').disabled = true;\n            } else {\n                // enables the cross (x) button if drawing has been sketched by using drawing tools\n                AH.select('#authoring_clearScreen').disabled = false;\n            }\n            if (scribblePath.length == 0) {\n                // disabled the undo button if length of the array 'scribblePath' is 0 \n                current.disabled = true;\n            }\n        });\n\n        AH.listen('body', 'click', '#authoring_redo', function (current) {\n            // increases the value of the variable 'scribbleCount' by 1\n            scribbleCount++;\n            if (undo_list.length > 0) {\n                // pushes the last data of the array undo_list into array redo_list\n                redo_list.push(undo_list.pop());\n            }\n            if (redo_list[redo_list.length - 1].mode == 'add') {\n                // Creates an element with the specified namespace URI and qualified name.\n                scribble = document.createElementNS(xmlns, 'path');\n                // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                setAuthColor(authColor, authThickness);\n                // adds a new attribute 'data-type' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-type', redo_list[redo_list.length - 1].type);\n                // adds a new attribute 'data-order' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-order', (redo_list[redo_list.length - 1].order));\n                // adds a new attribute 'd' (with a namespace null)\n                scribble.setAttributeNS(null, 'd', redo_list[redo_list.length - 1].d);\n                if (authoringMode == 'eraser') {\n                    // adds a new attribute 'class' (with a namespace null)\n                    scribble.setAttributeNS(null, 'class', 'eraserHover');\n                }\n                // prepend the element scribble into the container have class drawing_paths\n                drawing_paths.prepend(scribble);\n            } else if (redo_list[redo_list.length - 1].mode == 'remove') {\n                // removes the element which 'data-order' attributes value is equals to the value of order key of last data in array redo_list\n                AH.select('#authoringSvg [data-order=\"' + (redo_list[redo_list.length - 1].order) + '\"]', 'remove');\n            }\n            // increases the value of variable 'undoCount' by 1\n            undoCount++;\n            // pushes the last value of the array redo_list into array scribblePath\n            scribblePath.push(redo_list.pop());\n            if (AH.selectAll('.drawing_paths path').length == 0) {\n                // disabled the cross (x) button if no drawing is sketched by using drawing tools\n                AH.select('#authoring_clearScreen').disabled = true;\n            } else {\n                // enables the cross (x) button if any drawing is sketched by using drawing tools\n                AH.select('#authoring_clearScreen').disabled = false;\n            }\n            if (undo_list.length == 0) {\n                // disabled the redo button if no data exist in array undo_list\n                current.disabled = true;\n                // enables the undo button if no data exist in array undo_list\n                AH.select('#authoring_undo').disabled = false;\n            } else {\n                // enables the undo button if data exist in array undo_list\n                AH.select('#authoring_undo').disabled = false;\n            }\n        });\n\n        AH.listen('body', 'click', '#reset_btn', function () {\n            swal({\n                text: l.reset_module,\n                icon: \"warning\",\n                buttons: true,\n            }).then((value) => {\n                if (value) {\n                    // reset all the activity and makes it in initial condition as it looks like just after load\n                    resetModule();\n                }\n            });\n        });\n\n        AH.listen('body', 'click', '#focus_point', function () {\n            // hides the compass element\n            AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n            AH.selectAll('#authoringSvg path', 'removeClass', 'eraserHover');\n            // sets the cursor style as crosshair (+)\n            AH.select('#authoringSvg', 'css', {'cursor': 'crosshair'});\n            // hides the circle shape element created using 'Add Point' button\n            AH.selectAll('.resize', 'addClass', 'h');\n            if (selectionPoint != 0) {\n                // if any point created using 'Add point' button then after click on 'Add Focus Point' or 'Finish Marking' button text of 'Add Point' button changes to 'Show Point'\n                AH.select('#authoring_point').innerText = 'Show Point';\n                AH.select('#add_point_msg').classList.add('h');\n            }\n            if (isAccessibleMarking) {\n                // removes the class active from the drawing tools, delete and 'Add Point' buttons\n                AH.selectAll('.authoring_btn,#authoring_point', 'removeClass', 'active');\n\n                // adds the class active to the button have id 'focus_point' and change the text as 'Finish Marking'\n                AH.select('#focus_point').innerText = \"Finish Marking\";\n                AH.select('#focus_point', 'addClass', 'active');\n                // sets the value of variable 'isAccessibleMarking' to 0 \n                isAccessibleMarking = 0;\n                // sets the value of variable 'authoringMode' to 'markAccessibilityPoint'\n                authoringMode = 'markAccessibilityPoint';\n            } else {\n                // parses the point that can be access via keyboard on preview side\n                parseXMLForAccessPoint();\n            }\n        });\n\n        AI.listen('body', 'contextmenu', '.resize', function (current, event) {\n            event.preventDefault();\n            swal({\n                text: l.delete_points,\n                icon: \"warning\",\n                buttons: true,\n            }).then((value) => {\n                if (value) {\n                    let btnIndex = current.getAttribute(\"data-point\");\n                    // makes the x co-ordinate of the point null\n                    selectionArray[btnIndex - 1].Center_X = null;\n                    // makes the y co-ordinate of the point null\n                    selectionArray[btnIndex - 1].Center_Y = null;\n                    // makes the radius of the point null\n                    selectionArray[btnIndex - 1].radius = null;\n                    // removes the point\n                    current.remove();\n                    // this function will set the point value in xml \n                    setPointDataInXML();\n                }\n            });\n        });\n\n        AI.listen('body', 'keyup', '.authoring-modal input', function (current, event) {\n            event.stopPropagation();\n            AH.selectAll('.error', 'remove');\n            validateInput(current);\n        });\n\n        AI.listen('body', 'change', '.authoring-modal input', function (current, event) {\n            event.stopPropagation();\n            AH.selectAll('.error', 'remove');\n            validateInput(current);\n        });\n\n        AI.listen('body', 'click', '.drawing_modal_submit', function (current, event) {\n            if (isValid && AH.selectAll('.showError').length == 0) {\n                selectedToolsArray = [];\n                let checkboxes = AH.selectAll('.checkbox-inline:checked');\n                for (let index = 0; index < checkboxes.length; index++) {\n                    /* pushes the drawing tools value that can be used to draw the drawing into the array of drawing tools by checking the checkbox of tools group in configaration modal box */\n                    selectedToolsArray.push(checkboxes[index].value);\n                }\n\n                auth_store.update((item) => {\n                    item.bgImg = AH.select('#backgroundImage').value;\n                    // sets the alt message for background image\n                    item.alt = AH.select('#imgAlt').value.trim();\n                    // sets the width of background image\n                    item.imgWidth = AH.select('#imgWidth').value;\n                    // sets the stroke color of drawing shape\n                    item.lineColor = AH.select('#lineColor').value;\n                    // sets the point color of drawing shape on Preview area\n                    item.markPointColor = AH.select('#markPointColor').value;\n                    // sets which type of drawing tools can be used to draw the drawing such as scribble, line or compass\n                    item.selectedTools = selectedToolsArray;\n                    return item;\n                });\n\n                resetModule();\n                parseXMLForSettingData(xml);\n                AH.getBS('#drawing-modal', 'Modal').hide();\n            } else {\n                swal({\n                    text: \"Please solve all the errors!\",\n                    icon: \"warning\",\n                })\n            }\n        \n        });\n\n        AH.listen('body', 'click', '#upload_media', function () {\n            AH.getBS('#modal-media-upload','Modal').show();\n        });\n\n        enableDragResize();\n    })\n\n    // function for checking the numeric value\n    function isNumeric (num) {\n        return !isNaN(parseFloat(num)) && isFinite(num);\n    }\n\n    // function for validation of the modal's input\n    function validateInput(current) {\n        // sets the value of isValid variable to true\n        isValid = true;\n        if (current.value.trim() == '') {\n            isValid = false;\n            AH.insert(current.parentElement, '<span class=\"error text-danger\">' + l.fill_warning + '</span>', 'beforeend');\n        } else if (current.classList.contains('num') && Number(current.value) < 600) {\n            isValid = false;\n            // shows warning message if width of image is less than 600\n            AH.insert(current.parentElement, '<span class=\"error text-danger\">' + l.val_gt_limit + '</span>', 'beforeend');\n        } else if (! isNumeric(current.value) && current.classList.contains('num')) {\n            // sets the value of isValid variable to false\n            isValid = false;\n            // shows warning message if width of image takes any non number data but it cannot be seen as field has not allowed to take non numeric data\n            AH.insert(current.parentElement, '<span class=\"error text-danger\">' + l.enter_number + '</span>', 'beforeend');\n        } else if ((AH.selectAll('.checkbox-inline:checked').length == 0) && current.classList.contains('checkbox-inline')) {\n            // sets the value of isValid variable to false\n            isValid = false;\n            // shows warning message if no any drawing tools selected\n            AH.insert(current.closest('.toolsCheckbox').parentElement, '<span class=\"error text-danger\">' + l.select_one_tool + '</span>', 'beforeend');\n        }\n\n        if (isValid) {\n            if (current.classList.contains('checkbox-inline')) {\n                // in case when current element which value changed has class 'checkbox-inline' and value of variable 'isValid' is true then removes class 'showError to the element have id backgroundImage\n                AH.select('#backgroundImage').classList.remove('showError');\n            } else {\n                // in case when current element which value changed has not class 'checkbox-inline' and value of variable 'isValid' is true then removes class 'showError from current element and removes border and background color\n                current.classList.remove('showError');\n                AH.setCss(current, {\n                    \"border\": \"\", \n                    \"background\": \"\"\n                })\n            }\n        } else {\n            if (current.classList.contains('checkbox-inline')) {\n                // in case when current element which value changed has class 'checkbox-inline' and value of variable 'isValid' is false then adds class 'showError to the element have id backgroundImage\n                AH.select('#backgroundImage').classList.add('showError');\n            } else {\n                current.classList.add('showError');\n                // in case when current element which value changed has not class 'checkbox-inline' and value of variable 'isValid' is false then adds 'showError' class and sets border color to red and background color to #FFCECE\n                AH.setCss(current, {\n                    \"border\": \"1px solid red\", \n                    \"background\": \"#FFCECE\"\n                })\n            }\n        }\n    }\n\n    // function for enabling resize and dragging\n    function enableDragResize() {\n        let draggable = new Draggable({\n            containment: '#authoringSvg',\n            classes: \".resize\",\n            ignore: ['.tools', '.resizer']\n        });\n        draggable.onDragStop = function (event, position, ui) {\n            let pointIndex = ui.getAttribute(\"data-point\");\n            // sets the height value to it's width value\n            AH.setCss(ui, {\n                height: ui.offsetWidth + \"px\",\n                width: ui.offsetWidth + \"px\",\n            });\n            // contains the radius of the point\n            let h = ui.offsetHeight / 2;\n            // contains x co-ordinate of the point\n            let CenterX = position.left + h;\n            // contains y co-ordinate of the point\n            let CenterY = position.top + h;\n            // assign the value of the x co-ordinate of the point at index 'pointIndex-1' in array selectionArray\n            selectionArray[pointIndex - 1].Center_X = CenterX;\n            // assign the value of the y co-ordinate of the point at index 'pointIndex-1' in array selectionArray\n            selectionArray[pointIndex - 1].Center_Y = CenterY;\n            // assign the value of radius of the point at index 'pointIndex-1' in array selectionArray\n            selectionArray[pointIndex - 1].radius = h;\n            // this function will set the point value in xml \n            setPointDataInXML();\n        }\n\n        let resizable = new Resizable('#authoringSvg', '.resize');\n        resizable.onStop =  function(e, ui) {\n            let pointIndex = ui.getAttribute(\"data-point\");\n            // sets the height of the selector element equal to width of that element\n            let resolution = (Number(ui.offsetWidth) > 66) ? 66 : ui.offsetWidth\n            AH.setCss(ui, {\n                height: resolution + \"px\",\n                width: resolution + \"px\",\n            });\n            // contains radius of the point\n            let h = ui.offsetHeight / 2;\n            // contains co-ordinate of center x\n            let CenterX = ui.offsetLeft + h;\n            // contains co-ordinate of center y\n            let CenterY = ui.offsetTop + h;\n            // sets the co-ordinate of center x of the point contained at index 'pointIndex -1' in array selectionArray\n            selectionArray[pointIndex - 1].Center_X = CenterX;\n            // sets the co-ordinate of center y of the point contained at index 'pointIndex -1' in array selectionArray\n            selectionArray[pointIndex - 1].Center_Y = CenterY;\n            // sets the radius of the point contained at index 'pointIndex -1' in array selectionArray\n            selectionArray[pointIndex - 1].radius = h;\n            // this function will set the point value in xml \n            setPointDataInXML();\n        }\n    }\n\n    // function called on the mouse leave on the authoring svg\n    function authoringMouseLeave(event) {\n        switch (authoringMode) {\n            case 'line':\n            case 'scribble':\n                if (isDrawing) {\n                    // used to set the x and y co-ordinate of the mouse position\n                    setMouseCoordinates(event);\n                    if (checkCurrentPositionX == auth_mouseX && checkCurrentPositionY == auth_mouseY) {\n                        // removes the last value from array scribblePath\n                        scribblePath.pop();\n                    } else {\n                        // adds a new attribute 'd' (with a namespace null)\n                        scribble.setAttributeNS(null, 'd', scribblePath[scribbleCount].d + ' L' + auth_mouseX + ' ' + auth_mouseY);\n                        // adds the x an y mouse position with prefix 'L' into the value of key 'd' of array 'scribblePath' with index no containing into variable scribbleCount\n                        scribblePath[scribbleCount].d = scribblePath[scribbleCount].d + ' L' + auth_mouseX + ' ' + auth_mouseY;\n                        // prepend the element scribble into the container have class drawing_paths\n                        drawing_paths.prepend(scribble);\n                        // increases the value variable 'scribbleCount' by 1\n                        scribbleCount++;\n                        // increases the value variable 'undoCount' by 1\n                        undoCount++;\n                        // makes array undo_list blank\n                        undo_list = [];\n                        // enables undo and cross (x) buttons\n                        AH.select('#authoring_undo').disabled = false;\n                        AH.select('#authoring_clearScreen').disabled = false;\n                        AH.select('#authoring_redo').disabled = true;\n                    }\n                }\n                isDrawing = false;\n                break;\n            case 'compass':\n                isRadiusIncrease = 0;\n                isRadiusRotate = 0;\n                if (isCompassMove) {\n                    // used to set the x and y co-ordinate of the mouse position\n                    setMouseCoordinates(event)\n                    // contains x co-ordinate of the mouse\n                    cx = auth_mouseX;\n                    // contains y co-ordinate of the mouse\n                    cy = auth_mouseY;\n                    // contains radius of the compass\n                    compassRadius = AH.select('.drawing-compass-route').getAttribute('r');\n                    // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n                    updateCompassCalculation(cx, cy, compassRadius, compassAngle);\n                    // defines the value of the variable 'isCompassMove' to false to indicate that compass is not moved\n                    isCompassMove = false;\n                }\n                if (isDrawing) {\n                    if (checkCurrentPositionX == lastCircle_cx && checkCurrentPositionY == lastCircle_cy) {\n                        // removes the last element from the array 'scribblePath'\n                        scribblePath.pop();\n                    } else {\n                        // adds a new attribute 'd' (with a namespace null)\n                        scribble.setAttributeNS(null, 'd', scribblePath[scribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\n                        // adds the values of center of x and y of last circle on rotationbar with prefix 'L' into the value of key 'd' of array 'scribblePath' with index no containing into variable scribbleCount\n                        scribblePath[scribbleCount].d = scribblePath[scribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\n                        // prepend the element scribble into the container have class drawing_paths\n                        drawing_paths.prepend(scribble);\n                        // increases the value of the variable 'scribbleCount' by 1\n                        scribbleCount++;\n                        // increases the value of the variable 'undoCount' by 1\n                        undoCount++;\n                        // makes blank array undo_list \n                        undo_list = [];\n                        // enables undo and cross (x) button\n                        AH.select('#authoring_undo').disabled = false;\n                        AH.select('#authoring_clearScreen').disabled = false;\n                        AH.select('#authoring_redo').disabled = true;\n                    }\n                    // assign the value 'false' of the variable 'isDrawing' to indicate that drawing is not sketching\n                    isDrawing = false\n                }\n                // defines the style of the cursor when it goes to last circle of the rotationbar\n                AH.selectAll('#authoringSvg .lastCircle', 'css', {'cursor': 'grab'});\n                break;\n        }\n    }\n\n    // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\n    function updateCompassCalculation(cx, cy, compassRadius, compassAngle) {\n        // sets the center of x of middle circle lies on compass rotationbar\n        midCircle_cx = cx + (compassRadius / 2) * Math.cos(compassAngle * (Math.PI / 180));\n        // sets the center of y of middle circle lies on compass rotationbar\n        midCircle_cy = cy + (compassRadius / 2) * Math.sin(compassAngle * (Math.PI / 180));\n        // sets the center of x of small middle circle lies on compass rotationbar\n        midSmallCircle_cx = cx + ((3 * compassRadius) / 4) * Math.cos(compassAngle * (Math.PI / 180));\n        // sets the center of y of small middle circle lies on compass rotationbar\n        midSmallCircle_cy = cy + ((3 * compassRadius) / 4) * Math.sin(compassAngle * (Math.PI / 180));\n        // sets the center of x of last circle lies on compass rotationbar\n        lastCircle_cx = cx + (compassRadius) * Math.cos(compassAngle * (Math.PI / 180));\n        // sets the center of y of last circle lies on compass rotationbar\n        lastCircle_cy = cy + (compassRadius) * Math.sin(compassAngle * (Math.PI / 180));\n        // sets the center of x of rotaion indicator shows after last circle of compass rotaionbar\n        lastSmallCircle_cx = cx + ((5 * compassRadius) / 4) * Math.cos(compassAngle * (Math.PI / 180));\n        // sets the center of y of rotaion indicator shows after last circle of compass rotaionbar\n        lastSmallCircle_cy = cy + ((5 * compassRadius) / 4) * Math.sin(compassAngle * (Math.PI / 180));\n        // used to set the center co-ordinate of the compass and of its route\n        AH.selectAll('.drawing-compass-route, .drawing_compass_center', 'attr', { 'cx': cx, 'cy': cy });\n        // sets the radius of the compass route\n        AH.select('.drawing-compass-route').setAttribute('r', compassRadius);\n        // sets the compass rotation bar's position\n        AH.setAttr('#authoringSvg .compass_rotationBar', { 'x1': cx, 'y1': cy, 'x2': lastCircle_cx, 'y2': lastCircle_cy });\n        // sets the position of rotaion indicator\n        AH.setAttr('#authoringSvg .lastCircleMid', { 'cx': lastSmallCircle_cx, 'cy': lastSmallCircle_cy });\n        // sets the center position of the last circle that lies on the compass route\n        AH.selectAll('#authoringSvg .lastCircle', 'attr', { 'cx': lastCircle_cx, 'cy': lastCircle_cy });\n        // sets the center position of the middle small circle that lies between last and middle circle on the compass rotaionbar\n        AH.setAttr('#authoringSvg .midSmallCircle', { 'cx': midSmallCircle_cx, 'cy': midSmallCircle_cy });\n        // sets the center position of the middle circle that lies on the compass rotaionbar    \n        AH.setAttr('#authoringSvg .mid_circle', { 'cx': midCircle_cx, 'cy': midCircle_cy });\n    }\n\n    // for updating the cdata in the xml\n    function setPointDataInXML() {\n        cdata = '';\n        for (let index = 0; index < selectionArray.length; index++) {\n            // For avoiding the null value if found\n            if (selectionArray[index].Center_X == null && selectionArray[index].Center_Y == null && selectionArray[index].radius == null) {\n                // contains an array returned value from array selectionArray which is not null\n                selectionArray = selectionArray.filter(function (element) {\n                    return element.Center_X != null;\n                });\n                continue;\n            }\n            // adds the value of center co-ordinate x and y and radius of the point at perticular index in the form of object and each point is separated with symbol '!'\n            cdata += '{\"x\":\"' + selectionArray[index].Center_X + '\",\"y\":\"' + selectionArray[index].Center_Y + '\",\"r\":\"' + selectionArray[index].radius + '\"}!';\n        }\n        let resize = AH.selectAll('.resize');\n        if (resize.length > 0) {\n            for (let index = 0; index < selectionArray.length; index++) {\n                AH.setAttr(resize[index], {\n                    \"data-point\": (index + 1)\n                });\n            }\n        } else {\n            AH.select('#add_point_msg').classList.add('h');\n            selectionPoint = 0;\n            // removes the first character from string in state array selectedTools at index 0\n            authoringMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\n            // sets the cursor style to crosshair (+)\n            AH.setCss('#authoringSvg', {'cursor': 'crosshair'});\n            if (authoringMode == 'compass') {\n                // shows the compass tool\n                AH.selectAll('.drawing_compass_svg', 'removeClass', 'h');\n            } else {\n                // hides the compass element\n                AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n            }\n            AH.selectAll('.authoring_btn,#authoring_point,#focus_point' ,'removeClass' ,'active');\n            AH.selectAll('[data-title=\"' + authoringMode + '\"]' ,'addClass' ,'active');\n        }\n        // removes the last character that is '!' from variable 'cdata'\n        cdata = cdata.substr(0, cdata.length - 1);\n        // updates the cdata value that exist inside div element of the xml according to the value of points that were added or removed\n        parseXMLForPoint(cdata);\n    }\n\n    // updates the cdata value that exist inside div element of the xml according to the value of points that were added or removed\n    function parseXMLForPoint(cdata) {\n        // converts the xml value into json and assign it into variable 'defaultXML'\n        defaultXML = XMLToJSON(xml);\n        // assign the value of argument 'cdata' to sub key 'cdata' of key 'div' of object 'defaultXML'\n        defaultXML.smxml.div.__cdata = cdata;\n        // converts json of xml into xml again\n        defaultXML = JSONToXML(defaultXML);\n        // changes the format of cdata\n        defaultXML = defaultXML.replace(/<!\\[CDATA\\[/g, '<!--[CDATA[');\n        // changes the format of cdata\n        defaultXML = defaultXML.replace(/\\]\\]>/g, ']]-->');\n        // update the xml\n        getChildXml(defaultXML);\n        // assign the value of changed xml into state xml\n        state.xml = defaultXML;\n    }\n\n    // calculates the angle using initial and final point and find the radius of the compass\n    function checkRadiusPointsAndAngle() {\n        // denotes the initial x co-ordinate\n        initialPoint.x = Number(AH.select('.compass_rotationBar').getAttribute('x1'));\n        // denotes the initial y co-ordinate\n        initialPoint.y = Number(AH.select('.compass_rotationBar').getAttribute('y1'));\n        // denotes the final x co-ordinate\n        finalPoint.x = Number(AH.select('.compass_rotationBar').getAttribute('x2'));\n        // denotes the final y co-ordinate\n        finalPoint.y = Number(AH.select('.compass_rotationBar').getAttribute('y2'));\n        // denotes the radius of the compass\n        compassRadius = Number(AH.select('.drawing-compass-route').getAttribute('r'));\n        // calculates the angle using initial and final point co-ordinate\n        compassAngle = Math.atan2(finalPoint.y - initialPoint.y, finalPoint.x - initialPoint.x) * 180 / Math.PI;\n    }\n\n    // parses the point that can be access via keyboard on preview side\n    function parseXMLForAccessPoint() {\n        if (tempAccessPoints.length > 0) {\n            // push the value of tempAccessPoints into array 'accessibilityPoints'\n            accessibilityPoints.push(tempAccessPoints);\n        }\n        // contains json data of xml \n        defaultXML = XMLToJSON(xml);\n        var focusPointData = '';\n        // used to create the array object 'focusPointData' containing the x and y co-ordinates value of points draw on drawing board using 'Add Focus Point' button\n        for (let points = 0; points < accessibilityPoints.length; points++) {\n            focusPointData += '{\"' + points + '\":[';\n            for (let subPoints = 0; subPoints < accessibilityPoints[points].length; subPoints++) {\n                focusPointData += '{\"x\":\"' + accessibilityPoints[points][subPoints].x + '\",\"y\":\"' + accessibilityPoints[points][subPoints].y + '\"}!';\n            }\n            focusPointData = focusPointData.substr(0, focusPointData.length - 1) + ']}!';\n        }\n        // removes the last character from variable 'focusPointData'\n        focusPointData = focusPointData.substr(0, focusPointData.length - 1);\n        // updates the cdata value with the value of variable 'focusPointData'\n        defaultXML.smxml.backgroundPoint.__cdata = focusPointData;\n        // converts json of xml into xml\n        defaultXML = JSONToXML(defaultXML);\n        // updates the format of CDATA\n        defaultXML = defaultXML.replace(/<!\\[CDATA\\[/g, '<!--[CDATA[')\n        // updates the format of CDATA\n        defaultXML = defaultXML.replace(/\\]\\]>/g, ']]-->');\n        // update the xml\n        getChildXml(defaultXML);\n        // updates the state 'xml'\n        state.xml = defaultXML;\n        // changed the text of element have id 'focus_point' to 'Add Focus Point' and removes the class active\n        AH.select('#focus_point').innerText = \"Add Focus Point\";\n        AH.select('#focus_point').classList.remove('active');\n        // assign the string to the variable 'authoringMode' after removing the first character from the string at index 0 of state array 'selectedTools'\n        authoringMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\n        // change the cursor style as crosshair (+)\n        AH.setCss('#authoringSvg', {cursor: 'crosshair'});\n        // adds the active class to scribber drawing tools\n        AH.select('#authoring' + state.selectedTools[0]).classList.add('active');\n        if (authoringMode == 'compass') {\n            // shows the compass tool\n            AH.selectAll('.drawing_compass_svg', 'removeClass' , 'h');\n        } else {\n            // hides the compass element\n            AH.selectAll('.drawing_compass_svg', 'addClass' , 'h');\n        }\n        isAccessibleMarking = 1;\n        // joins the focus points craeted by using 'Add focus Point' button otherwise return as it was before\n        joinFocusPoint(tempAccessPoints);\n    }\n\n    // joins the focus points craeted by using 'Add focus Point' button otherwise return as it was before\n    function joinFocusPoint(markArray) {\n        if (markArray.length == 0) {\n            return;\n        }\n        // Creates an element with the specified namespace URI and qualified name\n        scribble = document.createElementNS(xmlns, 'path');\n        // contains the string showing the start point\n        let pointStartValues = 'M ' + markArray[0].x + ' ' + markArray[0].y;\n        // contains the string showing the end point\n        let pointEndValues = '';\n        for (let index = 1; index < markArray.length; index++) {\n            // adds the value of x anf y from array 'markArray' defined at specific index to variable 'pointEndValues'\n            pointEndValues += ' L ' + markArray[index].x + ' ' + markArray[index].y;\n        }\n        // adds a new attribute (with a namespace)\n        scribble.setAttributeNS(null, 'd', pointStartValues + '' + pointEndValues);\n        // sets the stroke width and color of the drawing drawn by scribble drawing tool\n        setAuthColor('rgb(128, 128, 128)', authThickness);\n        // add as very first element inside the 'g' tag of 'svg' used for sketch the drawing\n        AH.select('.backgroundFocusPath').prepend(scribble);\n        // blanks the value of array 'tempAccessPoints'\n        tempAccessPoints = [];\n    }\n\n    // used to set the x and y co-ordinate of the mouse position\n    function setMouseCoordinates(event) {\n        // contains the size of element having id 'authoringSvg' and its position relative to the viewport\n        let boundary = document.getElementById('authoringSvg').getBoundingClientRect();\n        // sets the x position of the mouse co-ordinate\n        auth_mouseX = event.clientX - boundary.left;\n        // sets the y position of the mouse co-ordinate\n        auth_mouseY = event.clientY - boundary.top;\n    }\n\n    // sets the stroke width and color of the drawing drawn by scribble drawing tool\n    function setAuthColor(authColor, authThickness) {\n        // sets the stroke color of the scribble drawing\n        scribble.style.stroke = authColor;\n        // sets the stroke width of the scribble drawing\n        scribble.style.strokeWidth = authThickness;\n        scribble.style.fill = 'none';\n    }\n\n    // reset all the activity and makes it in initial condition as it looks like just after load\n    function resetModule() {\n        // updates the text of element having id 'authoring_point' \n        AH.select('#authoring_point').innerText = 'Add Point';\n        AH.select('#add_point_msg').classList.add('h');\n        // removes circular shape that is added by clicking on 'Add Point' button\n        AH.selectAll('.resize', 'remove');\n        // removes the activity done using drawing tools\n        AH.select('.drawing_paths').innerHTML = '';\n        // disabled the undo, redo and delete button\n        AH.select('#authoring_redo').disabled = true;\n        AH.select('#authoring_undo').disabled = true;\n        AH.select('#authoring_clearScreen').disabled = true;\n        // sets the cursor style to crosshair (+)\n        AH.setCss('#authoringSvg', {'cursor': 'crosshair'});\n        // assign the string after removing the first character from the string at index 0 of the state array selectedTools\n        authoringMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\n        // this function set the default data\n        setDefaultData();\n        // blanks the value of cdata exist inside div element of the xml showing that no points added\n        parseXMLForPoint('');\n        // removes the active class from the element have class 'authoring_btn' or have id 'authoring_point' or have id 'focus_point'\n        AH.selectAll('.authoring_btn,#authoring_point,#focus_point', 'removeClass', 'active');\n        // parses the point that can be access via keyboard on preview side\n        parseXMLForAccessPoint();\n        // clear the undo count\n        undoCount = 0;\n        // clear the added point\n        selectionPoint = 0;\n        // clear the scribbleCount\n        scribbleCount = 0;\n        // clear the paths of scribble\n        scribblePath = [];\n        // clear the all added points\n        selectionArray = [];\n    }\n\n    // this function set the default data\n    function setDefaultData() {\n        // hides drawing tools\n        AH.selectAll('.geometryTool', 'addClass', 'h');\n        for (let toolsIndex = 0; toolsIndex < state.selectedTools.length; toolsIndex++) {\n            // shows the tools that is enabled from configuration dialog box\n            AH.selectAll('#authoring' + state.selectedTools[toolsIndex], 'removeClass', 'h');\n        }\n        // removes all the points created after clicking on 'Add Focus Point' button \n        AH.selectAll('.backgroundFocusPoint circle,.backgroundFocusPath path', 'remove');\n        // assign the value of stroke color into variable 'authColor' choosen from configuration dialog box\n        authColor = state.lineColor;\n        // sets the width of drawing board and container of buttons\n        AH.selectAll('.authCenterImg,.auth_drawing_toolbar', 'attr', {'style': 'width:' + (Number(state.imgWidth) + 2) + 'px'});\n        // sets the attributes 'src', 'alt', 'width' of the background image\n        AH.setAttr('.centerImg #svgImg', { 'src': bgImgPath + '' + state.bgImg, 'alt': state.alt, 'width': state.imgWidth });\n        //  hides the compass element\n        AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n        // removes all points points created using 'Add Focus Point' button\n        accessibilityPoints = [];\n        // removes values from array 'tempAccessPoints'\n        tempAccessPoints = [];\n    }\n\n    // for changing the data when XML is changed manually \n    function parseXMLForGettingData() {\n        // contains json data of the xml\n        defaultXML = XMLToJSON(xml);\n        auth_store.update((item) => {\n            // sets the value of state bgImg to the value of key bgimg of json defaultXML\n            item.bgImg = defaultXML.smxml._bgimg;\n            // sets the value of state alt to the value of key imgAlt of json defaultXML\n            item.alt = defaultXML.smxml._imgAlt;\n            // sets the value of state imgWidth to the value of key width of json defaultXML\n            item.imgWidth = defaultXML.smxml._width;\n            // sets the value of state selectedTools to the value of key 'selectedDrawingType' after joining it with commam of json defaultXML\n            item.selectedTools = defaultXML.smxml.div._selectedDrawingType.split(',');\n            // sets the value of state cDATA to the value of subkey cdata of key div of json defaultXML\n            item.cDATA = defaultXML.smxml.div.__cdata;\n            // sets the value of state focusDATA to the value of subkey cdata of key backgroundPoint of json defaultXML\n            item.focusDATA = defaultXML.smxml.backgroundPoint.__cdata;\n            // sets the value of state markPointColor to the value of key markPointColor of json defaultXML\n            item.markPointColor = defaultXML.smxml._markPointColor;\n            // sets the value of state lineColor to the value of key color of json defaultXML\n            item.lineColor = defaultXML.smxml._color;\n            return item;\n        })\n        \n        // to handle the errors\n        try {\n            AH.select('#authoring_point').innerText = 'Add Point';\n            // this function set the default data\n            setDefaultData();\n            // sets the added point value to 0\n            selectionPoint = 0;\n            // removes all the sketch draw by drawing tools\n            AH.select('.drawing_paths').innerHTML = '';\n            // disabled the button undo, redo and clear \n            AH.select('#authoring_redo').disabled = true;\n            AH.select('#authoring_undo').disabled = true;\n            AH.select('#authoring_clearScreen').disabled = true;\n            // clears the value of variable undoCount\n            undoCount = 0;\n            // clears the value of variable scribbleCount\n            scribbleCount = 0;\n            // assign the value 1 to the variable focusPointCount\n            focusPointCount = 1;\n            // clears the value of array variable scribblePath\n            scribblePath = [];\n            // assign the value of state cDATA to the variable updatedCDATA\n            let updatedCDATA = state.cDATA;\n            // replaces the character '!' to ',' and wraps the value into square bracket\n            updatedCDATA = '[' + updatedCDATA.replace(/!/g, ',') + ']';\n            // parses the string data of variable updatedCDATA into javascript object\n            updatedCDATA = JSON.parse(updatedCDATA);\n            // removes the point added by clicking on 'Add Point' button\n            AH.selectAll('.resize', 'remove');\n            // defines the length of the array selectionArray\n            let selectionArrayLength = selectionArray.length;\n            if (updatedCDATA.length > selectionArrayLength) {\n                for (let index = 0; index < (updatedCDATA.length - selectionArrayLength); index++) {\n                    // pushes the point into array selectionArray added by clicking on 'Add Point' button with center of x at 90, center of y at 68 and with radius 33\n                    selectionArray.push({ Center_X: 90, Center_Y: 68, radius: 33 });\n                }\n            } else {\n                for (let index = updatedCDATA.length; index < selectionArrayLength; index++) {\n                    // popes the point from array selectionArray\n                    selectionArray.pop();\n                }\n            }\n            for (let index = 0; index < updatedCDATA.length; index++) {\n                // increases the value of selectedPoint to indicate that how many points have been added\n                selectionPoint++;\n                // sets the center of x of the point added at last position of the array selectionArray\n                selectionArray[selectionPoint - 1].Center_X = updatedCDATA[index].x;\n                // sets the center of y of the point added at last position of the array selectionArray\n                selectionArray[selectionPoint - 1].Center_Y = updatedCDATA[index].y;\n                // sets the radius of the point added at last position of the array selectionArray\n                selectionArray[selectionPoint - 1].radius = updatedCDATA[index].r;\n                // adds the point to the drawing board at defined position\n                AH.insert('#centerImg', '<div class=\"resize\" data-point=\"' + (selectionPoint) + '\" style=\"z-index: 10; left: ' + (updatedCDATA[index].x - updatedCDATA[index].r) + 'px; top: ' + (updatedCDATA[index].y - updatedCDATA[index].r) + 'px;width: ' + (2 * updatedCDATA[index].r) + 'px; height: ' + (2 * updatedCDATA[index].r) + 'px;\"><div class=\"resizer icomoon-resize\"></div></div>', 'beforeend');\n                // updates the marking points xml after to resize or drag the points\n                setPointDataInXML();\n            }\n            // contains the value of state focusDATA\n            let updatedFocusCDATA = state.focusDATA;\n            // contains the value of variable 'updatedFocusCDATA' after replacing character '!' to ',' and wrapping inside square bracket\n            updatedFocusCDATA = '[' + updatedFocusCDATA.replace(/!/g, ',') + ']';\n            // contains javascript object after parsing the string assigned into variable 'updatedFocusCDATA'\n            updatedFocusCDATA = JSON.parse(updatedFocusCDATA);\n            // removes the focus points and lines that joins the focus points\n            AH.selectAll('.backgroundFocusPoint circle,.backgroundFocusPath path', \n            'remove');\n            // makes array 'accessibilityPoints' to empty\n            accessibilityPoints = [];\n            for (let index = 0; index < updatedFocusCDATA.length; index++) {\n                // pushes the object containing array of focus points lies in array updatedFocusCDATA at given index into array accessibilityPoints\n                accessibilityPoints.push(updatedFocusCDATA[index][index]);\n            }\n            for (let index = 0; index < updatedFocusCDATA.length; index++) {\n                for (let subPoints = 0; subPoints < updatedFocusCDATA[index][index].length; subPoints++) {\n                    // updates the value of key x of multi dimention array object 'accessibilityPoints' where row and column values are value of variable 'index' and 'subPoints' with the value of key x of multi dimention array object updatedFocusCDATA where row and column values are the value of variables 'index' and 'subPoints'\n                    accessibilityPoints[index][subPoints].x = updatedFocusCDATA[index][index][subPoints].x;\n                    // updates the value of key y of multi dimention array object 'accessibilityPoints' where row and column values are value of variable 'index' and 'subPoints' with the value of key y of multi dimention array object updatedFocusCDATA where row and column values are the value of variables 'index' and 'subPoints'\n                    accessibilityPoints[index][subPoints].y = updatedFocusCDATA[index][index][subPoints].y;\n                    // Creates an element with the specified namespace URI and qualified name.\n                    scribble = document.createElementNS(xmlns, 'circle');\n                    // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                    setAuthColor('#808080', authThickness);\n                    // adds a new attribute 'id' (with a namespace null)\n                    scribble.setAttributeNS(null, 'id', 'focusPoint' + focusPointCount);\n                    // adds a new attribute 'cx' (with a namespace null)\n                    scribble.setAttributeNS(null, 'cx', accessibilityPoints[index][subPoints].x);\n                    // adds a new attribute 'cy' (with a namespace null)\n                    scribble.setAttributeNS(null, 'cy', accessibilityPoints[index][subPoints].y);\n                    // adds a new attribute 'r' (with a namespace null)\n                    scribble.setAttributeNS(null, 'r', '2px');\n                    // place the scribble element before very first element inside the element have class 'backgroundFocusPoint'\n                    AH.select('.backgroundFocusPoint').prepend(scribble);\n                    // increases the value of variable 'focusPointCount' by 1\n                    focusPointCount++;\n                }\n                // joins the focus points craeted by using 'Add focus Point' button\n                joinFocusPoint(accessibilityPoints[index]);\n            }\n\n            if (selectionPoint == 0) {\n                AH.select('#add_point_msg').classList.add('h');\n            } else {\n                AH.select('#add_point_msg').classList.remove('h');\n            }\n\n            if (AH.selectAll('.resize').length > 0) {\n                // sets the value of variable 'authoringMode' to 'authoring_point'\n                authoringMode = 'authoring_point';\n                // sets the cursor style value as auto\n                AH.setCss('#authoringSvg', {'cursor': 'auto'});\n            } else {\n                // removes the first character from string in state array selectedTools at index 0\n                authoringMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\n                // sets the cursor style to crosshair (+)\n                AH.setCss('#authoringSvg', {'cursor': 'crosshair'});\n                if (authoringMode == 'compass') {\n                    // shows the compass tool\n                    AH.selectAll('.drawing_compass_svg', 'removeClass', 'h');\n                } else {\n                    // hides the compass element\n                    AH.selectAll('.drawing_compass_svg', 'addClass', 'h');\n                }\n            }\n\n            AH.selectAll('.authoring_btn,#authoring_point,#focus_point' ,'removeClass' ,'active');\n            AH.selectAll('[data-title=\"' + authoringMode + '\"]' ,'addClass' ,'active');\n        } catch (e) {\n            console.warn({ e, func: 'parseXMLForGettingData'});\n        }\n    }\n\n    // used to update the xml value according to the updation made in configuration modal box\n    function parseXMLForSettingData(XML) {\n        // contains json of xml data\n        defaultXML = XMLToJSON(XML);\n        // stores the value of background image into json of xml having key bgimg\n        defaultXML.smxml._bgimg = state.bgImg;\n        // stores the value of alt message of background image into json of xml having key imgAlt\n        defaultXML.smxml._imgAlt = state.alt;\n        // stores the value of the width of background image into json of xml having key width\n        defaultXML.smxml._width = state.imgWidth;\n        // stores the value of stroke color of drawing into json of xml having key color\n        defaultXML.smxml._color = state.lineColor;\n        // stores the value of point color of drawing into json of xml having key markPointColor\n        defaultXML.smxml._markPointColor = state.markPointColor;\n        // store the values of drawing tools after joining it using comma that can be used to draw the drawing into json of xml having key selectedDrawingType\n        defaultXML.smxml.div._selectedDrawingType = selectedToolsArray.join(',');\n        // blanks the value of key CDATA inside the key div of json xml to clean the drawing board \n        defaultXML.smxml.div.__cdata = '';\n        // blanks the value of key CDATA inside the key backgroundPoint of json xml to clean the drawing board \n        defaultXML.smxml.backgroundPoint.__cdata = '';\n        // converts json of the xml into xml\n        defaultXML = JSONToXML(defaultXML);\n        // changed the format of CDATA\n        defaultXML = defaultXML.replace('<![CDATA[]]>', '<!--[CDATA[]]-->');\n        // updates the xml\n        getChildXml(defaultXML);\n        // sets the value of state 'xml'\n        state.xml = defaultXML;\n    }\n\n    // used to set the UI of the buttons and sketch or remove the drawing and adds focus point to access via keyboard\n    function authoringMousedownDraw(event) {\n        switch (authoringMode) {\n            case 'line':\n            case 'scribble':\n                isDrawing = true;\n                // used to set the x and y co-ordinate of the mouse position\n                setMouseCoordinates(event);\n                // Creates an element with the specified namespace URI and qualified name.\n                scribble = document.createElementNS(xmlns, 'path');\n                // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                setAuthColor(authColor, authThickness);\n                // adds a new attribute 'data-type' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-type', authoringMode + '_' + scribbleCount);\n                // adds a new attribute 'data-order' (with a namespace null)\n                scribble.setAttributeNS(null, 'data-order', scribbleCount);\n                // adds a new attribute 'd' (with a namespace null)\n                scribble.setAttributeNS(null, 'd', 'M' + auth_mouseX + ' ' + auth_mouseY);\n                // contains the x position of the mouse co-ordinate\n                checkCurrentPositionX = auth_mouseX;\n                // contains the x position of the mouse co-ordinate\n                checkCurrentPositionY = auth_mouseY;\n                // pushes the object containing keys mode, order, type, index and d \n                scribblePath.push({\n                    mode: 'add',\n                    order: scribbleCount,\n                    type: authoringMode + '_' + scribbleCount,\n                    index: scribbleCount,\n                    d: 'M' + auth_mouseX + ' ' + auth_mouseY\n                });\n                break;\n            case 'eraser':\n                if (AH.select('.currentSvg').nodeName && AH.select('.currentSvg').getAttribute(\"data-order\") != undefined) {\n                    // makes empty undo_list array\n                    undo_list = [];\n                    // defines variable 'tempArrayContainer'\n                    let tempArrayContainer = '';\n                    // contains the Index of the value at index returned by the 'data-order' attribute of the element has class 'currentSvg' in scribblePath array \n                    let currentIndex = scribblePath.indexOf(scribblePath[AH.select('.currentSvg').getAttribute(\"data-order\")]);\n                    // copies all enumerable own properties from objects defined into scribblePath array at given index to a target object\n                    tempArrayContainer = Object.assign({}, scribblePath[currentIndex]);\n                    // defines the value of key 'mode' to remove of tempArrayContainer object\n                    tempArrayContainer.mode = \"remove\";\n                    // pushes the object 'tempArrayContainer' into scribblePath array\n                    scribblePath.push(tempArrayContainer);\n                    // increases the value of variable 'scribbleCount' by 1\n                    scribbleCount++;\n                    // increases the value of variable 'undoCount' by 1\n                    undoCount++;\n                    // disabled the redo button\n                    AH.select('#authoring_redo').disabled = true;\n                    // removes the element have class 'currentSvg'\n                    AH.selectAll('.currentSvg', 'remove');\n                    if (AH.selectAll('.drawing_paths path').length == 0) {\n                        // disabled the cross (x) button\n                        AH.select('#authoring_clearScreen').disabled = true;\n                    }\n                }\n                break;\n            case 'markAccessibilityPoint':\n                if (!isAccessibleMarking) {\n                    // used to set the x and y co-ordinate of the mouse position\n                    setMouseCoordinates(event);\n                    // Creates an element with the specified namespace URI and qualified name.\n                    scribble = document.createElementNS(xmlns, 'circle');\n                    // sets the stroke width and color of the drawing drawn by scribble drawing tool\n                    setAuthColor('#808080', authThickness);\n                    // adds a new attribute 'id' (with a namespace null)\n                    scribble.setAttributeNS(null, 'id', 'focusPoint' + focusPointCount);\n                    // adds a new attribute 'cx' (with a namespace null)\n                    scribble.setAttributeNS(null, 'cx', auth_mouseX);\n                    // adds a new attribute 'cy' (with a namespace null)\n                    scribble.setAttributeNS(null, 'cy', auth_mouseY);\n                    // adds a new attribute 'r' (with a namespace null)\n                    scribble.setAttributeNS(null, 'r', '2px');\n                    // pushes the mouse x and y position into array 'tempAccessPoints' into json format\n                    tempAccessPoints.push({\n                        x: auth_mouseX,\n                        y: auth_mouseY\n                    });\n                    // increases the value of the variable 'focusPointCount' by 1\n                    focusPointCount++;\n                    // prepend the element scribble into the element have class 'backgroundFocusPoint'\n                    AH.select('.backgroundFocusPoint').prepend(scribble);\n                }\n                break;\n        }\n    }\n\n    // function for opening the drawing modal and changing the modal values\n    function openModal() {\n        AH.getBS('#drawing-modal', 'Modal').show();\n        AH.select('#backgroundImage').value = state.bgImg;\n        if (state.lineColor != '') {\n            // used to show the by default selected particular color from drawing color dropdown\n            AH.select('#lineColor option[value=\"' + state.lineColor + '\"]').selected = true;\n        }\n        if (state.markPointColor != '') {\n            // used to show the by default selected particular color from point color dropdown\n            AH.select('#markPointColor option[value=\"' + state.markPointColor + '\"]').selected = true;\n        }\n        if (state.selectedTools.length > 0) {\n            // uncheck the all drawing tools checkbox\n            AH.selectAll('.toolCheckbox', 'checked', false)\n            for (var toolsIndex = 0; toolsIndex < state.selectedTools.length; toolsIndex++) {\n                // check that drawing tool checkbox which value exist in state array 'selectedTools'\n                AH.select('[value=\"' + state.selectedTools[toolsIndex] + '\"]').checked = true;\n            }\n        }\n        AH.select('#imgWidth').value = state.imgWidth;\n        AH.select('#imgAlt').value = state.alt;\n\n        let inputs = AH.selectAll('.authoring-modal input');\n        AH.selectAll('.error', 'remove');\n        for (let index = 0; index < inputs.length; index++) {\n            validateInput(inputs[index]);\n        }\n    }\n</script>\n\n<main>\n    <div class=\"drawing_module_container\">\n        <center>\n            <div class=\"mt-2 mb-2\">\n                <div class=\"btn-toolbar auth_drawing_toolbar\" role=\"toolbar\" aria-label={l.drawing_tools}>\n                    <div tabindex=\"0\" class=\"btn-group mr-2\" role=\"group\" aria-label={l.draw_tools}>\n                        <button type=\"button\" tabindex=\"0\" data-title=\"scribble\" title={l.scribble} name=\"authoring_scribble\" id=\"authoring_scribble\" class=\"btn btn-light auth_toolbar geometryTool tooltip_btn authoring_btn active\"><i class=\"icomoon-pencil\"></i></button>\n                        <button type=\"button\" tabindex=\"0\" data-title=\"line\" title={l.line} name=\"authoring_line\" id=\"authoring_line\" class=\"btn btn-light auth_toolbar geometryTool tooltip_btn authoring_btn\">/</button>\n                        <button type=\"button\" tabindex=\"0\" data-title=\"compass\" title={l.compass} name=\"compass\" id=\"authoring_compass\" class=\"btn btn-light auth_toolbar geometryTool tooltip_btn authoring_btn\"><i class=\"icomoon-compass1\"></i></button>\n                    </div>\n                    <div tabindex=\"0\" class=\"btn-group mr-2\" role=\"group\" aria-label={l.removing_tools}>\n                        <button type=\"button\" tabindex=\"0\" data-title=\"eraser\" title={l.delete_tool} name=\"eraser\" id=\"authoring_eraser\" class=\"btn btn-light auth_toolbar authoring_btn tooltip_btn\"><i class=\"icomoon-delete-sm\"></i></button>\n                        <button type=\"button\" title={l.clear_screen} tabindex=\"0\"  name=\"clearScreen\" id=\"authoring_clearScreen\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-close-2\"></i></button>\n                        <button type=\"button\" tabindex=\"0\" title={l.redo} name=\"redo\" id=\"authoring_redo\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-redo-2\"></i></button>\n                        <button type=\"button\" tabindex=\"0\" title={l.undo} name=\"undo\" id=\"authoring_undo\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-undo-2\"></i></button>\n                    </div>\n                    <div class=\"btn-group mr-2\" role=\"group\" aria-label={l.answer_point}>\n                        <button type=\"button\" tabindex=\"0\" data-title=\"authoring_point\" title={l.add_show_point} name=\"authoring_point\" id=\"authoring_point\" class=\"btn btn-light tooltip_btn\">{l.add_point}</button>\n                    </div>\n                    <div class=\"btn-group mr-2\" role=\"group\" aria-label={l.access_mode}>\n                        <button type=\"button\" tabindex=\"0\" title={l.add_finish_point} name=\"focus_point\" id=\"focus_point\" class=\"btn btn-light tooltip_btn\">{l.add_focus_pnt}</button>\n                    </div>\n                    <div class=\"btn-group mr-2\" role=\"group\" aria-label={l.def_mode}>\n                        <button type=\"button\" tabindex=\"0\" title={l.reset} name=\"default_button\" id=\"reset_btn\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-new-24px-reset-1\"></i></button>\n                    </div>\n                </div>\n                <div id=\"add_point_msg\" class=\"text-danger my-1\">{l.delete_point_msg}</div>\n            </div>\n            <div>\n                <div id=\"centerImg\" class=\"centerImg authCenterImg my-auto relative ml-0\">\n                    <div class=\"btn-group position-absolute setting_btn\">\n                        <button type=\"button\" tabindex=\"0\" title=\"Configuration\" on:click={openModal} class=\"btn tooltip_btn btn-light p-1\" >\n                            <i class=\"icomoon-24px-settings-1\"></i>\n                        </button>\n                    </div>\n                    <img class=\"border\" src={bgImgPath + state.bgImg} id=\"svgImg\" alt={state.alt}/>\n                    <svg width=\"100%\" height=\"100%\" id=\"authoringSvg\" tabindex=\"0\" aria-labelledby=\"authoringSvgTitle\">\n                        <title id=\"authoringSvgTitle\">{state.alt}</title>\n                        <g class=\"backgroundFocusPath\"></g>\n                        <g class=\"drawing_paths\"></g>\n                        <g class=\"backgroundFocusPoint\"></g>\n                        <svg class=\"drawing_compass_svg h\" focusable=\"false\">\n                            <svg class=\"drawing-compass-wrapper\">\n                                <g>\n                                    <circle class=\"drawing-compass-route compass_route\" cx=\"267.984375\" cy=\"173\" r=\"80\"></circle>\n                                    <g>\n                                        <line class=\"compass_rotationBar compass_radius\" x1=\"267.984375\" y1=\"173\" x2=\"267.984375\" y2=\"253\"></line>\n                                    </g>\n                                    <g>\n                                        <circle class=\"drawing_compass_center compass_center\" cx=\"267.984375\" cy=\"173\" r=\"17\" focusable=\"true\" fill=\"url(#drawingCenter)\"></circle>\n                                        <defs>\n                                            <pattern id=\"drawingCenter\" width=\"20\" height=\"20\">\n                                                <svg x=\"0px\" y=\"0px\" viewBox=\"1 -3 21 35\" width=\"33\" height=\"41\">\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M3.22,15.1L1,12l2.22-3.1C3.22,10.97,3.22,13.03,3.22,15.1z\" />\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M8.9,3.22L12,1l3.1,2.22C13.03,3.22,10.97,3.22,8.9,3.22z\" />\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M15.1,20.78L12,23l-3.1-2.22C10.97,20.78,13.03,20.78,15.1,20.78z\" />\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M20.78,8.9L23,12l-2.22,3.1C20.78,13.03,20.78,10.97,20.78,8.9z\" />\n                                                    <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"#333333\" />\n                                                </svg>\n                                            </pattern>\n                                        </defs>\n                                    </g>\n                                    <g>\n                                        <circle class=\"compass_radius_icon mid_circle\" cx=\"267.984375\" cy=\"213\" r=\"17\" fill=\"url(#drawingRadius)\" transform=\"rotate(90,160,168)\" focusable=\"true\"></circle>\n                                        <defs>\n                                            <pattern id=\"drawingRadius\" width=\"20\" height=\"20\">\n                                                <svg x=\"0px\" y=\"0px\" viewBox=\"1 -5 21 34\" width=\"33\" height=\"33\">\n                                                    <g>\n                                                        <g>\n                                                            <rect x=\"8.53\" y=\"1.11\" width=\"1.5\" height=\"21.79\" />\n                                                        </g>\n                                                        <g>\n                                                            <rect x=\"13.97\" y=\"1.11\" width=\"1.5\" height=\"21.79\" />\n                                                        </g>\n                                                    </g>\n                                                    <g>\n                                                        <g>\n                                                            <path d=\"M5.87,16.87L1,12l4.87-4.87C5.87,10.38,5.87,13.62,5.87,16.87z\" />\n                                                        </g>\n                                                        <g>\n                                                            <path d=\"M18.13,16.87L23,12l-4.87-4.87C18.13,10.38,18.13,13.62,18.13,16.87z\" />\n                                                        </g>\n                                                    </g>\n                                                </svg>\n                                            </pattern>\n                                        </defs>\n                                    </g>\n                                    <g>\n                                        <circle class=\"compass_rotation midSmallCircle\" cx=\"267.984375\" cy=\"233\" r=\"8\" fill=\"url(#midSmallCircle_icon)\" focusable=\"true\" transform=\"rotate(90,160,193)\"></circle>\n                                        <defs>\n                                            <pattern id=\"midSmallCircle_icon\" width=\"20\" height=\"20\">\n                                                <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 14 14\" version=\"1.1\">\n                                                    <path fill=\"#000\" opacity=\"0.8\" d=\"M7,14 C3.13400675,14 0,10.8659932 0,7 C0,3.13400675 3.13400675,0 7, 0 C10.8659932,0 14,3.13400675 14,7 C14,10.8659932 10.8659932,14 7, 14 Z M4.66666667,8.16666667 L7,11.6666667 L9.33333333,8.16666667 L4.66666667,8.16666667 Z M4.66666667,5.83333333 L9.33333333,5.83333333 L7,2.33333333 L4.66666667,5.83333333 Z\"></path>\n                                                </svg>\n                                            </pattern>\n                                        </defs>\n                                    </g>\n                                    <g >\n                                        <circle class=\"drawing-compass-pointer lastCircle\" cx=\"267.984375\" cy=\"253\" r=\"3\" fill={state.lineColor} ></circle>\n                                        <circle class=\"drawing-compass-pointer-border lastCircle last_big_circle\" cx=\"267.984375\" cy=\"253\" r=\"17\" focusable=\"true\"></circle>\n                                    </g>\n                                    <g>\n                                        <circle class=\"lastCircleMid\" fill=\"url(#lastCircleMid_icon)\" cx=\"267.984375\" cy=\"293\" r=\"12\" opacity=\"0\"></circle>\n                                        <defs>\n                                            <pattern id=\"lastCircleMid_icon\" width=\"20\" height=\"20\">\n                                                <svg width=\"24\" height=\"23\" viewBox=\"0 0 11 27\" version=\"1.1\" enableBackground=\"new 0 0 8 24\">\n                                                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\" opacity=\"0.5\">\n                                                        <g transform=\"translate(-516.000000, -445.000000)\" fill=\"#333333\" fillRule=\"nonzero\">\n                                                            <g transform=\"translate(207.000000, 318.000000)\">\n                                                                <g transform=\"translate(313.742737, 140.576561) rotate(-2.000000) translate(-313.742737, -140.576561) translate(308.242737, 127.076561)\">\n                                                                    <path d=\"M3.76491276,22.4309727 C5.88207272,19.902578 7.10843487, 16.447736 7.10843487,12.7446281 C7.10843487,9.90533039 6.38974128, 7.20188959 5.07542401,4.93464319 L1.71316547,5.67221801 L4.9100909, 0.48305188 L10.1719173,3.81663137 L7.11351005,4.48755064 C8.4088902, 6.93966677 9.10843487,9.78181395 9.10843487,12.7446281 C9.10843487, 16.6677555 7.87827881,20.3638018 5.71250857,23.1972812 L8.63385425, 24.3467251 L2.93165771,26.8255625 L0.595287046,21.1838396 L3.76491276, 22.4309727 Z\" class=\"\"></path>\n                                                                </g>\n                                                            </g>\n                                                        </g>\n                                                    </g>\n                                                </svg>\n                                            </pattern>\n                                        </defs>\n                                    </g>\n                                </g>\n                            </svg>\n                        </svg>\n                    </svg>\n                </div>\n            </div>\n        </center>\n        <DrawingModal l={l} />\n    </div>\n</main>"],"names":["ctx","configuration","background_image","upload_media_text","alt_txt_image","width_of_image","draw_color","red","green","light_blue","blue","markPointColor","lightGreen","black","orange","tools","scribble","line","compass","cancel","submit","l","add_point","add_focus_pnt","alt","delete_point_msg","draw_tools","delete_tool","clear_screen","redo","undo","removing_tools","add_show_point","answer_point","add_finish_point","access_mode","reset","def_mode","drawing_tools","bgImgPath","bgImg","lineColor","xmlns","auth_mouseX","auth_mouseY","drawing_paths","checkCurrentPositionX","checkCurrentPositionY","cx","cy","midCircle_cx","midCircle_cy","midSmallCircle_cx","midSmallCircle_cy","lastCircle_cx","lastCircle_cy","lastSmallCircle_cx","lastSmallCircle_cy","compassRadius","xml","getChildXml","isDrawing","authoringMode","authColor","scribblePath","scribbleCount","undoCount","undo_list","redo_list","isValid","isCompassMove","compassAngle","isRadiusIncrease","initialPoint","x","y","finalPoint","isRadiusRotate","defaultXML","selectionPoint","selectionArray","cdata","selectedToolsArray","isAccessibleMarking","accessibilityPoints","tempAccessPoints","focusPointCount","auth_store","writable","snackback","cDATA","focusDATA","imgWidth","message","selectedTools","state","subscribe","value","validateInput","current","num","trim","AH","insert","parentElement","fill_warning","classList","contains","Number","val_gt_limit","isNaN","parseFloat","isFinite","selectAll","length","closest","select_one_tool","enter_number","select","remove","setCss","border","background","add","authoringMouseLeave","event","setMouseCoordinates","pop","setAttributeNS","d","prepend","disabled","getAttribute","updateCompassCalculation","cursor","Math","cos","PI","sin","setAttribute","setAttr","x1","y1","x2","y2","setPointDataInXML","index","Center_X","Center_Y","radius","filter","element","resize","data-point","substr","parseXMLForPoint","XMLToJSON","smxml","div","__cdata","JSONToXML","replace","checkRadiusPointsAndAngle","atan2","parseXMLForAccessPoint","push","focusPointData","points","subPoints","backgroundPoint","innerText","joinFocusPoint","markArray","document","createElementNS","pointStartValues","pointEndValues","setAuthColor","boundary","getElementById","getBoundingClientRect","clientX","left","clientY","top","authThickness","style","stroke","strokeWidth","fill","resetModule","innerHTML","setDefaultData","toolsIndex","src","width","afterUpdate","update","item","_bgimg","_imgAlt","_width","_selectedDrawingType","split","_markPointColor","_color","updatedCDATA","JSON","parse","selectionArrayLength","r","updatedFocusCDATA","e","console","warn","func","parseXMLForGettingData","onMount","listen","transform","opacity","mode","order","type","nodeName","undefined","tempArrayContainer","currentIndex","indexOf","Object","assign","authoringMousedownDraw","offsetHeight","round","sqrt","pow","bind","selectAction","swal","text","reset_module","icon","buttons","then","AI","preventDefault","delete_points","btnIndex","stopPropagation","checkboxes","join","getBS","hide","show","Draggable","containment","classes","ignore","onDragStop","position","ui","pointIndex","height","offsetWidth","h","CenterX","CenterY","Resizable","onStop","resolution","offsetLeft","offsetTop","selected","checked","inputs"],"mappings":"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"}