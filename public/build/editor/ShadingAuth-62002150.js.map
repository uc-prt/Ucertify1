{"version":3,"file":"ShadingAuth-62002150.js","sources":["../../../clsSMShadedGrid/inputField.svelte","../../../clsSMShadedGrid/shadedGridTable.svelte","../../../clsSMShadedGrid/ShadingAuth.svelte"],"sourcesContent":["<script>\n    import { createEventDispatcher } from 'svelte';\n    import l from '../src/libs/editorLib/language';\n    export let labelname;\n    export let datalabel;\n    export let name, id, max, value, msgdetail, shwmsg, set_corr_ans;\n    const dispatch = createEventDispatcher();\n</script>\n{#if set_corr_ans == 1}\n    <input \n        type=\"number\" \n        min=\"1\" \n        max={max} \n        class=\"form-control inputChange\" \n        id=\"methodCount\" \n        name=\"methodCount\" \n        data-label=\"Number of correct\" \n        value={value} \n        on:change=\"{(e)=>dispatch('handleChange', {value: e})}\"\n        on:blur=\"{(e)=>dispatch('inputChangeBlur', {value: e})}\"\n    />\n{:else}\n    <div class=\"col-sm-6 inline-block\">\n        <div class=\"font-weight-bold mb-2\">{labelname}</div>\n        <div>\n            <input type=\"number\" min=\"1\" max=\"{max}\" name=\"{name}\" id=\"{id}\" class=\"form-control width100 inline-block inputChange\" data-label=\"{datalabel}\" \n                value={value} on:change=\"{(e)=>dispatch('handleChange', {value: e})}\" on:blur=\"{(e)=>dispatch('inputChangeBlur', {value: e})}\"/>\n        </div>\n        {#if shwmsg == 1}\n            <div class=\"mt-1\">\n                <span class=\"font13 text-danger\">\n                    <span class=\"icomoon-24px-info-5 pr-1\"></span>\n                    {l.multiple_of} {msgdetail}px\n                </span>\n            </div>\n        {/if}\n    </div>\n{/if}","<script>\n    import { createEventDispatcher } from 'svelte';\n    export let table_id, table_class, total_row_count, table_value;\n    const dispatch = createEventDispatcher();\n</script>\n<table id={table_id} class={table_class}>\n    <tbody>\n        {#if total_row_count && total_row_count.length > 0}\n            {#each total_row_count as data, i}\n                <tr id={data.id}>\n                    {#if table_value && table_value.length > 0}\n                        {#each table_value as value}\n                            {#if i == value.rowno}\n                                <td \n                                    id={value.id} \n                                    data-hidden=\"no\" \n                                    tabindex=\"0\" \n                                    data-grid=\"no\" \n                                    data-id={value.dataid} \n                                    class={`${value.class} gridColor pointer`}\n                                    on:click=\"{(e)=>dispatch('gridClick', {value: e})}\"\n                                    on:keyup=\"{(e)=>dispatch('adaKeyupClick', {value: e})}\" \n                                    style=\"width: {value.width}; height: {value.height}\"\n                                ></td>\n                            {/if}\n                        {/each}\n                    {/if}\n                </tr>\n            {/each}\n        {/if}\n    </tbody>\n</table>","<!--\n *  File Name   : ShadingAuth.svelte\n *  Description : Container for Shading Authoring Module\n *  Author      : Rashmi Kumari\n *  Package     : svelte_items\n *  Last update : 05-Feb-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount, afterUpdate, beforeUpdate } from \"svelte\";\n    import { XMLToJSON, AH, JSONToXML} from '../helper/HelperAI.svelte';\n    import l from '../src/libs/editorLib/language';\n    import InputField from './inputField.svelte';\n    import ShadedGridTable from \"./shadedGridTable.svelte\";\n    export let getChildXml;\n    export let xml;\n    let state = {\n        xml:'',\n        gridWidth: \"\",\n        gridHeight: \"\",\n        rowCount: \"1\",\n        colCount: \"4\",\n        cellWidth: \"2\",\n        cellHeight: \"2\",\n        correctAns: [],\n        correctCount: 1,\n        shadedCell: [],\n        cellLocked: 'false',\n        hiddenCell: [],\n        authorMethod: \"byLocation\",\n        methodCount: \"\",\n        lockedCellValue: \"\",\n    };\n    let cellShaded;\n    let showSelectedAns = \"\";\n    let sizeMultipleIndex = 40;\n    let table_value, total_row_count, table_corr_value;\n\n\n\n\n    onMount(() => {\n        state.xml = xml;\n        const e = new Event(\"change\"); \n        const element = document.querySelector('#set') \n        element.dispatchEvent(e);\n        loadModule(xml);\n    });\n\n\n    $: {\n        let index, showAnsIndex;\n        table_value = [], total_row_count = [], table_corr_value = [];\n        // to create grids\n        for (let i = 0; i < state.rowCount; i++) {\n            total_row_count = [\n                ...total_row_count, {\n                    id : 'gridRow_' + i\n                }\n            ];\n\t\t\tfor (let j = 0; j < state.colCount; j++) {\n\t\t\t\tindex = state.shadedCell.indexOf(i + \"_\" + j);\n                cellShaded = (index!= -1) ? \"gridSelected\" : \"\";\n                // To check for correct answer cells\n                showAnsIndex = state.correctAns.indexOf(i + \"_\" + j);\n                if (state.correctAns != \"\") {\n\t\t\t\t\tshowSelectedAns = (showAnsIndex!= -1) ? \"gridSelected\" : \"\";\n\t\t\t\t} else {\n\t\t\t\t\tshowSelectedAns = \"\";\n\t\t\t\t}\n                table_value = [\n                    ...table_value, {\n                        id : \"grid\"+ i + \"_\" + j,\n                        dataid: i + \"_\" + j,\n                        class: cellShaded,\n                        width: parseInt(state.gridWidth) + 'px',\n                        height: parseInt(state.gridHeight) + 'px',\n                        rowno: i\n                    }\n                ];\n                table_corr_value = [\n                    ...table_corr_value, {\n                        id : \"grid_a\"+ i + \"_\" + j,\n                        dataid: i + \"_\" + j,\n                        class: showSelectedAns,\n                        width: parseInt(state.gridWidth) + 'px',\n                        height: parseInt(state.gridHeight) + 'px',\n                        rowno: i\n                    }\n                ];\n\t\t\t}\n        }\n        if (xml!=state.xml) {\n\t\t\tstate.xml = xml;\n\t\t\tloadModule(xml); \t\n\t\t}\n    }\n\n    // loads the module and update the xml\n    function loadModule(loadXml) {\n        // contains the json data of xml\n\t\tloadXml = XMLToJSON(loadXml);\n        // parses the xml and updates the sliders elements value\n\t\tparseXMLAuthoring(loadXml);\n        \n    }\n\n    // parses the xml and updates the values of sliders elements\n    function parseXMLAuthoring(MYXML) {\n        try {\n            state.correctAns = (MYXML.smxml._correctAns.trim()) ? MYXML.smxml._correctAns.split(\",\") : [];\n            state.authorMethod = MYXML.smxml._correctCount ? 'byCount' : 'byLocation';\n            state.shadedCell = (MYXML.smxml._shadedCell.trim()) ? MYXML.smxml._shadedCell.split(\",\") : [];\n            state.rowCount = MYXML.smxml._rowCount;\n            state.colCount = MYXML.smxml._colCount;\n            state.gridWidth = parseInt(MYXML.smxml._cellWidth) * sizeMultipleIndex;\n            state.gridHeight = parseInt(MYXML.smxml._cellHeight) * sizeMultipleIndex;\n            state.cellWidth = MYXML.smxml._cellWidth;\n            state.cellHeight = MYXML.smxml._cellHeight;\n            state.cellLocked = MYXML.smxml._lockedCell;\n            if(state.cellLocked == 'true') {\n                AH.select('#lock_author_cell').checked = true;\n            } else {\n                AH.select('#lock_author_cell').checked = false;\n            }\n            // update the xml after converting json xml into xml\n\t\t\tgetChildXml(JSONToXML(MYXML));\n\t\t} catch(events) {\n            console.warn({\n                'error': events.message,\n                'function name': 'parseXMLAuthoring',\n                'File name': 'ShadingAuth.svelte'\n            });\n\t\t}\n\t}\n    \n    //it manages the click event on grid\n    function authorClick(e) {\n        let cell = e.detail.value.target.id;\n\t\tlet selectedGrid;\n\t\tlet index;\n\t\tselectedGrid = AH.select(\".shadingAuth #\"+cell).getAttribute(\"data-id\");\n\t\tif ((!AH.select(\".shadingAuth #\"+cell).classList.contains(\"lockedGrid\"))) {\n\t\t\tif (AH.select(\".shadingAuth #\"+cell).getAttribute(\"data-grid\") == \"no\") {\n                AH.selectAll(\".shadingAuth #\"+cell, 'addClass', 'gridSelected');\n                AH.select(\".shadingAuth #\"+cell).setAttribute(\"data-grid\", \"selected\");\n\t\t\t\tif (!state.shadedCell.includes( selectedGrid)) {\n\t\t\t\t\tstate.shadedCell.push(selectedGrid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tindex = state.shadedCell.indexOf(selectedGrid);\n                state.shadedCell.splice(index, 1);\n                AH.selectAll(\".shadingAuth #\"+cell, 'removeClass', 'gridSelected');\n\t\t\t\tAH.select(\".shadingAuth #\"+cell).setAttribute(\"data-grid\", \"no\");\n\t\t\t}\n\t\t}\n        // updates the xml when the value of any elements changed\n\t\tupdateXml();\n    }\n\n    // to handle click event of correct answer grid\n    function boxClick(e) {\n\t\tlet selectedGrid;\n\t\tlet index;\n\t\tlet targetId = e.detail.value.target.id;\n\t\tselectedGrid = AH.select(\".shadingAuth #\"+targetId).getAttribute(\"data-id\");\n\t\tif ((!AH.select(\".shadingAuth #\" + targetId).classList.contains(\"lockedGrid\"))) {\n\t\t\tif (AH.select(\".shadingAuth #\"+targetId).getAttribute(\"data-grid\") == \"no\") {\n                AH.select(\".shadingAuth #\"+targetId).setAttribute(\"data-grid\", \"selected\");\n                AH.selectAll(\".shadingAuth #\"+targetId, 'addClass', 'gridSelected');\n\t\t\t\tif (!state.correctAns.includes( selectedGrid)) {\n\t\t\t\t\tstate.correctAns.push(selectedGrid);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tindex = state.correctAns.indexOf(selectedGrid);\n                state.correctAns.splice(index, 1);\n                AH.selectAll(\".shadingAuth #\"+targetId, 'removeClass', 'gridSelected');\n                AH.select(\".shadingAuth #\"+targetId).setAttribute(\"data-grid\", \"no\");\n\t\t\t}\n\t\t}\n        // updates the xml when the value of any elements changed\n\t\tupdateXml();\n\t}\n\n    // updates the xml when the value of any elements changed\n    function updateXml() {\n\t\tsetTimeout( function() {\n\t\t\tlet updatedXml = '<smxml type=\"44\" name=\"Shading\" rowCount=\"' + state.rowCount + '\" colCount=\"' + state.colCount + '\" cellWidth=\"' + state.cellWidth + '\" cellHeight=\"' + state.cellHeight + '\" correctAns=\"' + state.correctAns + '\" correctCount=\"' + state.methodCount + '\" shadedCell=\"' + state.shadedCell + '\" lockedCell=\"' + state.cellLocked + '\" HiddenCell=\"' + state.hiddenCell + '\" lockedCellValue=\"' + state.lockedCellValue + '\"><!--[CDATA[]]--></smxml>';\n\t\t\tgetChildXml(updatedXml);\t\t\t\n\t\t}, 100);\n\t}\n\n    // to handle on change event of input fields\n    function handleChange(eve) {\n        let cur_elem = eve.detail.value.target;\n        let cellWidthVal = AH.select('#cellWidth').value;\n        let cellHeightVal = AH.select('#cellHeight').value;\n        let rowCountVal = AH.select('#rowCount').value;\n        let colCountVal = AH.select('#colCount').value;\n        let methodCountVal = AH.select('#methodCount').value;\n        let elementVal = cur_elem.value;\n\t\tlet min = cur_elem.min;\n\t\tlet element_id = cur_elem.id;\n        let max = cur_elem.max;\n        state[cur_elem.name] = cur_elem.value;\n        state.gridWidth = parseInt(cellWidthVal) * sizeMultipleIndex;\n        state.gridHeight = cellHeightVal * sizeMultipleIndex;\n        state.rowCount = rowCountVal;\n        state.colCount = colCountVal;\n        state.methodCount = methodCountVal;\n\n        if (element_id != \"methodCount\" && AH.select('#methodCount').value != \"\") {\n            state.methodCount = AH.select('#methodCount').getAttribute('min');\n        }\n        // For handeling input's min and max value on Keyup \n\t\tif (elementVal != \"\") {\n\t\t\tlet labelText = AH.select(\"#\" + cur_elem.id).getAttribute(\"data-label\"); \n\t\t\tif (parseInt(elementVal) < parseInt(min)) {\n\t\t\t\tAH.alert(labelText+ \" can be between \\n\"+ min + \" to \" + max);\n\t\t\t\tstate[cur_elem.name] = min;\n\t\t\t} else if (parseInt(elementVal) > parseInt(max)) {\n\t\t\t\tAH.alert(labelText+ \" can be between \\n\"+ min + \" to \" + max);\n\t\t\t\tstate[cur_elem.name] = max;\n\t\t\t}\n\t\t}\n\t\tresetValues();\n        updateXml();\n    }\n\n    // to reset the shaded grid and correct answer grid\n    function resetValues() {\n        AH.selectAll(\"#authoringMethod_table .gridColor,.authShadeTable .gridColor\", 'removeClass', 'lockedGrid');\n        AH.selectAll(\"#authoringMethod_table .gridColor,.authShadeTable .gridColor\").forEach((gridVal) => {\n            gridVal.setAttribute(\"data-grid\", \"no\");\n        });\n        state.correctAns = [];\n        state.shadedCell = [];\n        state.cellLocked = 'false';\n        state.lockedCellValue = '';\n    }\n\n    // to handle on blur event of input fields\n    function inputChangeBlur(eve) {\n        let cur_elem_blur = eve.detail.value.target;\n        if (cur_elem_blur.value == '') {\n            AH.alert(l.empty_field);\n            state[cur_elem_blur.name] = cur_elem_blur.min;\n            resetValues();\n            updateXml();\n        }\n    }\n\n    // to lock the shaded grid if it is part of corrct answer. done by checkbox\n    function checkboxHandler (e) {\n\t\tlet lockCell = 0;\n\t\tstate.shadedCell.map(function(data, i) {\n\t\t\tstate.correctAns.map(function(data2, j) {\n\t\t\t\tif (data == data2) {\n\t\t\t\t\tlockCell = lockCell + 1;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\tif (state.shadedCell.length == 0) {\n            AH.alert(\"Please shade the cells\");\n            e.preventDefault();\n\t\t} else {\n\t\t\tif (lockCell == state.shadedCell.length || state.methodCount != '') {\n\t\t\t\tstate.cellLocked = state.cellLocked == 'true' ? 'false' : 'true';\n                let auth_id = '';\n                AH.selectAll(\".authShadeTable td.gridSelected\").forEach((value) => {\n                    auth_id += value.getAttribute('data-id') + ',';\t\n                });\n                auth_id = auth_id.substr(auth_id, auth_id.length - 1);\n                if (state.cellLocked == 'true') {\n                    AH.selectAll(\".authShadeTable td.gridSelected, .authMethodTable #grid_a\"+auth_id.split(',').join(',.authMethodTable #grid_a'), 'addClass', 'lockedGrid');\n                    state.lockedCellValue = auth_id;\n                } else {\n                    AH.selectAll(\".authShadeTable td.gridSelected, .authMethodTable #grid_a\"+auth_id.split(',').join(',.authMethodTable #grid_a'), 'removeClass', 'lockedGrid');\n                    state.lockedCellValue = '';\n                }\n\t\t\t\tupdateXml();\n\t\t\t} else {\n                AH.alert(l.lock_author_cell);\n                e.preventDefault();\n\t\t\t}\t\n\t\t}\n    }\n    \n    // to handle change event of select field to specify the correct answer method\n    function handleAuthoringMethod(event) {\n        state.authorMethod = event.target.value;\n        let _this = AH.select(\"[name=\"+event.target.name+\"]\");\n        AH.selectAll('.'+_this.options[_this.selectedIndex].getAttribute('data-show'), 'addClass', 'd-inline-block')\n        AH.selectAll('.'+_this.options[_this.selectedIndex].getAttribute('data-hide'), 'removeClass', 'd-inline-block')\n        if (AH.select(\"[name='\"+event.target.name+\"']\").value == \"byCount\") {\n\t\t\tstate.correctAns = \"\";\n\t\t\tstate.methodCount = 1;\n\t\t} else {\n\t\t\tstate.methodCount = \"\";\n\t\t}\n\t\tresetValues();\n\t\tupdateXml();\n    }\n    \n    // for ada checkbox\n    function adaKeyupCheckbox(e) {\n        if (e.keyCode == 13) {\n            checkboxHandler(e);\n        }\n    }\n\n    // for ada correct ans grid\n    function adaKeyupBoxClick(e) {\n        if (e.detail.value.keyCode == 13) {\n            boxClick(e);\n        }\n    }\n\n    // for ada shaded grid\n    function adaKeyupAuthorClick(e) {   \n        if (e.detail.value.keyCode == 13) {\n            authorClick(e);\n        }\n    }\n    \n</script>\n<div class=\"shadingAuth\">\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.canvas_options}</div>\n    <div class=\"row form-group\">\n        <div class=\"row mx-0 px-3 mb-4\">\n            <InputField \n                labelname={l.row_count} \n                max=10 \n                name=rowCount \n                id=\"rowCount\" \n                datalabel={\"Number of rows\"} \n                value={state.rowCount} \n                on:handleChange = {handleChange}\n                on:inputChangeBlur = {inputChangeBlur}\n            />\n            <InputField \n                labelname={l.col_count} \n                max=10 \n                name=colCount \n                id=\"colCount\" \n                datalabel={\"Number of column\"} \n                value={state.colCount} \n                on:handleChange = {handleChange}\n                on:inputChangeBlur = {inputChangeBlur}\n            />\n        </div>\n        <div class=\"row mx-0 px-3\">\n            <InputField \n                labelname={l.cell_width} \n                max=5 \n                name=cellWidth \n                id=\"cellWidth\" \n                datalabel={\"Width Value\"} \n                value={state.cellWidth} \n                shwmsg=\"1\"\n                msgdetail={sizeMultipleIndex}\n                on:handleChange = {handleChange}\n                on:inputChangeBlur = {inputChangeBlur}\n            />\n            <InputField \n                labelname={l.cell_height} \n                max=5 \n                name=cellHeight \n                id=\"cellHeight\" \n                datalabel={\"Height Value\"} \n                value={state.cellHeight} \n                shwmsg=\"1\"\n                msgdetail={sizeMultipleIndex}\n                on:handleChange = {handleChange}\n                on:inputChangeBlur = {inputChangeBlur}\n            />\n        </div>\n    </div>\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.author_shaded}</div>\n    <div class=\"col-sm-12 mb-4\">\n        <ShadedGridTable \n            table_id=\"shadingtable\" \n            table_class=\"shadingTable authShadeTable\"\n            total_row_count={total_row_count}\n            table_value={table_value}\n            on:gridClick = {authorClick}\n            on:adaKeyupClick = {adaKeyupAuthorClick}\n        />\n    </div>\n    <div class=\"col-sm-12 mb-5\">\n        <div class=\"input-check\">\n            <label for=\"lock_author_cell\" class=\"custom_checkbox_new float-left mr-1\">\n                <input \n                    type=\"checkbox\" \n                    id = \"lock_author_cell\"\n                    value={state.cellLocked}\n                    on:click = {checkboxHandler}\n                    on:keyup={adaKeyupCheckbox}\n                    aria-label = 'Lock Author checkbox'\n                >\n                <div class=\"check_mark_custom pt-sm1\"></div>\n            </label>\n            <label for=\"lock_author_cell\">{l.lock_shaded_cells}</label>\n        </div>\n    </div>\n    <hr class=\"border-dashed-top\" />\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.set_corr_ans}</div>\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.method}</div>\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">\n        <select \n            value={state.authorMethod} \n            name=\"authorMethod\" \n            class=\"bg-gray-hover form-select width-authoring d-inline-block\" \n            id=\"set\"\n            on:change={handleAuthoringMethod}\n        >\n            <option value=\"byLocation\" id=\"byLoc_sel\" data-show=\"locationMethod\" data-hide=\"countMethod\" selected=\"selected\">{l.set_corr_loc}</option>\n            <option value=\"byCount\" id=\"bycount_sel\" data-show=\"countMethod\" data-hide=\"locationMethod\">{l.set_corr_count}</option>\n        </select>\n        <div class=\"mb-4 ml-3 width-authoring countMethod h\">\n            <InputField \n                max={state.rowCount * state.colCount}\n                value={state.methodCount}\n                on:handleChange = {handleChange}\n                on:inputChangeBlur = {inputChangeBlur}\n                set_corr_ans = 1\n            />\n        </div>\n    </div>\n    <div class=\"col-sm-12 mb-4 locationMethod h d-inline-block\">\n        <ShadedGridTable \n            table_id=\"authoringMethod_table\" \n            table_class=\"shadingTable authMethodTable\"\n            total_row_count={total_row_count}\n            table_value={table_corr_value}\n            on:gridClick = {boxClick}\n            on:adaKeyupClick = {adaKeyupBoxClick}\n        />\n    </div>\n</div>"],"names":["ctx","l","multiple_of","labelname","datalabel","name","id","max","value","msgdetail","shwmsg","set_corr_ans","dispatch","createEventDispatcher","e","length","dataid","class","width","height","rowno","table_id","table_class","total_row_count","table_value","row_count","rowCount","col_count","colCount","cell_width","cellWidth","sizeMultipleIndex","cell_height","cellHeight","methodCount","canvas_options","author_shaded","lock_shaded_cells","method","set_corr_loc","set_corr_count","cellLocked","authorMethod","cellShaded","table_corr_value","getChildXml","xml","state","gridWidth","gridHeight","correctAns","correctCount","shadedCell","hiddenCell","lockedCellValue","showSelectedAns","loadModule","loadXml","MYXML","smxml","_correctAns","trim","split","_correctCount","_shadedCell","_rowCount","_colCount","parseInt","_cellWidth","_cellHeight","_lockedCell","AH","select","checked","JSONToXML","events","console","warn","error","message","function name","File name","parseXMLAuthoring","XMLToJSON","authorClick","selectedGrid","index","cell","detail","target","getAttribute","classList","contains","selectAll","setAttribute","includes","push","indexOf","splice","updateXml","boxClick","targetId","setTimeout","updatedXml","resetValues","forEach","gridVal","checkboxHandler","lockCell","map","data","i","data2","j","alert","preventDefault","auth_id","substr","join","lock_author_cell","onMount","Event","document","querySelector","dispatchEvent","showAnsIndex","eve","cur_elem","cellWidthVal","cellHeightVal","rowCountVal","colCountVal","methodCountVal","elementVal","min","element_id","labelText","cur_elem_blur","empty_field","event","_this","options","selectedIndex","keyCode"],"mappings":"4QA4BuB,GAAVA,gDAL+BA,sIAEGA,iBAAaA,eAAYA,qFAAyEA,cAC1HA,yLAHqBA,sBAEGA,sBAAaA,oBAAYA,4BAAyEA,qBAC1HA,MAEA,GAAVA,+LAhBAA,8IAKEA,kGALFA,qBAKEA,oEAeMC,EAAEC,oFAAcF,kMAAAA,iEAxBhB,GAAhBA,6NALUG,gBACAC,WACAC,SAAMC,UAAIC,YAAKC,gBAAOC,aAAWC,mBAAQC,WAC9CC,EAAWC,qUAYAC,GAAIF,EAAS,gBAAiBJ,MAAOM,IACvCA,GAAIF,EAAS,mBAAoBJ,MAAOM,IAOhBA,GAAIF,EAAS,gBAAiBJ,MAAOM,IAAiBA,GAAIF,EAAS,mBAAoBJ,MAAOM,mSClBtHd,0BAALe,yKAAKf,aAALe,qIAAAA,qDAGiBf,0BAALe,yKAAKf,aAALe,qIAAAA,6FAGcf,MAAMM,sFAIDN,MAAMgB,sBACLhB,MAAMiB,wCAGDjB,MAAMkB,oBAAiBlB,MAAMmB,+FARxCnB,MAAMM,6BAIDN,MAAMgB,sCACLhB,MAAMiB,6DAGDjB,MAAMkB,yBAAiBlB,MAAMmB,wDAV/CnB,MAAKA,MAAMoB,2EAAXpB,MAAKA,MAAMoB,2HAFnBpB,MAAeA,KAAYe,OAAS,uDADrCf,KAAKM,mDACJN,MAAeA,KAAYe,OAAS,oEADrCf,KAAKM,kEAFhBN,MAAmBA,KAAgBe,OAAS,+DAF9Cf,kBAAiBA,uDAEfA,MAAmBA,KAAgBe,OAAS,yEAF9Cf,uBAAiBA,sEAHbqB,kBAAUC,sBAAaC,kBAAiBC,WAC7CZ,EAAWC,qMAiB2BC,GAAIF,EAAS,aAAcJ,MAAOM,IAClCA,GAAIF,EAAS,iBAAkBJ,MAAOM,6RCsT3Db,EAAEwB,2DAIF,uBACJzB,KAAM0B,iCACM1B,8BACGA,gCAGXC,EAAE0B,2DAIF,yBACJ3B,KAAM4B,iCACM5B,8BACGA,gCAKXC,EAAE4B,6DAIF,oBACJ7B,KAAM8B,+BAEFC,0BACQ/B,8BACGA,gCAGXC,EAAE+B,gEAIF,qBACJhC,KAAMiC,gCAEFF,0BACQ/B,8BACGA,wGASTA,iBACJA,0BACGA,4BACIA,4BAmCXA,KAAM0B,SAAW1B,KAAM4B,eACrB5B,KAAMkC,sDACMlC,+BACGA,mHASTA,iBACJA,2BACGA,6BACIA,mDA7GyBC,EAAEkC,8KAmDFlC,EAAEmC,2JAwBhBnC,EAAEoC,oEAIYpC,EAAEU,+CACFV,EAAEqC,yEASmErC,EAAEsC,8CACvBtC,EAAEuC,8XAtBhFxC,KAAMyC,2yCAedzC,KAAM0C,uGAdO1C,kBACFA,qBAiBPA,iDA9EAA,KAAM0B,6CAUN1B,KAAM4B,6CAYN5B,KAAM8B,8CAYN9B,KAAMiC,yDAaAjC,0BACJA,kCAWEA,KAAMyC,8CAedzC,KAAM0C,qBAAN1C,KAAM0C,qCAWJ1C,KAAM0B,SAAW1B,KAAM4B,wBACrB5B,KAAMkC,2DAWAlC,0BACJA,kYA/YjB+B,EAAoB,yBAFpBY,EAGAnB,EAAaD,EAAiBqB,eAtBvBC,UACAC,KACPC,GACAD,IAAI,GACJE,UAAW,GACXC,WAAY,GACZvB,SAAU,IACVE,SAAU,IACVE,UAAW,IACXG,WAAY,IACZiB,cACAC,aAAc,EACdC,cACAX,WAAY,QACZY,cACAX,aAAc,aACdR,YAAa,GACboB,gBAAiB,IAGjBC,EAAkB,YAiEbC,EAAWC,aASOC,WAEnBX,EAAMG,WAAcQ,EAAMC,MAAMC,YAAYC,OAAUH,EAAMC,MAAMC,YAAYE,MAAM,eACpFf,EAAML,aAAegB,EAAMC,MAAMI,cAAgB,UAAY,oBAC7DhB,EAAMK,WAAcM,EAAMC,MAAMK,YAAYH,OAAUH,EAAMC,MAAMK,YAAYF,MAAM,eACpFf,EAAMrB,SAAWgC,EAAMC,MAAMM,iBAC7BlB,EAAMnB,SAAW8B,EAAMC,MAAMO,iBAC7BnB,EAAMC,UAAYmB,SAAST,EAAMC,MAAMS,YAAcrC,SACrDgB,EAAME,WAAakB,SAAST,EAAMC,MAAMU,aAAetC,SACvDgB,EAAMjB,UAAY4B,EAAMC,MAAMS,kBAC9BrB,EAAMd,WAAayB,EAAMC,MAAMU,mBAC/BtB,EAAMN,WAAaiB,EAAMC,MAAMW,eACR,QAApBvB,EAAMN,WACL8B,EAAGC,OAAO,qBAAqBC,SAAU,EAEzCF,EAAGC,OAAO,qBAAqBC,SAAU,EAGtD5B,EAAY6B,EAAUhB,UACfiB,GACEC,QAAQC,MACJC,MAASH,EAAOI,QAChBC,gBAAiB,oBACjBC,YAAa,wBA5B3BC,CAFAzB,EAAU0B,EAAU1B,aAoCT2B,EAAYtE,OAEnBuE,EACAC,EAFMC,EAAOzE,EAAE0E,OAAOhF,MAAMiF,OAAOnF,GAGvC+E,EAAed,EAAGC,OAAO,iBAAiBe,GAAMG,aAAa,WACvDnB,EAAGC,OAAO,iBAAiBe,GAAMI,UAAUC,SAAS,gBACS,MAA9DrB,EAAGC,OAAO,iBAAiBe,GAAMG,aAAa,cACrCnB,EAAGsB,UAAU,iBAAiBN,EAAM,WAAY,gBAChDhB,EAAGC,OAAO,iBAAiBe,GAAMO,aAAa,YAAa,YAClE/C,EAAMK,WAAW2C,SAAUV,IAC/BtC,EAAMK,WAAW4C,KAAKX,KAGvBC,EAAQvC,EAAMK,WAAW6C,QAAQZ,GACrBtC,EAAMK,WAAW8C,OAAOZ,EAAO,GAC/Bf,EAAGsB,UAAU,iBAAiBN,EAAM,cAAe,gBAC/DhB,EAAGC,OAAO,iBAAiBe,GAAMO,aAAa,YAAa,QAI7DK,aAIWC,EAAStF,OAChBuE,EACAC,EACAe,EAAWvF,EAAE0E,OAAOhF,MAAMiF,OAAOnF,GACrC+E,EAAed,EAAGC,OAAO,iBAAiB6B,GAAUX,aAAa,WAC3DnB,EAAGC,OAAO,iBAAmB6B,GAAUV,UAAUC,SAAS,gBACO,MAAlErB,EAAGC,OAAO,iBAAiB6B,GAAUX,aAAa,cACzCnB,EAAGC,OAAO,iBAAiB6B,GAAUP,aAAa,YAAa,YAC/DvB,EAAGsB,UAAU,iBAAiBQ,EAAU,WAAY,gBAC3DtD,EAAMG,WAAW6C,SAAUV,IAC/BtC,EAAMG,WAAW8C,KAAKX,KAGvBC,EAAQvC,EAAMG,WAAW+C,QAAQZ,GACrBtC,EAAMG,WAAWgD,OAAOZ,EAAO,GAC/Bf,EAAGsB,UAAU,iBAAiBQ,EAAU,cAAe,gBACvD9B,EAAGC,OAAO,iBAAiB6B,GAAUP,aAAa,YAAa,QAI7EK,aAIWA,IACXG,2BACKC,EAAa,6CAA+CxD,EAAMrB,SAAW,eAAiBqB,EAAMnB,SAAW,gBAAkBmB,EAAMjB,UAAY,iBAAmBiB,EAAMd,WAAa,iBAAmBc,EAAMG,WAAa,mBAAqBH,EAAMb,YAAc,iBAAmBa,EAAMK,WAAa,iBAAmBL,EAAMN,WAAa,iBAAmBM,EAAMM,WAAa,sBAAwBN,EAAMO,gBAAkB,mCAC9aT,EAAY0D,KACV,cAyCQC,IACLjC,EAAGsB,UAAU,+DAAgE,cAAe,cAC5FtB,EAAGsB,UAAU,gEAAgEY,SAASC,IAClFA,EAAQZ,aAAa,YAAa,aAEtC/C,EAAMG,qBACNH,EAAMK,qBACNL,EAAMN,WAAa,eACnBM,EAAMO,gBAAkB,eAenBqD,EAAiB7F,OACxB8F,EAAW,KACf7D,EAAMK,WAAWyD,cAAaC,EAAMC,GACnChE,EAAMG,WAAW2D,cAAaG,EAAOC,GAChCH,GAAQE,IACXJ,GAAsB,SAIM,GAA3B7D,EAAMK,WAAWrC,OACXwD,EAAG2C,MAAM,0BACTpG,EAAEqG,yBAEPP,GAAY7D,EAAMK,WAAWrC,QAA+B,IAArBgC,EAAMb,iBAChDa,EAAMN,WAAiC,QAApBM,EAAMN,WAAuB,QAAU,cAC1C2E,EAAU,GACd7C,EAAGsB,UAAU,mCAAmCY,SAASjG,IACrD4G,GAAW5G,EAAMkF,aAAa,WAAa,OAE/C0B,EAAUA,EAAQC,OAAOD,EAASA,EAAQrG,OAAS,GAC3B,QAApBgC,EAAMN,YACN8B,EAAGsB,UAAU,4DAA4DuB,EAAQtD,MAAM,KAAKwD,KAAK,6BAA8B,WAAY,kBAC3IvE,EAAMO,gBAAkB8D,OAExB7C,EAAGsB,UAAU,4DAA4DuB,EAAQtD,MAAM,KAAKwD,KAAK,6BAA8B,cAAe,kBAC9IvE,EAAMO,gBAAkB,OAExC6C,SAEY5B,EAAG2C,MAAMjH,EAAEsH,kBACXzG,EAAEqG,wBAlPdK,YACIzE,EAAMD,IAAMA,WACNhC,MAAQ2G,MAAM,UACJC,SAASC,cAAc,QAC/BC,cAAc9G,GACtB0C,EAAWV,gIAKPwC,EAAOuC,MACXrG,UAAkBD,UAAsBqB,cAE/BmE,EAAI,EAAGA,EAAIhE,EAAMrB,SAAUqF,SAChCxF,MACOA,GACCjB,GAAK,WAAayG,aAG1BE,EAAI,EAAGA,EAAIlE,EAAMnB,SAAUqF,IACnC3B,EAAQvC,EAAMK,WAAW6C,QAAQc,EAAI,IAAME,QAC/BtE,GAAuB,GAAT2C,EAAc,eAAiB,IAE7CuC,EAAe9E,EAAMG,WAAW+C,QAAQc,EAAI,IAAME,GAC1B,IAApBlE,EAAMG,gBACrBK,GAAmC,GAAhBsE,EAAqB,eAAiB,SAEzDtE,EAAkB,QAEP/B,MACOA,GACClB,GAAK,OAAQyG,EAAI,IAAME,EACvBjG,OAAQ+F,EAAI,IAAME,EAClBhG,MAAO0B,EACPzB,MAAOiD,SAASpB,EAAMC,WAAa,KACnC7B,OAAQgD,SAASpB,EAAME,YAAc,KACrC7B,MAAO2F,SAGfnE,MACOA,GACCtC,GAAK,SAAUyG,EAAI,IAAME,EACzBjG,OAAQ+F,EAAI,IAAME,EAClBhG,MAAOsC,EACPrC,MAAOiD,SAASpB,EAAMC,WAAa,KACnC7B,OAAQgD,SAASpB,EAAME,YAAc,KACrC7B,MAAO2F,KAKnBjE,GAAKC,EAAMD,UACpBC,EAAMD,IAAMA,KACZU,EAAWV,4BAmGYgF,OACdC,EAAWD,EAAItC,OAAOhF,MAAMiF,OAC5BuC,EAAezD,EAAGC,OAAO,cAAchE,MACvCyH,EAAgB1D,EAAGC,OAAO,eAAehE,MACzC0H,EAAc3D,EAAGC,OAAO,aAAahE,MACrC2H,EAAc5D,EAAGC,OAAO,aAAahE,MACrC4H,EAAiB7D,EAAGC,OAAO,gBAAgBhE,MAC3C6H,EAAaN,EAASvH,MAC5B8H,EAAMP,EAASO,IACfC,EAAaR,EAASzH,GAChBC,EAAMwH,EAASxH,WACnBwC,EAAMgF,EAAS1H,MAAQ0H,EAASvH,aAChCuC,EAAMC,UAAYmB,SAAS6D,GAAgBjG,SAC3CgB,EAAME,WAAagF,EAAgBlG,SACnCgB,EAAMrB,SAAWwG,SACjBnF,EAAMnB,SAAWuG,SACjBpF,EAAMb,YAAckG,KAEF,eAAdG,GAAkE,IAAnChE,EAAGC,OAAO,gBAAgBhE,WACzDuC,EAAMb,YAAcqC,EAAGC,OAAO,gBAAgBkB,aAAa,UAGnD,IAAd2C,OACCG,EAAYjE,EAAGC,OAAO,IAAMuD,EAASzH,IAAIoF,aAAa,cACtDvB,SAASkE,GAAclE,SAASmE,IACnC/D,EAAG2C,MAAMsB,EAAW,qBAAsBF,EAAM,OAAS/H,OACzDwC,EAAMgF,EAAS1H,MAAQiI,MACbnE,SAASkE,GAAclE,SAAS5D,KAC1CgE,EAAG2C,MAAMsB,EAAW,qBAAsBF,EAAM,OAAS/H,OACzDwC,EAAMgF,EAAS1H,MAAQE,MAGzBiG,IACML,cAgBqB2B,OACjBW,EAAgBX,EAAItC,OAAOhF,MAAMiF,OACV,IAAvBgD,EAAcjI,QACd+D,EAAG2C,MAAMjH,EAAEyI,iBACX3F,EAAM0F,EAAcpI,MAAQoI,EAAcH,OAC1C9B,IACAL,iBAyCuBwC,OAC3B5F,EAAML,aAAeiG,EAAMlD,OAAOjF,aAC9BoI,EAAQrE,EAAGC,OAAO,SAASmE,EAAMlD,OAAOpF,KAAK,KACjDkE,EAAGsB,UAAU,IAAI+C,EAAMC,QAAQD,EAAME,eAAepD,aAAa,aAAc,WAAY,kBAC3FnB,EAAGsB,UAAU,IAAI+C,EAAMC,QAAQD,EAAME,eAAepD,aAAa,aAAc,cAAe,kBACrC,WAArDnB,EAAGC,OAAO,UAAUmE,EAAMlD,OAAOpF,KAAK,MAAMG,WACrDuC,EAAMG,WAAa,UACnBH,EAAMb,YAAc,UAEpBa,EAAMb,YAAc,MAErBsE,IACAL,cAI4BrF,GACL,IAAbA,EAAEiI,SACFpC,EAAgB7F,aAKEA,GACQ,IAA1BA,EAAE0E,OAAOhF,MAAMuI,SACf3C,EAAStF,aAKYA,GACK,IAA1BA,EAAE0E,OAAOhF,MAAMuI,SACf3D,EAAYtE"}