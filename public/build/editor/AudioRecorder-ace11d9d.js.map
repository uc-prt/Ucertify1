{"version":3,"file":"AudioRecorder-ace11d9d.js","sources":["../../../clsSMAudioRecorder/AudioRecorder.svelte"],"sourcesContent":["<!--\n *  File Name   : AudioRecorder.svelte\n *  Description : Container for AudioRecorder Authoring Module\n *  Author      : Rashmi Kumari\n *  Package     : svelte_items\n *  Last update : 15-Feb-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount,afterUpdate,beforeUpdate } from \"svelte\";\n    import { XMLToJSON, AH } from '../helper/HelperAI.svelte';\n    import l from '../src/libs/editorLib/language';\n    export let getChildXml;\n    export let xml;\n    let recognition;\n    let synth;\n    let resetClicked = 'no';\n    let areaLabelForStopButton;\n    let areaLabelForModalContent;\n    let areaLabelForRecordButton;\n    let timeForRecording = 15;\n    let manageTimer, voiceForSpeech;\n    let state = {\n        language: '',\n        cdata: '',\n        disabled: true,\n        xml: '',\n        status: '',\n        isReset: true,\n        showTranscript: false,\n        counter: 0\n    } \n\n    onMount(() => {\n        AH.enableBsAll(\"[data-bs-toggle='tooltip']\", 'Tooltip', {container: 'body' });\n        // stores the xml value in xml state\n        state.xml = xml;\n        loadModule(xml);\n    });\n\n    // $: {\n    //     if ((xml != state.xml)) {\n    //         // stores the xml value in xml state\n\t// \t\tstate.xml = xml;\n    //         loadModule(xml);\n    //     }\n    // }\n    afterUpdate(()=>{\n        if ((xml != state.xml)) {\n            // stores the xml value in xml state\n\t\t\tstate.xml = xml;\n            loadModule(xml);\n        }\n    })\n    // load the module according to the value of xml\n    function loadModule(loadXml) {\n        // contains json data of xml\n        let newXml = XMLToJSON(loadXml);\n        // parses the xml data and update the xml\n        parseXMLAuthoring(newXml);\n    }\n\n    // parses the xml data and update the xml\n    function parseXMLAuthoring(MYXML) {\n        try {\n            // used to set the value of the state language from the value of language key of xml json\n            state.language = MYXML.smxml._language,\n            // used to set the value of the state cdata from the value of cdata key of xml json\n            state.cdata = MYXML.smxml.__cdata,\n            // used to set the value of the state status from the value of status key of xml json\n            state.status = MYXML.smxml._status,\n            // used to sets the value of the state disabled to false if the value of 'status' key of xml json is 'recordingStopped' otherwise 'true' \n            state.disabled = ((MYXML.smxml._status == 'recordingStopped') ? false: true),\n            // used to set the value of the state isReset from the value of isReset key of xml json\n            state.isReset = ((MYXML.smxml._isReset == 'true') ? true: false),\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n        } catch(event) {\n            console.warn({\n                'error': event.message,\n                'function name': 'parseXMLAuthoring',\n                'File name': 'AudioRecorder.svelte'\n            });\n        } \n    }\n\n    // assign the value of 'showTranscript' state to target elements checked value\n    function handleCheck(event) {\n        state.showTranscript = event.target.checked;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    }\n\n    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n    function checkState() {\n        //let state_timer = setTimeout(function() {\n            // creates the xml according to the value of states: status, language, isReset, showTranscript and cdata\n            let xml = '<smxml type=\"43\" name=\"AudioRecorder\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><!--[CDATA[' + state.cdata + ']]--></smxml>';\n            // update the xml\n            updateData(xml);\n            (state.status != '') ? (\n                // disabled the show transcript checkbox and language select dropdown\n                AH.select('.disability_apply, #showTranscript').disabled = 'disabled',\n                // makes label of language select and show transcript to look like disabled\n                AH.selectAll('.transcript_container, .select_label_container label', 'addClass', 'disabledState'),\n                // disabled transcript option\n                AH.selectAll('.transcript_container,#showTranscript')[1].disabled = true\n            ) : (\n                // enables the show transcript checkbox and language select dropdown\n                AH.select('.disability_apply, #showTranscript').disabled = '',\n                // makes label of language select and show transcript to look like active\n                AH.selectAll('.transcript_container, .select_label_container label', 'removeClass', 'disabledState'),\n                // enable transcript option\n                AH.selectAll('.transcript_container,#showTranscript')[1].disabled = false\n            );\n            // used for screen reader to read the message when user reached on play button\n            areaLabelForStopButton = AH.select('#authoring_container #stopButton span').getAttribute('data-original-title');\n            // used for screen reader to read the message when user reached on record button\n            areaLabelForRecordButton = AH.select('#authoring_container #recordButton span').getAttribute('data-original-title');\n            // used for screen reader to read the message when user open the reset modalbox\n            areaLabelForModalContent = AH.select('#dialogBody').innerText;\n            // clear the previously set timeout\n        //    clearTimeout(state_timer);\n        //}, 100);\n    }\n\n    // updates the xml\n    function updateData(xml) {\n        getChildXml(xml);\n    }\n\n    // used for handle the states value\n    function handleChange(event) {\n        state[event.target.name] = event.target.value;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    }\n\n    // starts the recording\n    function startRecording() {\n        switch(state.status) {\n            case 'recording':\n                // stops the recording when stop recording button clicked\n                stopRecording();\n                break;\n            case 'recordingStopped':\n                // for show the reset modalbox when start recording button clicked and recording is done previously\n                AH.getBS('#authoring_confirm_modal','Modal').show();\n                // focus on reset modalbox for screen reader purpose\n                AH.select('.modal-body').focus();\n                break;\n            default:\n                dictate();\n                state.status = 'recording';\n                state.isReset = false;\n                // used for count the second after recording start\n                state.counter = 0;\n                // used for automatically end the recording after 15 sec\n                timeForRecording = 15;\n                // ends recording after 15 sec\n                manageTime();\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                checkState();\n                // adds the stop recording icon to record button\n                AH.selectAll('#recordButton span', 'removeClass', ['icomoon-circle-2', 's2', 'text-danger']);\n                AH.selectAll('#recordButton span', 'addClass', 'icomoon-24px-stop');\n        }\n    }\n\n    //check that reset button is clicked or not\n    function setData() {\n        resetClicked = 'yes';\n    }\n\n    // called for speak the recorded text\n    function playRecording() {\n        if (window.speechSynthesis) {\n            synth = window.speechSynthesis;\n            if (state.cdata != '') {\n                // hides the initial state image of the audio container and recording gif\n                AH.selectAll('.authRecordingOn, .authInitialState', 'addClass', 'h');\n                // shows the play gif\n                AH.selectAll('.authAudioPlaying', 'removeClass', 'h');\n                state.disabled = true;\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                checkState();\n                // removes all utterances from the utterance queue.\n                //synth.cancel();\n                // speak the recorded text after defining some properties value and adding event\n                isSpeechSynthesisSupported();\n            } else {\n                // hides the play and recording gif\n                AH.selectAll('.authRecordingOn, .authAudioPaused', 'addClass', 'h');\n                // shows the initial state image of the audio container\n                AH.selectAll('.authInitialState', 'removeClass', 'h');\n                // message for no data recorded\n                AH.alert(l.no_data_msg);\n            }\n        } else {\n            // message for not supported speechSynthesis\n            AH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    // speak the text after defining some properties value and adding event\n    function isSpeechSynthesisSupported() {\n        // Returns a new SpeechSynthesisUtterance object instance\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\n        // sets the voice name according to the value of language state\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\n        // event listener fired when the utterance has finished being spoken.\n        utterThis.addEventListener('end', function() {\n            // hides the gif of recording and play\n            AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\n            // shows the initial state image of the audio container\n            AH.selectAll('.authInitialState', 'removeClass', 'h');\n            // enables the play button\n            state.disabled = false;\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n            // removes all utterances from the utterance queue.\n            synth.cancel();\n        });\n        // array of available voices\n        setTimeout(function () {\n            voiceForSpeech = synth.getVoices();\n            for (let index_no = 0; index_no < voiceForSpeech.length; index_no++) {\n                if (voiceForSpeech[index_no].name == voice_name) {\n                    //  sets the voice that will be used to speak the utterance.\n                    utterThis.voice = voiceForSpeech[index_no];\n                    // sets the pitch at which the utterance will be spoken at.\n                    utterThis.pitch = 1;\n                    // sets the speed at which the utterance will be spoken at.\n                    utterThis.rate = 1;\n                    // sets the language of the utterance\n                    utterThis.lang = state.language;\n                    // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n                    synth.speak(utterThis);\n                }\n            }\n        }, 10);\n    }\n\n    // stops capturing incoming audio\n    function stopRecording() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        // clears the timeout which is started when recording stared\n        clearTimeout(manageTimer);\n        // change the value of status state\n        state.status = 'recordingStopped';\n        // change the value of disabled state to false that enables the play button\n        state.disabled = false;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n        // shows the initial view of the audio container\n        AH.select('.authInitialState', 'removeClass', 'h');\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n        recognition.stop();\n    }\n\n    // handles with gif of recording and play and icon of record button\n    function manageStopStatus() {\n        // hides the gif of recording and playing\n        AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\n        // shows the initial state image of the audio container\n        AH.selectAll('.authInitialState', 'removeClass', 'h');\n        // removes the stop icon from recording button and adds start recording icon\n        AH.selectAll('#recordButton span', 'removeClass', 'icomoon-24px-stop');\n        AH.selectAll('#recordButton span', 'addClass', ['icomoon-circle-2', 's2', 'text-danger']);\n    }\n\n    // reset the previous recorded data\n    function manageData() {\n        // when reset modalbox open after click on reset button\n        if (resetClicked == 'yes') {\n            // reset the previously recorded data\n                resetAudioData();\n            \n            resetClicked = 'no';\n        } else {\n            // when reset modalbox open after click on record button\n            state.cdata = '',\n            // disabled the play button\n            state.disabled = true,\n            state.status = '';\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n            let manage_data_timer = setTimeout(function() {\n                // called for start the recording\n                startRecording();\n                // clear the timeout\n                clearTimeout(manage_data_timer);\n            }, 120);\n        }\n    }\n\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n    function isSpeechRecognitionSupported() {\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n            // creates new recognition object\n            recognition = new SpeechRecognition();\n            //Controls whether continuous results are returned for each recognition\n            recognition.continuous = true;\n            // returns interim results \n            recognition.interimResults = true;\n            //  sets the language of the current SpeechRecognition\n            recognition.lang = state.language;\n            // used for globally access the recogniton \n            window.recognitionData = recognition;\n            recognition.addEventListener('end', function() {\n                if (!state.isReset) {\n                    // clears the timeout which is started when recording stared\n                    clearTimeout(manageTimer);\n                    // shows message that recording ended\n                    AH.alert(l.recording_ended);\n                    // handles with gif of recording and play and icon of record button\n                    manageStopStatus();\n                    // shows the initial state image of the audio container\n                    AH.selectAll('.authInitialState', 'removeClass', 'h');\n                    state.status = 'recordingStopped';\n                    // enables the play button\n                    state.disabled = false;\n                    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                    checkState();\n                }\n            });\n        } else {\n            // shows the message that SpeechRecognition not supported\n            AH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    // ends recording after 15 sec\n    function manageTime() {\n        timeForRecording = timeForRecording - 1;\n        state.counter = state.counter + 1;\n        manageTimer = setTimeout(function() {\n            if (timeForRecording > 0) {\n                // calls again the method manageTime for counting the second value\n                manageTime();\n            } else {\n                // stops the recording\n                stopRecording();\n            }\n        }, 1000);\n    }\n\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \n    function dictate() {\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n        isSpeechRecognitionSupported();\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\n        recognition.start();\n        // enables reset button\n        AH.select('#resetButton').disabled = '';\n        // hides the initial state image of the audio container and play gif\n        AH.selectAll('.authAudioPlaying, .authInitialState', 'addClass', 'h');\n        // shows recording gif\n        AH.selectAll('.authRecordingOn', 'removeClass', 'h');\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\n        recognition.onresult = (event) => {\n            let speechToText = '';\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\n                speechToText += event.results[index_no][0].transcript;\n            }\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\n            state.cdata = speechToText.trim();\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n        }\n    }\n\n    // disabled the reset and play button and blanks the value of cdata and xml of state\n    function resetAudioData() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        if (state.status == 'recording') {\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n            recognition.stop();\n        }\n        \n        state.language = '';\n        state.cdata = '';\n        state.disabled = true;\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n        // clears the timeout which is started when recording stared\n        clearTimeout(manageTimer);\n        \n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    } \n\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\n    function modalResponse() {\n        resetClicked = 'no';\n    } \n\n    // for ada checkbox\n    function adaKeyupCheckbox(e) {\n        if (e.keyCode == 13) {\n            handleCheck(e);\n        }\n    }\n</script>\n<div id=\"authoring_container\" class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\n            <b class=\"noteColor bolder\">{l.note_label}</b>\n            {l.recording_warning}\n        </div>\n        <div class=\"col-6 py-2 mb-1\">\n            <div class=\"pb-2\"><b>{l.spoken_label}</b></div>\n            <textarea id=\"data_container\" disabled=\"disabled\" name=\"cdata\" class=\"form-control\" rows=\"3\" cols=\"75\" on:change={handleChange} value={state.cdata} aria-label={l.spoken_label + \" \" + ((state.cdata != \"\") ? state.cdata: \"Nothing\")}></textarea>\n        </div>\n        <div class=\"col-6 py-2 mb-1\">\n            <div class=\"select_label_container\">\n                <label for=\"language_select\"><b>{l.select_lang}</b></label>\n            </div>\n            <select id=\"language_select\" name=\"language\" class=\"disability_apply form-select form-control-sm\" on:change={handleChange} on:blur={handleChange} value={state.language} aria-label=\"Select the language for Recording\">\n                <!-- <option value=\"en-US\" aria-label=\"English United States\">{l.english_us}</option>\n                <option value=\"de-DE\" aria-label=\"German\">{l.german_lang}</option>\n                <option value=\"fr-FR\" aria-label=\"French\">{l.french_lang}</option>\n                <option value=\"es-ES\" aria-label=\"Spanish\">{l.spanish_lang}</option>\n                <option value=\"hi-IN\" aria-label=\"Hindi\">{l.hindi_lang}</option>\n                <option value=\"ja-JP\" aria-label=\"Japanese\">{l.japanese_lang}</option>\n                <option value=\"ko-KR\" aria-label=\"Korean\">{l.korean_lang}</option>\n                <option value=\"it-IT\" aria-label=\"Italian\">{l.italiano}</option>\n                <option value=\"en-IN\" aria-label=\"English UK\">{l.english_in}</option> -->\n                <option value=\"en-US\" aria-label=\"English United States\">{l.english_us}</option>\n                <option value=\"hi-IN\" aria-label=\"Hindi\">{l.hindi_lang}</option>\n                <option value=\"sv-SE\" aria-label=\"Swedish\">{l.svenska}</option>\n                <option value=\"fi-FI\" aria-label=\"Finnish\">{l.suomi}</option>\n                <option value=\"it-IT\" aria-label=\"Italian\">{l.italiano}</option>\n                <option value=\"en-IN\" aria-label=\"English UK\">{l.english_in}</option>\n            </select>\n            <div class=\"form-check form-check-inline transcript_container mt-3\">\n                <label for=\"showTranscript\" class=\"custom_checkbox_new float-left mr-1\">\n                    <input \n                        type=\"checkbox\" \n                        on:click={handleCheck}\n                        on:keyup={adaKeyupCheckbox}\n                        name=\"showTranscript\" \n                        id=\"showTranscript\"\n                        tabindex=\"0\"\n                        class=\"form-check-input\"\n                        checked={state.showTranscript}\n                    >\n                    <div class=\"check_mark_custom pt-sm1\"></div>\n                </label>\n                <label for=\"showTranscript\" class=\"form-check-label\">{l.show_transcript}</label>\n            </div>\n        </div>\n        <div class=\"col-12 col-md-8 offset-md-2\">\n            <div class=\"border rounded shadow-sm\">\n                <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\">\n                    <b>{l.audio_recorder}</b>\n                </div>\n                <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\n                    <span class=\"align-self-center mx-auto authInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\n                    <div class=\"h authRecordingOn w-100 h-100 tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\n                    </div>\n                    <div class=\"h authAudioPlaying w-100 h-100 tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\n                    </div>\n                </div>\n                <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2\">\n                    <button \n                        type=\"button\" \n                        name=\"recordButton\" \n                        id=\"recordButton\" \n                        on:click={startRecording} \n                        class=\"btn btn-light py-0\" \n                        aria-label={\"Click for \" + areaLabelForRecordButton}\n                    >\n                        <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")}></span>\n                    </button>\n                    <button \n                        type=\"button\" \n                        name=\"stopButton\" \n                        id=\"stopButton\" \n                        on:click={playRecording} \n                        disabled={state.disabled} \n                        class=\"btn btn-light py-0\" \n                        aria-label={\"Click for \" + areaLabelForStopButton}\n                    >\n                        <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Play Audio\"></span>\n                    </button>\n                    <button \n                        type=\"button\" \n                        name=\"resetButton\" \n                        id=\"resetButton\" \n                        on:click={setData} \n                        class=\"btn btn-light py-0\" \n                        disabled={state.isReset} \n                        data-bs-toggle=\"modal\" \n                        data-bs-target=\"#authoring_confirm_modal\" \n                        aria-label=\"Click on this button for override the previous recording\"\n                    >\n                        <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Reset Data\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"authoring_modal_container container\">\n    <div class=\"modal fade\" id=\"authoring_confirm_modal\">\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\n                </div>\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForModalContent} id=\"dialogBody\" name=\"dialogBody\">\n                    {l.modal_data}\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"authoring_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\n                    <button type=\"button\" class=\"authoring_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"names":["l","recording_warning","modal_data","note_label","spoken_label","select_lang","english_us","hindi_lang","svenska","suomi","italiano","english_in","show_transcript","audio_recorder","starting_message","confirm_label","no_label","yes_label","ctx","cdata","showTranscript","status","disabled","isReset","language","recognition","synth","areaLabelForStopButton","areaLabelForModalContent","areaLabelForRecordButton","manageTimer","voiceForSpeech","getChildXml","xml","resetClicked","timeForRecording","state","counter","loadModule","loadXml","MYXML","smxml","_language","__cdata","_status","_isReset","_showTranscript","checkState","event","console","warn","error","message","function name","File name","parseXMLAuthoring","XMLToJSON","handleCheck","target","checked","updateData","AH","select","selectAll","getAttribute","innerText","startRecording","stopRecording","getBS","show","focus","window","webkitSpeechRecognition","SpeechRecognition","continuous","interimResults","lang","recognitionData","addEventListener","clearTimeout","alert","recording_ended","manageStopStatus","browser_support_msg","start","onresult","speechToText","index_no","results","length","transcript","trim","manageTime","stop","setTimeout","onMount","enableBsAll","container","afterUpdate","name","value","speechSynthesis","utterThis","SpeechSynthesisUtterance","voice_name","cancel","getVoices","voice","pitch","rate","speak","isSpeechSynthesisSupported","no_data_msg","resetAudioData","manage_data_timer","e","keyCode"],"mappings":"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"}