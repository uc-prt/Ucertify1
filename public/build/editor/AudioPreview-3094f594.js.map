{"version":3,"file":"AudioPreview-3094f594.js","sources":["../../../clsSMAudioRecorder/AudioPreview.svelte"],"sourcesContent":["<!--\r\n *  File Name   : AudioPreview.svelte\r\n *  Description : Container for all AudioRecorder Preview Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 15-Feb-2021\r\n *  Last Updated By : Rashmi Kumari\r\n-->\r\n<script>\r\n    import { onMount, afterUpdate } from \"svelte\";\r\n    import { XMLToJSON, AH, onUserAnsChange} from '../helper/HelperAI.svelte';\r\n    import ItemHelper from '../helper/ItemHelper.svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    import \"./css/AudioStyle.min.css\";\r\n    export let xml;\r\n    export let uxml;\r\n    export let showAns;\r\n    export let isReview;\r\n    export let editorState;\r\n\r\n    let recognition;\r\n    let synth;\r\n    let previewResetClicked = 'no';\r\n    let areaLabelForPreviewStopButton = \"Play Audio\";\r\n    let areaLabelForPreviewModalContent;\r\n    let areaLabelForPreviewRecordButton = \"Start Recording\";\r\n    let previewTimeForRecording = 15;\r\n    let previewManageTimer;\r\n    let state = {\r\n        disabled: true,\r\n        cdata: '',\r\n        language: '',\r\n        correctAns: '',\r\n        xml: '',\r\n        status: '',\r\n        pointerEvents: \"auto\",\r\n        isReset: true,\r\n        showTranscript: false,\r\n        counter: 0,\r\n    }\r\n\r\n    // Called once throughout the programm execution\r\n    onMount(() => {\r\n        if (!(window.webkitSpeechRecognition || window.SpeechRecognition)) {\r\n            // shows the warning message that your browser does not support the speechRecognition\r\n            AH.alert(l.browser_support_msg);\r\n        }\r\n        if (xml != state.xml) {\r\n            // sets the state xml\r\n            state.xml = xml;\r\n            /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\r\n            resetValue();\r\n            // load the module according to the value of xml\r\n            loadModule(xml);\r\n        }\r\n    })\r\n\r\n    // Called every time when any state gets changed\r\n    $: {\r\n        loadModule(xml);\r\n\t\tif (isReview) {\r\n            setReview();\r\n\t\t} else {\r\n            unsetReview();\r\n        }\r\n\t}\r\n\r\n    // load the module according to the value of xml\r\n    function loadModule(loadXml) {\r\n        // contains json data of xml\r\n        let newXml = XMLToJSON(loadXml);\r\n        // parses the xml data and update the xml\r\n        parseXMLPreview(newXml);\r\n    }\r\n\r\n    // parses the xml data and update the xml\r\n    function parseXMLPreview(MYXML) {\r\n        try {\r\n            // used to set the value of the state language from the value of language key of xml json\r\n            state.language = MYXML.smxml._language,\r\n            // used to set the value of the state cdata from the value of cdata key of xml json\r\n            state.correctAns = MYXML.smxml.__cdata,\r\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\r\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\r\n            if (uxml) {\r\n                // parses the user answer xml and update the xml\r\n                parseUserAns(uxml);\r\n            }\r\n        } catch(event) {\r\n            console.warn({\r\n                'error': event.message,\r\n                'function name': 'parseXMLPreview',\r\n                'File name': 'AudioPreview.svelte'\r\n            });\r\n        }\r\n    }\r\n\r\n    // parses the user answer xml and update the xml\r\n    function parseUserAns(userAns) {\r\n        // contains json data of user answer xml\r\n        let MYXML = XMLToJSON(userAns);\r\n        // used to set the value of the state language from the value of language key of the user answer xml json\r\n        state.language = MYXML.smans._language;\r\n        // used to set the value of the state cdata from the value of cdata key of the user answer xml json\r\n        state.cdata = MYXML.smans.__cdata;\r\n        // used to set the value of the state status from the value of status key of the user answer xml json\r\n        state.status = MYXML.smans._status;\r\n        // used to sets the value of the state disabled to false if the value of 'status' key of the user answer xml json is 'recordingStopped' otherwise 'true'\r\n        state.disabled = ((MYXML.smans._status == 'recordingStopped') ? false: true);\r\n        // used to set the value of the state isReset from the value of isReset key of user answer xml json\r\n        state.isReset = ((MYXML.smans._isReset == 'true') ? true: false);\r\n        // used to set the value of the state showTranscript from the value of showTranscript key of the user answer xml json\r\n        state.showTranscript = ((MYXML.smans._showTranscript == 'true') ? true: false);\r\n    }\r\n\r\n    /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\r\n    function resetValue() {\r\n        state.disabled = true;\r\n        state.cdata = '';\r\n        state.xml = '';\r\n        state.status = '';\r\n        state.isReset = true;\r\n    }\r\n\r\n    // reset the previous recorded data\r\n    function manageData() {\r\n        // when reset modalbox open after click on reset button\r\n        if (previewResetClicked == 'yes') {\r\n            // reset the previously recorded data\r\n            resetAudioData();\r\n            previewResetClicked = 'no';\r\n        } else {\r\n            // when reset modalbox open after click on record button\r\n            state.cdata = '',\r\n            state.disabled = true,\r\n            state.status = '',\r\n            state.pauseRecording = ''\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n            let manage_data_timer = setTimeout(function() {\r\n                // called for start the recording\r\n                startRecording();\r\n                // clear the timeout\r\n                clearTimeout(manage_data_timer);\r\n            }, 120);\r\n        }\r\n    }\r\n\r\n    // disabled the reset and play button and blanks the value of cdata and xml of state\r\n    function resetAudioData() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        if (state.status == 'recording') {\r\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n            recognition.stop();\r\n        }\r\n        state.cdata = '';\r\n        state.disabled = true;\r\n        state.xml = '';\r\n        state.status = '';\r\n        state.isReset = true;\r\n        // clears the timeout which is started when recording stared\r\n        clearTimeout(previewManageTimer);\r\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n        previewCheckState();\r\n    }\r\n\r\n    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n    function previewCheckState() {\r\n        setTimeout(function() {\r\n            let uXml = '<smans type=\"43\" name=\"AudioRecorder\" disabled=\"' + state.disabled + '\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><![CDATA[' + state.cdata + ']]></smans>';\r\n            AH.select(\"#special_module_user_xml\").value = uXml;\r\n            ISSPECIALMODULEUSERXMLCHANGE = 1;\r\n            // stores user answer xml data in uaXML variable of window object to access it globally\r\n            uxml = AH.select(\"#special_module_user_xml\").value;\r\n            // used for screen reader to read the message when user reached on play button\r\n            areaLabelForPreviewStopButton = AH.select('#stopButtonTooltip').getAttribute('data-original-title');\r\n            // used for screen reader to read the message when user reached on record button\r\n            areaLabelForPreviewRecordButton = AH.select('#recordButtonTooltip').getAttribute('data-original-title');\r\n            // used for screen reader to read the message when user open the reset modalbox\r\n            areaLabelForPreviewModalContent = AH.select('#previewDialogBody').innerText;\r\n            if (state.correctAns.trim() != '') {\r\n                // check the answer\r\n                checkAns();\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    // stops capturing incoming audio\r\n    function stopRecording() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        clearTimeout(previewManageTimer);\r\n        state.status = 'recordingStopped';\r\n        state.disabled = false;\r\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n        previewCheckState();\r\n        // hides recording gif\r\n        AH.selectAll('.previewRecordingOn', 'addClass', 'h');\r\n        // shows the initial state image\r\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n        recognition.stop();\r\n    }\r\n\r\n    // ends recording after 15 sec\r\n    function previewManageTime() {\r\n        previewTimeForRecording = previewTimeForRecording - 1;\r\n        state.counter = state.counter + 1;\r\n        previewManageTimer = setTimeout(function() {\r\n            if (previewTimeForRecording > 0) {\r\n                // calls again the method previewManageTime for counting the second value\r\n                previewManageTime();\r\n            } else {\r\n                // stops the recording\r\n                stopRecording();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \r\n    function dictate() {\r\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n        isSpeechRecognitionSupported();\r\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\r\n        recognition.start();\r\n        // enables reset button\r\n        AH.select('#preview_container #resetButton').disabled = false;\r\n        // hides the initial state image of the audio container and play gif\r\n        AH.selectAll('.previewAudioPlaying, .previewInitialState', 'addClass', 'h');\r\n        // shows recording gif\r\n        AH.selectAll('.previewRecordingOn', 'removeClass', 'h');\r\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\r\n        recognition.onresult = (event) => {\r\n            let speechToText = '';\r\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\r\n                speechToText += event.results[index_no][0].transcript;\r\n            }\r\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\r\n            state.cdata = speechToText.trim();\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n        }\r\n    }\r\n\r\n    // handles with gif of recording and play and icon of record button\r\n    function manageStopStatus() {\r\n        // hides the gif of recording and playing\r\n        AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\r\n        // shows the initial state image of the audio container\r\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n        // removes the stop icon from recording button and adds start recording icon\r\n        AH.selectAll('#preview_recordButton span', 'removeClass', 'icomoon-24px-stop');\r\n        AH.selectAll('#preview_recordButton span', 'addClass', ['icomoon-circle-2', 'text-danger']);\r\n    }\r\n\r\n    // speak the text after defining some properties value and adding event\r\n    function isSpeechSynthesisSupported() {\r\n        // Returns a new SpeechSynthesisUtterance object instance\r\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\r\n        // array of available voices\r\n        let voiceForSpeech = synth.getVoices();\r\n        // sets the voice name according to the value of language state\r\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\r\n        // event listener fired when the utterance has finished being spoken.\r\n        utterThis.addEventListener('end', function() {\r\n            // hides the gif of recording and play\r\n            AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\r\n            // shows the initial state image of the audio container\r\n            AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n            // enables the play button\r\n            state.disabled = false;\r\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n            previewCheckState();\r\n            // removes all utterances from the utterance queue.\r\n            synth.cancel();\r\n        });\r\n        for (let index_no = 0; index_no < voiceForSpeech.length; index_no = index_no + 1) {\r\n            if (voiceForSpeech[index_no].name == voice_name) {\r\n                //  sets the voice that will be used to speak the utterance.\r\n                utterThis.voice = voiceForSpeech[index_no];\r\n                // sets the pitch at which the utterance will be spoken at.\r\n                utterThis.pitch = 1;\r\n                // sets the speed at which the utterance will be spoken at.\r\n                utterThis.rate = 1;\r\n                // sets the language of the utterance\r\n                utterThis.lang = state.language;\r\n                // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\r\n                synth.speak(utterThis);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    // starts the recording\r\n    function startRecording() {\r\n        switch(state.status) {\r\n            case 'recording':\r\n                // stops the recording when stop recording button clicked\r\n                stopRecording();\r\n                break;\r\n            case 'recordingStopped':\r\n                // for show the reset modalbox when start recording button clicked and recording is done previously\r\n                AH.getBS('#preview_confirm_modal','Modal').show();\r\n                // focus on reset modalbox for screen reader purpose\r\n                AH.select('.modal-body').focus();\r\n                break;\r\n            default:\r\n                dictate();\r\n                state.status = 'recording',\r\n                state.isReset = false,\r\n                // used for count the second after recording start\r\n                state.counter = 0;\r\n                // used for automatically end the recording after 15 sec\r\n                previewTimeForRecording = 15;\r\n                // ends recording after 15 sec\r\n                previewManageTime();\r\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                previewCheckState();\r\n                // adds the stop recording icon to record button\r\n                AH.selectAll('#preview_recordButton span', 'removeClass', ['icomoon-circle-2', 'text-danger']);\r\n                AH.selectAll('#preview_recordButton span', 'addClass', 'icomoon-24px-stop');\r\n        }\r\n    }\r\n\r\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n    function isSpeechRecognitionSupported() {\r\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\r\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\n            // creates new recognition object\r\n            recognition = new SpeechRecognition();\r\n            //Controls whether continuous results are returned for each recognition\r\n            recognition.continuous = true;\r\n            // returns interim results \r\n            recognition.interimResults = true;\r\n            //  sets the language of the current SpeechRecognition\r\n            recognition.lang = state.language;\r\n            // used for globally access the recogniton \r\n            window.recognitionData = recognition;\r\n            recognition.addEventListener('end', function() {\r\n                if (!state.isReset) {\r\n                    // clears the timeout which is started when recording stared\r\n                    clearTimeout(previewManageTimer);\r\n                    // shows message that recording ended\r\n                    AH.alert(l.recording_ended);\r\n                    // handles with gif of recording and play and icon of record button\r\n                    manageStopStatus();\r\n                    // shows the initial state image of the audio container\r\n                    AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n                    state.status = 'recordingStopped';\r\n                    state.disabled = false;\r\n                    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                    previewCheckState();\r\n                }\r\n            });\r\n        } else {\r\n            // shows the message that SpeechRecognition not supported\r\n\t\t\tAH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    }\r\n\r\n    //check that reset button is clicked or not\r\n    function setData() {\r\n        previewResetClicked = 'yes';\r\n    }\r\n\r\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\r\n    function modalResponse() {\r\n        previewResetClicked = 'no';\r\n    }\r\n\r\n    // called for speak the recorded text\r\n    function playRecording() {\r\n        if (window.speechSynthesis) {\r\n            synth = window.speechSynthesis;\r\n            if (state.cdata != '') {\r\n                // hides the initial state image of the audio container and recording gif\r\n                AH.selectAll('.previewRecordingOn, .previewInitialState', 'addClass', 'h');\r\n                // shows the play gif\r\n                AH.selectAll('.previewAudioPlaying', 'removeClass', 'h');\r\n                state.disabled = true;\r\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\r\n                previewCheckState();\r\n                // removes all utterances from the utterance queue.\r\n                //synth.cancel();\r\n                // speak the recorded text after defining some properties value and adding event\r\n                isSpeechSynthesisSupported();\r\n            } else {\r\n                // hides the play and recording gif\r\n                AH.selectAll('.previewRecordingOn, .previewAudioPlaying', 'addClass', 'h');\r\n                // shows the initial state image of the audio container\r\n                AH.selectAll('.previewInitialState', 'removeClass', 'h');\r\n                // message for no data recorded\r\n\t\t\t\tAH.alert(l.no_data_msg);\r\n            }\r\n        } else {\r\n            // message for not supported speechSynthesis\r\n\t\t\tAH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    } \r\n\r\n    // checks the answer\r\n    function checkAns() {\r\n        let ans = \"\";\r\n        if  (state.correctAns.trim() != '') {\r\n            if (state.correctAns.toLowerCase() == state.cdata.toLowerCase()) {\r\n                // label of message\r\n                ans = l.correct;\r\n                AH.select(\"#answer\").checked = true;\r\n                state.useransstatus = true;\r\n            } else {\r\n                // label of message\r\n                ans = l.incorrect;\r\n                AH.select(\"#answer\").checked = false;\r\n                state.useransstatus = false;\r\n            }\r\n            // shows the answer\r\n            if (editorState) {\r\n                showAns(ans);\r\n            } else {\r\n                onUserAnsChange({uXml: uxml, ans: ans});\r\n            }\r\n        } else {\r\n            // message, no data found for match the answer\r\n            AH.alert(l.matching_msg);\r\n            return;\r\n        }\r\n    }\r\n    let answer_status;\r\n    function setReview() {\r\n        isReview = true;\r\n        state.pointerEvents = \"none\";\r\n        answer_status = true;\r\n        // check the answer\r\n        checkAns();\r\n        if (state.useransstatus == true) {\r\n            // change the user answer data container's text and border color to #50af50\r\n            AH.setCss('#preview_data_container', {'color': '#50af50'});\r\n        } else {\r\n            // change the user answer data container's text and border color to #c30f0f\r\n            AH.setCss('#preview_data_container', {'color': '#c30f0f'});\r\n        }\r\n        /* hides the answer container in which correct answer will be seen after click on correct answer button */\r\n        AH.selectAll(AH.parent(AH.selectAll('#preanswer_data_container')), 'addClass', 'h');\r\n        /* shows the answer container in which user answer will be seen after click on your answer button */\r\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'removeClass', 'h');\r\n    }\r\n\r\n    /* allows the user to perform the task, shows the recording end notification message, hides correct and your answer button */\r\n    function unsetReview() {\r\n        isReview = false;\r\n        state.pointerEvents = \"auto\";\r\n        answer_status = false;\r\n        // hides both container in which your answer and correct answer data will be seen\r\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'addClass', 'h');\r\n    }\r\n\r\n    function handleReviewMode(mode) {\r\n        if(mode == 'c') {\r\n            answer_status = false;\r\n        } else if (mode == 'u') {\r\n            answer_status = true;\r\n        }\r\n    }\r\n</script>\r\n<div id=\"preview_container\" class=\"container\">\r\n    <div class=\"row\">\r\n        <ItemHelper \r\n            on:setReview = {setReview}\r\n            on:unsetReview = {unsetReview}\r\n            reviewMode={isReview}\r\n            handleReviewClick = {handleReviewMode}\r\n        />\r\n        {#if isReview}\r\n            {#if answer_status != true}\r\n                <div class=\"col-12 py-3\">\r\n                    <textarea \r\n                        id=\"preanswer_data_container\" \r\n                        name=\"cdata\" \r\n                        class=\"w-100 form-control border-success typeCorrect\" \r\n                        rows=\"2\" \r\n                        value={state.correctAns} \r\n                        readOnly=\"readonly\" \r\n                        tabindex=\"0\" \r\n                        aria-label=\"correct Answer is {state.correctAns}\"></textarea>\r\n                </div>\r\n            {:else}\r\n                <div class=\"col-12 py-3\">\r\n                    <textarea \r\n                        id=\"preview_data_container\" \r\n                        name=\"cdata\" \r\n                        class=\"w-100 form-control {(state.useransstatus == true) ? 'border-success typeCorrect' : 'border-danger typeIncorrect' }\" \r\n                        rows=\"2\" \r\n                        value={state.cdata} \r\n                        readOnly=\"readonly\" \r\n                        tabindex=\"0\" \r\n                        aria-label=\"Your answer is {state.cdata} which is {((state.cdata.toLowerCase().trim() == state.correctAns.toLowerCase().trim()) ? \"Correct\": \"Incorrect\")}\"></textarea>\r\n                </div>\r\n            {/if}\r\n            <div class=\"col-12 pb-3\" tabindex=\"0\" aria-label=\"matching is case insensitive\">\r\n                <b class=\"noteColor bolder\">{l.note_label}</b>\r\n                {l.insensitive_message}\r\n            </div>\r\n        {:else}\r\n            <div class=\"col-12 pb-3\">\r\n                <div class=\"\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\r\n                    <b class=\"noteColor bolder\">{l.note_label}</b>\r\n                    {l.recording_warning}\r\n                </div>\r\n            </div>\r\n            {#if state.showTranscript == true}\r\n                <div class=\"col-12 pb-3\">\r\n                    <div><label for=\"preview_show_transcript\"><b>{l.spoken_label}</b></label></div>\r\n                    <textarea id=\"preview_show_transcript\" name=\"preview_show_transcript\" class=\"w-100 form-control\" rows=\"2\" value={state.cdata} readOnly=\"readonly\" tabindex=\"0\" aria-label={l.spoken_label + \" \" + ((state.cdata.trim() != \"\") ? state.cdata.trim(): \"Nothing\")}></textarea>\r\n                </div>\r\n            {/if}\r\n            <div class=\"col-12 col-md-8 offset-md-2\">\r\n                <div class=\"border rounded shadow-sm\">\r\n                    <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\"><b>{l.audio_recorder}</b></div>\r\n                    <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\r\n                        <span class=\"align-self-center mx-auto previewInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\r\n                        <div class=\"h previewRecordingOn tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\r\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\r\n                        </div>\r\n                        <div class=\"h previewAudioPlaying tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\r\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2 {(state.pointerEvents == 'none') ? 'pointerEventOff': 'pointerEventOn'}\">\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"preview_recordButton\" \r\n                            id=\"preview_recordButton\" \r\n                            on:click={startRecording} \r\n                            class=\"btn btn-light py-0\" \r\n                            aria-label=\"Click for {areaLabelForPreviewRecordButton}\"\r\n                        >\r\n                            <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")} id=\"recordButtonTooltip\" name=\"recordButtonTooltip\"></span>\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"preview_stopButton\" \r\n                            id=\"preview_stopButton\" \r\n                            on:click={playRecording} \r\n                            disabled={state.disabled} \r\n                            class=\"btn btn-light py-0\" \r\n                            aria-label=\"Click for {areaLabelForPreviewStopButton}\"\r\n                        >\r\n                            <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"Play Audio\" id=\"stopButtonTooltip\" name=\"stopButtonTooltip\"></span>\r\n                        </button>\r\n                        <button \r\n                            type=\"button\" \r\n                            name=\"resetButton\" \r\n                            id=\"resetButton\" \r\n                            class=\"btn btn-light py-0\" \r\n                            disabled={state.isReset} \r\n                            on:click={setData} \r\n                            data-bs-toggle=\"modal\" \r\n                            data-bs-target=\"#preview_confirm_modal\" \r\n                            aria-label=\"Click on this button for override the previous recording\"\r\n                        >\r\n                            <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" title=\"Reset Data\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        {/if}\r\n    </div>\r\n</div>\r\n<div class=\"preview_modal_container container\">\r\n    <div class=\"modal fade\" id=\"preview_confirm_modal\">\r\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForPreviewModalContent} id=\"previewDialogBody\" name=\"previewDialogBody\">\r\n                    {l.modal_data}\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"preview_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\r\n                    <button type=\"button\" class=\"preview_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"],"names":["l"],"mappings":"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"}