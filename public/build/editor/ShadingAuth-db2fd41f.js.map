{"version":3,"file":"ShadingAuth-db2fd41f.js","sources":["../../../clsSMShadedGrid/inputField.svelte","../../../clsSMShadedGrid/shadedGridTable.svelte","../../../clsSMShadedGrid/ShadingAuth.svelte"],"sourcesContent":["<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    export let labelname;\r\n    export let datalabel;\r\n    export let name, id, max, value, msgdetail, shwmsg, set_corr_ans;\r\n    const dispatch = createEventDispatcher();\r\n</script>\r\n{#if set_corr_ans == 1}\r\n    <input \r\n        type=\"number\" \r\n        min=\"1\" \r\n        max={max} \r\n        class=\"form-control inputChange\" \r\n        id=\"methodCount\" \r\n        name=\"methodCount\" \r\n        data-label=\"Number of correct\" \r\n        value={value} \r\n        on:change=\"{(e)=>dispatch('handleChange', {value: e})}\"\r\n        on:blur=\"{(e)=>dispatch('inputChangeBlur', {value: e})}\"\r\n    />\r\n{:else}\r\n    <div class=\"col-sm-6 inline-block\">\r\n        <div class=\"font-weight-bold mb-2\">{labelname}</div>\r\n        <div>\r\n            <input type=\"number\" min=\"1\" max=\"{max}\" name=\"{name}\" id=\"{id}\" class=\"form-control width100 inline-block inputChange\" data-label=\"{datalabel}\" \r\n                value={value} on:change=\"{(e)=>dispatch('handleChange', {value: e})}\" on:blur=\"{(e)=>dispatch('inputChangeBlur', {value: e})}\"/>\r\n        </div>\r\n        {#if shwmsg == 1}\r\n            <div class=\"mt-1\">\r\n                <span class=\"font13 text-danger\">\r\n                    <span class=\"icomoon-24px-info-5 pr-1\"></span>\r\n                    {l.multiple_of} {msgdetail}px\r\n                </span>\r\n            </div>\r\n        {/if}\r\n    </div>\r\n{/if}","<script>\r\n    import { createEventDispatcher } from 'svelte';\r\n    export let table_id, table_class, total_row_count, table_value;\r\n    const dispatch = createEventDispatcher();\r\n</script>\r\n<table id={table_id} class={table_class}>\r\n    <tbody>\r\n        {#if total_row_count && total_row_count.length > 0}\r\n            {#each total_row_count as data, i}\r\n                <tr id={data.id}>\r\n                    {#if table_value && table_value.length > 0}\r\n                        {#each table_value as value}\r\n                            {#if i == value.rowno}\r\n                                <td \r\n                                    id={value.id} \r\n                                    data-hidden=\"no\" \r\n                                    tabindex=\"0\" \r\n                                    data-grid=\"no\" \r\n                                    data-id={value.dataid} \r\n                                    class={`${value.class} gridColor pointer`}\r\n                                    on:click=\"{(e)=>dispatch('gridClick', {value: e})}\"\r\n                                    on:keyup=\"{(e)=>dispatch('adaKeyupClick', {value: e})}\" \r\n                                    style=\"width: {value.width}; height: {value.height}\"\r\n                                ></td>\r\n                            {/if}\r\n                        {/each}\r\n                    {/if}\r\n                </tr>\r\n            {/each}\r\n        {/if}\r\n    </tbody>\r\n</table>","<!--\r\n *  File Name   : ShadingAuth.svelte\r\n *  Description : Container for Shading Authoring Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 05-Feb-2021\r\n *  Last Updated By : Rashmi Kumari\r\n-->\r\n<script>\r\n    import { onMount, afterUpdate, beforeUpdate } from \"svelte\";\r\n    import { XMLToJSON, AH, JSONToXML} from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    import InputField from './inputField.svelte';\r\n    import ShadedGridTable from \"./shadedGridTable.svelte\";\r\n    export let getChildXml;\r\n    export let xml;\r\n    let state = {\r\n        xml:'',\r\n        gridWidth: \"\",\r\n        gridHeight: \"\",\r\n        rowCount: \"1\",\r\n        colCount: \"4\",\r\n        cellWidth: \"2\",\r\n        cellHeight: \"2\",\r\n        correctAns: [],\r\n        correctCount: 1,\r\n        shadedCell: [],\r\n        cellLocked: 'false',\r\n        hiddenCell: [],\r\n        authorMethod: \"byLocation\",\r\n        methodCount: \"\",\r\n        lockedCellValue: \"\",\r\n    };\r\n    let cellShaded;\r\n    let showSelectedAns = \"\";\r\n    let sizeMultipleIndex = 40;\r\n    let table_value, total_row_count, table_corr_value;\r\n\r\n\r\n\r\n\r\n    onMount(() => {\r\n        state.xml = xml;\r\n        const e = new Event(\"change\"); \r\n        const element = document.querySelector('#set') \r\n        element.dispatchEvent(e);\r\n        loadModule(xml);\r\n    });\r\n\r\n\r\n    $: {\r\n        let index, showAnsIndex;\r\n        table_value = [], total_row_count = [], table_corr_value = [];\r\n        // to create grids\r\n        for (let i = 0; i < state.rowCount; i++) {\r\n            total_row_count = [\r\n                ...total_row_count, {\r\n                    id : 'gridRow_' + i\r\n                }\r\n            ];\r\n\t\t\tfor (let j = 0; j < state.colCount; j++) {\r\n\t\t\t\tindex = state.shadedCell.indexOf(i + \"_\" + j);\r\n                cellShaded = (index!= -1) ? \"gridSelected\" : \"\";\r\n                // To check for correct answer cells\r\n                showAnsIndex = state.correctAns.indexOf(i + \"_\" + j);\r\n                if (state.correctAns != \"\") {\r\n\t\t\t\t\tshowSelectedAns = (showAnsIndex!= -1) ? \"gridSelected\" : \"\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowSelectedAns = \"\";\r\n\t\t\t\t}\r\n                table_value = [\r\n                    ...table_value, {\r\n                        id : \"grid\"+ i + \"_\" + j,\r\n                        dataid: i + \"_\" + j,\r\n                        class: cellShaded,\r\n                        width: parseInt(state.gridWidth) + 'px',\r\n                        height: parseInt(state.gridHeight) + 'px',\r\n                        rowno: i\r\n                    }\r\n                ];\r\n                table_corr_value = [\r\n                    ...table_corr_value, {\r\n                        id : \"grid_a\"+ i + \"_\" + j,\r\n                        dataid: i + \"_\" + j,\r\n                        class: showSelectedAns,\r\n                        width: parseInt(state.gridWidth) + 'px',\r\n                        height: parseInt(state.gridHeight) + 'px',\r\n                        rowno: i\r\n                    }\r\n                ];\r\n\t\t\t}\r\n        }\r\n        if (xml!=state.xml) {\r\n\t\t\tstate.xml = xml;\r\n\t\t\tloadModule(xml); \t\r\n\t\t}\r\n    }\r\n\r\n    // loads the module and update the xml\r\n    function loadModule(loadXml) {\r\n        // contains the json data of xml\r\n\t\tloadXml = XMLToJSON(loadXml);\r\n        // parses the xml and updates the sliders elements value\r\n\t\tparseXMLAuthoring(loadXml);\r\n        \r\n    }\r\n\r\n    // parses the xml and updates the values of sliders elements\r\n    function parseXMLAuthoring(MYXML) {\r\n        try {\r\n            state.authorMethod = MYXML.smxml._correctCount ? 'byCount' : 'byLocation';\r\n            state.correctAns = state.authorMethod == 'byCount'? MYXML.smxml._correctCount: MYXML.smxml._correctAns.trim().split(\",\");\r\n            if(state.authorMethod == 'byCount'){\r\n                state.methodCount = MYXML.smxml._correctCount;\r\n            }\r\n            state.shadedCell = (MYXML.smxml._shadedCell.trim()) ? MYXML.smxml._shadedCell.split(\",\") : [];\r\n            state.rowCount = MYXML.smxml._rowCount;\r\n            state.colCount = MYXML.smxml._colCount;\r\n            state.gridWidth = parseInt(MYXML.smxml._cellWidth) * sizeMultipleIndex;\r\n            state.gridHeight = parseInt(MYXML.smxml._cellHeight) * sizeMultipleIndex;\r\n            state.cellWidth = MYXML.smxml._cellWidth;\r\n            state.cellHeight = MYXML.smxml._cellHeight;\r\n            state.cellLocked = MYXML.smxml._lockedCell;\r\n            state.lockedCellValue = MYXML.smxml._lockedCellValue;\r\n            if(state.cellLocked == 'true') {\r\n                AH.select('#lock_author_cell').checked = true;\r\n            } else {\r\n                AH.select('#lock_author_cell').checked = false;\r\n            }\r\n            // update the xml after converting json xml into xml\r\n\t\t\tgetChildXml(JSONToXML(MYXML));\r\n\t\t} catch(events) {\r\n            console.warn({\r\n                'error': events.message,\r\n                'function name': 'parseXMLAuthoring',\r\n                'File name': 'ShadingAuth.svelte'\r\n            });\r\n\t\t}\r\n\t}\r\n    \r\n    //it manages the click event on grid\r\n    function authorClick(e) {\r\n        let cell = e.detail.value.target.id;\r\n\t\tlet selectedGrid;\r\n\t\tlet index;\r\n\t\tselectedGrid = AH.select(\".shadingAuth #\"+cell).getAttribute(\"data-id\");\r\n\t\tif ((!AH.select(\".shadingAuth #\"+cell).classList.contains(\"lockedGrid\"))) {\r\n\t\t\tif (AH.select(\".shadingAuth #\"+cell).getAttribute(\"data-grid\") == \"no\") {\r\n                AH.selectAll(\".shadingAuth #\"+cell, 'addClass', 'gridSelected');\r\n                AH.select(\".shadingAuth #\"+cell).setAttribute(\"data-grid\", \"selected\");\r\n\t\t\t\tif (!state.shadedCell.includes( selectedGrid)) {\r\n\t\t\t\t\tstate.shadedCell.push(selectedGrid);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindex = state.shadedCell.indexOf(selectedGrid);\r\n                state.shadedCell.splice(index, 1);\r\n                AH.selectAll(\".shadingAuth #\"+cell, 'removeClass', 'gridSelected');\r\n\t\t\t\tAH.select(\".shadingAuth #\"+cell).setAttribute(\"data-grid\", \"no\");\r\n\t\t\t}\r\n\t\t}\r\n        // updates the xml when the value of any elements changed\r\n\t\tupdateXml();\r\n    }\r\n\r\n    // to handle click event of correct answer grid\r\n    function boxClick(e) {\r\n\t\tlet selectedGrid;\r\n\t\tlet index;\r\n\t\tlet targetId = e.detail.value.target.id;\r\n\t\tselectedGrid = AH.select(\".shadingAuth #\"+targetId).getAttribute(\"data-id\");\r\n\t\tif ((!AH.select(\".shadingAuth #\" + targetId).classList.contains(\"lockedGrid\"))) {\r\n\t\t\tif (AH.select(\".shadingAuth #\"+targetId).getAttribute(\"data-grid\") == \"no\") {\r\n                AH.select(\".shadingAuth #\"+targetId).setAttribute(\"data-grid\", \"selected\");\r\n                AH.selectAll(\".shadingAuth #\"+targetId, 'addClass', 'gridSelected');\r\n\t\t\t\tif (!state.correctAns.includes( selectedGrid)) {\r\n\t\t\t\t\tstate.correctAns.push(selectedGrid);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tindex = state.correctAns.indexOf(selectedGrid);\r\n                state.correctAns.splice(index, 1);\r\n                AH.selectAll(\".shadingAuth #\"+targetId, 'removeClass', 'gridSelected');\r\n                AH.select(\".shadingAuth #\"+targetId).setAttribute(\"data-grid\", \"no\");\r\n\t\t\t}\r\n\t\t}\r\n        // updates the xml when the value of any elements changed\r\n\t\tupdateXml();\r\n\t}\r\n\r\n    // updates the xml when the value of any elements changed\r\n    function updateXml() {\r\n\t\tsetTimeout( function() {\r\n\t\t\tlet updatedXml = '<smxml type=\"44\" name=\"Shading\" rowCount=\"' + state.rowCount + '\" colCount=\"' + state.colCount + '\" cellWidth=\"' + state.cellWidth + '\" cellHeight=\"' + state.cellHeight + '\" correctAns=\"' + state.correctAns + '\" correctCount=\"' + state.methodCount + '\" shadedCell=\"' + state.shadedCell + '\" lockedCell=\"' + state.cellLocked + '\" HiddenCell=\"' + state.hiddenCell + '\" lockedCellValue=\"' + state.lockedCellValue + '\"><!--[CDATA[]]--></smxml>';\r\n\t\t\tgetChildXml(updatedXml);\t\t\t\r\n\t\t}, 100);\r\n\t}\r\n\r\n    // to handle on change event of input fields\r\n    function handleChange(eve) {\r\n        let cur_elem = eve.detail.value.target;\r\n        let cellWidthVal = AH.select('#cellWidth').value;\r\n        let cellHeightVal = AH.select('#cellHeight').value;\r\n        let rowCountVal = AH.select('#rowCount').value;\r\n        let colCountVal = AH.select('#colCount').value;\r\n        let methodCountVal = AH.select('#methodCount').value;\r\n        let elementVal = cur_elem.value;\r\n\t\tlet min = cur_elem.min;\r\n\t\tlet element_id = cur_elem.id;\r\n        let max = cur_elem.max;\r\n        state[cur_elem.name] = cur_elem.value;\r\n        state.gridWidth = parseInt(cellWidthVal) * sizeMultipleIndex;\r\n        state.gridHeight = cellHeightVal * sizeMultipleIndex;\r\n        state.rowCount = rowCountVal;\r\n        state.colCount = colCountVal;\r\n        state.methodCount = methodCountVal;\r\n\r\n        if (element_id != \"methodCount\" && AH.select('#methodCount').value != \"\") {\r\n            state.methodCount = AH.select('#methodCount').getAttribute('min');\r\n        }\r\n        // For handeling input's min and max value on Keyup \r\n\t\tif (elementVal != \"\") {\r\n\t\t\tlet labelText = AH.select(\"#\" + cur_elem.id).getAttribute(\"data-label\"); \r\n\t\t\tif (parseInt(elementVal) < parseInt(min)) {\r\n\t\t\t\tAH.alert(labelText+ \" can be between \\n\"+ min + \" to \" + max);\r\n\t\t\t\tstate[cur_elem.name] = min;\r\n\t\t\t} else if (parseInt(elementVal) > parseInt(max)) {\r\n\t\t\t\tAH.alert(labelText+ \" can be between \\n\"+ min + \" to \" + max);\r\n\t\t\t\tstate[cur_elem.name] = max;\r\n\t\t\t}\r\n\t\t}\r\n\t\tresetValues();\r\n        updateXml();\r\n    }\r\n\r\n    // to reset the shaded grid and correct answer grid\r\n    function resetValues() {\r\n        AH.selectAll(\"#authoringMethod_table .gridColor,.authShadeTable .gridColor\", 'removeClass', 'lockedGrid');\r\n        AH.selectAll(\"#authoringMethod_table .gridColor,.authShadeTable .gridColor\").forEach((gridVal) => {\r\n            gridVal.setAttribute(\"data-grid\", \"no\");\r\n        });\r\n        state.correctAns = [];\r\n        state.shadedCell = [];\r\n        state.cellLocked = 'false';\r\n        state.lockedCellValue = '';\r\n    }\r\n\r\n    // to handle on blur event of input fields\r\n    function inputChangeBlur(eve) {\r\n        let cur_elem_blur = eve.detail.value.target;\r\n        if (cur_elem_blur.value == '') {\r\n            AH.alert(l.empty_field);\r\n            state[cur_elem_blur.name] = cur_elem_blur.min;\r\n            resetValues();\r\n            updateXml();\r\n        }\r\n    }\r\n\r\n    // to lock the shaded grid if it is part of corrct answer. done by checkbox\r\n    function checkboxHandler (e) {\r\n\t\tlet lockCell = 0;\r\n\t\tstate.shadedCell.map(function(data, i) {\r\n\t\t\tstate.correctAns.map(function(data2, j) {\r\n\t\t\t\tif (data == data2) {\r\n\t\t\t\t\tlockCell = lockCell + 1;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t});\r\n\t\tif (state.shadedCell.length == 0) {\r\n            AH.alert(\"Please shade the cells\");\r\n            e.preventDefault();\r\n\t\t} else {\r\n\t\t\tif (lockCell == state.shadedCell.length || state.methodCount != '') {\r\n\t\t\t\tstate.cellLocked = state.cellLocked == 'true' ? 'false' : 'true';\r\n                let auth_id = '';\r\n                AH.selectAll(\".authShadeTable td.gridSelected\").forEach((value) => {\r\n                    auth_id += value.getAttribute('data-id') + ',';\t\r\n                });\r\n                auth_id = auth_id.substr(auth_id, auth_id.length - 1);\r\n                if (state.cellLocked == 'true') {\r\n                    AH.selectAll(\".authShadeTable td.gridSelected, .authMethodTable #grid_a\"+auth_id.split(',').join(',.authMethodTable #grid_a'), 'addClass', 'lockedGrid');\r\n                    state.lockedCellValue = auth_id;\r\n                } else {\r\n                    AH.selectAll(\".authShadeTable td.gridSelected, .authMethodTable #grid_a\"+auth_id.split(',').join(',.authMethodTable #grid_a'), 'removeClass', 'lockedGrid');\r\n                    state.lockedCellValue = '';\r\n                }\r\n\t\t\t\tupdateXml();\r\n\t\t\t} else {\r\n                AH.alert(l.lock_author_cell);\r\n                e.preventDefault();\r\n\t\t\t}\t\r\n\t\t}\r\n    }\r\n    \r\n    // to handle change event of select field to specify the correct answer method\r\n    function handleAuthoringMethod(event) {\r\n        state.authorMethod = event.target.value;\r\n        let _this = AH.select(\"[name=\"+event.target.name+\"]\");\r\n        AH.selectAll('.'+_this.options[_this.selectedIndex].getAttribute('data-show'), 'addClass', 'd-inline-block')\r\n        AH.selectAll('.'+_this.options[_this.selectedIndex].getAttribute('data-hide'), 'removeClass', 'd-inline-block')\r\n        if (AH.select(\"[name='\"+event.target.name+\"']\").value == \"byCount\") {\r\n\t\t\tstate.correctAns = \"\";\r\n\t\t\tstate.methodCount = 1;\r\n\t\t} else {\r\n\t\t\tstate.methodCount = \"\";\r\n\t\t}\r\n\t\tresetValues();\r\n\t\tupdateXml();\r\n    }\r\n    \r\n    // for ada checkbox\r\n    function adaKeyupCheckbox(e) {\r\n        if (e.keyCode == 13) {\r\n            checkboxHandler(e);\r\n        }\r\n    }\r\n\r\n    // for ada correct ans grid\r\n    function adaKeyupBoxClick(e) {\r\n        if (e.detail.value.keyCode == 13) {\r\n            boxClick(e);\r\n        }\r\n    }\r\n\r\n    // for ada shaded grid\r\n    function adaKeyupAuthorClick(e) {   \r\n        if (e.detail.value.keyCode == 13) {\r\n            authorClick(e);\r\n        }\r\n    }\r\n    \r\n</script>\r\n<div class=\"shadingAuth\">\r\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.canvas_options}</div>\r\n    <div class=\"row form-group\">\r\n        <div class=\"row mx-0 px-3 mb-4\">\r\n            <InputField \r\n                labelname={l.row_count} \r\n                max=10 \r\n                name=rowCount \r\n                id=\"rowCount\" \r\n                datalabel={\"Number of rows\"} \r\n                value={state.rowCount} \r\n                on:handleChange = {handleChange}\r\n                on:inputChangeBlur = {inputChangeBlur}\r\n            />\r\n            <InputField \r\n                labelname={l.col_count} \r\n                max=10 \r\n                name=colCount \r\n                id=\"colCount\" \r\n                datalabel={\"Number of column\"} \r\n                value={state.colCount} \r\n                on:handleChange = {handleChange}\r\n                on:inputChangeBlur = {inputChangeBlur}\r\n            />\r\n        </div>\r\n        <div class=\"row mx-0 px-3\">\r\n            <InputField \r\n                labelname={l.cell_width} \r\n                max=5 \r\n                name=cellWidth \r\n                id=\"cellWidth\" \r\n                datalabel={\"Width Value\"} \r\n                value={state.cellWidth} \r\n                shwmsg=\"1\"\r\n                msgdetail={sizeMultipleIndex}\r\n                on:handleChange = {handleChange}\r\n                on:inputChangeBlur = {inputChangeBlur}\r\n            />\r\n            <InputField \r\n                labelname={l.cell_height} \r\n                max=5 \r\n                name=cellHeight \r\n                id=\"cellHeight\" \r\n                datalabel={\"Height Value\"} \r\n                value={state.cellHeight} \r\n                shwmsg=\"1\"\r\n                msgdetail={sizeMultipleIndex}\r\n                on:handleChange = {handleChange}\r\n                on:inputChangeBlur = {inputChangeBlur}\r\n            />\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.author_shaded}</div>\r\n    <div class=\"col-sm-12 mb-4\">\r\n        <ShadedGridTable \r\n            table_id=\"shadingtable\" \r\n            table_class=\"shadingTable authShadeTable\"\r\n            total_row_count={total_row_count}\r\n            table_value={table_value}\r\n            on:gridClick = {authorClick}\r\n            on:adaKeyupClick = {adaKeyupAuthorClick}\r\n        />\r\n    </div>\r\n    <div class=\"col-sm-12 mb-5\">\r\n        <div class=\"input-check\">\r\n            <label for=\"lock_author_cell\" class=\"custom_checkbox_new float-left mr-1\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    id = \"lock_author_cell\"\r\n                    value={state.cellLocked}\r\n                    on:click = {checkboxHandler}\r\n                    on:keyup={adaKeyupCheckbox}\r\n                    aria-label = 'Lock Author checkbox'\r\n                >\r\n                <div class=\"check_mark_custom pt-sm1\"></div>\r\n            </label>\r\n            <label for=\"lock_author_cell\">{l.lock_shaded_cells}</label>\r\n        </div>\r\n    </div>\r\n    <hr class=\"border-dashed-top\" />\r\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.set_corr_ans}</div>\r\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">{l.method}</div>\r\n    <div class=\"col-sm-12 mb-4 font-weight-bold font15\">\r\n        <select \r\n            value={state.authorMethod} \r\n            name=\"authorMethod\" \r\n            class=\"bg-gray-hover form-select width-authoring d-inline-block\" \r\n            id=\"set\"\r\n            on:change={handleAuthoringMethod}\r\n        >\r\n            <option value=\"byLocation\" id=\"byLoc_sel\" data-show=\"locationMethod\" data-hide=\"countMethod\" selected=\"selected\">{l.set_corr_loc}</option>\r\n            <option value=\"byCount\" id=\"bycount_sel\" data-show=\"countMethod\" data-hide=\"locationMethod\">{l.set_corr_count}</option>\r\n        </select>\r\n        <div class=\"mb-4 ml-3 width-authoring countMethod h\">\r\n            <InputField \r\n                max={state.rowCount * state.colCount}\r\n                value={state.methodCount}\r\n                on:handleChange = {handleChange}\r\n                on:inputChangeBlur = {inputChangeBlur}\r\n                set_corr_ans = 1\r\n            />\r\n        </div>\r\n    </div>\r\n    <div class=\"col-sm-12 mb-4 locationMethod h d-inline-block\">\r\n        <ShadedGridTable \r\n            table_id=\"authoringMethod_table\" \r\n            table_class=\"shadingTable authMethodTable\"\r\n            total_row_count={total_row_count}\r\n            table_value={table_corr_value}\r\n            on:gridClick = {boxClick}\r\n            on:adaKeyupClick = {adaKeyupBoxClick}\r\n        />\r\n    </div>\r\n</div>"],"names":["ctx","insert","append","l","multiple_of","labelname","datalabel","name","id","max","value","msgdetail","shwmsg","set_corr_ans","dispatch","createEventDispatcher","e","length","dataid","class","width","height","rowno","table_id","table_class","total_row_count","table_value","row_count","rowCount","col_count","colCount","cell_width","cellWidth","sizeMultipleIndex","cell_height","cellHeight","methodCount","canvas_options","author_shaded","lock_shaded_cells","method","set_corr_loc","set_corr_count","cellLocked","authorMethod","cellShaded","table_corr_value","getChildXml","xml","state","gridWidth","gridHeight","correctAns","correctCount","shadedCell","hiddenCell","lockedCellValue","showSelectedAns","loadModule","loadXml","MYXML","smxml","_correctCount","_correctAns","trim","split","_shadedCell","_rowCount","_colCount","parseInt","_cellWidth","_cellHeight","_lockedCell","_lockedCellValue","AH","select","checked","JSONToXML","events","console","warn","error","message","function name","File name","parseXMLAuthoring","XMLToJSON","authorClick","selectedGrid","index","cell","detail","target","getAttribute","classList","contains","selectAll","setAttribute","includes","push","indexOf","splice","updateXml","boxClick","targetId","setTimeout","updatedXml","resetValues","forEach","gridVal","checkboxHandler","lockCell","map","data","i","data2","j","alert","preventDefault","auth_id","substr","join","lock_author_cell","onMount","Event","document","querySelector","dispatchEvent","showAnsIndex","eve","cur_elem","cellWidthVal","cellHeightVal","rowCountVal","colCountVal","methodCountVal","elementVal","min","element_id","labelText","cur_elem_blur","empty_field","event","_this","options","selectedIndex","keyCode"],"mappings":"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"}