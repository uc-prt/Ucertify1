{"version":3,"file":"ShadingPreview-ac100152.js","sources":["../../../clsSMShadedGrid/ShadingPreview.svelte"],"sourcesContent":["<!--\r\n *  File Name   : ShadingPreview.svelte\r\n *  Description : Container for Shading Authoring Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 05-Feb-2021\r\n *  Last Updated By : Rashmi Kumari\r\n-->\r\n<script>\r\n    import { onMount, afterUpdate } from \"svelte\";\r\n    import { XMLToJSON, AH, onUserAnsChange} from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    import ItemHelper from '../helper/ItemHelper.svelte';\r\n    import \"./css/ShadingStyle.min.css\";\r\n    export let xml;\r\n    export let uxml;\r\n    export let isReview;\r\n    export let showAns;\r\n    export let editorState;\r\n\r\n    let showSelectedAns = \"\";\r\n    let ans = [];\r\n    let ansCheck, userTab = true;\r\n    let ansNotPerformed;\r\n    let incorrectCls = \"\";\r\n    let countRes = \"\";\r\n    let sizeMultipleIndex = 40;\r\n    let class_val = 1;\r\n    let cellIndex, showAnsIndex, locked_cell_values, shaded_cell_values, preview_table, total_row_count;\r\n    let state = {\r\n        rowCount: 1,\r\n        colCount: 4,\r\n        gridWidth: 80,\r\n        gridHeight: 80,\r\n        correctAns: [],\r\n        correctCount: \"\",\r\n        userAns: [],\r\n        shadedCell: [],\r\n        cellLocked: false,\r\n        hiddenCell: [],\r\n        smController: \"h\",\r\n        itemLayout: [],\r\n        iconVisible: \"h\",\r\n        pointerEvents: \"auto\",\r\n        checkLockCell: \"\",\r\n        lockedCellValue: \"\",\r\n        //pointerEvents: \"\"\r\n    }\r\n\r\n    onMount(() => {\r\n        state.xml = xml;\r\n        resetValue();\r\n        if (!uxml) {\r\n            state.userAns = [];\r\n        }\r\n        loadModule(xml);\r\n        //for future use\r\n\t\t//let timer = setTimeout(function() {\r\n\t\t\t//AH.select(\"#special_module_user_xml\").innerText = \"<smans userAns='\" + state.userAns.join() + \"'></smans>\";\r\n            //new_uxml = \"<smans userAns='\" + state.userAns.join() + \"'></smans>\";\r\n\t\t\t//clearTimeout(timer);\r\n\t\t//}, 500);\r\n    });\r\n    \r\n    $: {\r\n        if (isReview) {\r\n            setReview(); \r\n            \r\n        } else {\r\n            unsetReview();\r\n        }\r\n        if (xml!=state.xml) {\r\n\t\t\tstate.xml = xml;\r\n\t\t\tloadModule(xml);\r\n\t\t}\r\n        total_row_count = [], preview_table = [];\r\n\t\tcellIndex;\r\n\t\tshowAnsIndex;\r\n\t\tlocked_cell_values = (state.lockedCellValue != undefined && state.lockedCellValue != '') ? state.lockedCellValue.split(',') : '';\r\n        shaded_cell_values = (state.shadedCell != '') ? state.shadedCell.split(',') : '';\r\n        //to create grid\r\n        for (let i = 0; i < state.rowCount; i++) {\r\n            total_row_count = [\r\n                ...total_row_count, {\r\n                    id : 'gridRow_' + i\r\n                }\r\n            ];\r\n            for (let j = 0; j < state.colCount; j++) {\r\n                cellIndex = (i + \"_\" + j);\r\n\t\t\t\tif (ans != \"\") {\r\n\t\t\t\t\tshowAnsIndex = ans.indexOf(cellIndex);\r\n\t\t\t\t\tshowSelectedAns = (showAnsIndex != -1) ? \"gridSelected\" : \"\";\r\n\t\t\t\t} else {\r\n\t\t\t\t\tshowSelectedAns = \"\";\r\n                }\r\n                preview_table = [\r\n                    ...preview_table, {\r\n                        id: 'p' + cellIndex,\r\n                        tabindex: (state.pointerEvents == \"auto\") ? \"0\" : \"\",\r\n                        arialabel: \"Grids row \"+ (i+1) + \" and column \" + (j+1) + \" is selected\",\r\n                        pevdata: cellIndex,\r\n                        class: showSelectedAns,\r\n                        width: parseInt(state.gridWidth) + 'px',\r\n                        height: parseInt(state.gridHeight) + 'px',\r\n                        classDetails: getClassDetail(cellIndex,locked_cell_values,shaded_cell_values),\r\n                        correctAnswerColor: setCorrectAnswerColor(cellIndex),\r\n                        spanclass: (getCorrect(cellIndex)) ? \"icomoon-24px-correct\" : \"icomoon-24px-close\",\r\n                        spanarialabel: (getCorrect(cellIndex)) ? (getNotPerformed(cellIndex) ? \"marked as unattempted\" : \"marked as correct\") : \"marked as incorrect\",\r\n                        spanstyle: (!state.userAns.includes(cellIndex) ? (getNotPerformed(cellIndex) ? \"#222\" : \"\") : ((getCorrect(cellIndex)) ? \"#136d13\" : \"#c30f0f\")),\r\n                        spandisplay: ((state.iconVisible == \"\" && state.userAns.includes(cellIndex)) || (state.iconVisible == \"\" && !state.userAns.includes(cellIndex) && getNotPerformed(cellIndex))) ? \"block\" : \"none\",\r\n                        rowno: i,\r\n                        corrspanclass: (getCorrect(cellIndex)) ? \"icomoon-24px-correct\" : \"\",\r\n                        corrspanstyle: (getCorrect(cellIndex)) ? \"#136d13\" : \"\",\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    }\r\n\r\n    // Set correct answer color\r\n    function setCorrectAnswerColor(id) {\r\n\t\t// Return grid Color green for correct answer, red for incorrect answer and grey for not performed\r\n\t\tansCheck =  (state.iconVisible == \"\" && state.userAns.includes(id)) ? ((getCorrect(id)) ? \" gridCorrect\" : \" gridIncorrect\") : \"\"; \r\n\t\tansNotPerformed = (state.iconVisible == \"\" && !state.userAns.includes(id)) ? ((getNotPerformed(id)) ? \" gridNotPerformed\" : \"\") : \"\"; \r\n\t\tansCheck = ansCheck + ansNotPerformed;\r\n\t\t return ansCheck;\r\n    }\r\n    \r\n    //to show shaded grid according to uxml\r\n    function parseUserAns(uans) {\r\n        let userAnswer = XMLToJSON(uans);\r\n\t\tstate.userAns = userAnswer.smans._userAns.split(\",\");\r\n        if (userAnswer.smans._userAns) {\r\n\t\t\tlet user_ans_cell = '#p' + userAnswer.smans._userAns.split(',').join(',#p');\r\n            AH.selectAll('.shadingPreview .shadingTable td', 'removeClass', \"gridSelected\");\r\n            AH.selectAll('.shadingPreview .shadingTable td').forEach(function(table_td) {\r\n                table_td.dataset.grid = \"no\";\r\n            });\r\n            AH.selectAll(user_ans_cell, 'addClass', \"gridSelected\");\r\n            AH.selectAll(user_ans_cell).forEach(function(table_td) {\r\n                table_td.dataset.grid = \"selected\";\r\n            });\r\n\t\t}\r\n    }\r\n\r\n    // loads the module according to the value of question xml and user xml\r\n    function loadModule(loadXml) {\r\n        loadXml = XMLToJSON(loadXml);\r\n        parseXMLPreview(loadXml);\r\n    }\r\n\r\n    // updates the xml after parsing the xml and shows answer\r\n    function parseXMLPreview(MYXML) {\r\n\t\ttry {\r\n                state.rowCount = MYXML.smxml._rowCount;\r\n                state.colCount = MYXML.smxml._colCount;\r\n                state.gridWidth = parseInt(MYXML.smxml._cellWidth) * sizeMultipleIndex;\r\n                state.gridHeight = parseInt(MYXML.smxml._cellHeight) * sizeMultipleIndex;\r\n                state.correctAns = MYXML.smxml._correctAns.split(\",\");\r\n                state.correctCount = MYXML.smxml._correctCount;\r\n                state.cellLocked = MYXML.smxml._lockedCell;\r\n                state.hiddenCell = MYXML.smxml._hiddenCell;\r\n                state.shadedCell = MYXML.smxml._shadedCell;\r\n                state.lockedCellValue = MYXML.smxml._lockedCellValue;\r\n                setDefaultValues();\r\n                \r\n                if (uxml) {\r\n                    parseUserAns(uxml);\r\n                }\r\n\t\t} catch(error) {\r\n                console.warn({'error':error.message,'function name':'parseXMLPreview','File name':'ShadingPreview.js'});\r\n        }\r\n\t}\r\n\r\n    //reset the shaded grid and correct grid\r\n    function resetValue() {\r\n        state.correctAns = [];\r\n        state.correctCount = [];\r\n        state.shadedCell = [];\r\n    }\r\n\r\n    //to check if the shaded grid is correct or not\r\n    function getCorrect(id) {\r\n\t\t//Return true if this id is correct answer\r\n\t\tif (state.correctAns != 0) {\r\n\t\t\tif (state.correctAns.includes(id)) {\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\t\r\n\t\t} else {\r\n\t\t\tif (state.userAns.length == state.correctCount) {\r\n\t\t\t\tincorrectCls = \"#136d13\";\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\tincorrectCls = \"#c30f0f\";\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t}\r\n    }\r\n\r\n    //to check if the correct ans grid is checked or not\r\n    function getNotPerformed(id) {\r\n\t\tlet result;\r\n\t\tif (state.correctAns != 0) {\r\n\t\t\tresult = ( state.correctAns.includes(id) && !state.userAns.includes(id)) ? true : false;\r\n\t\t}\r\n\t\treturn result;\r\n    }\r\n\r\n    // Set lock to author shaded cells\r\n    function getClassDetail(cellIndex, locked_cell_values, shaded_cell_values) {\r\n\t\tlet classDetail = '';\r\n\t\tif (locked_cell_values.indexOf(cellIndex) != -1) {\r\n\t\t\tclassDetail +=\"lockedGrid \";\r\n\t\t}\r\n\t\tif (shaded_cell_values.indexOf(cellIndex) != -1 && class_val == 1) {\r\n\t\t\tclassDetail +=\"gridSelected\";\r\n\t\t}\r\n\t\treturn classDetail;\r\n    }\r\n\r\n    //set default values after loading \r\n    function setDefaultValues() {\r\n\t\tlet shadedCell = (state.shadedCell != '') ? '#p' + state.shadedCell.split(',').join(',#p') : '';\r\n\t\tAH.selectAll('.shadingPreview .shadingTable td', 'removeClass', ['gridSelected', 'lockedGrid']);\r\n        AH.selectAll('.shadingPreview .shadingTable td').forEach(function(table_td) {\r\n            table_td.dataset.grid = \"no\";\r\n        });\r\n        if (shadedCell != '') {\r\n            AH.selectAll(shadedCell, 'addClass', 'gridSelected');\r\n            AH.selectAll(shadedCell).forEach(function(table_td) {\r\n                table_td.dataset.grid = \"selected\";\r\n            });\r\n        }\r\n        let lockedCell = (state.lockedCellValue != undefined && state.lockedCellValue != '') ? '#p' + state.lockedCellValue.split(',').join(',#p') : '';\r\n        if (lockedCell != '') {\r\n            AH.selectAll(lockedCell, 'addClass', 'lockedGrid');\r\n            AH.selectAll(lockedCell).forEach(function(table_td) {\r\n                table_td.dataset.grid = \"selected\";\r\n            });\r\n        }\r\n    }\r\n\r\n    //function to execute when the grid is clicked\r\n    function gridClickPreview(e) {\r\n\t\tlet targetId = e.target.id;\r\n        class_val--;\r\n\t\tif ((!AH.select(\".shadingPreview [id='\"+targetId+\"']\").classList.contains(\"lockedGrid\"))) {\r\n\t\t\tif (!AH.select(\".shadingPreview [id='\"+targetId+\"']\").classList.contains(\"gridSelected\")) {\r\n                AH.select(\".shadingPreview [id='\"+targetId+\"']\").setAttribute(\"data-grid\", \"selected\");\r\n                AH.selectAll(\".shadingPreview [id='\"+targetId+\"']\", 'addClass', \"gridSelected\");\r\n\t\t\t} else {\r\n                AH.select(\".shadingPreview [id='\"+targetId+\"']\").setAttribute(\"data-grid\", \"no\");\r\n                AH.selectAll(\".shadingPreview [id='\"+targetId+\"']\", 'removeClass', \"gridSelected\");\r\n\t\t\t}\r\n\t\t}\r\n\r\n        //state.userAns = userAns;\r\n        let u_answer = checkAns();\r\n        if(!editorState) {\r\n            onUserAnsChange({uXml: state.userxml, ans: u_answer});\r\n        }\r\n    }\r\n\r\n    //to show correct and user answer \r\n    function showAnswer(val , iconState) {\r\n        //show correct incorrect icon with respect to iconState\r\n        if (iconState == \"showIcon\") {\r\n            state.iconVisible = \"\";\r\n        } else {\r\n            state.iconVisible = \"h\";\r\n\t\t}\r\n\t\t\r\n        //show correct answer and user answer\r\n        if (val == \"cans\") {\r\n\t\t\tans = state.correctAns;\r\n        } else if(val == \"yans\") {\r\n\t\t\tans = state.userAns;\r\n\t\t}\r\n    }\r\n\r\n    //to check answer\r\n    function checkAns() {\r\n\t\tconst correctLength = state.correctAns.length;\r\n\t\tlet resultLength = 0;\r\n\t\tlet resultCountLen = 0;\r\n        let ans_val = \"\", ans_status = '';\r\n        state.userAns = [];\r\n\t\tAH.selectAll('.shadingPreview .shadingTable .gridSelected').forEach(function(value) {\r\n\t\t\tstate.userAns.push(value.getAttribute(\"pevdata-id\"))\r\n\t\t});\r\n        AH.select(\"#special_module_user_xml\").innerText = \"<smans userAns='\"+state.userAns.join()+\"'></smans>\";\r\n\t\tstate.userxml = \"<smans userAns='\"+state.userAns.join()+\"'></smans>\";\r\n\r\n\t\tif (state.correctAns != \"\") {\r\n\t\t\tstate.correctAns.map(function(data, i) {\r\n\t\t\t\tstate.userAns.map(function(data2, j) {\r\n\t\t\t\t\tif (data == data2) {\r\n\t\t\t\t\t\tresultLength = resultLength + 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\t\r\n\t\t\t//Check if total no. of user answer is equal to correct answer\r\n\t\t\tif (correctLength == resultLength && resultLength == state.userAns.length) {\r\n\t\t\t\tans_val = l.correct;\r\n\t\t\t} else {\r\n\t\t\t\tans_val = l.incorrect;\r\n\t\t\t}\r\n\t\t\tif (typeof calculatePoint != \"undefined\") {\r\n\t\t\t\tcalculatePoint(state.correctAns.length, resultLength);\r\n\t\t\t}\r\n            if (ans_val == 'Incorrect') {\r\n                ans_status = false;\r\n            } else {\r\n                ans_status = true;\r\n            }\r\n            if(editorState)  {\r\n\t\t\t    showAns(ans_val);\r\n            }\r\n\t\t}\r\n\r\n        if (state.correctCount != \"\" && state.correctAns == \"\") {\r\n\t\t\tif (state.userAns.length == state.correctCount) {\r\n\t\t\t\tcountRes = l.correct;\r\n\t\t\t\tresultCountLen = state.correctCount;\r\n\t\t\t} else {\r\n\t\t\t\tcountRes = l.incorrect;\r\n\t\t\t}\r\n\t\t\tif (typeof calculatePoint != \"undefined\") {\r\n\t\t\t\tcalculatePoint(state.correctCount, resultCountLen);\r\n\t\t\t}\r\n\t\t\tif(editorState)  {\r\n\t\t\t    showAns(countRes);\r\n            }\r\n\t\t}\r\n        \r\n        if(!editorState) {\r\n            onUserAnsChange({uXml: state.userxml, ans: ans_status});\r\n        }\r\n        \r\n        return ans_status;\r\n    }\r\n\r\n    //if review mode is OFF\r\n    function unsetReview() {\r\n        showAnswer(\"yans\", \"hideIcon\");\r\n        isReview = false;\r\n        (state.correctCount != \"\" && state.correctAns == \"\") ? AH.selectAll('#correctCountStatus', 'addClass', 'h') : \"\";\r\n    }\r\n\r\n    //if review mode is ON\r\n    function setReview() {\r\n        showAnswer(\"yans\", \"showIcon\");\r\n        isReview = true;\r\n        checkAns();\r\n        (state.correctCount != \"\" && state.correctAns == \"\" ) ? AH.selectAll('#correctCountStatus', 'removeClass', 'h') : \"\";\r\n    }\r\n\r\n    //ada\r\n    function adaKeyupGridClick(e) {\r\n        if (e.keyCode == 13) {\r\n            gridClickPreview(e);\r\n        }\r\n    }\r\n\r\n    //to switch correct ans and your ans tab\r\n    function handleReviewMode(mode) {\r\n        if (mode == 'c') {\r\n            userTab = false;\r\n        } else if (mode == 'u') {\r\n            userTab = true;\r\n        }\r\n    }\r\n\r\n</script>\r\n<div class=\"shadingPreview\">\r\n    <ItemHelper \r\n        on:setReview = {setReview}\r\n        on:unsetReview = {unsetReview}\r\n        reviewMode={isReview}\r\n        handleReviewClick = {handleReviewMode}\r\n    />\r\n    <table id=\"table\" class=\"table-bordered shadingTable\" style=\"pointer-events: {isReview ? 'none' : ''};\">\r\n        <tbody>\r\n            {#if total_row_count && total_row_count.length > 0}\r\n                {#each total_row_count as val, i}\r\n                    <tr>\r\n                        {#if preview_table && preview_table.length > 0}\r\n                            {#each preview_table as data}\r\n                                {#if i == data.rowno}\r\n                                    <td \r\n                                        id={data.id} \r\n                                        tabindex={data.tabindex} \r\n                                        aria-label={data.arialabel} \r\n                                        data-grid=\"no\" \r\n                                        pevdata-id={data.pevdata}\r\n                                        class={`${(isReview && userTab == false) ? '' : data.class} ${data.classDetails} ${(isReview && userTab == false) ? (data.spanclass == 'icomoon-24px-correct' ? 'gridCorrect' : '') : data.correctAnswerColor} gridColor pointer border-dark text-center`}\r\n                                        on:click={gridClickPreview} \r\n                                        on:keyup=\"{adaKeyupGridClick}\"\r\n                                        style=\"width: {data.width}; height: {data.height}; pointerEvents: pointerEvents\"\r\n                                    >\r\n                                        {#if isReview}\r\n                                            {#if userTab == true}\r\n                                                <span class={state.iconVisible} style=\"display: {data.spandisplay}\">\r\n                                                    <span class=\"{data.spanclass}\" aria-label=\"{data.spanarialabel}\" style=\"color: {data.spanstyle}\"></span>\r\n                                                </span>\r\n                                            {:else}\r\n                                                <span>\r\n                                                    <span class=\"{data.corrspanclass}\" aria-label=\"{data.spanarialabel}\" style=\"color: {data.corrspanstyle}\"></span>\r\n                                                </span>\r\n                                            {/if}\r\n                                        {/if}\r\n                                    </td>\r\n                                {/if}\r\n                            {/each}\r\n                        {/if}\r\n                    </tr>\r\n                {/each}\r\n            {/if}\r\n        </tbody>\r\n    </table>\r\n    <div class=\"h mt-5 text-center\" id=\"correctCountStatus\" style=\"color: {incorrectCls}\">\r\n        {l.you_were_req_to_select} {state.correctCount} {l.grid_mark_ans_correct}\r\n    </div>\r\n</div>"],"names":["ctx","length","id","tabindex","arialabel","pevdata","class","classDetails","spanclass","correctAnswerColor","width","height","insert","corrspanclass","spanarialabel","corrspanstyle","append","spanstyle","iconVisible","spandisplay","rowno","l","you_were_req_to_select","correctCount","grid_mark_ans_correct","ansCheck","ansNotPerformed","cellIndex","showAnsIndex","locked_cell_values","shaded_cell_values","preview_table","total_row_count","xml","uxml","isReview","showAns","editorState","showSelectedAns","ans","userTab","incorrectCls","countRes","class_val","state","rowCount","colCount","gridWidth","gridHeight","correctAns","userAns","shadedCell","cellLocked","hiddenCell","smController","itemLayout","pointerEvents","checkLockCell","lockedCellValue","loadModule","loadXml","MYXML","smxml","_rowCount","_colCount","parseInt","_cellWidth","_cellHeight","_correctAns","split","_correctCount","_lockedCell","_hiddenCell","_shadedCell","_lockedCellValue","join","AH","selectAll","forEach","table_td","dataset","grid","lockedCell","undefined","setDefaultValues","uans","userAnswer","XMLToJSON","smans","_userAns","user_ans_cell","parseUserAns","error","console","warn","message","function name","File name","parseXMLPreview","getCorrect","includes","getNotPerformed","result","getClassDetail","classDetail","indexOf","gridClickPreview","e","targetId","target","select","classList","contains","setAttribute","u_answer","checkAns","onUserAnsChange","uXml","userxml","showAnswer","val","iconState","correctLength","resultLength","resultCountLen","ans_val","ans_status","value","push","getAttribute","innerText","map","data","i","data2","j","correct","incorrect","calculatePoint","unsetReview","setReview","onMount","keyCode","mode"],"mappings":"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"}