{"version":3,"file":"AudioRecorder-44499489.js","sources":["../../../clsSMAudioRecorder/AudioRecorder.svelte"],"sourcesContent":["<!--\r\n *  File Name   : AudioRecorder.svelte\r\n *  Description : Container for AudioRecorder Authoring Module\r\n *  Author      : Rashmi Kumari\r\n *  Package     : svelte_items\r\n *  Last update : 15-Feb-2021\r\n *  Last Updated By : Rashmi Kumari\r\n-->\r\n<script>\r\n    import { onMount,afterUpdate,beforeUpdate } from \"svelte\";\r\n    import { XMLToJSON, AH } from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language';\r\n    export let getChildXml;\r\n    export let xml;\r\n    let recognition;\r\n    let synth;\r\n    let resetClicked = 'no';\r\n    let areaLabelForStopButton;\r\n    let areaLabelForModalContent;\r\n    let areaLabelForRecordButton;\r\n    let timeForRecording = 15;\r\n    let manageTimer, voiceForSpeech;\r\n    let state = {\r\n        language: '',\r\n        cdata: '',\r\n        disabled: true,\r\n        xml: '',\r\n        status: '',\r\n        isReset: true,\r\n        showTranscript: false,\r\n        counter: 0\r\n    } \r\n\r\n    onMount(() => {\r\n        AH.enableBsAll(\"[data-bs-toggle='tooltip']\", 'Tooltip', {container: 'body' });\r\n        // stores the xml value in xml state\r\n        state.xml = xml;\r\n        loadModule(xml);\r\n    });\r\n\r\n    // $: {\r\n    //     if ((xml != state.xml)) {\r\n    //         // stores the xml value in xml state\r\n\t// \t\tstate.xml = xml;\r\n    //         loadModule(xml);\r\n    //     }\r\n    // }\r\n    afterUpdate(()=>{\r\n        if ((xml != state.xml)) {\r\n            // stores the xml value in xml state\r\n\t\t\tstate.xml = xml;\r\n            loadModule(xml);\r\n        }\r\n    })\r\n    // load the module according to the value of xml\r\n    function loadModule(loadXml) {\r\n        // contains json data of xml\r\n        let newXml = XMLToJSON(loadXml);\r\n        // parses the xml data and update the xml\r\n        parseXMLAuthoring(newXml);\r\n    }\r\n\r\n    // parses the xml data and update the xml\r\n    function parseXMLAuthoring(MYXML) {\r\n        try {\r\n            // used to set the value of the state language from the value of language key of xml json\r\n            state.language = MYXML.smxml._language,\r\n            // used to set the value of the state cdata from the value of cdata key of xml json\r\n            state.cdata = MYXML.smxml.__cdata,\r\n            // used to set the value of the state status from the value of status key of xml json\r\n            state.status = MYXML.smxml._status,\r\n            // used to sets the value of the state disabled to false if the value of 'status' key of xml json is 'recordingStopped' otherwise 'true' \r\n            state.disabled = ((MYXML.smxml._status == 'recordingStopped') ? false: true),\r\n            // used to set the value of the state isReset from the value of isReset key of xml json\r\n            state.isReset = ((MYXML.smxml._isReset == 'true') ? true: false),\r\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\r\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\r\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n            checkState();\r\n        } catch(event) {\r\n            console.warn({\r\n                'error': event.message,\r\n                'function name': 'parseXMLAuthoring',\r\n                'File name': 'AudioRecorder.svelte'\r\n            });\r\n        } \r\n    }\r\n\r\n    // assign the value of 'showTranscript' state to target elements checked value\r\n    function handleCheck(event) {\r\n        state.showTranscript = event.target.checked;\r\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n        checkState();\r\n    }\r\n\r\n    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n    function checkState() {\r\n        //let state_timer = setTimeout(function() {\r\n            // creates the xml according to the value of states: status, language, isReset, showTranscript and cdata\r\n            let xml = '<smxml type=\"43\" name=\"AudioRecorder\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><!--[CDATA[' + state.cdata + ']]--></smxml>';\r\n            // update the xml\r\n            updateData(xml);\r\n            (state.status != '') ? (\r\n                // disabled the show transcript checkbox and language select dropdown\r\n                AH.select('.disability_apply, #showTranscript').disabled = 'disabled',\r\n                // makes label of language select and show transcript to look like disabled\r\n                AH.selectAll('.transcript_container, .select_label_container label', 'addClass', 'disabledState'),\r\n                // disabled transcript option\r\n                AH.selectAll('.transcript_container,#showTranscript')[1].disabled = true\r\n            ) : (\r\n                // enables the show transcript checkbox and language select dropdown\r\n                AH.select('.disability_apply, #showTranscript').disabled = '',\r\n                // makes label of language select and show transcript to look like active\r\n                AH.selectAll('.transcript_container, .select_label_container label', 'removeClass', 'disabledState'),\r\n                // enable transcript option\r\n                AH.selectAll('.transcript_container,#showTranscript')[1].disabled = false\r\n            );\r\n            // used for screen reader to read the message when user reached on play button\r\n            areaLabelForStopButton = AH.select('#authoring_container #stopButton span').getAttribute('data-original-title');\r\n            // used for screen reader to read the message when user reached on record button\r\n            areaLabelForRecordButton = AH.select('#authoring_container #recordButton span').getAttribute('data-original-title');\r\n            // used for screen reader to read the message when user open the reset modalbox\r\n            areaLabelForModalContent = AH.select('#dialogBody').innerText;\r\n            // clear the previously set timeout\r\n        //    clearTimeout(state_timer);\r\n        //}, 100);\r\n    }\r\n\r\n    // updates the xml\r\n    function updateData(xml) {\r\n        getChildXml(xml);\r\n    }\r\n\r\n    // used for handle the states value\r\n    function handleChange(event) {\r\n        state[event.target.name] = event.target.value;\r\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n        checkState();\r\n    }\r\n\r\n    // starts the recording\r\n    function startRecording() {\r\n        switch(state.status) {\r\n            case 'recording':\r\n                // stops the recording when stop recording button clicked\r\n                stopRecording();\r\n                break;\r\n            case 'recordingStopped':\r\n                // for show the reset modalbox when start recording button clicked and recording is done previously\r\n                AH.getBS('#authoring_confirm_modal','Modal').show();\r\n                // focus on reset modalbox for screen reader purpose\r\n                AH.select('.modal-body').focus();\r\n                break;\r\n            default:\r\n                dictate();\r\n                state.status = 'recording';\r\n                state.isReset = false;\r\n                // used for count the second after recording start\r\n                state.counter = 0;\r\n                // used for automatically end the recording after 15 sec\r\n                timeForRecording = 15;\r\n                // ends recording after 15 sec\r\n                manageTime();\r\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n                checkState();\r\n                // adds the stop recording icon to record button\r\n                AH.selectAll('#recordButton span', 'removeClass', ['icomoon-circle-2', 's2', 'text-danger']);\r\n                AH.selectAll('#recordButton span', 'addClass', 'icomoon-24px-stop');\r\n        }\r\n    }\r\n\r\n    //check that reset button is clicked or not\r\n    function setData() {\r\n        resetClicked = 'yes';\r\n    }\r\n\r\n    // called for speak the recorded text\r\n    function playRecording() {\r\n        if (window.speechSynthesis) {\r\n            synth = window.speechSynthesis;\r\n            if (state.cdata != '') {\r\n                // hides the initial state image of the audio container and recording gif\r\n                AH.selectAll('.authRecordingOn, .authInitialState', 'addClass', 'h');\r\n                // shows the play gif\r\n                AH.selectAll('.authAudioPlaying', 'removeClass', 'h');\r\n                state.disabled = true;\r\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n                checkState();\r\n                // removes all utterances from the utterance queue.\r\n                //synth.cancel();\r\n                // speak the recorded text after defining some properties value and adding event\r\n                isSpeechSynthesisSupported();\r\n            } else {\r\n                // hides the play and recording gif\r\n                AH.selectAll('.authRecordingOn, .authAudioPaused', 'addClass', 'h');\r\n                // shows the initial state image of the audio container\r\n                AH.selectAll('.authInitialState', 'removeClass', 'h');\r\n                // message for no data recorded\r\n                AH.alert(l.no_data_msg);\r\n            }\r\n        } else {\r\n            // message for not supported speechSynthesis\r\n            AH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // speak the text after defining some properties value and adding event\r\n    function isSpeechSynthesisSupported() {\r\n        // Returns a new SpeechSynthesisUtterance object instance\r\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\r\n        // sets the voice name according to the value of language state\r\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\r\n        // event listener fired when the utterance has finished being spoken.\r\n        utterThis.addEventListener('end', function() {\r\n            // hides the gif of recording and play\r\n            AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\r\n            // shows the initial state image of the audio container\r\n            AH.selectAll('.authInitialState', 'removeClass', 'h');\r\n            // enables the play button\r\n            state.disabled = false;\r\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n            checkState();\r\n            // removes all utterances from the utterance queue.\r\n            synth.cancel();\r\n        });\r\n        // array of available voices\r\n        setTimeout(function () {\r\n            voiceForSpeech = synth.getVoices();\r\n            for (let index_no = 0; index_no < voiceForSpeech.length; index_no++) {\r\n                if (voiceForSpeech[index_no].name == voice_name) {\r\n                    //  sets the voice that will be used to speak the utterance.\r\n                    utterThis.voice = voiceForSpeech[index_no];\r\n                    // sets the pitch at which the utterance will be spoken at.\r\n                    utterThis.pitch = 1;\r\n                    // sets the speed at which the utterance will be spoken at.\r\n                    utterThis.rate = 1;\r\n                    // sets the language of the utterance\r\n                    utterThis.lang = state.language;\r\n                    // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\r\n                    synth.speak(utterThis);\r\n                }\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    // stops capturing incoming audio\r\n    function stopRecording() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        // clears the timeout which is started when recording stared\r\n        clearTimeout(manageTimer);\r\n        // change the value of status state\r\n        state.status = 'recordingStopped';\r\n        // change the value of disabled state to false that enables the play button\r\n        state.disabled = false;\r\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n        checkState();\r\n        // shows the initial view of the audio container\r\n        AH.select('.authInitialState', 'removeClass', 'h');\r\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n        recognition.stop();\r\n    }\r\n\r\n    // handles with gif of recording and play and icon of record button\r\n    function manageStopStatus() {\r\n        // hides the gif of recording and playing\r\n        AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\r\n        // shows the initial state image of the audio container\r\n        AH.selectAll('.authInitialState', 'removeClass', 'h');\r\n        // removes the stop icon from recording button and adds start recording icon\r\n        AH.selectAll('#recordButton span', 'removeClass', 'icomoon-24px-stop');\r\n        AH.selectAll('#recordButton span', 'addClass', ['icomoon-circle-2', 's2', 'text-danger']);\r\n    }\r\n\r\n    // reset the previous recorded data\r\n    function manageData() {\r\n        // when reset modalbox open after click on reset button\r\n        if (resetClicked == 'yes') {\r\n            // reset the previously recorded data\r\n                resetAudioData();\r\n            \r\n            resetClicked = 'no';\r\n        } else {\r\n            // when reset modalbox open after click on record button\r\n            state.cdata = '',\r\n            // disabled the play button\r\n            state.disabled = true,\r\n            state.status = '';\r\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n            checkState();\r\n            let manage_data_timer = setTimeout(function() {\r\n                // called for start the recording\r\n                startRecording();\r\n                // clear the timeout\r\n                clearTimeout(manage_data_timer);\r\n            }, 120);\r\n        }\r\n    }\r\n\r\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n    function isSpeechRecognitionSupported() {\r\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\r\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\r\n            // creates new recognition object\r\n            recognition = new SpeechRecognition();\r\n            //Controls whether continuous results are returned for each recognition\r\n            recognition.continuous = true;\r\n            // returns interim results \r\n            recognition.interimResults = true;\r\n            //  sets the language of the current SpeechRecognition\r\n            recognition.lang = state.language;\r\n            // used for globally access the recogniton \r\n            window.recognitionData = recognition;\r\n            recognition.addEventListener('end', function() {\r\n                if (!state.isReset) {\r\n                    // clears the timeout which is started when recording stared\r\n                    clearTimeout(manageTimer);\r\n                    // shows message that recording ended\r\n                    AH.alert(l.recording_ended);\r\n                    // handles with gif of recording and play and icon of record button\r\n                    manageStopStatus();\r\n                    // shows the initial state image of the audio container\r\n                    AH.selectAll('.authInitialState', 'removeClass', 'h');\r\n                    state.status = 'recordingStopped';\r\n                    // enables the play button\r\n                    state.disabled = false;\r\n                    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n                    checkState();\r\n                }\r\n            });\r\n        } else {\r\n            // shows the message that SpeechRecognition not supported\r\n            AH.alert(l.browser_support_msg);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // ends recording after 15 sec\r\n    function manageTime() {\r\n        timeForRecording = timeForRecording - 1;\r\n        state.counter = state.counter + 1;\r\n        manageTimer = setTimeout(function() {\r\n            if (timeForRecording > 0) {\r\n                // calls again the method manageTime for counting the second value\r\n                manageTime();\r\n            } else {\r\n                // stops the recording\r\n                stopRecording();\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \r\n    function dictate() {\r\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\r\n        isSpeechRecognitionSupported();\r\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\r\n        recognition.start();\r\n        // enables reset button\r\n        AH.select('#resetButton').disabled = '';\r\n        // hides the initial state image of the audio container and play gif\r\n        AH.selectAll('.authAudioPlaying, .authInitialState', 'addClass', 'h');\r\n        // shows recording gif\r\n        AH.selectAll('.authRecordingOn', 'removeClass', 'h');\r\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\r\n        recognition.onresult = (event) => {\r\n            let speechToText = '';\r\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\r\n                speechToText += event.results[index_no][0].transcript;\r\n            }\r\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\r\n            state.cdata = speechToText.trim();\r\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n            checkState();\r\n        }\r\n    }\r\n\r\n    // disabled the reset and play button and blanks the value of cdata and xml of state\r\n    function resetAudioData() {\r\n        // handles with gif of recording and play and icon of record button\r\n        manageStopStatus();\r\n        if (state.status == 'recording') {\r\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\r\n            recognition.stop();\r\n        }\r\n        \r\n        state.language = '';\r\n        state.cdata = '';\r\n        state.disabled = true;\r\n        state.xml = '';\r\n        state.status = '';\r\n        state.isReset = true;\r\n        // clears the timeout which is started when recording stared\r\n        clearTimeout(manageTimer);\r\n        \r\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\r\n        checkState();\r\n    } \r\n\r\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\r\n    function modalResponse() {\r\n        resetClicked = 'no';\r\n    } \r\n\r\n    // for ada checkbox\r\n    function adaKeyupCheckbox(e) {\r\n        if (e.keyCode == 13) {\r\n            handleCheck(e);\r\n        }\r\n    }\r\n</script>\r\n<div id=\"authoring_container\" class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\r\n            <b class=\"noteColor bolder\">{l.note_label}</b>\r\n            {l.recording_warning}\r\n        </div>\r\n        <div class=\"col-6 py-2 mb-1\">\r\n            <div class=\"pb-2\"><b>{l.spoken_label}</b></div>\r\n            <textarea id=\"data_container\" disabled=\"disabled\" name=\"cdata\" class=\"form-control\" rows=\"3\" cols=\"75\" on:change={handleChange} value={state.cdata} aria-label={l.spoken_label + \" \" + ((state.cdata != \"\") ? state.cdata: \"Nothing\")}></textarea>\r\n        </div>\r\n        <div class=\"col-6 py-2 mb-1\">\r\n            <div class=\"select_label_container\">\r\n                <label for=\"language_select\"><b>{l.select_lang}</b></label>\r\n            </div>\r\n            <select id=\"language_select\" name=\"language\" class=\"disability_apply form-select form-control-sm\" on:change={handleChange} on:blur={handleChange} value={state.language} aria-label=\"Select the language for Recording\">\r\n                <!-- <option value=\"en-US\" aria-label=\"English United States\">{l.english_us}</option>\r\n                <option value=\"de-DE\" aria-label=\"German\">{l.german_lang}</option>\r\n                <option value=\"fr-FR\" aria-label=\"French\">{l.french_lang}</option>\r\n                <option value=\"es-ES\" aria-label=\"Spanish\">{l.spanish_lang}</option>\r\n                <option value=\"hi-IN\" aria-label=\"Hindi\">{l.hindi_lang}</option>\r\n                <option value=\"ja-JP\" aria-label=\"Japanese\">{l.japanese_lang}</option>\r\n                <option value=\"ko-KR\" aria-label=\"Korean\">{l.korean_lang}</option>\r\n                <option value=\"it-IT\" aria-label=\"Italian\">{l.italiano}</option>\r\n                <option value=\"en-IN\" aria-label=\"English UK\">{l.english_in}</option> -->\r\n                <option value=\"en-US\" aria-label=\"English United States\">{l.english_us}</option>\r\n                <option value=\"hi-IN\" aria-label=\"Hindi\">{l.hindi_lang}</option>\r\n                <option value=\"sv-SE\" aria-label=\"Swedish\">{l.svenska}</option>\r\n                <option value=\"fi-FI\" aria-label=\"Finnish\">{l.suomi}</option>\r\n                <option value=\"it-IT\" aria-label=\"Italian\">{l.italiano}</option>\r\n                <option value=\"en-IN\" aria-label=\"English UK\">{l.english_in}</option>\r\n            </select>\r\n            <div class=\"form-check form-check-inline transcript_container mt-3\">\r\n                <input \r\n                    type=\"checkbox\" \r\n                    on:click={handleCheck}\r\n                    on:keyup={adaKeyupCheckbox}\r\n                    name=\"showTranscript\" \r\n                    id=\"showTranscript\"\r\n                    tabindex=\"0\"\r\n                    class=\"form-check-input\"\r\n                    checked={state.showTranscript}\r\n                >\r\n                <label for=\"showTranscript\" class=\"form-check-label\">{l.show_transcript}</label>\r\n            </div>\r\n        </div>\r\n        <div class=\"col-12 col-md-8 offset-md-2\">\r\n            <div class=\"border rounded shadow-sm\">\r\n                <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\">\r\n                    <b>{l.audio_recorder}</b>\r\n                </div>\r\n                <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\r\n                    <span class=\"align-self-center mx-auto authInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\r\n                    <div class=\"h authRecordingOn w-100 h-100 tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\r\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\r\n                    </div>\r\n                    <div class=\"h authAudioPlaying w-100 h-100 tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\r\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\r\n                    </div>\r\n                </div>\r\n                <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2\">\r\n                    <button \r\n                        type=\"button\" \r\n                        name=\"recordButton\" \r\n                        id=\"recordButton\" \r\n                        on:click={startRecording} \r\n                        class=\"btn btn-light py-0\" \r\n                        aria-label={\"Click for \" + areaLabelForRecordButton}\r\n                    >\r\n                        <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")}></span>\r\n                    </button>\r\n                    <button \r\n                        type=\"button\" \r\n                        name=\"stopButton\" \r\n                        id=\"stopButton\" \r\n                        on:click={playRecording} \r\n                        disabled={state.disabled} \r\n                        class=\"btn btn-light py-0\" \r\n                        aria-label={\"Click for \" + areaLabelForStopButton}\r\n                    >\r\n                        <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Play Audio\"></span>\r\n                    </button>\r\n                    <button \r\n                        type=\"button\" \r\n                        name=\"resetButton\" \r\n                        id=\"resetButton\" \r\n                        on:click={setData} \r\n                        class=\"btn btn-light py-0\" \r\n                        disabled={state.isReset} \r\n                        data-bs-toggle=\"modal\" \r\n                        data-bs-target=\"#authoring_confirm_modal\" \r\n                        aria-label=\"Click on this button for override the previous recording\"\r\n                    >\r\n                        <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-bs-placement=\"top\" title=\"Reset Data\"></span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div class=\"authoring_modal_container container\">\r\n    <div class=\"modal fade\" id=\"authoring_confirm_modal\">\r\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForModalContent} id=\"dialogBody\" name=\"dialogBody\">\r\n                    {l.modal_data}\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"authoring_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\r\n                    <button type=\"button\" class=\"authoring_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>"],"names":["l","recording_warning","modal_data","note_label","spoken_label","select_lang","english_us","hindi_lang","svenska","suomi","italiano","english_in","show_transcript","audio_recorder","starting_message","confirm_label","no_label","yes_label","ctx","cdata","showTranscript","status","disabled","isReset","insert","append","language","recognition","synth","areaLabelForStopButton","areaLabelForModalContent","areaLabelForRecordButton","manageTimer","voiceForSpeech","getChildXml","xml","resetClicked","timeForRecording","state","counter","loadModule","loadXml","MYXML","smxml","_language","__cdata","_status","_isReset","_showTranscript","checkState","event","console","warn","error","message","function name","File name","parseXMLAuthoring","XMLToJSON","handleCheck","target","checked","updateData","AH","select","selectAll","getAttribute","innerText","startRecording","stopRecording","getBS","show","focus","window","webkitSpeechRecognition","SpeechRecognition","continuous","interimResults","lang","recognitionData","addEventListener","clearTimeout","alert","recording_ended","manageStopStatus","browser_support_msg","start","onresult","speechToText","index_no","results","length","transcript","trim","manageTime","stop","setTimeout","onMount","enableBsAll","container","afterUpdate","name","value","speechSynthesis","utterThis","SpeechSynthesisUtterance","voice_name","cancel","getVoices","voice","pitch","rate","speak","isSpeechSynthesisSupported","no_data_msg","resetAudioData","manage_data_timer","e","keyCode"],"mappings":"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"}