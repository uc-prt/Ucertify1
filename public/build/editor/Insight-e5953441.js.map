{"version":3,"file":"Insight-e5953441.js","sources":["../../../clsSMInsight/Insight.svelte"],"sourcesContent":["<!--\r\n *  File Name   : Insight.svelte\r\n *  Description : Responsible for Authoring Side functionality\r\n *  Author      : Ayush Srivastava\r\n *  Package     : Insight (Authoring & Preview)\r\n *  Last update : 09-Feb-2021\r\n *  Last Updated By : Ayush Srivastava\r\n-->\r\n<script>\r\n    import { afterUpdate, beforeUpdate, onMount } from 'svelte';\r\n\timport { writable } from 'svelte/store';\r\n    import { AH , XMLToJSON, JSONToXML} from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language.js';\r\n    import Loader from '../helper/Loader.svelte';\r\n    import swal from 'sweetalert';\r\n    import Sortable from 'sortablejs';\r\n\r\n    export let xml;\r\n    export let getChildXml;\r\n    export let user;\r\n    export let editorState;\r\n    export let itemIcons;\r\n    const category = { 'quiz': 'knowledge_check', 'terminal': 'lab', 'simulation': 'lab', 'insight': 'lab', 'lablink': 'lab', 'playground': 'lab', 'video': 'media', 'audio': 'media', 'exhibit': 'link', 'pdf': 'link', 'weblink': 'link', 'download': 'link', 'object3d': 'objects' };\r\n    let itemArray = ['quiz', 'link', 'terminal', 'object3d', 'exhibit', 'insight', 'lablink', 'playground', 'simulation'],\r\n    sceneTemp = \"\",\r\n    characterData  = \"\",\r\n    localcharacterData   = [],\r\n    localcharacterChoice = [],\r\n    insightData = [],\r\n    stepData    = \"\",\r\n    isSmartChat = \"\",\r\n    localstepData     = [],\r\n    scoreCategoryData = \"\",\r\n    localscoreCategoryData = [],\r\n    assetData       = \"\",\r\n    localassetData  = [],\r\n    tabData         = \"\",\r\n    localtabData    = [],\r\n    modeData        = \"\",\r\n    localmodeData   = [],\r\n    assetsData      = \"\",\r\n    localassetsData = [],\r\n    defaultScene = 0,\r\n    sceneName    = \"\",\r\n    sceneJson    = \"\",\r\n    qxml         = \"\",\r\n    resultTitle  = \"\",\r\n    BGsrc      = \"\",\r\n    began      = \"\",\r\n    updateAnimation = [],\r\n    sceneData       = {},\r\n    localpage_value  = 0,\r\n    data_active = 1,\r\n    state = {},\r\n    menuLayout   = [],\r\n    sceneArr     = [],\r\n    is_scene_load = false,\r\n    show_dom = false;\r\n\r\n    // it need to change by baseUrl\r\n    let check_domain = (window.location.origin.search('localhost') > 0 || window.location.origin.search('demo-a.ucertify.com') > 0);\r\n    let curDomain = (check_domain) ? 'https://www.jigyaasa.info/' : baseUrl;\r\n\r\n    // creating the authoring writable store\r\n    let auth_store = writable({\r\n        xml: \"\",\r\n        activeTab: 1,\r\n        category: 'knowledge_check',\r\n        type: 'simulation',\r\n        content_type: 'q,u',\r\n        content_subtype: '16',\r\n        currentItem: \"\",\r\n        msg : \"\",\r\n        sceneData: \"\",\r\n        tabvalue: 0,\r\n        layout: 0,\r\n        toggleMode: \"\",\r\n        end: 12,\r\n    });\r\n\r\n    // subscribing to the store\r\n    const unsubscribe = auth_store.subscribe((item)=> {\r\n\t\tstate = item;\r\n\t});\r\n\r\n    // calling beforeUpdate which calls before every time there is update\r\n    beforeUpdate(async() => {\r\n        if (is_scene_load) {\r\n\r\n            // checking for authoring and preview mode\r\n            if (editorState.toggleMode != state.toggleMode) {\r\n                if (editorState.toggleMode) {\r\n                    qxml = state.xml;\r\n                    auth_store.update( (item) => {\r\n                        item.xml = qxml;\r\n                        return item;\r\n                    });\r\n\r\n                    getChildXml(qxml);\r\n\r\n                    if (AH.selectAll('#authoringArea form').length) {\r\n                        AH.select('#authoringArea form').remove();\r\n                    }\r\n\r\n                    let formaction = baseUrl + 'sim/smartsim/index.php?insight=1&in_editor=1&insight_navigation=1';\r\n                    let testHtml = '<form method=\"post\" target=\"authoringFrame\" action=\"' + formaction + '\"><input type=\"hidden\" name=\"no_header\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">'+qxml+'</textarea><input type=\"hidden\" name=\"uxml\" value=\"\"/><input type=\"hidden\" name=\"content_guid\" value=\"0\" /></form>';\r\n\r\n                    AH.insert('#authoringArea', testHtml, 'beforeend');\r\n                    let element = AH.selectAll('#title, #stem,.insight_tabs, #remediation, .editor_placeholder');\r\n                    for (let index = 0; index < element.length; index++) {\r\n                        AH.setCss(element[index], {\r\n                            display: 'none',\r\n                        })\r\n                    }\r\n                    AH.insert('#title', '<div id=\"tilteShow\">' + AH.select('#title').innerHTML + '</div>', 'afterend');\r\n                    AH.insert('#stem', '<div id=\"stemShow\">' + AH.select('#stem').innerHTML + '</div>', 'afterend');\r\n                    AH.insert('#remediation', '<div id=\"remediationShow\">' + AH.select('#remediation').innerHTML + '</div>', 'afterend');\r\n                    editorState.activator = true;\r\n                    AH.select('form[target=\"authoringFrame\"]').submit();\r\n                    AH.select(\"#authoringFrame\").style.display = 'block';\r\n                } else {\r\n                    AH.selectAll('#tilteShow, #stemShow, #remediationShow' , 'remove');\r\n                    let element = AH.selectAll('#title, #stem, #remediation, #externalInputs, .insight_tabs, .editor_placeholder');\r\n                    for (let index = 0; index < element.length; index++) {\r\n                        AH.setCss(element[index], {\r\n                            display: 'block',\r\n                        })\r\n                    }\r\n                    try { \r\n                        AH.select(\"#authoringFrame\").contentWindow.responsiveVoice.cancel(); \r\n                    } catch(e) { \r\n                        console.log(e); \r\n                    }\r\n                    AH.select(\"#authoringFrame\").style.display = 'none';\r\n                }\r\n                auth_store.update( (item) => {\r\n                    item.toggleMode = editorState.toggleMode;\r\n                    return item;\r\n                });\r\n            }\r\n\r\n            // checking for change in xml\r\n            if (state.xml != xml) {\r\n                loadModule(xml);\r\n                auth_store.update( (item) => {\r\n                    item.xml = xml;\r\n                    return item;\r\n                });\r\n\r\n                loadScene(state.end);\r\n            }\r\n\r\n            // setting visibles tabs according to the selected scene\r\n            if (state.sceneData) {\r\n                for (let index = 0; index < state.sceneData.scene.length; index++) {\r\n                    if (sceneName == state.sceneData.scene[index].title) {\r\n                        defaultScene = index;\r\n                        if (AH.select('.insightTab8').nodeName && AH.select('.insightTab5').nodeName && AH.select('.insightTab4').nodeName) {\r\n                            if (state.sceneData.scene[defaultScene].anim.length < 1) {\r\n                                AH.select('.insightTab8').style.display = 'none';\r\n                            } else {\r\n                                AH.select('.insightTab8').style.display = 'block';\r\n                            }\r\n                            if (state.sceneData.scene[defaultScene].assets.length < 2) {\r\n                                AH.select('.insightTab4').style.display = 'none';\r\n                                AH.select('.insightTab5').style.display = 'none';\r\n                            } else {\r\n                                AH.select('.insightTab4').style.display = 'block';\r\n                            }\r\n                        }\r\n                    } \r\n                }\r\n            }\r\n        } else {\r\n            // removing editor activator after scene fetch\r\n            editorState.activator = true;\r\n        }\r\n    });\r\n\r\n    // binding up neccessary events \r\n    onMount( async() => {\r\n        // for getting the insight data\r\n        getDataFromApi();\r\n\r\n        AH.listen('body', 'keyup', '#stem .ebook_item_text', function () {\r\n            updateXmlValue();\r\n        });\r\n\r\n\r\n        AH.listen('body', 'keyup', '#search', function (current, event) {\r\n            searchTable(event);\r\n        });\r\n\r\n        AH.listen('body', 'click', '.pagination_btn', function (current, event) {\r\n            data_active = event.target.value;\r\n            AH.selectAll(\".pagination_btn\", \"removeClass\", \"active\");\r\n            current.classList.add('active');\r\n            menuLayout = [];\r\n            createPagination();\r\n            state.end = 24;\r\n        });\r\n\r\n        AH.listen('body', 'click', '#table_list tr', function (current, event) {\r\n            let guid = AH.find(current, 'td').innerText;\r\n            let index = AH.select(\"#currentItem\").value;\r\n            localstepData[index].guids = guid;\r\n            updateXmlValue(event, index, \"\", \"\", guid);\r\n            AH.getBS('#player_modal', 'Modal').hide();\r\n        });\r\n\r\n        document.querySelector(\"#authoringFrame\").addEventListener('load', ()=> { \r\n            if (editorState.toggleMode) {\r\n                editorState.activator = false;\r\n            }\r\n\t\t});\r\n\r\n        AH.select('#preview').style.display = 'none';\r\n        AH.select('#authoringFrame').style.display = 'none';\r\n\r\n        AH.listen('body', 'click', '.tabbutton', function(element) {\r\n            AH.selectAll('.tabbutton', 'removeClass', 'active');\r\n            element.classList.add('active');\r\n            auth_store.update( (item) => {\r\n                item.tabvalue = Number(element.getAttribute('data-tab'));\r\n                return item;\r\n            });\r\n        });\r\n    })\r\n\r\n    // afterUpdate is called after updation of the varibale here it set the content type & also manage sortable event\r\n    afterUpdate( async() => {\r\n        let isFound = itemArray.indexOf(state.type);\r\n        if (isFound > -1) {\r\n            setContentType();\r\n        }\r\n\r\n        if (state.tabvalue == 6) {\r\n            let sortable = new Sortable(AH.select('#sortable'), {\r\n                animation: 150,\r\n                handle: '.allowDraggable',\r\n                onEnd: function (evt) {\r\n                    if (evt.oldIndex > evt.newIndex) {\r\n                        for (let index = evt.oldIndex; index > evt.newIndex; index--) {\r\n                            let tempValue = localstepData[index - 1];\r\n                            localstepData[index-1] = localstepData[index];\r\n                            localstepData[index] = tempValue;\r\n                        }\r\n                    } else if (evt.oldIndex < evt.newIndex) {\r\n                        for (let index = evt.oldIndex; index < evt.newIndex; index++) {\r\n                            let tempValue = localstepData[index + 1];\r\n                            localstepData[index+1] = localstepData[index];\r\n                            localstepData[index] = tempValue;\r\n                        }\r\n                    } else {\r\n                        localstepData[evt.oldIndex] = localstepData[evt.newIndex];\r\n                    }\r\n                    \r\n                    let swap_element = AH.selectAll('.step_swap');\r\n                    swap_element.forEach((el) => {\r\n                        el.click();\r\n                    });\r\n                    AH.select('.insightTab6').click();\r\n                    let insight_timer = setTimeout( ()=> {\r\n                        AH.select('.insightTab7').click();\r\n                        clearTimeout(insight_timer);\r\n                    }, 10);\r\n                },\r\n            });\r\n        }\r\n\r\n    });\r\n\r\n    // used for fetching the insight data from the api\r\n    function getDataFromApi() {\r\n        AH.activate(2);\r\n        AH.ajax({\r\n            type: 'GET',\r\n            url: baseUrl + 'editor/index.php?action=getinsight&insightId=054oF',\r\n            onEnd: function() {\r\n                editorState.activator = false;\r\n                AH.activate(0);\r\n                show_dom = true;\r\n                is_scene_load = true;\r\n            }\r\n        }).then(function(data) {\r\n            data = JSON.parse(data);\r\n            auth_store.update( (item) => {\r\n                item.sceneData = data;\r\n                return item;\r\n            });\r\n\r\n            createPagination();\r\n            loadScene(12);\r\n\r\n            if (AH.selectAll(\"#placeHolderRemediation\").length) {\r\n                let parent = AH.select(\"#placeHolderRemediation\").parentElement;\r\n                parent.classList.add(\"float-start\");\r\n                parent.classList.add(\"col-12\");\r\n                parent.style.zIndex = '9';\r\n            }\r\n        });\r\n    }\r\n\r\n    // responsible for loading the module on the basis of xml\r\n    function loadModule(loadXml) {\r\n        let new_xml = XMLToJSON(loadXml);\r\n        parseXMLAuthoring(new_xml); \r\n    }\r\n\r\n    // create variable and store data in variable and used for parsing the xml\r\n    function parseXMLAuthoring(INSIGHTXML) {\r\n        localstepData          = [];\r\n        localcharacterData \t   = [];\r\n        localcharacterChoice   = [];\r\n        localscoreCategoryData = [];\r\n        localassetData         = [];\r\n        localassetsData        = [];\r\n        localtabData           = [];\r\n        localmodeData          = [];\r\n        insightData            = JSON.parse(INSIGHTXML.smxml.__cdata);\r\n        stepData               = insightData.steps;\r\n        scoreCategoryData      = insightData.scoreCategories;\r\n        assetData              = insightData.assets;\r\n        tabData                = insightData.link;\r\n        modeData               = insightData.mode;\r\n        sceneName              = INSIGHTXML.smxml._sceneName;\r\n        sceneJson              = INSIGHTXML.smxml._sceneJson;\r\n        isSmartChat            = INSIGHTXML.smxml._isSmartChat;\r\n        began\t\t\t\t   = insightData.begin;\r\n        BGsrc\t\t\t\t   = insightData.bgImage;\r\n        resultTitle\t\t\t   = insightData.detail;\r\n        // setting the pagination count according to the total scenes\r\n        if (state.sceneData) {\r\n            for (let index = 0; index < state.sceneData.scene.length; index++) {\r\n                if (sceneName == state.sceneData.scene[index].title) {\r\n                    defaultScene = index;\r\n                } \r\n            }\r\n        }\r\n\r\n        characterData = insightData.characters;\r\n        // set all data of charaters like name id visiblity etc.\r\n\r\n        for (let index = 0; index < characterData.length; index++) {\r\n            localcharacterData = [\r\n                ...localcharacterData, {\r\n                visible  : characterData[index].visible,\r\n                name     : characterData[index].name,\r\n            }];\t\r\n            localcharacterChoice = [\r\n                ...localcharacterChoice, {\r\n                visible  : characterData[index].visible,\r\n                name     : characterData[index].name,\r\n            }];\t\r\n        }\r\n\r\n        assetsData = insightData.assets;\r\n        // set all data of assets like name id visiblity etc\r\n\r\n        for (let index = 0; index < assetsData.length; index++) {\r\n            localassetsData = [\r\n                ...localassetsData, {\r\n                name         : assetsData[index].asset,\r\n                visible      : assetsData[index].visible,\r\n                assets_click : assetData[index].assets_click,\r\n                tooltip      : assetData[index].tooltip,\r\n                anim         : assetData[index].anim,\r\n                focus\t\t : assetData[index].focus,\r\n            }];\t\r\n        }\r\n\r\n        // push all data into variables\r\n        if (Object.keys(stepData).length) {\r\n            for (let index = 0; index < stepData.length; index++) {\r\n                if (typeof stepData[index].image == 'undefined') {\r\n                    stepData[index].image = '';\r\n                }\r\n                localstepData = [ \r\n                    ...localstepData, {\r\n                    id      \t\t : stepData[index].id,\r\n                    name     \t\t : stepData[index].name,\r\n                    allowChoices     : stepData[index].allowChoices,\r\n                    camera     \t\t : stepData[index].camera,\r\n                    voice     \t\t : stepData[index].voice,\r\n                    message     \t : stepData[index].message,\r\n                    stepIndex     \t : stepData[index].stepIndex,\r\n                    guids     \t     : stepData[index].guids,\r\n                    choicesScore     : stepData[index].choicesScore,\r\n                    state\t\t\t : stepData[index].state,\r\n                    speech\t\t\t : stepData[index].speech,\r\n                    auto\t\t\t : stepData[index].auto,\r\n                    choicesCategory  : stepData[index].choicesCategory,\r\n                    condition        : stepData[index].condition,\r\n                    image            : stepData[index].image,\r\n                    choices     \t : [],\r\n                    title\t\t\t : stepData[index].title,\r\n                    important_node   : stepData[index].important_node,\r\n                    level_text       : stepData[index].level_text\r\n                }];\r\n            }\r\n            for (let index = 0; index < localstepData.length; index++) {\r\n                for (let sub_index = 0; sub_index < stepData[index].choices.length; sub_index++) {\r\n                    if (typeof stepData[index].choices[sub_index].fdbk_char_cam == 'undefined') {\r\n                        stepData[index].choices[sub_index].fdbk_char_cam = stepData[index].choices[sub_index].camera;\r\n                    }\r\n                    if (typeof stepData[index].choices[sub_index].fdbk_char_voice == 'undefined') {\r\n                        stepData[index].choices[sub_index].fdbk_char_voice = stepData[index].choices[sub_index].voice;\r\n                    }\r\n                    localstepData[index].choices = [ \r\n                        ...localstepData[index].choices, {\r\n                        id      \t\t : stepData[index].choices[sub_index].id,\r\n                        correct     \t : stepData[index].choices[sub_index].correct,\r\n                        text             : stepData[index].choices[sub_index].text,\r\n                        feedback         : stepData[index].choices[sub_index].feedback,\r\n                        choicesScore     : stepData[index].choices[sub_index].choicesScore,\r\n                        choicesCategory  : stepData[index].choices[sub_index].choicesCategory,\r\n                        stepIndex        : stepData[index].choices[sub_index].stepIndex,\r\n                        feedback_charact : stepData[index].choices[sub_index].feedback_charact,\r\n                        fdbk_char_cam    : stepData[index].choices[sub_index].fdbk_char_cam,\r\n                        fdbk_char_voice  : stepData[index].choices[sub_index].fdbk_char_voice\r\n                    }];\t\r\n                }\r\n            }\r\n        }\r\n        if (Object.keys(scoreCategoryData).length) {\r\n            for (let index = 0; index < scoreCategoryData.length; index++) {\r\n                localscoreCategoryData = [\r\n                    ...localscoreCategoryData, {\r\n                    id      : scoreCategoryData[index].id,\r\n                    name    : scoreCategoryData[index].name,\r\n                    value   : scoreCategoryData[index].value,\r\n                }];\t\t\r\n            }\r\n        }\r\n        if (Object.keys(assetData).length) {\r\n            for (let index = 0; index < assetData.length; index++) {\r\n                localassetData = [\r\n                    ...localassetData, {\r\n                    src         : assetData[index].src,\r\n                    title       : assetData[index].title,\r\n                    icon        : assetData[index].icon ,\r\n                    text        : assetData[index].text ,\r\n                }];\t\t\r\n            }\r\n        }\r\n        if (Object.keys(tabData).length) {\r\n            for (let index = 0; index < tabData.length; index++) {\r\n                localtabData = [ ...localtabData , {\r\n                    title      : tabData[index].title,\r\n                    name       : tabData[index].name ,\r\n                    guid       : tabData[index].guid ,\r\n                    focus      : tabData[index].focus ,\r\n                    dialog     : tabData[index].dialog,\r\n                }];\r\n            }\r\n        }\r\n\r\n        localmodeData = (modeData) ? modeData :  0;\r\n    }\r\n\r\n    // for uploading the image \r\n    function onChoiceImageSelect(event, i) {\r\n        let files = event.target.files[0];\r\n        const fd = new FormData();\r\n        let rand =  Math.floor(100 * Math.random()) + 1;\r\n        let image_name = 'uc_' + rand + 'choice' + i;\r\n        if (files.size > 32768) {\r\n            fd.append('image',files, '/' + image_name + '.png');\r\n            AH.select('#bgResult').nodeName && AH.select(\"#bgResult\").setAttribute(\"src\", curDomain + 'labs/insight/Images/loading.gif');\r\n            AH.select(\"#samplechoice_image\" + i).nodeName && AH.select(\"#samplechoice_image\" + i).setAttribute(\"src\", curDomain + 'labs/insight/Images/loading.gif');\r\n            \r\n            AH.ajax({\r\n                type:'POST',\r\n                url: baseUrl+'editor/index.php?func=choiceupload&folder=Choice_question_images',\r\n                data: fd,\r\n                formData: true,\r\n            }).then(function() {\r\n                AH.select(\"#result_img\").nodeName && AH.select(\"#result_img\").setAttribute('value', curDomain + 'labs/insight/Choice_question_images/' + image_name + '.png');\r\n                AH.select(\"#choice_question_image\" + i).nodeName && AH.select(\"#choice_question_image\" + i).setAttribute('value', curDomain + 'labs/insight/Choice_question_images/' + image_name + '.png');\r\n                AH.select(\"#result_img\").nodeName && AH.select(\"#result_img\").click();\r\n                AH.select(\"#choice_question_image\" + i).nodeName && AH.select(\"#choice_question_image\" + i).click();\r\n            })\r\n        } else {\r\n            if (AH.select(\"#result_img\").nodeName) {\r\n                AH.select(\"#result_img\").innerText = \"File size is too small\";\r\n            }\r\n            if (AH.select(\"#choice_question_image\").nodeName) {\r\n                AH.select(\"#choice_question_image\").innerText = \"File size is too small\";\r\n            }\r\n            swal(\"File size is too small\");\r\n        }\r\n    }\r\n\r\n    // for removing the tags in the tags\r\n    function removeTags(text) {\r\n        let strippedText = text.replace(/(<([^>]+)>)/ig, '').replace(/\\n/g, ' ');\r\n        return strippedText;\r\n    }\r\n\r\n    // for setting the content type and content subtype\r\n    function setContentType() {\r\n        let content_type = '', content_subtype = '';\r\n        switch (state.type) {\r\n            case \"terminal\":\r\n                content_type = \"q,f\";\r\n                content_subtype = \"13\";\r\n                break;\r\n            case \"lablink\":\r\n                content_type = \"q\";\r\n                content_subtype = \"25\";\r\n                break;\r\n            case \"playground\":\r\n                content_type = \"q\";\r\n                content_subtype = \"24\";\r\n                break;\r\n            case \"simulation\":\r\n                content_type = \"q\";\r\n                content_subtype = \"16\";\r\n                break;\r\n            default:\r\n                content_type = content_subtype = '';\r\n                break;\r\n        }\r\n        if (state.content_type != content_type || state.content_subtype != content_subtype) {\r\n            auth_store.update( (item) => {\r\n                item.content_type = content_type;\r\n                item.content_subtype = content_subtype;\r\n                return item;\r\n            });\r\n        }\r\n    }\r\n\r\n    // For getting the snippet \r\n    function getSnippet() {\r\n        AH.selectAll(\".list_content, #not_found, #info_data, .search_list\", 'addClass', 'h')\r\n        AH.select(\"#not_found\").innerText = l.no_record;\r\n        if (state.content_type != '' || state.content_subtype != '') {\r\n            if (editor.course) {\r\n                AH.select(\"#list_process\").classList.remove(\"h\");\r\n                AH.ajax({\r\n                    url: baseUrl + 'editor/index.php?action=getSnippet&ajax=1',\r\n                    data: {\r\n                        course_code: editor.course.split('.')[0],\r\n                        content_type: state.content_type,\r\n                        content_subtype: state.content_subtype\r\n                    },\r\n                    type: 'post',\r\n                }).then(function (response) {\r\n                    if (response != 0) {\r\n                        let data = JSON.parse(response);\r\n                        let table = '';\r\n                        for (let index in data) {\r\n                            table += '<tr><td>' + index + '</td>';\r\n                            table += '<td>' + data[index]['snippet'] + '</td>';\r\n                            table += '<td class=\"text-center player_modal_tooltip\" data-bs-toggle=\"tooltip\" title=\"' + ((itemIcons[state.content_subtype]) ? (itemIcons[state.content_subtype].title) : '') + '\"><i class=\"' + ((itemIcons[state.content_subtype]) ? (itemIcons[state.content_subtype].icon) : '') + '\"></i></td></tr>';\r\n                        }\r\n                        AH.select(\"#table_list\").innerHTML = table;\r\n                        if (table == '') {\r\n                            AH.selectAll(\"#not_found\", 'removeClass', \"h\");\r\n                        } else {\r\n                            AH.selectAll(\"#list_content_tbl, .search_list\", 'removeClass', \"h\");\r\n                        }\r\n                        let tooltip_timer = setTimeout(function() {\r\n                            AH.enableBsAll('.player_modal_tooltip', 'Tooltip', {\r\n                                container: '#player_modal'\r\n                            });\r\n                            clearTimeout(tooltip_timer);\r\n                        }, 100);\r\n                    } else {\r\n                        AH.selectAll(\"#not_found\", 'removeClass', \"h\");\r\n                    }\r\n                    AH.select(\"#list_process\").classList.add(\"h\");\r\n                }).catch(function() {\r\n                    AH.selectAll(\"#list_process, .search_list\", 'addClass', \"h\");\r\n                    AH.selectAll(\"#not_found\", 'removeClass', \"h\");\r\n                    AH.showmsg(l.unable_to_get);\r\n                    AH.activate(0);\r\n                });\r\n            } else {\r\n                AH.selectAll(\"#not_found\", 'removeClass', \"h\");\r\n                AH.select(\"#not_found\").innerText = l.load_course;\r\n            }\r\n        }\r\n    }\r\n\r\n    // for searching in the table\r\n    function searchTable(event) {\r\n        let input_val = event.target.value, count = 0;\r\n        let table_tr = AH.selectAll('.table_search tbody tr');\r\n        for (let index = 0; index < table_tr.length; index++) {\r\n            let text = table_tr[index].innerText;\r\n            if (text && input_val && (text.toLowerCase().indexOf(input_val.toLowerCase()) == -1)) {\r\n                table_tr[index].classList.add('h');\r\n            } else {\r\n                table_tr[index].classList.remove('h');\r\n                count++;\r\n            }\r\n        }\r\n        if (count > 0) {\r\n            AH.select('#not_found').classList.add('h');\r\n            AH.select('#list_content_tbl').classList.remove('h');\r\n        } else {\r\n            AH.select('#not_found').classList.remove('h');\r\n            AH.select('#list_content_tbl').classList.add('h');\r\n        }\r\n    }\r\n\r\n    // for creating the pagination on scene tab\r\n    function createPagination() {\r\n        if (state.sceneData.scene.length > 12 * data_active) {\r\n            data_active = parseInt(data_active) + 1;\r\n            let end = 12 * data_active;\r\n            menuLayout = [\r\n                ...menuLayout, \r\n                {\r\n                    data_active: data_active,\r\n                    end: end\r\n                }\r\n            ];\r\n        } else {\r\n            menuLayout = [];\r\n        }\r\n    }\r\n\r\n    // whenever there is change in the knowledge item dropdown\r\n    function handlePlayer(event) {\r\n        AH.selectAll(\".list_content, #not_found, .search_list\", 'addClass', 'h')\r\n        AH.selectAll(\"#info_data\", 'removeClass', 'h')\r\n        AH.select('#table_list').innerHTML = '';\r\n        auth_store.update( (item) => {\r\n            item.msg = '';\r\n            return item;\r\n        });\r\n    }\r\n\r\n    // for loading the scene\r\n    function loadScene(end) {\r\n        localpage_value = end;\r\n        sceneArr = [];\r\n        state.sceneData && state.sceneData.scene.map((data, i)=>{\r\n            if (i < end && i < state.sceneData.scene.length) {\r\n                if (i == defaultScene) {\r\n                    sceneArr = [\r\n                        ...sceneArr, {\r\n                            key: i,\r\n                            background: '#F0F0F0',\r\n                            alt: data.title,\r\n                            type: 0\r\n                        }\r\n                    ]\r\n                } else if (data.by == user['user_guid']) {\r\n                    sceneArr = [\r\n                        ...sceneArr, {\r\n                            key: i,\r\n                            alt: data.title,\r\n                            type: 1\r\n                        }\r\n                    ]\r\n                } else {\r\n                    sceneArr = [\r\n                        ...sceneArr, {\r\n                            key: i,\r\n                            alt: data.title,\r\n                            type: 2\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        });\r\n        auth_store.update( (item) => {\r\n            item.layout = item.layout++;\r\n            return item;\r\n        });\r\n    }\r\n    \r\n    // for updating the xml value this function is responsible\r\n    function updateXmlValue(event, index ,parentIndex=\"\", selector , value) {\r\n        if (event) {\r\n            value = event.target.value;\r\n        }\r\n        let xml = XMLToJSON(state.xml);\r\n        switch(selector) { \r\n            case \"addItem\":\r\n                AH.getBS('#player_modal', 'Modal').show();\r\n                auth_store.update( (item) => {\r\n                    item.currentItem = index;;\r\n                    return item;\r\n                });\r\n                break;\r\n            case \"setCharacter\" : \r\n                localcharacterData[index].name = value;\r\n                localcharacterChoice[index].name = value;\r\n                sceneData = state.sceneData;\r\n                sceneData.scene[defaultScene].characters[index].name = value;\r\n                auth_store.update( (item) => {\r\n                    item.sceneData = sceneData;\r\n                    return item;\r\n                });\r\n                break;\r\n            case \"setCategoryName\" :\r\n                localscoreCategoryData[index].name = value;\r\n                break;\r\n            case \"deleteStep\" :\r\n                localstepData.splice(index, 1);\r\n                break;\r\n            case \"deleteScene\" :\r\n                swal({\r\n                    title: \"Are you sure?\",\r\n                    text: \"Once deleted, you will not be able to recover this scene!\",\r\n                    type: \"warning\",\r\n                    buttons: true,\r\n                    dangerMode: true,\r\n                }).then(function(isConfirm) {\r\n                    if (!isConfirm && index > 0) {\r\n                        state.sceneData.scene.splice(index,1);\r\n                        var output = JSON.stringify(state.sceneData);\r\n                        AH.select('#pagination_btn1').click();\r\n                        AH.ajax({\r\n                            type: 'POST',\r\n                            data: {myData:output},\r\n                            url: baseUrl+'editor/index.php?action=setinsight&insightId=054oF',\r\n                        }).then( () => {\r\n                            swal(\"Delete successfully\");\r\n                        });\r\n                    }\r\n                });\r\n                break;\r\n            case \"addStep\" :\r\n                var avaliableCharacter = 0;\r\n                for (let increment = 0; increment < localcharacterData.length; increment++) {\r\n                    if (localcharacterData[increment].visible == 0) {\r\n                        avaliableCharacter = increment;\r\n                        break;\r\n                    }\r\n                }\r\n                localstepData[localstepData.length] = {\r\n                    'id'          : localstepData.length,\r\n                    'name'        : avaliableCharacter,\r\n                    'allowChoices': 0,\r\n                    \"camera\"      : state.sceneData.scene[defaultScene].characters[avaliableCharacter].camera,\r\n                    \"speech\"      : 0,\r\n                    \"auto\"        : 0,\r\n                    \"state\"       : \"talking\",\r\n                    \"voice\"       : state.sceneData.scene[defaultScene].characters[avaliableCharacter].voice,\r\n                    \"choices\"     : [],\r\n                    \"message\"     : \"\",\r\n                    \"level_text\"   : \"\",\r\n                    \"important_node\"   : \"\"\r\n                };\r\n                break;\r\n            case \"addChoice\" :\r\n                var avaliableCharacterChoice = 0;\r\n                for (let increment = 0; increment < localcharacterChoice.length; increment++) {\r\n                    if (localcharacterChoice[increment].visible == 0) {\r\n                        avaliableCharacterChoice = increment;\r\n                        break;\r\n                    }\r\n                }\r\n                localstepData[index].choices[localstepData[index].choices.length] = {\r\n                    'id'              : localstepData[index].choices.length,\r\n                    \"choicesScore\"    : 0,\r\n                    \"choicesCategory\" : 0,\r\n                    \"correct\"         : 0,\r\n                    \"text\"            : \"\",\r\n                    \"feedback\"        : \"\",\r\n                    \"feedback_charact\": avaliableCharacterChoice,\r\n                    \"fdbk_char_cam\"   : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,\r\n                    \"fdbk_char_voice\" : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice\r\n                };\r\n                break;\r\n            case \"deleteChoice\" :\r\n                localstepData[parentIndex].choices.splice(index,1);\r\n                break;\r\n            case \"assetVisible\" :\r\n                if (localassetsData[index].visible == 0) {\r\n                    localassetsData[index].visible = 1;\r\n                } else {\r\n                    localassetsData[index].visible = 0;\r\n                }\r\n                sceneData = state.sceneData;\r\n                sceneData.scene[defaultScene].assets[index].visible = value;\r\n                auth_store.update( (item) => {\r\n                    item.sceneData = sceneData;\r\n                    return item;\r\n                });\r\n                break;\r\n            case \"setAssetsClick\" :\r\n                localassetsData[index].assets_click = parseInt(value);\r\n                break;\r\n            case \"setTooltip\" :\r\n                localassetsData[index].tooltip = value;\r\n                break;\r\n            case \"assetAnim\" :\r\n                localassetsData[index].anim = Number(value);\r\n                localassetsData[index].focus = state.sceneData.scene[defaultScene].anim[Number(value)].name;\r\n                sceneData = state.sceneData;\r\n                sceneData.scene[defaultScene].assets[index].anim = Number(value);\r\n                auth_store.update( (item) => {\r\n                    item.sceneData = sceneData;\r\n                    return item;\r\n                });\r\n                break;\r\n            case \"updateChoiceType\" :\r\n                //Added for alert switch blank page issue.\r\n                if (localstepData[index].name   == \"\") {\r\n                    localstepData[index].name = 0;\r\n                }\r\n\r\n                if (localstepData[index].image == \"\") {\r\n                    localstepData[index].image = 0;\r\n                }\r\n\r\n                var avaliableCharacterChoice = 0;\r\n                for (let increment = 0; increment < localcharacterChoice.length; increment++) {\r\n                    if (localcharacterChoice[increment].visible == 0) {\r\n                        avaliableCharacterChoice = increment;\r\n                        break;\r\n                    }\r\n                }\r\n                localstepData[index].allowChoices  = parseInt(value);\r\n                if (localstepData[index].choices.length === 0) {\r\n                    if (value == 1 || value == 3) {\r\n                        localstepData[index].choices[localstepData[index].choices.length] = {\r\n                            'id'              : localstepData[index].choices.length,\r\n                            \"choicesScore\"    : 0,\r\n                            \"choicesCategory\" : 0,\r\n                            \"correct\"         : 0,\r\n                            \"text\"            : \"\",\r\n                            \"feedback\"        : \"\",\r\n                            \"image\"\t\t      : \"\",\r\n                            \"feedback_charact\": avaliableCharacterChoice,\r\n                            \"fdbk_char_cam\"   : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,\r\n                            \"fdbk_char_voice\" : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice\r\n                        };\r\n                    }\r\n                }\r\n                if (value == 2 || value == 4 || value == 5) {\r\n                    localstepData[index].guids = \"\";\r\n                    localstepData[index].cvalue = \"\";\r\n                    localstepData[index].choicesScore = 10;\r\n                    localstepData[index].choicesCategory = 0;\r\n                    localstepData[index].message = \"\";\r\n                }\r\n                if (value == 7) {\r\n                    localstepData[index].camera = 0;\r\n                    localstepData[index].name   = \"\";\r\n                    localstepData[index].voice  = 1;\r\n                    localstepData[index].image  = \"\";\r\n                }\r\n                break;\r\n            case \"updateStepChracter\" :\r\n                localstepData[index].voice = state.sceneData.scene[defaultScene].characters[value].voice;\r\n                localstepData[index].camera = state.sceneData.scene[defaultScene].characters[value].camera;\r\n                localstepData[index].name  = parseInt(value);\r\n                break;\r\n            case \"updateFeedbackChracter\" :\r\n                    localstepData[parentIndex].choices[index].feedback_charact = parseInt(value);\r\n                    localstepData[parentIndex].choices[index].fdbk_char_voice = state.sceneData.scene[defaultScene].characters[value].voice;\r\n                    localstepData[parentIndex].choices[index].fdbk_char_cam  = state.sceneData.scene[defaultScene].characters[value].camera;\r\n                    break;\r\n            case \"updateSpeech\" :\r\n                if (localstepData[index].speech == 0) {\r\n                    localstepData[index].speech  = 1;\r\n                } else {\r\n                    localstepData[index].speech  = 0;\r\n                }\r\n                break;\r\n            case \"updateAuto\" :\r\n                if (localstepData[index].auto == 0) {\r\n                    localstepData[index].auto  = 1;\r\n                } else {\r\n                    localstepData[index].auto  = 0;\r\n                }\r\n                break;\r\n            \r\n            case \"setImageSrc\":\r\n                localstepData[index].image = value;\r\n                break;\r\n            case \"updateIntroVoice\" :\r\n                localstepData[index].voice = parseInt(value);\r\n                break;\r\n            case \"setStepStatement\" :\r\n                // For remove the html tag to be seen in smart chat scene in chat box\r\n                if (sceneName == \"Smart Chat\") {\r\n                    if (value) {\r\n                        value = value.toString().replace(/<[^>]*>/gm, '');\r\n                    }\r\n                }\r\n                localstepData[index].message = value;\r\n                break;\r\n            case \"setStepBTN\" :\r\n                localstepData[index].btn = value;\r\n                break;\r\n            case \"setStepanim\" :\r\n                localstepData[index].anim = value;\r\n                break;\r\n            \r\n            case \"setStepCondition\" :\r\n                localstepData[index].condition = value;\r\n                break;\r\n            case \"setGuids\" :\r\n                localstepData[index].guids = value;\r\n                break;\r\n            case \"setChoiceText\" :\r\n                localstepData[parentIndex].choices[index].text = value;\r\n                break;\r\n            case \"setChoiceFeedback\" :\r\n                localstepData[parentIndex].choices[index].feedback = value;\r\n                break;\r\n            case \"setChoiceCategoryValue\" :\r\n                localstepData[parentIndex].choices[index].choicesScore = parseInt(event.target.value);\r\n                break;\r\n            case \"setChoiceStepIndex\" :\r\n                if (event.target.value < 0 || event.target.value > localstepData.length) {\r\n                    localstepData[parentIndex].choices[index].stepIndex = parentIndex;\r\n                } else {\r\n                    localstepData[parentIndex].choices[index].stepIndex = event.target.value;\r\n                }\r\n                break;\r\n            case \"setChoiceCorrect\" :\r\n                localstepData[parentIndex].choices[index].correct = parseInt(value);\r\n                break;\r\n            case \"setChoiceCorrectR\":\r\n                for (let dd = 0; dd < localstepData[parentIndex].choices.length; dd++) {\r\n                    if (index == dd) {\r\n                        localstepData[parentIndex].choices[dd].correct = Number(value);\t\r\n                    } else {\r\n                        localstepData[parentIndex].choices[dd].correct = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case \"setChoiceCategory\" :\r\n                localstepData[parentIndex].choices[index].choicesCategory = Number(value);\r\n                break;\r\n            case \"setStepCategory\" :\r\n                localstepData[index].choicesCategory = parseInt(value);\r\n                break;\r\n            case \"setStepCategoryValue\" :\r\n                localstepData[index].choicesScore = event.target.value;\r\n                break;\r\n            case \"addCategory\" :\r\n                localscoreCategoryData[localscoreCategoryData.length] = {\r\n                    'id'    : localscoreCategoryData.length,\r\n                    'name'  : \"\",\r\n                    'value' : \"0\",\r\n                };\r\n                break;\r\n            case \"deleteCategory\" :\r\n                auth_store.update( (item) => {\r\n                    item.open = false;\r\n                    return item;\r\n                });\r\n\r\n                if (localscoreCategoryData.length > 1) {\r\n                    localscoreCategoryData.splice(index,1);\r\n                } else {\r\n                    swal(\"You cannot delete default node\");\r\n                }\r\n                break;\r\n            case \"addtab\" :\r\n                localtabData[localtabData.length] = {\r\n                    'title' : \"\",\r\n                    'name'  : \"\",\r\n                    'guid'  : \"\",\r\n                    'dialog': \"\",\r\n                };\r\n                break;\r\n            case \"setTabTitle\" :\r\n                localtabData[index].title = value;\r\n                break;\r\n            case \"setTabDialog\" :\r\n                localtabData[index].dialog = value;\r\n                break;\r\n            case \"setTabName\" :\r\n                localtabData[index].name = value;\r\n                localtabData[index].focus = state.sceneData.scene[defaultScene].anim[value].name;\r\n                break;\r\n            case \"setTabGuid\" :\r\n                localtabData[index].guid = value;\r\n                break;\r\n            case \"deleteTab\" :\r\n                localtabData.splice(index, 1);\r\n                break;\r\n            case \"setScene\" :\r\n                defaultScene = value;\r\n                sceneName    = state.sceneData.scene[defaultScene].title;\r\n                sceneJson    = state.sceneData.scene[defaultScene].json;\r\n                isSmartChat    = (state.sceneData.scene[defaultScene].is_smartchat == \"1\") ? \"1\" : \"0\";\r\n                let sceneCharacters = [];\r\n                if (state.sceneData.scene[defaultScene].assets.length < 2) {\r\n                    AH.select('.insightTab4').style.display = 'none';\r\n                    AH.select('.insightTab5').style.display = 'none';\r\n                } else {\r\n                    AH.select('.insightTab4').style.display = 'block';\r\n                }\r\n                for (let i = 0; i < state.sceneData.scene[defaultScene].characters.length; i++) {\r\n                    sceneCharacters = [\r\n                        ...sceneCharacters, {\r\n                        id     : i,\r\n                        name   : state.sceneData.scene[defaultScene].characters[i].name,\r\n                        visible: state.sceneData.scene[defaultScene].characters[i].visible\r\n                    }];\r\n                }\r\n                let sceneAssets = [];\r\n                for (let i = 0 ; i < state.sceneData.scene[defaultScene].assets.length; i++) {\r\n                    sceneAssets = [\r\n                        ...sceneAssets, {\r\n                        name    : state.sceneData.scene[defaultScene].assets[i].asset,\r\n                        visible : state.sceneData.scene[defaultScene].assets[i].visible,\r\n                        anim    : state.sceneData.scene[defaultScene].assets[i].anim,\r\n                        tooltip : state.sceneData.scene[defaultScene].assets[i].tooltip,\r\n                    }];\r\n                }\r\n                localcharacterData     = sceneCharacters;\r\n                localcharacterChoice   = sceneCharacters;\r\n                localassetsData \t   = sceneAssets;\r\n                localscoreCategoryData = [];\r\n                localscoreCategoryData[localscoreCategoryData.length] = {\r\n                    'id'    : localscoreCategoryData.length,\r\n                    'name'  : \"Mission\",\r\n                    'value' : \"0\",\r\n                };\r\n                localstepData = [];\r\n                if (state.sceneData.scene[defaultScene].anim.length < 1) {\r\n                    AH.select('.insightTab8').style.display = 'none';\r\n                } else {\r\n                    AH.select('.insightTab8').style.display = 'block';\r\n                }\r\n                loadScene(localpage_value);\r\n                break;\r\n            case \"updateMode\" :\r\n                localmodeData = parseInt(value);\r\n                break;\r\n            case \"voiceData2\" :\r\n                for (let indent = 0; indent < localstepData.length; indent++) {\r\n                    if (localstepData[indent].name == index) {\r\n                        localstepData[indent].voice = parseInt(value);\r\n                    }\r\n                }\r\n                state.sceneData.scene[defaultScene].characters[index].voice = parseInt(value);\r\n                break;\r\n            case \"visibleCharacter\" :\r\n                if (localcharacterData[index].visible == 0) {\r\n                    localcharacterData[index].visible = 1;\r\n                } else {\r\n                    localcharacterData[index].visible = 0;\r\n                }\r\n                sceneData = state.sceneData;\r\n                sceneData.scene[defaultScene].characters[index].visible = value;\r\n                auth_store.update( (item) => {\r\n                    item.sceneData = sceneData;\r\n                    return item;\r\n                });\r\n                state.sceneData.scene[defaultScene].characters[index].visible = value;\r\n                break;\r\n            case \"trigerchoiceimage\" :\r\n                AH.select(\"#choiceimg\"+index).click();\r\n                break;\r\n            case \"titleUpdate\":\r\n                resultTitle = value;\r\n                break;\r\n            case \"BGupdate\":\r\n                BGsrc = value;\r\n                AH.select(\"#bgResult\").setAttribute('src',value);\r\n                break;\r\n            case \"beganupdate\":\r\n                began = value;\r\n                /* It not allowed to add more than one word at the name of Begin button */\r\n                /*let begin = value.replace(/[^a-zA-Z]/gi, '');\r\n                began = begin;*/\r\n                AH.select(\"#begin_Button\").value = began;\r\n                break;\r\n            case \"labelupdate\":\r\n                localstepData[index].level_text = event.target.value;\r\n                break;\r\n            case \"updateNote\":\r\n                localstepData[index].important_node = event.target.value;\r\n                break;\r\n        }\r\n\r\n        for (let index = 0; index < localscoreCategoryData.length; index++) {\r\n            localscoreCategoryData[index].value = 0;\r\n        }\r\n\r\n        for (let index = 0; index < localstepData.length; index++) {\r\n            if (localstepData[index].allowChoices == 1 || localstepData[index].allowChoices == 3 ||  localstepData[index].allowChoices == 6) { \r\n                for (let sub_index = 0; sub_index < localstepData[index].choices.length; sub_index++) {\r\n                    let choicesScoreIndex = localstepData[index].choices[sub_index].choicesCategory;\r\n                    localscoreCategoryData[choicesScoreIndex].value += parseInt(localstepData[index].choices[sub_index].choicesScore);\r\n                    localstepData[index].choices[sub_index].id = sub_index;\r\n                }\r\n            } \r\n            if (localstepData[index].allowChoices == 2 || localstepData[index].allowChoices == 4 || localstepData[index].allowChoices ==  5) {\r\n                var scoreIndex = localstepData[index].choicesCategory;\t\r\n                localscoreCategoryData[scoreIndex].value += parseInt(localstepData[index].choicesScore);\t\r\n            }\r\n            localstepData[index].id = index;\r\n        }\r\n\r\n        xml.smxml._sceneName = sceneName;\r\n        xml.smxml._sceneJson = sceneJson;\r\n        xml.smxml._isSmartChat = isSmartChat;\r\n        let insightupdatedData = { 'characters': localcharacterData, 'steps': localstepData, 'scoreCategories': localscoreCategoryData, 'assets': localassetsData, 'link': localtabData, 'mode': localmodeData, 'bgImage': BGsrc, 'detail': resultTitle, 'begin': began, 'insight_intro': tinyMCE.get(\"stem\").getContent({ format: 'text' }).trim()}\r\n        insightupdatedData = JSON.stringify(insightupdatedData, null, 4);\r\n        xml.smxml.__cdata = insightupdatedData;\r\n        xml = JSONToXML(xml);\r\n\t\tif (xml.indexOf('<!--[CDATA') > -1) {\r\n\t\t\txml = xml.replace('<!--[CDATA', '<![CDATA').replace(']]-->', ']]>');\r\n        }\r\n        getChildXml(xml);\r\n    }\r\n\r\n    // for deleting the steps or mission\r\n    function triggerDelete(event, type, index) {\r\n        swal({\r\n            text: l.del_confirmation,\r\n            type: \"warning\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        }).then(function(isConfirm) {\r\n            if (isConfirm) {\r\n                updateXmlValue(event, index, \"\", type);\r\n            }\r\n        });\r\n    }\r\n    \r\n</script>\r\n\r\n<div id=\"authoringArea\">\r\n    <center>\r\n        <div id=\"frame\">\r\n            <iframe id=\"authoringFrame\" title=\"insight_frame\" name=\"authoringFrame\" height=\"580\" width=\"94%\" ></iframe>\r\n        </div>\r\n    </center>\r\n    \r\n    {#if state.tabvalue == 6}\r\n        <div id=\"player_modal\" class=\"modal player_dialog fade\" tabIndex=\"-1\">\r\n            <div class=\"modal-dialog modal-dialog-centered\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-body overflow-y\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-6\">\r\n                                <div class=\"input-group\">\r\n                                    <label class=\"input-group-text\" for=\"module_type\">{l.module}</label>\r\n                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                    <select id=\"module_type\" on:change={handlePlayer} bind:value={state.type} class=\"form-select\">\r\n                                        <option value=\"simulation\">{l.simulation_txt}</option>\r\n                                        <option value=\"playground\">{l.playground}</option>\r\n                                        <option value=\"terminal\">{l.terminal_txt}</option>\r\n                                        <option value=\"lablink\">{l.livelab}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <input type=\"hidden\" name=\"currentItem\" id=\"currentItem\" value={state.currentItem}/>\r\n                            <div class=\"col-12 mb-0 mt-3 px-0 search_list h\">\r\n                                <input class=\"form-control search\" id=\"search\" name=\"search\" type=\"text\" placeholder={l.search_item_txt}/>\r\n                            </div>\r\n                            <div class=\"col-12 px-0 float-start\" style=\"max-height: 300px;\">\r\n                                <table id=\"list_content_tbl\" class=\"h list_content table table-hover table_list table_search w-100\">\r\n                                    <thead class=\"always_show\">\r\n                                        <tr>\r\n                                            <th class=\"text-dark border\">{l.item_id}</th>\r\n                                            <th class=\"text-dark border\">{l.title}</th>\r\n                                            <th class=\"text-dark border\">{l.type}</th>\r\n                                        </tr>\r\n                                    </thead>\r\n                                    <tbody id=\"table_list\"></tbody>\r\n                                </table>\r\n                                <div class=\"alert alert-info col-12 float-start mb-0 mt-4\" id=\"info_data\">{l.select_instruction}</div>\r\n                                <div class=\"alert alert-danger mt-2 col-12 float-start h\" id=\"not_found\">{l.no_record}</div>\r\n                                <center id=\"list_process\" class=\"mt-4 pt-1 h\">\r\n                                    <Loader size={60} msg={'Please Wait'} />\r\n                                </center>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">{l.cancel}</button>\r\n                        <button type=\"button\" class=\"btn btn-secondary\" on:click={getSnippet}>{l.list_content}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    {/if}\r\n\r\n    {#if show_dom}\r\n        <div class=\"insight_tabs\">\r\n            <div class=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Tabs\">\r\n                <div class=\"btn-group col-12 flex-wrap px-0\" role=\"group\" aria-label=\"Insight Tabs\">\r\n                    <button type=\"button\" data-tab=\"0\" class:active = {state.tabvalue == 0} class=\"btn btn-outline-secondary tabbutton insightTab1\">{l.scene}</button>\r\n                    <button type=\"button\" data-tab=\"1\" class:active = {state.tabvalue == 1} class=\"btn btn-outline-secondary tabbutton insightTab2\">{l.intro}</button>\r\n                    <button type=\"button\" data-tab=\"2\" class:active = {state.tabvalue == 2} class=\"btn btn-outline-secondary tabbutton insightTab3\">{l.characters}</button>\r\n                    <button type=\"button\" data-tab=\"3\" class:active = {state.tabvalue == 3} class=\"btn btn-outline-secondary tabbutton insightTab4 h\">{l.assets}</button>\r\n                    <button type=\"button\" data-tab=\"4\" class:active = {state.tabvalue == 4} class=\"btn btn-outline-secondary tabbutton insightTab5 h\">{l.chat_windows}</button>\r\n                    <button type=\"button\" data-tab=\"5\" class:active = {state.tabvalue == 5} class=\"btn btn-outline-secondary tabbutton insightTab6\">{l.mission}</button>\r\n                    <button type=\"button\" data-tab=\"6\" class:active = {state.tabvalue == 6} class=\"btn btn-outline-secondary tabbutton insightTab7\">{l.communication}</button>\r\n                    <button type=\"button\" data-tab=\"7\" class:active = {state.tabvalue == 7} class=\"btn btn-outline-secondary tabbutton insightTab8 h\">{l.animation}</button>\r\n                    <button type=\"button\" data-tab=\"8\" class:active = {state.tabvalue == 8} class=\"btn btn-outline-secondary tabbutton insightTab9\">{l.result}</button>\r\n                </div>\r\n            </div>\r\n\r\n            {#if state.tabvalue == 0}\r\n                <center>\r\n                    <div class=\"img_gridView row col-12\">\r\n                        {#if sceneArr.length > 0}\r\n                            {#each sceneArr as data} \r\n                                <div key={data.key} class=\"col-lg-3 col-sm-4 col scene_image float-start p-2\" class:bg-light={data.type == 0}>\r\n                                    <div class=\"card card-body shadow-sm  p-2 h-100\">\r\n                                        <div class=\"image_view w-100 bg-light d-flex\">\r\n                                            <img \r\n                                                alt = {data.alt}\r\n                                                width=\"200\"\r\n                                                height=\"200\"\r\n                                                src = {curDomain + 'labs/insight/Images/'+data.alt+'/scene.png'}\r\n                                                class=\"w-100 border rounded\"\r\n                                            />\r\n                                        </div>\r\n                                        <div class=\"row pt-2\">\r\n                                            <div class=\"col-sm-12\">\r\n                                                <div class=\"image_dec font18 overflow-hidden w-100 h-100 pt-2 text-center text-truncate\" data-bs-toggle=\"tooltip\" title=\"{data.alt}\">\r\n                                                    <span htmlFor={\"choose_btn\" + (data.key)}>{data.alt}</span>\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"col-sm-12\">\r\n                                                <div class=\"grid_btn pt-2\">\r\n                                                    {#if data.type == 0}\r\n                                                        <button type=\"button\" \r\n                                                            value={data.key}\r\n                                                            class=\"btn choose_btn btn-secondary float-end px-1 px-sm-3\"\r\n                                                            id={\"choose_btn\"+(data.key)} \r\n                                                            on:click = {(event) => {\r\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\r\n                                                            }}\r\n                                                        >\r\n                                                            {l.no_of_token}\r\n                                                        </button>\r\n                                                    {:else if data.type == 1}\r\n                                                        <button type=\"button\" value={data.key}\r\n                                                            class=\"btn choose_btn btn-light float-end text-dark\"\r\n                                                            id={\"choose_btn\"+(data.key)} \r\n                                                            data-bs-toggle=\"tooltip\"\r\n                                                            title={l.click_to_select + (data.alt).toLowerCase() + \".\"}\r\n                                                            on:click = {(event) => {\r\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\r\n                                                            }}\r\n                                                        >\r\n                                                            {l.select}\r\n                                                        </button>\r\n                                                        <button type=\"button\" on:click = {(event) => {updateXmlValue(event, data.key, data.key, \"deleteScene\")}} class=\"delete_button ml-auto\" tabIndex=\"0\" role=\"button\" aria-pressed=\"false\"  style=\"border: none;background: white\">\r\n                                                            <span class=\"icomoon-remove-2 s4\" style=\"color: #000;cursor: pointer;\"></span>\r\n                                                        </button>\r\n                                                    {:else}\r\n                                                        <button type=\"button\" value={data.key}\r\n                                                            class=\"btn choose_btn float-end btn-light text-dark px-1 px-sm-3\"\r\n                                                            id={\"choose_btn\"+(data.key)} \r\n                                                            data-bs-toggle=\"tooltip\"\r\n                                                            title={l.click_to_select + (data.alt).toLowerCase()+\".\"}\r\n                                                            on:click = {(event) => {\r\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\r\n                                                            }}\r\n                                                        >\r\n                                                            {l.select}\r\n                                                        </button>\r\n                                                    {/if}\r\n                                                </div>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            {/each}\r\n                        {/if}\r\n                    </div>\r\n                    <div class=\"col-12 float-start pb-3 px-0 row\">\r\n                        <div class=\"col-12 px-0\">\r\n                            {#if menuLayout.length > 0}\r\n                                {#each menuLayout as data} \r\n                                    <div class=\"pagination m-sm-1 justify-content-center\">\r\n                                        <button tabIndex=\"0\" type=\"button\" class=\"btn btn-outline-dark page-item form-control pagination_btn active col-6 col-sm-3\" id={\"pagination_btn\" + (data.data_active)} value={data.data_active} key={data.data_active} on:click={() => {loadScene(data.end)}}>{l.load_more}</button>\r\n                                    </div>\r\n                                {/each}\r\n                            {/if}\r\n                        </div>\r\n                    </div>\r\n                </center>\r\n            {:else if state.tabvalue == 1}\r\n                <div>\r\n                    <div class=\"row col-md-10 mx-auto my-5\">\r\n                        <div class=\"col-sm-7\">\r\n                            <div class=\"card card-body intro_image_view shadow-sm p-2 min_height_300\">\r\n                                <img \r\n                                    alt = {sceneName}\r\n                                    src = {curDomain + 'labs/insight/Images/' + sceneName +'/scene.png'}\r\n                                    class = \"min_height_300 w-100\"\r\n                                />\r\n                            </div>\t\t\t\t\t\t\t\r\n                        </div>\r\n                        <div class=\"col-sm-5 mt-3 mt-sm-0\">    \r\n                            <div class=\"form-group row mb-0\">\r\n                                <div class=\"input-group mb-3\">\r\n                                    <label for=\"select_Mode\" class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.select_game_mode} htmlFor=\"select_Mode\" on:click=\"{(event) => { updateXmlValue(event,\"select_Mode\",\"\",\"triggerForm\")}}\"> Mode </label>\r\n                                    \r\n                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                    <select \r\n                                        class=\"form-select\" \r\n                                        id=\"select_Mode\"\r\n                                        bind:value={localmodeData}\r\n                                        on:change= {(event) => updateXmlValue(event, sceneTemp, \"\", \"updateMode\")} \r\n                                    >\r\n                                        <option value={0}>{l.test}</option>\r\n                                        <option value={1}>{l.learn}</option>\r\n                                    </select>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"form-group row mb-0\">\r\n                                <div class=\"input-group mb-3\">\r\n                                    <label class=\"input-group-text\" for=\"begin_Button\" data-bs-toggle=\"tooltip\" title={l.start_button}>{l.name_text}</label>\r\n                                    <input \r\n                                        type=\"text\" \r\n                                        class=\"form-control\" \r\n                                        placeholder=\"{l.placeholder_text}\" \r\n                                        id= \"begin_Button\"\r\n                                        bind:value={began}\r\n                                        on:change= {(event) => updateXmlValue(event, 0, \"\", \"beganupdate\")}\r\n                                        aria-describedby=\"buttonHelpBlock\"\r\n                                    />\r\n                                </div>\r\n                                <div class=\"col-md-12\">\r\n                                    <small id=\"buttonHelpBlock\" class=\"form-text text-muted font14 buttonHelpBlock mb-2\">\r\n                                    {l.button_text}</small>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {:else if state.tabvalue == 2}\r\n                <div class=\"col-md-10 mx-auto offset-3 mt-5\">\r\n                    <table class=\"w-100\">\r\n                        <tbody>\r\n                            {#each localcharacterData as data, index}\r\n                                <tr key={index}>\r\n                                    <td align=\"center\" class=\"char_image\">\r\n                                        <div class=\"text-center\">\r\n                                            <img width=\"145px\" height=\"145px\" alt={'Character '+(index + 1)} src={curDomain + 'labs/insight/Images/'+sceneName+'/chracter' + (index + 1) + '.png'}/>\r\n                                        </div>\r\n                                    </td>\r\n                                    <td class=\"p-3\">\r\n                                        <div class=\"form-check form-switch ms-3\">\r\n                                            <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" id={'char_visibl' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"visibleCharacter\")}}  value={data.visible} checked={(data.visible == 0) ? true : false} />\r\n                                            <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.set_chr_visiblity} for={'char_visibl' + (index)}>Visibility</label>\r\n                                        </div>\r\n                                        <div class=\"form-group row mb-2\">\r\n                                            <div class=\"input-group\">\r\n                                                <label for={'character_name'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.add_chr_nm} htmlFor={'character_name'+(index)}> Character Name </label>\r\n                                                \r\n                                                <input \r\n                                                    type=\"text\" \r\n                                                    class=\"form-control\" \r\n                                                    placeholder=\"Character Name\" \r\n                                                    id= {'character_name'+(index)}\r\n                                                    bind:value={data.name}\r\n                                                    disabled={data.visible == 0 ? (false) : (true)}\r\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setCharacter\")}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"form-group row mb-2\">\r\n                                            <div class=\"input-group\">\r\n                                                <label for={'char_voice'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.chr_voice} htmlFor={'char_voice'+(index)}> {l.character_voice} </label>\r\n                                                {#if (state.sceneData.scene[defaultScene].characters[index].voice == 1 || state.sceneData.scene[defaultScene].characters[index].voice == 3 || state.sceneData.scene[defaultScene].characters[index].voice == 7 || state.sceneData.scene[defaultScene].characters[index].voice == 9)}\r\n                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                    <select \r\n                                                        class=\"form-select\" \r\n                                                        id={'char_voice' + index}\r\n                                                        bind:value={state.sceneData.scene[defaultScene].characters[index].voice}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"voiceData2\")} \r\n                                                        disabled={data.visible == 0 ? (false) : (true)}\r\n                                                    >\r\n                                                        <option value={1}>{l.male_one}</option>\r\n                                                        <option value={3}>{l.male_two}</option>\r\n                                                        <option value={7}>{l.male_three}</option>\r\n                                                        <option value={9}>{l.male_four}</option>\r\n                                                    </select>\r\n                                                {:else}\r\n                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                    <select \r\n                                                        class=\"form-select\" \r\n                                                        id={'char_voice' + index}\r\n                                                        bind:value={state.sceneData.scene[defaultScene].characters[index].voice}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"voiceData2\")} \r\n                                                        disabled={data.visible == 0 ? (false) : (true)}\r\n                                                    >\r\n                                                        <option value={0}>{l.female_one}</option>\r\n                                                        <option value={2}>{l.female_two}</option>\r\n                                                        <option value={4}>{l.female_three}</option>\r\n                                                        <option value={6}>{l.female_four}</option>\r\n                                                        <option value={8}>{l.female_five}</option>\r\n                                                        <option value={10}>{l.female_six}</option>\r\n                                                    </select>\r\n                                                {/if}\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            {/each}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            {:else if state.tabvalue == 3} \r\n                <div class=\"col-md-10 mx-auto offset-3 mt-5\">\r\n                    <table class=\"w-100\">\r\n                        <tbody>\r\n                            {#each state.sceneData.scene[defaultScene].assets as data, index}\r\n                                <tr key={index}>\r\n                                    <td align=\"center\" class=\"w-25\">\r\n                                        <div class=\"text-center\">\r\n                                            <img class=\"img-thumbnail\" width=\"145px\" height=\"145px\" alt={'Assets '+(index + 1)} src={curDomain + 'labs/insight/Images/'+sceneName+'/assets' + (index + 1) + '.png'}/>\r\n                                        </div>\r\n                                        <div class=\"text-center mt-2\">\r\n                                            <input type=\"text\" bind:value={data.asset} disabled=\"disabled\" class=\"form-control\" />\r\n                                        </div>\r\n                                    </td>\r\n                                    <td class=\"p-3\">\r\n                                        <div class=\"form-check form-switch ms-3\">\r\n                                            <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" id={'asset_visible' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"assetVisible\")}} value={data.visible} checked={localassetsData[index].visible == 0 ? (false) : (true)}/>\r\n                                            <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.asset_visibility} for={'asset_visible' + (index)}>{l.visibility}</label>\r\n                                        </div>\r\n                                        <div class=\"form-group row mb-2\">\r\n                                            <div class=\"input-group\">\r\n                                                <label for={'asset_anim'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.asset_animation} htmlFor={'asset_anim'+(index)}> {l.animation} </label>\r\n                                                <!-- svelte-ignore a11y-no-onchange -->\r\n                                                <select \r\n                                                    class=\"form-select\" \r\n                                                    id={'asset_anim' + index}\r\n                                                    bind:value={data.anim}\r\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"assetAnim\")} \r\n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\r\n                                                >\r\n                                                    {#each state.sceneData.scene[defaultScene].anim as animation, key}\r\n                                                        <option value={key} key={key}>{animation.name}</option>\r\n                                                    {/each}\r\n                                                </select>\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"form-group row mb-2\">\r\n                                            <div class=\"input-group\">\r\n                                                <label for={'asset_label'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.tooltip_txt} htmlFor={'asset_label'+(index)}> {l.tooltip} </label>\r\n                                                <input \r\n                                                    type=\"text\" \r\n                                                    class=\"form-control\" \r\n                                                    placeholder=\"Tooltip Name\" \r\n                                                    id= {'asset_label' + (index)}\r\n                                                    bind:value={data.tooltip}\r\n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\r\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setTooltip\")}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                        <div class=\"form-group row mb-2\">\r\n                                            <div class=\"input-group\">\r\n                                                <label for={'asset_stepindex'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.tooltip_txt} htmlFor={'asset_stepindex'+(index)}> {l.onclick_step} </label>\r\n                                                <input \r\n                                                    type=\"number\" \r\n                                                    class=\"form-control\"\r\n                                                    id= {'asset_stepindex' + (index)}\r\n                                                    min=\"1\"\r\n                                                    max={localstepData.length} \r\n                                                    bind:value={data.assets_click}\r\n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\r\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setAssetsClick\")}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </td>\r\n                                </tr>\r\n                            {/each}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            {:else if state.tabvalue == 5} \r\n                <div class=\"table_container col-md-10 mx-auto offset-2 mt-4\">\r\n                    {#if localscoreCategoryData.length > 0}\r\n                        <table class=\"w-100 table mb-2\" style=\"border: 1px solid #dee2e6!important;\">\r\n                            <tbody>\r\n                                {#each localscoreCategoryData as data, index}\r\n                                    <tr key={index}>\r\n                                        <td align=\"center\" class=\"tabcol border-0 ps-3\">\r\n                                            <div class=\"row\">\r\n                                                <div class=\"col-5 col-lg-9 col-sm-7\">\r\n                                                    <input\r\n                                                        type=\"text\"\r\n                                                        bind:value={data.name}\r\n                                                        on:change={(event) => { updateXmlValue(event, index,\"\",\"setCategoryName\")}}\r\n                                                        class = \"form-control\"\r\n                                                        id={\"main_mission\" + (index)}\r\n                                                        placeholder={\"Mission #\" + (index + 1) + \" title\"}\r\n                                                    />\r\n                                                </div>\r\n                                                <div class=\"col-7 col-sm-3 px-0\">\r\n                                                    <div class=\"input-group\">\r\n                                                        <label for=\"inputPassword\" data-bs-toggle=\"tooltip\" title={l.points_text} class=\"input-group-text\">{l.points}</label> \r\n                                                        <input type=\"number\" min=\"0\" bind:value={data.value} max=\"100\" class=\"cursor_not_allowed form-control px-0 text-center\" disabled={true}>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td align=\"center\" class=\"border-0 float-end\">\r\n                                            <button type=\"button\" class=\"bg-white delete_button ms-auto text-white border-0 mt-1\" on:click={(event) => { triggerDelete(event, 'deleteCategory', index)}} tabindex=\"0\" role=\"button\" aria-pressed=\"false\">\r\n                                                <span data-bs-toggle=\"tooltip\" title={l.delete}  class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                {/each}      \r\n                            </tbody>\r\n                        </table>\r\n                    {/if}\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <div class=\"add_step float-end mt-2\" on:click={(event) => {updateXmlValue(event, localscoreCategoryData.length ,\"\",\"addCategory\")}}>\r\n                                <button data-bs-toggle=\"tooltip\" title={l.new_mission} class=\"btn rounded-pill img-shadow border shadow-sm\">\r\n                                    <b>{l.add_mission}</b>\r\n                                    <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\r\n                                </button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {:else if state.tabvalue == 6} \r\n                <div>\r\n                    <div id=\"sortable\">\r\n                        {#if localstepData.length > 0}\r\n                            {#each localstepData as data, index}\r\n                                <div class=\"accordion p-2\" id={\"steps_accordian\" + index} >\r\n                                    <div class=\"accordion-item\">\r\n                                        <div class=\"accordion-header allowDraggable\" style=\"cursor: move;\" id={\"steps_heading\" + index}>\r\n                                            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#{\"steps_collapse\" + index}\" aria-expanded=\"false\" aria-controls=\"{\"steps_collapse\" + index}\">\r\n                                                <span>\r\n                                                    <span class=\"icomoon-new-24px-arrow-right-2 position-relative icon_setup s4\"></span>\r\n                                                    {'Step ' + (index + 1)}\r\n                                                </span>\r\n                                            </button>\r\n                                        </div>\r\n                                        <div id=\"{\"steps_collapse\" + index}\" class=\"accordion-collapse collapse\" aria-labelledby={\"steps_heading\" + index} data-bs-parent={\"#steps_accordian\" + index}>\r\n                                            <div class=\"accordion-body\">\r\n                                                <div class=\"row\">\r\n                                                    <input type=\"hidden\" class=\"step_swap\" on:click={(event) => { updateXmlValue(event, index, \"\",\"swapSteps\")}} />\r\n                                                    {#if data.allowChoices != 7}\r\n                                                        <div class=\"col-3 pt-1\">\r\n                                                            <div class=\"row mb-2 mx-0\">\r\n                                                                <label for={'select-character'+(index)} class=\"d-inline font18 px-0 text-truncate\" htmlFor={'select-character'+(index)}>{l.choose_character}</label>\r\n                                                            </div>\r\n                                                            <div class=\"row mx-0\">\r\n                                                                <div class=\"stmnt_img w-100 px-0\">\r\n                                                                    {#if localcharacterData[data.name].visible == 0}\r\n                                                                        <img style=\"width: 100%; height:100%;\" alt={'Character '+ ( data.name + 1) + '' + index} src={curDomain + 'labs/insight/Images/' + sceneName + '/chracter' + (data.name + 1) + '.png'}/>\r\n                                                                    {:else}\r\n                                                                        <img style=\"width: 100%; height:100%;\" alt={'Character '+ (data.name + 1)} src={curDomain + 'labs/insight/Images/character.png'}/>\r\n                                                                    {/if}\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div class=\"row mx-0\">\r\n                                                                {#if localcharacterData[data.name].visible == 0}\r\n                                                                    <div class=\"input-group input-group-sm mt-1 px-0\">\r\n                                                                        <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                        <select \r\n                                                                            class=\"form-select\" \r\n                                                                            id={\"select-character\" + (index)}\r\n                                                                            bind:value={data.name}\r\n                                                                            on:change= {(event) => updateXmlValue(event, index, \"\", \"updateStepChracter\")} \r\n                                                                        >\r\n                                                                            {#each localcharacterData as character, keys}\r\n                                                                                {#if localcharacterData[keys].visible == 0}\r\n                                                                                    <option value={keys}>{character.name}</option>\r\n                                                                                {/if}\r\n                                                                            {/each}\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                {:else}\r\n                                                                    <div class=\"input-group input-group-sm mt-1 px-0\">\r\n                                                                        <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                        <select \r\n                                                                            class=\"form-select\" \r\n                                                                            id={\"select-character\" + (index)}\r\n                                                                            bind:value={data.name}\r\n                                                                            on:change= {(event) => updateXmlValue(event, index, \"\", \"updateStepChracter\")} \r\n                                                                        >\r\n                                                                            {#each localcharacterData as character, keys}\r\n                                                                                {#if localcharacterData[keys].visible == 0}\r\n                                                                                    <option value={keys}>{character.name}</option>\r\n                                                                                {/if}\r\n                                                                            {/each}\r\n                                                                            <option value={data.name} k={data.name}>{l.not_visible}</option>\r\n                                                                        </select>\r\n                                                                    </div>\r\n                                                                {/if}\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    {/if}\r\n                                                    <div class={(data.allowChoices != 7) ? \"col-9 pl-0\" :\"col-12\"}>\r\n                                                        <div class=\"row mx-0\">\r\n                                                            {#if data.allowChoices == 7} \r\n                                                                <div class=\"col-lg-2 col-3 form-group pl-0\">\r\n                                                                    <div class=\"float-start w-100\">\r\n                                                                        <div class=\"input-group input-group-sm\">\r\n                                                                            <label for=\"selectVoice\" data-bs-toggle=\"tooltip\" title={l.narrater_voice} class=\"input-group-text\">{l.voice}</label>\r\n                                                                            <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                            <select \r\n                                                                                class=\"form-select\" \r\n                                                                                id=\"selectVoice\"\r\n                                                                                bind:value={data.voice}\r\n                                                                                on:change= {(event) => updateXmlValue(event, index, \"\", \"updateIntroVoice\")} \r\n                                                                            >\r\n                                                                                <option value={0}>{l.female}</option>\r\n                                                                                <option value={1}>{l.male}</option>\r\n                                                                            </select>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            {/if}\r\n                                                \r\n                                                            <div class=\"col-lg-4 col-6 form-group pl-0\">\r\n                                                                <div class=\"input-group input-group-sm\">\r\n                                                                    <label for={\"select-type\" + (index)} data-bs-toggle=\"tooltip\" title={l.type_of_step} class=\"d-md-block d-none input-group-text\">{l.conversion_type}</label>\r\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                    <select \r\n                                                                        class=\"form-select\" \r\n                                                                        id={\"select-type\" + (index)}\r\n                                                                        bind:value={data.allowChoices}\r\n                                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"updateChoiceType\")} \r\n                                                                    >\r\n                                                                        <option value={0}>{l.statement}</option>\r\n                                                                        <option value={1}>{l.choice}</option>\r\n                                                                        <option value={2}>{l.item}</option>\r\n                                                                        <option value={3}>{l.multichoice}</option>\r\n                                                                        <option value={7}>{l.alert}</option>\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            {#if data.allowChoices <= 0}\r\n                                                                <div class=\"col-4 col-lg-3 col-md-4 pr-0\">\r\n                                                                    <div class=\"form-check form-switch mt-1\">\r\n                                                                        <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" data-bs-toggle=\"tooltip\" title={l.autocomplete_txt} id={'selectAuto' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"updateAuto\")}}  bind:value={data.auto} checked={data.auto == 0 ? false : true}/>\r\n                                                                        <label class=\"text-truncate form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.autocomplete_txt} for={\"selectAuto\" + (index)}>{l.autocomplete}</label>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            {/if}\r\n                                                            <div class=\"{ (data.allowChoices > 0) ? 'col-1 ml-auto text-right px-0' : 'col-lg-5 col-2 px-0 text-right'}\">\r\n                                                                <button data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"bg-white delete_button mx-auto border-0 px-0\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" on:click= {(event) => { triggerDelete(event, 'deleteStep', index) } }>\r\n                                                                    <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\r\n                                                                </button>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div class=\"row mx-0\">\r\n                                                            <!-- Uploading in choice and multichoice-->\r\n                                                            {#if data.allowChoices == 1 || data.allowChoices == 3}\r\n                                                                <div class=\"col-4 px-0\">\r\n                                                                    <!-- svelte-ignore a11y-img-redundant-alt -->\r\n                                                                    <img \r\n                                                                        id={\"samplechoice_image\"+ index}\r\n                                                                        alt = \"Choice Question Image\"\r\n                                                                        src = {(data.image == \"\" || data.image == null || data.image == \"undefined\") ? (curDomain + 'labs/insight/Images/bl.jpg') : (data.image)}\r\n                                                                        class=\"img-thumbnail choiceimage rounded-0 w-100\"\r\n                                                                    />\r\n                                                                    <button type=\"button\" class=\"btn btn-dark rounded-0 w-100 text-truncate\"\r\n                                                                        data-bs-toggle=\"tooltip\"\r\n                                                                        title={l.image_size_txt}\r\n                                                                        on:click = {(event) => { updateXmlValue(event , index, \"\", \"trigerchoiceimage\")}}\r\n                                                                    >\r\n                                                                        {l.file_elem}\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                                <input class=\"h\" accept=\"image/png\" type=\"file\" id={\"choiceimg\" + index} on:change={(event) => onChoiceImageSelect(event, index)}/> \r\n                                                                <input\r\n                                                                    type=\"hidden\"\r\n                                                                    bind:value={data.image}\r\n                                                                    id={\"choice_question_image\" + (index)}\r\n                                                                    class=\"form-control w-50 choice_image_upld\"\r\n                                                                    on:click = {(event) => { updateXmlValue(event , index, \"\", \"setImageSrc\")}}\r\n                                                                    placeholder={l.image_link}\r\n                                                                />\r\n                                                            {/if}\r\n                                                            <div class={ data.allowChoices == 7 ? \"float-start col px-0\" : \"border-dark float-start ml-0 pl-2 px-0\"} class:col-8 = {data.allowChoices == 1 || data.allowChoices == 3}>\r\n                                                                <div class={ data.allowChoices == 7 ? \"border-dark\" : \"\" } >\r\n                                                                    <textarea\r\n                                                                        class=\"commu_textarea w-100\"\r\n                                                                        value={removeTags(data.message)}\r\n                                                                        id={\"statementTxt\" + index}\r\n                                                                        on:change={(event) => {updateXmlValue(event, index, \"\", \"setStepStatement\")}}\r\n                                                                        placeholder=\"Conversation text\"\r\n                                                                    ></textarea>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                                <!-- Item id, mission , score -->\r\n                                                {#if (data.allowChoices == 2 || data.allowChoices == 4 || data.allowChoices == 5) }\r\n                                                    <div class=\"col-12 mt-2 px-0\">\r\n                                                        <div class=\"row\">\r\n                                                            <div class=\"col-3\">\r\n                                                                <div class=\"input-group\">\r\n                                                                    <label\r\n                                                                        for={\"itemTxt\" + index}\r\n                                                                        class=\"input-group-text\"\r\n                                                                        data-bs-toggle=\"tooltip\"\r\n                                                                        title={l.guid_value}\r\n                                                                    >\r\n                                                                        {(data.allowChoices == 5 || data.allowChoices == 4) ? 'Value' : 'Item Id'}\r\n                                                                    </label>\r\n                                                                    <input\r\n                                                                        type=\"text\"\r\n                                                                        bind:value={data.guids}\r\n                                                                        on:change={ (event) => { updateXmlValue(event, index, \"\", \"setGuids\") }}\r\n                                                                        placeholder=\"Enter Value\"\r\n                                                                        class=\"form-control\"\r\n                                                                        id={\"itemTxt\" + index}\r\n                                                                    />\r\n                                                                    <div\r\n                                                                        class=\"add_item_button border btn p-1\"\r\n                                                                        tabindex=\"0\"\r\n                                                                        on:click={ (event) => {updateXmlValue( event, index, \"\", \"addItem\")}}\r\n                                                                    >\r\n                                                                        <span class=\"align-middle text-dark pointer icomoon-new-24px-add-circle-1 s4\"></span>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n\r\n                                                            <div class=\"col-3\">\r\n                                                                <div class=\"input-group\">\r\n                                                                    <label\r\n                                                                        for={\"selectMission\" + index}\r\n                                                                        class=\"input-group-text\"\r\n                                                                        data-bs-toggle=\"tooltip\"\r\n                                                                        title={l.mission_name}\r\n                                                                    >\r\n                                                                        {l.mission}\r\n                                                                    </label>\r\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                    <select \r\n                                                                        class=\"form-select\" \r\n                                                                        id={\"selectMission\" + (index)}\r\n                                                                        bind:value={data.choicesCategory}\r\n                                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setStepCategory\")} \r\n                                                                    >\r\n                                                                        {#each localscoreCategoryData as category, keys}\r\n                                                                                <option value={keys}>{category.name}</option>\r\n                                                                        {/each}\r\n                                                                    </select>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div class=\"col-3\">\r\n                                                                <div class=\"input-group\">\r\n                                                                    <label\r\n                                                                        for={\"selectScore\" + index}\r\n                                                                        class=\"input-group-text\"\r\n                                                                        data-bs-toggle=\"tooltip\"\r\n                                                                        title={l.score_value}\r\n                                                                    >\r\n                                                                        {l.score}\r\n                                                                    </label>\r\n                                                                    <input\r\n                                                                        type=\"number\"\r\n                                                                        min=\"0\"\r\n                                                                        max=\"100\"\r\n                                                                        bind:value={data.choicesScore}\r\n                                                                        on:change={ (event) => { updateXmlValue(event, index, \"\", \"setStepCategoryValue\") }}\r\n                                                                        id={\"selectScore\" + index}\r\n                                                                        class=\"form-control\"\r\n                                                                    />\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                {/if}\r\n\r\n                                                <!-- Speech checkbox-->\r\n                                                {#if data.allowChoices <= 0}\r\n                                                    <div class=\"col-12 mt-2 px-0\">\r\n                                                        <div class=\"row\">\r\n                                                            <div class=\"col-3\">\r\n                                                                <div class=\"form-check form-switch ms-3 mt-2\">\r\n                                                                    <input class=\"form-check-input\" tabindex=\"0\" data-bs-toggle=\"tooltip\" title={l.speech_input} type=\"checkbox\" id={'selectSpeech' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"updateSpeech\")}}  bind:value={data.speech} checked={data.speech == 0 ? (false) : (true)}/>\r\n                                                                    <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.speech_txt} for={\"selectSpeech\" + (index)}>{l.speech}</label>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                {/if}\r\n\r\n                                                <!-- Branching Conditions -->\r\n                                                {#if data.allowChoices > 4 && data.allowChoices != 7 && data.allowChoices != 8}\r\n                                                    <div class=\"col-12 mt-2 px-0\">\r\n                                                        <div class=\"form-floating\">\r\n                                                            <input type=\"text\" class=\"form-control\" id=\"branching_condition\" placeholder=\"Enter conditions here\" bind:value={data.condition} on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepCondition\")}}>\r\n                                                            <label for=\"branching_condition\">{l.branch_condition}</label>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                {/if}\r\n\r\n                                                <!-- Button Name & Animation -->\r\n                                                {#if data.allowChoices == 8}\r\n                                                    <div class=\"col-12 mt-2 px-0\">\r\n                                                        <div class=\"row\">\r\n                                                            <div class=\"col-6\">\r\n                                                                <div class=\"form-floating\">\r\n                                                                    <input type=\"text\" class=\"form-control\" id=\"button_name\" placeholder={l.enter_btn_name} bind:value={data.btn} on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepBTN\")}}>\r\n                                                                    <label for=\"button_name\">{l.btn_name}</label>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            <div class=\"col-6\">\r\n                                                                <div class=\"form-floating\">\r\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                    <select \r\n                                                                        class=\"form-select\" \r\n                                                                        id=\"animation\" \r\n                                                                        data-bs-toggle=\"tooltip\"\r\n                                                                        title={l.animation}\r\n                                                                        bind:value = {data.anim}\r\n                                                                        on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepanim\")}}\r\n                                                                    >\r\n                                                                        {#each state.sceneData.scene[defaultScene].anim as animation , key}\r\n                                                                            <option value={key} key={key}>{animation.name}</option>\r\n                                                                        {:else}\r\n                                                                            <option value=\"\" key=\"0\" selected disabled>{l.no_anim_avail}</option>\r\n                                                                        {/each}\r\n                                                                    </select>\r\n                                                                    <label for=\"animation\">{l.animation}</label>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                {/if}\r\n\r\n                                                <!--Choice accordian-->\r\n                                                {#if (data.allowChoices == 1 || data.allowChoices == 3 || data.allowChoices == 6)}\r\n                                                    {#each data.choices as choices, key}\r\n                                                        <div class=\"accordion py-2\" id={\"choices_accordian\" + index + \"_\" + key} >\r\n                                                            <div class=\"accordion-item\">\r\n                                                                <div class=\"accordion-header\" id={\"choices_heading\" + index + \"_\" + key}>\r\n                                                                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#{\"choices_collapse\" + index + \"_\" + key}\" aria-expanded=\"false\" aria-controls=\"{\"choices_collapse\" + index + \"_\" + key}\">\r\n                                                                        {'Choice ' + (key + 1)}\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                                <div id=\"{\"choices_collapse\" + index + \"_\" + key}\" class=\"accordion-collapse collapse\" aria-labelledby={\"choices_heading\" + index + \"_\" + key} data-bs-parent={\"#choices_accordian\" + index + \"_\" + key}>\r\n                                                                    <div class=\"row\">\r\n                                                                        <div class=\"col-12\">\r\n                                                                            <div class=\"row p-2\">\r\n                                                                                <div class=\"col-6\">\r\n                                                                                    <div class=\"form-floating\">\r\n                                                                                        <input type=\"text\" class=\"form-control\" id=\"textUpdate\" data-bs-toggle=\"tooltip\" placeholder={l.enter_choice_text} title={l.choice_text} bind:value={choices.text} on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceText\")}}>\r\n                                                                                        <label for=\"textUpdate\">{l.text}</label>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                                <div class=\"col-6\">\r\n                                                                                    <div class=\"form-floating\">\r\n                                                                                        <input type=\"text\" class=\"form-control\" id={'updatefeedback' + index} placeholder={l.enter_choice_feedback} data-bs-toggle=\"tooltip\" title={l.feedback_text} bind:value={choices.feedback} on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceFeedback\")}}>\r\n                                                                                        <label for={'updatefeedback' + index}>Feedback</label>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"col-12\">\r\n                                                                            <div class=\"row p-2\">\r\n                                                                                <div class=\"col-6\">\r\n                                                                                    <div class=\"form-floating\">\r\n\r\n                                                                                        {#if (localcharacterChoice[data.name].visible == 0)}\r\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                                            <select \r\n                                                                                                class=\"form-select\" \r\n                                                                                                id={'feedback_character' + index} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title= {l.fb_char_name}\r\n                                                                                                bind:value = {choices.feedback_charact}\r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"updateFeedbackChracter\")}}\r\n                                                                                            >\r\n                                                                                                {#each localcharacterChoice as character , character_key}\r\n                                                                                                    {#if character.visible == 0}\r\n                                                                                                        <option value={character_key} key={character_key}>{character.name}</option>\r\n                                                                                                    {/if}\r\n                                                                                                {/each}\r\n                                                                                            </select>\r\n                                                                                        {:else}\r\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                                            <select \r\n                                                                                                class=\"form-select\" \r\n                                                                                                id={'feedback_character' + index} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title= {l.fb_char_name}\r\n                                                                                                bind:value = {data.name}\r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"updateFeedbackChracter\")}}\r\n                                                                                            >\r\n                                                                                                {#each localcharacterChoice as character , character_key}\r\n                                                                                                    {#if character.visible == 0}\r\n                                                                                                        <option value={character_key} key={character_key}>{character.name}</option>\r\n                                                                                                    {/if}\r\n                                                                                                {/each}\r\n                                                                                                <option value={data.name} k={data.name}>{l.not_visible}</option>\r\n                                                                                            </select>\r\n                                                                                        {/if}\r\n                                                                                        <label for={'feedback_character' + index}>{l.fb_char}</label>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                                <div class=\"col-6\">\r\n                                                                                    <div class=\"form-floating\">\r\n                                                                                        <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                                        <select \r\n                                                                                            class=\"form-select\" \r\n                                                                                            id={'selectMission' + key} \r\n                                                                                            data-bs-toggle=\"tooltip\"\r\n                                                                                            title= \"Mission Name\"\r\n                                                                                            bind:value = {choices.choicesCategory}\r\n                                                                                            on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCategory\")}}\r\n                                                                                        >\r\n                                                                                            {#each localscoreCategoryData as category , category_key}\r\n                                                                                                <option value={category_key} key={category_key}>{category.name}</option>\r\n                                                                                            {/each}\r\n                                                                                        </select>\r\n                                                                                        <label for={'selectMission' + key}>{l.mission}</label>\r\n                                                                                    </div>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                        <div class=\"col-12\">\r\n                                                                            <div class=\"row p-2\">\r\n                                                                                {#if data.allowChoices == 3}\r\n                                                                                    <div class=\"col-3\">\r\n                                                                                        <div class=\"form-floating\">\r\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                                            <select \r\n                                                                                                class=\"form-select\" \r\n                                                                                                id={'selectCorrect' + key} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title= {l.select_choics}\r\n                                                                                                bind:value = {choices.correct}\r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCorrect\")}}\r\n                                                                                            >\r\n                                                                                                <option value={0}>{l.false}</option>\r\n                                                                                                <option value={1}>{l.true}</option>\r\n                                                                                                <option value={2}>{l.none}</option>\r\n                                                                                            </select>\r\n                                                                                            <label for={'selectCorrect' + key}>{l.correct}</label>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                    <div class=\"col-3\">\r\n                                                                                        <div class=\"form-floating\">\r\n                                                                                            <input type=\"number\" \r\n                                                                                                class=\"form-control\" \r\n                                                                                                id={'selectScoreChoice' + key} \r\n                                                                                                min=\"0\" \r\n                                                                                                max=\"100\" \r\n                                                                                                placeholder={l.score_value} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title={l.score_value} \r\n                                                                                                bind:value={choices.choicesScore} \r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceCategoryValue\")}}\r\n                                                                                            >\r\n                                                                                            <label for={'selectScoreChoice' + key}>Score</label>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                {:else if data.allowChoices == 1}\r\n                                                                                    <div class=\"col-3\">\r\n                                                                                        <div class=\"form-floating\">\r\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\r\n                                                                                            <select \r\n                                                                                                class=\"form-select\" \r\n                                                                                                id={'selectCorrect' + key} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title= \"Select true or false to indicate if the choice correct or not.\"\r\n                                                                                                bind:value = {choices.correct}\r\n                                                                                                defaultValue={choices.correct}\r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCorrectR\")}}\r\n                                                                                            >\r\n                                                                                                <option value={0}>{l.false}</option>\r\n                                                                                                <option value={1}>{l.true}</option>\r\n                                                                                            </select>\r\n                                                                                            <label for={'selectCorrect' + key}>{l.correct}</label>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                    <div class=\"col-3\">\r\n                                                                                        <div class=\"form-floating\">\r\n                                                                                            <input type=\"number\" \r\n                                                                                                class=\"form-control\" \r\n                                                                                                id={'selectScoreChoice' + key} \r\n                                                                                                min=\"0\" \r\n                                                                                                max=\"100\" \r\n                                                                                                placeholder={l.score_value} \r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title={l.score_value} \r\n                                                                                                bind:value={choices.choicesScore} \r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceCategoryValue\")}}\r\n                                                                                            >\r\n                                                                                            <label for={'selectScoreChoice' + key}>{l.score}</label>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                    <div class=\"col-3\">\r\n                                                                                        <div class=\"form-floating\">\r\n                                                                                            <input type=\"number\" \r\n                                                                                                class=\"form-control\" \r\n                                                                                                id={'selectChoicestepIndex' + key} \r\n                                                                                                min=\"1\" \r\n                                                                                                max={localstepData.length}\r\n                                                                                                data-bs-toggle=\"tooltip\"\r\n                                                                                                title={l.step_index_txt}\r\n                                                                                                bind:value={choices.stepIndex} \r\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceStepIndex\")}}\r\n                                                                                            >\r\n                                                                                            <label for={'selectChoicestepIndex' + key}>{l.step_index}</label>\r\n                                                                                        </div>\r\n                                                                                    </div>\r\n                                                                                {/if}\r\n                                                                                <div class=\"{(data.allowChoices == 1) ? 'col-3' : 'col-6'}\">\r\n                                                                                    <button data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"float-end bg-white delete_button ms-auto text-white border-0 mt-1\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" on:click={(event) => {updateXmlValue(event, key, index, \"deleteChoice\")}}>\r\n                                                                                        <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\r\n                                                                                    </button>\r\n                                                                                </div>\r\n                                                                            </div>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    {/each}\r\n\r\n                                                    <!--Add Choices buttons-->\r\n                                                    <div class=\"col-12\">\r\n                                                        <div class=\"row\">\r\n                                                            <div class=\"col-12 px-0 mt-2\">\r\n                                                                <div class=\"add_choices float-start\" on:click={(event) => {updateXmlValue(event, index ,\"\",\"addChoice\")}}>\r\n                                                                    <button data-bs-toggle=\"tooltip\" title={l.new_mission} class=\"btn rounded-pill img-shadow border shadow-sm\">\r\n                                                                        <b>{l.add_choice}</b>\r\n                                                                        <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                {/if}\r\n\r\n                                                <!--Level and insert note-->\r\n                                                <div class=\"col-12 mt-3 px-0\">\r\n                                                    <div class=\"row\">\r\n                                                        <div class=\"col-6\">\r\n                                                            <div class=\"input-group\">\r\n                                                                <label class=\"input-group-text\" for={\"level_text\" + index}>{l.level_text}</label>\r\n                                                                <input type=\"text\" class=\"form-control\" id={\"level_text\" + index} placeholder={l.level_placeholder} bind:value={data.level_text} on:change = {(event) => {updateXmlValue(event, index , \"\", \"labelupdate\")}}>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                        <div class=\"col-6\">\r\n                                                            <div class=\"input-group\">\r\n                                                                <label class=\"input-group-text\" for={\"important_note\" + index}>{l.insert_note}</label>\r\n                                                                <input type=\"text\" class=\"form-control\" id={\"important_note\" + index} placeholder={l.note_placeholder} bind:value={data.important_node} on:change = {(event) => {updateXmlValue(event, index , \"\", \"updateNote\")}}>\r\n                                                            </div>\r\n                                                        </div>\r\n                                                    </div>\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            {/each}\r\n                        {/if}\r\n                    </div>\r\n                    <div class=\"add_step text-center mt-3\">\r\n                        <button data-bs-toggle=\"tooltip\" title={l.new_step} on:click={(event) => {updateXmlValue(event, localstepData.length ,\"\",\"addStep\")}} class=\"btn  rounded-pill img-shadow border shadow-sm\">\r\n                            <b>Add Step</b>\r\n                            <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\r\n                        </button>\r\n                    </div>\r\n                </div>\r\n            {:else if state.tabvalue == 7} \r\n                <div class=\"mx-auto py-2 row\">\r\n                    <div class=\"row\">\r\n                        <div class=\"relative text-center mt-2\">\r\n                            <button on:click={(event) => {updateXmlValue(event, sceneTemp, \"\", \"addtab\")}} class=\"btn bg-white rounded-pill img-shadow mb-2 border shadow-sm\">\r\n                                <b>{l.add_anim}</b>\r\n                                <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"table-responsive\">\r\n                        <table class=\"table w-100\">\r\n                            {#if localtabData.length > 0}\r\n                                {#each localtabData as data, index}\r\n                                    <tr key={index}>\r\n                                        <td>\r\n                                            <div class=\"text-center\">({index + 1})</div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div class=\"form-group row mb-2\">\r\n                                                <div class=\"input-group\">\r\n                                                    <label for={'anim_btnName'+(index)} class=\"input-group-text\" title={l.btn_name} data-bs-toggle=\"tooltip\" htmlFor={'anim_btnName'+(index)}> {l.btn_name} </label>\r\n                                                    <input \r\n                                                        type=\"text\" \r\n                                                        class=\"form-control\" \r\n                                                        placeholder={l.enter_btn_name}\r\n                                                        id= {'anim_btnName' + (index)}\r\n                                                        bind:value={data.title}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabTitle\")}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group row mb-2\">\r\n                                                <div class=\"input-group\">\r\n                                                    <label for={'anim_play'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.animation_play} htmlFor={'anim_play'+(index)}> {l.animation_play} </label>\r\n                                                    <!-- svelte-ignore a11y-no-onchange -->\r\n                                                    <select \r\n                                                        class=\"form-select\" \r\n                                                        id={'anim_play' + index}\r\n                                                        bind:value={data.name}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabName\")} \r\n                                                    >\r\n                                                        {#each state.sceneData.scene[defaultScene].anim as animation, key}\r\n                                                            <option value={key} key={key}>{animation.name}</option>\r\n                                                        {/each}\r\n                                                    </select>\r\n                                                </div>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td>\r\n                                            <div class=\"form-group row mb-2\">\r\n                                                <div class=\"input-group\">\r\n                                                    <label for={'anim_dilog'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.dialog} htmlFor={'anim_dilog'+(index)}> {l.dialog} </label>\r\n                                                    <input \r\n                                                        type=\"text\" \r\n                                                        class=\"form-control\" \r\n                                                        placeholder={l.dialog} \r\n                                                        id= {'anim_dilog' + (index)}\r\n                                                        bind:value={data.dialog}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabDialog\")}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                            <div class=\"form-group row mb-2\">\r\n                                                <div class=\"input-group\">\r\n                                                    <label for={'anim_stepindex'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.step_index} htmlFor={'anim_stepindex'+(index)}> {l.step_index} </label>\r\n                                                    <input \r\n                                                        type=\"number\" \r\n                                                        class=\"form-control\" \r\n                                                        id= {'anim_stepindex' + (index)}\r\n                                                        min=\"1\" \r\n                                                        max={localstepData.length}\r\n                                                        bind:value={data.guid}\r\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabGuid\")}\r\n                                                    />\r\n                                                </div>\r\n                                            </div>\r\n                                        </td>\r\n                                        <td align=\"center\">\r\n                                            <button on:click={(event) => {updateXmlValue(event, index, \"\", \"deleteTab\")}} data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"bg-white delete_button ms-auto text-white border-0 mt-1\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\">\r\n                                                <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\r\n                                            </button>\r\n                                        </td>\r\n                                    </tr>\r\n                                {/each}\r\n                            {/if}\r\n                        </table>\r\n                    </div>\r\n                </div>\r\n            {:else if state.tabvalue == 8} \r\n                <div class=\"mx-auto pt-2 row\">\r\n                    <div class=\"row\">\r\n                        <div class=\"col-6 m-auto\">\r\n                            <img \r\n                                alt = {sceneName}\r\n                                id = \"bgResult\"\r\n                                src = {(BGsrc && BGsrc.trim() != '') ? BGsrc : (curDomain + 'labs/insight/Images/bl.jpg')}\r\n                                class=\"img-thumbnail w-100\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row mt-2\">\r\n                        <div class=\"col-4 col-lg-4 col-sm-6 m-auto\">\r\n                            <input class=\"h\" accept=\"image/png\" type=\"file\" id={\"choiceimg\" + sceneTemp} on:change={(e) => onChoiceImageSelect(e, sceneTemp)}/> \r\n                            <input\r\n                                type=\"hidden\"\r\n                                bind:value={BGsrc}\r\n                                id=\"result_img\"\r\n                                class=\"choice_image_upld\"\r\n                                on:click = {(event) => { updateXmlValue(event, sceneTemp, \"\", \"BGupdate\")}}\r\n                                placeholder=\"Image Link\"\r\n                                aria-describedby=\"result_screen_img\"\r\n                            />\r\n                            <button type=\"button\" class=\"btn btn-dark w-100\"\r\n                                data-bs-toggle=\"tooltip\"\r\n                                title={l.image_size_txt}\r\n                                on:click= {(event) => { updateXmlValue(event, sceneTemp, \"\", \"trigerchoiceimage\")}}\r\n                            >\r\n                                {l.result_bg}\r\n                            </button>\r\n                            <small id=\"result_screen_img\" class=\"form-text text-center text-muted\">\r\n                                {l.result_info}\r\n                            </small>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row mt-2\">\r\n                        <div class=\"col-6 m-auto\">\r\n                            <div class=\"input-group\">\r\n                                <label class=\"input-group-text\" for='result_title' data-bs-toggle=\"tooltip\" title={l.enter_result_title}>{l.result_title}</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    class = \"form-control\"\r\n                                    placeholder = {l.title}\r\n                                    id='result_title'\r\n                                    bind:value={resultTitle}\r\n                                    on:change={ (event) => {updateXmlValue(event, sceneTemp, \"\", \"titleUpdate\")}}\r\n                                />\r\n                            </div>\r\n                            <small id=\"result_screen_img\" class=\"form-text text-muted text-center font14\">{l.result_btn_info}</small>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            {/if}\r\n        </div>\r\n    {/if}\r\n    \r\n</div>\r\n<style>\r\n    .scene_image {\r\n        width: 32%;\r\n        margin: 5px 0;\r\n        padding: 5px;\r\n    }\r\n\r\n    .choiceimage {\r\n        height: 225px;\r\n    }\r\n\r\n    .image_view {\r\n        height: 70%;\r\n        min-height: 100px;\r\n    }\r\n\r\n    .choose_btn {\r\n        padding: 2px 20px;\r\n    }\r\n\r\n    .stmnt_img {\r\n        height: 228px;\r\n        border: 1px solid;\r\n        margin: 0 auto;\r\n    }\r\n\r\n    .commu_textarea {\r\n        padding: 10px;\r\n        height: 261px;\r\n        max-height: 261px;\r\n        overflow-y: scroll;\r\n        font-size: 14px !important;\r\n    }\r\n\r\n    .min_height_300 {\r\n        min-height: 300px;\r\n    }\r\n\r\n    .icon_setup {\r\n        top: 3px;\r\n        right: 10px;\r\n    }\r\n\r\n    .tabbutton:hover {\r\n        box-shadow: 0 0 0 .2rem rgba(135,135,135,.5)!important;\r\n    }\r\n</style>"],"names":["l","module","simulation_txt","playground","terminal_txt","livelab","item_id","title","type","select_instruction","no_record","cancel","list_content","ctx","currentItem","search_item_txt","insert","append","tabvalue","scene","intro","characters","assets","chat_windows","mission","communication","animation","result","result_bg","result_title","result_info","result_btn_info","trim","image_size_txt","enter_result_title","length","add_anim","new_step","add_mission","new_mission","sceneData","name_text","test","learn","button_text","select_game_mode","start_button","placeholder_text","name","btn_name","animation_play","dialog","step_index","anim","enter_btn_name","delete","guid","visible","choose_character","not_visible","voice","female","male","narrater_voice","autocomplete","autocomplete_txt","auto","file_elem","image","image_link","allowChoices","score","guid_value","mission_name","choicesCategory","score_value","guids","choicesScore","speech","speech_input","speech_txt","branch_condition","condition","btn","no_anim_avail","choices","add_choice","fb_char_name","feedback_charact","false","true","correct","step_index_txt","stepIndex","none","select_choics","text","fb_char","enter_choice_text","choice_text","enter_choice_feedback","feedback_text","feedback","conversion_type","statement","choice","item","multichoice","alert","level_text","insert_note","type_of_step","removeTags","message","level_placeholder","note_placeholder","important_node","points","points_text","value","visibility","tooltip","onclick_step","asset_visibility","asset_animation","tooltip_txt","asset","assets_click","female_one","female_two","female_three","female_four","female_five","female_six","male_one","male_two","male_three","male_four","character_voice","set_chr_visiblity","add_chr_nm","chr_voice","select","key","click_to_select","alt","toLowerCase","no_of_token","load_more","data_active","replace","xml","getChildXml","user","editorState","itemIcons","itemArray","sceneTemp","characterData","localcharacterData","localcharacterChoice","insightData","stepData","isSmartChat","localstepData","scoreCategoryData","localscoreCategoryData","assetData","localassetData","tabData","localtabData","modeData","localmodeData","assetsData","localassetsData","defaultScene","sceneName","sceneJson","qxml","resultTitle","BGsrc","began","localpage_value","state","menuLayout","sceneArr","is_scene_load","show_dom","curDomain","window","location","origin","search","baseUrl","auth_store","writable","activeTab","category","content_type","content_subtype","msg","layout","toggleMode","end","subscribe","onChoiceImageSelect","event","i","files","target","fd","FormData","image_name","Math","floor","random","size","AH","nodeName","setAttribute","ajax","url","data","formData","then","click","innerText","swal","createPagination","parseInt","loadScene","map","background","by","update","updateXmlValue","index","parentIndex","selector","XMLToJSON","getBS","show","splice","buttons","dangerMode","isConfirm","output","JSON","stringify","myData","avaliableCharacter","increment","id","camera","avaliableCharacterChoice","fdbk_char_cam","fdbk_char_voice","Number","focus","cvalue","toString","dd","open","json","is_smartchat","sceneCharacters","style","display","sceneAssets","indent","sub_index","choicesScoreIndex","scoreIndex","smxml","_sceneName","_sceneJson","_isSmartChat","insightupdatedData","steps","scoreCategories","link","mode","bgImage","detail","begin","insight_intro","tinyMCE","get","getContent","format","__cdata","JSONToXML","indexOf","triggerDelete","del_confirmation","beforeUpdate","selectAll","remove","testHtml","element","setCss","innerHTML","activator","submit","contentWindow","responsiveVoice","e","console","log","INSIGHTXML","parse","Object","keys","src","icon","parseXMLAuthoring","onMount","activate","[object Object]","parent","parentElement","classList","add","zIndex","listen","current","input_val","count","table_tr","searchTable","find","hide","document","querySelector","addEventListener","getAttribute","afterUpdate","setContentType","Sortable","handle","evt","oldIndex","newIndex","tempValue","forEach","el","insight_timer","setTimeout","clearTimeout","editor","course","course_code","split","response","table","tooltip_timer","enableBsAll","container","catch","showmsg","unable_to_get","load_course","quiz","terminal","simulation","insight","lablink","video","audio","exhibit","pdf","weblink","download","object3d"],"mappings":"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"}