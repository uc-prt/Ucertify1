{"version":3,"file":"SliderItemPreview-1030e35d.js","sources":["../../../clsSMSlider/SliderItemPreview.svelte"],"sourcesContent":["<!--\n *  File Name   : SliderItemPreview.svelte\n *  Description : Container for Slider preview Module\n *  Author      : Rashmi Kumari\n *  Package     : svelte_items\n *  Last update : 19-Jan-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount } from \"svelte\";\n    import l from '../src/libs/editorLib/language';\n    import ItemHelper from '../helper/ItemHelper.svelte';\n    import { AH, XMLToJSON, onUserAnsChange } from '../helper/HelperAI.svelte';\n    import './css/slider.min.css';\n\n    export let xml;\n    export let uxml;\n    export let showAns;\n    export let isReview;\n    export let editorState;\n    let localSliderData = [], userAnsXML, user_ans_tab = true ;\n    let state = {\n        datauserans: {}\n    };\n    let targetView      = \"none\";\n    let result, onError = \"\";\n    $: {\n\t\tif (isReview) {\n            targetView = \"block\";\n            // display the correct or incorrect according to the answer matched\n            displayAns();\n            setReview();\n\t\t} else {\n            targetView = \"none\";\n        }\n        if (xml != state.xml) {\n            // update the value of state 'xml'\n            state.xml = xml;\n            // updates the value of sliders elements and load the module\n            loadModule(xml);\n\n            // used to contain the json data of previous xml and next xml\n            let oldjsonraw, newjsonraw;\n            // assign the json data of previous xml into variable 'oldjsonraw'\n            oldjsonraw = XMLToJSON(xml == \"\" ? state.xml : xml);\n            // assign the json data of next xml into variable 'newjsonraw'\n            newjsonraw = XMLToJSON(state.xml);\n            // contains the array of json object having key slider of json oldjsonraw\n            let oldjson = jsontoArray(oldjsonraw.smxml.slider);\n            // contains the array of json object having key slider of json newjsonraw\n            let newjson = jsontoArray(newjsonraw.smxml.slider);\n            oldjson.map(function (data, i) {\n                if (newjson[i] != undefined) {\n                    if (data._defaultans != newjson[i]._defaultans) {\n                        /* updates the value of state 'datauserans' having key  'data.key' to the value of slider key at index 'i' of json jsonraw */\n                        state.datauserans[data._key] = newjson[i]._defaultans;\n                    }\n                }\n            })\n            if (uxml) {\n                let uaXML;\n                // converts user answer xml into json object and assign the value to uaXML variable\n                uaXML = XMLToJSON(uxml);\n                if (typeof (uaXML.smans.slider) != \"undefined\") { //@sneh: added this line because map function was generating error in quiz player\n                    localSliderData.map(function (data, i) {\n                        // updates the value of array state datauserans at defined index with the value of slider's key array at index 'i' of json uaXML \n                        state.datauserans[data.sliderid] = uaXML.smans.slider[i]._userAns;\n                    });\n                }\n            }\n        }\n\t}\n    // function loadLibs() {\n    //     let config = {\n    //         preload: true,\n    //         type: 'stylesheet',\n    //         as: 'style'\n    //     }\n    //     AH.createLink(window.itemFolder + 'clsSMSlider/css/slider.min.css', config);\n\t\t\n    // }\n    onMount(() => {\n        //loadLibs();\n        loadModule(xml);\n        // used for native team\n        if (window.inNative) {\n            window.getHeight && window.getHeight();\n        }\n    });\n\n    // converts json into array\n    function jsontoArray(obj) {\n        if (Array.isArray(obj) == false) {\n            // contains json data\n            let temp = obj;\n            // creates array\n            obj = [];\n            // assign the json data at index 0 \n            obj[0] = temp;\n        }\n        // returns an array containing json data\n        return obj;\n    }\n\n    //checked\n    // updates the value of sliders elements and load the module\n    function loadModule(loadXml) {\n        loadXml = XMLToJSON(loadXml);\n        // parses the xml and updates the values of sliders elements\n        parseXMLPreview(loadXml);\n    }\n\n    //checked\n    // parses the xml and updates the values of sliders elements\n    function parseXMLPreview(SLIDERXML) {\n        try {\n            // contains array of slider object\n            let sliderData = SLIDERXML.smxml.slider;\n            // creates an array for storing the data to update the values of sliders elements\n            localSliderData = [];\n            if (sliderData) {\n                if (Array.isArray(sliderData) == false) {\n                    // creates an array\n                    sliderData = [];\n                    // assign the value of slider key at index zero\n                    sliderData[0] = SLIDERXML.smxml.slider;\n                }\n            }\n            for (let i = 0; i < sliderData.length; i++) {\n                localSliderData.push({\n                    // used to set the id of the range element of the slider at index 'i'\n                    sliderid: sliderData[i]._key,\n                    // used to set the value of range element of slider at index 'i' when correct answer button is clicked\n                    anskey: sliderData[i]._anskey,\n                    // used to set the title value of the slider at index 'i'\n                    title_val: sliderData[i]._title,\n                    // used to set the step value of the slider at index 'i'\n                    step_val: sliderData[i]._step,\n                    // used to set the default value of the slider at index 'i'\n                    defaultans: sliderData[i]._defaultans,\n                    // not used any where so can be remove it\n                    defaultans_id: \"defaultans\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    title_id: \"title\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    step_id: \"step\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    sliderans: \"slider\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    remove_item: \"remove_item\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    minid: \"min\" + sliderData[i]._key,\n                    // not used any where so can be remove it\n                    maxid: \"max\" + sliderData[i]._key,\n                    sliderop: \"sliderop\" + sliderData[i]._key,\n                    // used to define the min value of the range element and value of label min of slider at index 'i'\n                    minval: sliderData[i]._minmax.split(\",\")[0],\n                    // used to define the max value of the range element and value of label max of slider at index 'i'\n                    maxval: sliderData[i]._minmax.split(\",\")[1],\n                });\n            }\n        } catch (error) {\n            onError = error;\n            console.log({\n                'error': error,\n                'function': 'parseXMLPreview',\n                'File': 'SliderItemPreview.js'\n            });\n        }\n    }\n\n    // display the correct or incorrect according to the answer matched\n    function displayAns() {\n        // contains correct or incorrect according to the return value of checkAns method\n        let ans = checkAns();\n        if (editorState) {\n            // shows the answer correct or incorrect according to the value of variable 'ans'\n            showAns(ans);\n        }\n    }\n\n    /* defines the user answer xml, checks the answer and returns correct or incorrect according to the match of result */\n    function checkAns() {\n        // used for switch on next question in prepengine if current question is attempted\n        ISSPECIALMODULEUSERXMLCHANGE = 1;\n        // used to create user answer xml\n        userAnsXML = \"<smans type='30'>\";\n        result = true;\n        localSliderData.map(function (data) {\n            state.datauserans[data.sliderid] = (state.datauserans[data.sliderid]) === undefined ? data.defaultans : state.datauserans[data.sliderid];\n            if (parseInt(data.anskey) != parseInt(state.datauserans[data.sliderid])) {\n                result = false;\n            } \n            userAnsXML += \"<slider id='\" + data.sliderid + \"' userAns='\" + state.datauserans[data.sliderid] + \"'></slider>\";\n        });\n        userAnsXML += \"</smans>\";\n        // defined this condition for not update the user answer xml if user has not performed anything\n        // if (localSliderData.length > 0) {\n        //     // defines the user answer xml\n        //     uxml = userAnsXML;\n        // }\n        if(!editorState) {\n            onUserAnsChange({uXml: userAnsXML, ans: result});\n        }\n        if (result) {\n            //AH.select(\"#answer\").checked = true; //@sneh : this was commented that's why in quiz player answer was not recording\n            return \"Correct\";\n        } else {\n            //AH.select(\"#answer\").checked = false; //@sneh : this was commented that's why in quiz player answer was not recording\n            return \"Incorrect\";\n        }\n    }\n\n    // change the value of state datauserans after changing the value of slider range\n    function handleRange() {\n        // updates the value of state datauserans at given key \n        state.datauserans[this.id] = this.value;\n        // updates the value of state datauserans\n        state.datauserans = state.datauserans;\n        // display the correct or incorrect according to the answer matched\n        displayAns();\n    }\n\n    //checked\n    // checks and show the answer, shows correct answer and your answer button and not allow the user to perform the task\n    function setReview() {\n        targetView = \"block\";\n        isReview = true;\n    }\n\n    //checked\n    // allow the user to perform the task and hides correct answer and your answer button\n    function unsetReview() {\n        targetView = \"none\";\n        isReview = false;\n    }\n\n    //checked\n    function handleReviewMode(mode) {\n        if (mode == 'c') {\n            user_ans_tab = false;\n        } else if (mode == 'u') {\n            user_ans_tab = true;\n        }\n    }\n    \n</script>\n<!-- <link onload=\"this.rel='stylesheet'\" rel=\"preload\" as=\"style\" href=\"{window.baseUrlTheme}clsSMSlider/css/slider.min.css\" /> -->\n{#if onError != \"\" }\n    <div class=\"alert alert-danger font-weight-bold\">\n        <span>{l.oops_msg} </span>\n    </div>\n{/if}\n<div class=\"text-center\">\n    <ItemHelper \n        on:setReview = {setReview}\n        on:unsetReview = {unsetReview}\n        reviewMode={isReview}\n        handleReviewClick = {handleReviewMode}\n    />\n    <div id=\"slidermain\">\n        <div class=\"slider_item_container\">\n            {#each localSliderData as data, i}\n                <div key={i} class=\"clearfix slider_container my-3 rounded w-100\">\n                    <div class=\"slider_heading_test text-start text-white bg-primary\" tabindex=\"0\">\n                        <span> {data.title_val}</span>\n                    </div>\n                    <div class=\"col-md-12 select_slider_test w-100 pt-3 px-3 pb-2\">\n                        <input\n                            id={data.sliderid}\n                            type=\"range\"\n                            name=\"sliderrange\"\n                            min={data.minval}\n                            max={data.maxval}\n                            step={data.step_val}\n                            class=\"slideritem\"\n                            value={(targetView == \"block\" && user_ans_tab == false) ? parseInt(data.anskey) : (state.datauserans[data.sliderid] == 0 || state.datauserans[data.sliderid] == undefined) ? parseInt(data.defaultans) : parseInt(state.datauserans[data.sliderid])}\n                            disabled={targetView == 'block' ? true : false}\n                            on:input={handleRange}\n                            tabindex=\"0\"\n                        />\n                        {#if (targetView == \"block\" && user_ans_tab == true)}\n                            {#if data.anskey == state.datauserans[data.sliderid]}\n                                <span class=\"correct_incorrect_icon_fill position-absolute\">\n                                    <span class=\"icomoon-new-24px-checkmark-circle-1 font-weight-bold text-success\"></span>\n                                </span>\n                            {:else}\n                                <span class=\"correct_incorrect_icon_fill position-absolute\">\n                                    <span class=\"icomoon-new-24px-cancel-circle-1 font-weight-bold text-danger\"></span>\n                                </span>\n                            {/if}\n                        {/if}\n                        <div class=\"range_details mt-2 row mx-0\">\n                            <div class=\"minRange float-start col px-0 text-start\" tabindex=\"0\">\n                                <span>{l.min_val}: {data.minval}</span>\n                            </div>\n                            <div class=\"rangevalue col px-0\" tabindex=\"0\">\n                                <div class=\"current_val\">\n                                    {#if !(targetView == \"block\" && user_ans_tab == false)}\n                                        <span>{l.current_val}: {(state.datauserans[data.sliderid] == 0  || state.datauserans[data.sliderid] == undefined) ? (data.defaultans) : (state.datauserans[data.sliderid])} </span>\n                                    {:else}\n                                        <span> {l.correct_val}: {data.anskey} </span>\n                                    {/if}\n                                </div>\n                            </div>\n                            <div class=\"max_val float-end col px-0 text-end\" tabindex=\"0\">\n                                <span> {l.max_val}: {data.maxval} </span>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {/each}\n        </div>\n    </div>\n</div>\n"],"names":["l","oops_msg","ctx","anskey","datauserans","sliderid","correct_val","current_val","undefined","defaultans","title_val","min_val","minval","max_val","maxval","step_val","parseInt","length","jsontoArray","obj","Array","isArray","temp","userAnsXML","result","xml","uxml","showAns","isReview","editorState","localSliderData","user_ans_tab","state","targetView","onError","loadModule","loadXml","SLIDERXML","sliderData","smxml","slider","i","push","_key","_anskey","_title","_step","_defaultans","defaultans_id","title_id","step_id","sliderans","remove_item","minid","maxid","sliderop","_minmax","split","error","console","log","function","File","parseXMLPreview","XMLToJSON","displayAns","ans","ISSPECIALMODULEUSERXMLCHANGE","map","data","onUserAnsChange","uXml","checkAns","setReview","onMount","window","inNative","getHeight","oldjsonraw","newjsonraw","oldjson","newjson","uaXML","smans","_userAns","this","id","value","mode"],"mappings":"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"}