{"version":3,"file":"AudioPreview-169c05df.js","sources":["../../../clsSMAudioRecorder/AudioPreview.svelte"],"sourcesContent":["<!--\n *  File Name   : AudioPreview.svelte\n *  Description : Container for all AudioRecorder Preview Module\n *  Author      : Rashmi Kumari\n *  Package     : pe-items\n *  Last update : 15-Feb-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount, afterUpdate } from \"svelte\";\n    import { XMLToJSON, AH, onUserAnsChange} from '../helper/HelperAI.svelte';\n    import ItemHelper from '../helper/ItemHelper.svelte';\n    import l from '../src/libs/editorLib/language';\n    import \"./css/AudioStyle.min.css\";\n    export let xml;\n    export let uxml;\n    export let showAns;\n    export let isReview;\n    export let editorState;\n\n    let recognition;\n    let synth;\n    let previewResetClicked = 'no';\n    let areaLabelForPreviewStopButton = \"Play Audio\";\n    let areaLabelForPreviewModalContent;\n    let areaLabelForPreviewRecordButton = \"Start Recording\";\n    let previewTimeForRecording = 15;\n    let previewManageTimer;\n    let state = {\n        disabled: true,\n        cdata: '',\n        language: '',\n        correctAns: '',\n        xml: '',\n        status: '',\n        pointerEvents: \"auto\",\n        isReset: true,\n        showTranscript: false,\n        counter: 0,\n    }\n\n    // Called once throughout the programm execution\n    onMount(() => {\n        if (!(window.webkitSpeechRecognition || window.SpeechRecognition)) {\n            // shows the warning message that your browser does not support the speechRecognition\n            AH.alert(l.browser_support_msg);\n        }\n        if (xml != state.xml) {\n            // sets the state xml\n            state.xml = xml;\n            /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\n            resetValue();\n            // load the module according to the value of xml\n            loadModule(xml);\n        }\n    })\n\n    // Called every time when any state gets changed\n    $: {\n        loadModule(xml);\n\t\tif (isReview) {\n            setReview();\n\t\t} else {\n            unsetReview();\n        }\n\t}\n\n    // load the module according to the value of xml\n    function loadModule(loadXml) {\n        // contains json data of xml\n        let newXml = XMLToJSON(loadXml);\n        // parses the xml data and update the xml\n        parseXMLPreview(newXml);\n    }\n\n    // parses the xml data and update the xml\n    function parseXMLPreview(MYXML) {\n        try {\n            // used to set the value of the state language from the value of language key of xml json\n            state.language = MYXML.smxml._language,\n            // used to set the value of the state cdata from the value of cdata key of xml json\n            state.correctAns = MYXML.smxml.__cdata,\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\n            if (uxml) {\n                // parses the user answer xml and update the xml\n                parseUserAns(uxml);\n            }\n        } catch(event) {\n            console.warn({\n                'error': event.message,\n                'function name': 'parseXMLPreview',\n                'File name': 'AudioPreview.svelte'\n            });\n        }\n    }\n\n    // parses the user answer xml and update the xml\n    function parseUserAns(userAns) {\n        // contains json data of user answer xml\n        let MYXML = XMLToJSON(userAns);\n        // used to set the value of the state language from the value of language key of the user answer xml json\n        state.language = MYXML.smans._language;\n        // used to set the value of the state cdata from the value of cdata key of the user answer xml json\n        state.cdata = MYXML.smans.__cdata;\n        // used to set the value of the state status from the value of status key of the user answer xml json\n        state.status = MYXML.smans._status;\n        // used to sets the value of the state disabled to false if the value of 'status' key of the user answer xml json is 'recordingStopped' otherwise 'true'\n        state.disabled = ((MYXML.smans._status == 'recordingStopped') ? false: true);\n        // used to set the value of the state isReset from the value of isReset key of user answer xml json\n        state.isReset = ((MYXML.smans._isReset == 'true') ? true: false);\n        // used to set the value of the state showTranscript from the value of showTranscript key of the user answer xml json\n        state.showTranscript = ((MYXML.smans._showTranscript == 'true') ? true: false);\n    }\n\n    /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\n    function resetValue() {\n        state.disabled = true;\n        state.cdata = '';\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n    }\n\n    // reset the previous recorded data\n    function manageData() {\n        // when reset modalbox open after click on reset button\n        if (previewResetClicked == 'yes') {\n            // reset the previously recorded data\n            resetAudioData();\n            previewResetClicked = 'no';\n        } else {\n            // when reset modalbox open after click on record button\n            state.cdata = '',\n            state.disabled = true,\n            state.status = '',\n            state.pauseRecording = ''\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n            let manage_data_timer = setTimeout(function() {\n                // called for start the recording\n                startRecording();\n                // clear the timeout\n                clearTimeout(manage_data_timer);\n            }, 120);\n        }\n    }\n\n    // disabled the reset and play button and blanks the value of cdata and xml of state\n    function resetAudioData() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        if (state.status == 'recording') {\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n            recognition.stop();\n        }\n        state.cdata = '';\n        state.disabled = true;\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n        // clears the timeout which is started when recording stared\n        clearTimeout(previewManageTimer);\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n        previewCheckState();\n    }\n\n    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n    function previewCheckState() {\n        setTimeout(function() {\n            let uXml = '<smans type=\"43\" name=\"AudioRecorder\" disabled=\"' + state.disabled + '\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><![CDATA[' + state.cdata + ']]></smans>';\n            AH.select(\"#special_module_user_xml\").value = uXml;\n            ISSPECIALMODULEUSERXMLCHANGE = 1;\n            // stores user answer xml data in uaXML variable of window object to access it globally\n            uxml = AH.select(\"#special_module_user_xml\").value;\n            // used for screen reader to read the message when user reached on play button\n            areaLabelForPreviewStopButton = AH.select('#stopButtonTooltip').getAttribute('data-original-title');\n            // used for screen reader to read the message when user reached on record button\n            areaLabelForPreviewRecordButton = AH.select('#recordButtonTooltip').getAttribute('data-original-title');\n            // used for screen reader to read the message when user open the reset modalbox\n            areaLabelForPreviewModalContent = AH.select('#previewDialogBody').innerText;\n            if (state.correctAns.trim() != '') {\n                // check the answer\n                checkAns();\n            }\n        }, 100);\n    }\n\n    // stops capturing incoming audio\n    function stopRecording() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        clearTimeout(previewManageTimer);\n        state.status = 'recordingStopped';\n        state.disabled = false;\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n        previewCheckState();\n        // hides recording gif\n        AH.selectAll('.previewRecordingOn', 'addClass', 'h');\n        // shows the initial state image\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n        recognition.stop();\n    }\n\n    // ends recording after 15 sec\n    function previewManageTime() {\n        previewTimeForRecording = previewTimeForRecording - 1;\n        state.counter = state.counter + 1;\n        previewManageTimer = setTimeout(function() {\n            if (previewTimeForRecording > 0) {\n                // calls again the method previewManageTime for counting the second value\n                previewManageTime();\n            } else {\n                // stops the recording\n                stopRecording();\n            }\n        }, 1000);\n    }\n\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \n    function dictate() {\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n        isSpeechRecognitionSupported();\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\n        recognition.start();\n        // enables reset button\n        AH.select('#preview_container #resetButton').disabled = false;\n        // hides the initial state image of the audio container and play gif\n        AH.selectAll('.previewAudioPlaying, .previewInitialState', 'addClass', 'h');\n        // shows recording gif\n        AH.selectAll('.previewRecordingOn', 'removeClass', 'h');\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\n        recognition.onresult = (event) => {\n            let speechToText = '';\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\n                speechToText += event.results[index_no][0].transcript;\n            }\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\n            state.cdata = speechToText.trim();\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n        }\n    }\n\n    // handles with gif of recording and play and icon of record button\n    function manageStopStatus() {\n        // hides the gif of recording and playing\n        AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\n        // shows the initial state image of the audio container\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\n        // removes the stop icon from recording button and adds start recording icon\n        AH.selectAll('#preview_recordButton span', 'removeClass', 'icomoon-24px-stop');\n        AH.selectAll('#preview_recordButton span', 'addClass', ['icomoon-circle-2', 'text-danger']);\n    }\n\n    // speak the text after defining some properties value and adding event\n    function isSpeechSynthesisSupported() {\n        // Returns a new SpeechSynthesisUtterance object instance\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\n        // array of available voices\n        let voiceForSpeech = synth.getVoices();\n        // sets the voice name according to the value of language state\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\n        // event listener fired when the utterance has finished being spoken.\n        utterThis.addEventListener('end', function() {\n            // hides the gif of recording and play\n            AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\n            // shows the initial state image of the audio container\n            AH.selectAll('.previewInitialState', 'removeClass', 'h');\n            // enables the play button\n            state.disabled = false;\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n            // removes all utterances from the utterance queue.\n            synth.cancel();\n        });\n        for (let index_no = 0; index_no < voiceForSpeech.length; index_no = index_no + 1) {\n            if (voiceForSpeech[index_no].name == voice_name) {\n                //  sets the voice that will be used to speak the utterance.\n                utterThis.voice = voiceForSpeech[index_no];\n                // sets the pitch at which the utterance will be spoken at.\n                utterThis.pitch = 1;\n                // sets the speed at which the utterance will be spoken at.\n                utterThis.rate = 1;\n                // sets the language of the utterance\n                utterThis.lang = state.language;\n                // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n                synth.speak(utterThis);\n                break;\n            }\n        }\n    }\n\n    // starts the recording\n    function startRecording() {\n        switch(state.status) {\n            case 'recording':\n                // stops the recording when stop recording button clicked\n                stopRecording();\n                break;\n            case 'recordingStopped':\n                // for show the reset modalbox when start recording button clicked and recording is done previously\n                AH.getBS('#preview_confirm_modal','Modal').show();\n                // focus on reset modalbox for screen reader purpose\n                AH.select('.modal-body').focus();\n                break;\n            default:\n                dictate();\n                state.status = 'recording',\n                state.isReset = false,\n                // used for count the second after recording start\n                state.counter = 0;\n                // used for automatically end the recording after 15 sec\n                previewTimeForRecording = 15;\n                // ends recording after 15 sec\n                previewManageTime();\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                previewCheckState();\n                // adds the stop recording icon to record button\n                AH.selectAll('#preview_recordButton span', 'removeClass', ['icomoon-circle-2', 'text-danger']);\n                AH.selectAll('#preview_recordButton span', 'addClass', 'icomoon-24px-stop');\n        }\n    }\n\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n    function isSpeechRecognitionSupported() {\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n            // creates new recognition object\n            recognition = new SpeechRecognition();\n            //Controls whether continuous results are returned for each recognition\n            recognition.continuous = true;\n            // returns interim results \n            recognition.interimResults = true;\n            //  sets the language of the current SpeechRecognition\n            recognition.lang = state.language;\n            // used for globally access the recogniton \n            window.recognitionData = recognition;\n            recognition.addEventListener('end', function() {\n                if (!state.isReset) {\n                    // clears the timeout which is started when recording stared\n                    clearTimeout(previewManageTimer);\n                    // shows message that recording ended\n                    AH.alert(l.recording_ended);\n                    // handles with gif of recording and play and icon of record button\n                    manageStopStatus();\n                    // shows the initial state image of the audio container\n                    AH.selectAll('.previewInitialState', 'removeClass', 'h');\n                    state.status = 'recordingStopped';\n                    state.disabled = false;\n                    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                    previewCheckState();\n                }\n            });\n        } else {\n            // shows the message that SpeechRecognition not supported\n\t\t\tAH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    //check that reset button is clicked or not\n    function setData() {\n        previewResetClicked = 'yes';\n    }\n\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\n    function modalResponse() {\n        previewResetClicked = 'no';\n    }\n\n    // called for speak the recorded text\n    function playRecording() {\n        if (window.speechSynthesis) {\n            synth = window.speechSynthesis;\n            if (state.cdata != '') {\n                // hides the initial state image of the audio container and recording gif\n                AH.selectAll('.previewRecordingOn, .previewInitialState', 'addClass', 'h');\n                // shows the play gif\n                AH.selectAll('.previewAudioPlaying', 'removeClass', 'h');\n                state.disabled = true;\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                previewCheckState();\n                // removes all utterances from the utterance queue.\n                //synth.cancel();\n                // speak the recorded text after defining some properties value and adding event\n                isSpeechSynthesisSupported();\n            } else {\n                // hides the play and recording gif\n                AH.selectAll('.previewRecordingOn, .previewAudioPlaying', 'addClass', 'h');\n                // shows the initial state image of the audio container\n                AH.selectAll('.previewInitialState', 'removeClass', 'h');\n                // message for no data recorded\n\t\t\t\tAH.alert(l.no_data_msg);\n            }\n        } else {\n            // message for not supported speechSynthesis\n\t\t\tAH.alert(l.browser_support_msg);\n            return;\n        }\n    } \n\n    // checks the answer\n    function checkAns() {\n        let ans = \"\";\n        if  (state.correctAns.trim() != '') {\n            if (state.correctAns.toLowerCase() == state.cdata.toLowerCase()) {\n                // label of message\n                ans = l.correct;\n                AH.select(\"#answer\").checked = true;\n                state.useransstatus = true;\n            } else {\n                // label of message\n                ans = l.incorrect;\n                AH.select(\"#answer\").checked = false;\n                state.useransstatus = false;\n            }\n            // shows the answer\n            if (editorState) {\n                showAns(ans);\n            } else {\n                onUserAnsChange({uXml: uxml, ans: ans});\n            }\n        } else {\n            // message, no data found for match the answer\n            AH.alert(l.matching_msg);\n            return;\n        }\n    }\n    let answer_status;\n    function setReview() {\n        isReview = true;\n        state.pointerEvents = \"none\";\n        answer_status = true;\n        // check the answer\n        checkAns();\n        if (state.useransstatus == true) {\n            // change the user answer data container's text and border color to #50af50\n            AH.setCss('#preview_data_container', {'color': '#50af50'});\n        } else {\n            // change the user answer data container's text and border color to #c30f0f\n            AH.setCss('#preview_data_container', {'color': '#c30f0f'});\n        }\n        /* hides the answer container in which correct answer will be seen after click on correct answer button */\n        AH.selectAll(AH.parent(AH.selectAll('#preanswer_data_container')), 'addClass', 'h');\n        /* shows the answer container in which user answer will be seen after click on your answer button */\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'removeClass', 'h');\n    }\n\n    /* allows the user to perform the task, shows the recording end notification message, hides correct and your answer button */\n    function unsetReview() {\n        isReview = false;\n        state.pointerEvents = \"auto\";\n        answer_status = false;\n        // hides both container in which your answer and correct answer data will be seen\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'addClass', 'h');\n    }\n\n    function handleReviewMode(mode) {\n        if(mode == 'c') {\n            answer_status = false;\n        } else if (mode == 'u') {\n            answer_status = true;\n        }\n    }\n</script>\n<!-- <link onload=\"this.rel='stylesheet'\" rel=\"preload\" as=\"style\" href={window.baseUrlTheme + \"clsSMAudioRecorder/css/AudioStyle.min.css\"} /> -->\n<div id=\"preview_container\" class=\"container\">\n    <div class=\"row\">\n        <ItemHelper \n            on:setReview = {setReview}\n            on:unsetReview = {unsetReview}\n            reviewMode={isReview}\n            handleReviewClick = {handleReviewMode}\n        />\n        {#if isReview}\n            {#if answer_status != true}\n                <div class=\"col-12 py-3\">\n                    <textarea \n                        id=\"preanswer_data_container\" \n                        name=\"cdata\" \n                        class=\"w-100 form-control border-success typeCorrect\" \n                        rows=\"2\" \n                        value={state.correctAns} \n                        readOnly=\"readonly\" \n                        tabindex=\"0\" \n                        aria-label=\"correct Answer is {state.correctAns}\"></textarea>\n                </div>\n            {:else}\n                <div class=\"col-12 py-3\">\n                    <textarea \n                        id=\"preview_data_container\" \n                        name=\"cdata\" \n                        class=\"w-100 form-control {(state.useransstatus == true) ? 'border-success typeCorrect' : 'border-danger typeIncorrect' }\" \n                        rows=\"2\" \n                        value={state.cdata} \n                        readOnly=\"readonly\" \n                        tabindex=\"0\" \n                        aria-label=\"Your answer is {state.cdata} which is {((state.cdata.toLowerCase().trim() == state.correctAns.toLowerCase().trim()) ? \"Correct\": \"Incorrect\")}\"></textarea>\n                </div>\n            {/if}\n            <div class=\"col-12 pb-3\" tabindex=\"0\" aria-label=\"matching is case insensitive\">\n                <b class=\"noteColor bolder\">{l.note_label}</b>\n                {l.insensitive_message}\n            </div>\n        {:else}\n            <div class=\"col-12 pb-3\">\n                <div class=\"\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\n                    <b class=\"noteColor bolder\">{l.note_label}</b>\n                    {l.recording_warning}\n                </div>\n            </div>\n            {#if state.showTranscript == true}\n                <div class=\"col-12 pb-3\">\n                    <div><label for=\"preview_show_transcript\"><b>{l.spoken_label}</b></label></div>\n                    <textarea id=\"preview_show_transcript\" name=\"preview_show_transcript\" class=\"w-100 form-control\" rows=\"2\" value={state.cdata} readOnly=\"readonly\" tabindex=\"0\" aria-label={l.spoken_label + \" \" + ((state.cdata.trim() != \"\") ? state.cdata.trim(): \"Nothing\")}></textarea>\n                </div>\n            {/if}\n            <div class=\"col-12 col-md-8 offset-md-2\">\n                <div class=\"border rounded shadow-sm\">\n                    <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\"><b>{l.audio_recorder}</b></div>\n                    <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\n                        <span class=\"align-self-center mx-auto previewInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\n                        <div class=\"h previewRecordingOn tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\n                        </div>\n                        <div class=\"h previewAudioPlaying tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\n                        </div>\n                    </div>\n                    <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2 {(state.pointerEvents == 'none') ? 'pointerEventOff': 'pointerEventOn'}\">\n                        <button \n                            type=\"button\" \n                            name=\"preview_recordButton\" \n                            id=\"preview_recordButton\" \n                            on:click={startRecording} \n                            class=\"btn btn-light py-0\" \n                            aria-label=\"Click for {areaLabelForPreviewRecordButton}\"\n                        >\n                            <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")} id=\"recordButtonTooltip\" name=\"recordButtonTooltip\"></span>\n                        </button>\n                        <button \n                            type=\"button\" \n                            name=\"preview_stopButton\" \n                            id=\"preview_stopButton\" \n                            on:click={playRecording} \n                            disabled={state.disabled} \n                            class=\"btn btn-light py-0\" \n                            aria-label=\"Click for {areaLabelForPreviewStopButton}\"\n                        >\n                            <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"Play Audio\" id=\"stopButtonTooltip\" name=\"stopButtonTooltip\"></span>\n                        </button>\n                        <button \n                            type=\"button\" \n                            name=\"resetButton\" \n                            id=\"resetButton\" \n                            class=\"btn btn-light py-0\" \n                            disabled={state.isReset} \n                            on:click={setData} \n                            data-bs-toggle=\"modal\" \n                            data-bs-target=\"#preview_confirm_modal\" \n                            aria-label=\"Click on this button for override the previous recording\"\n                        >\n                            <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" title=\"Reset Data\"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        {/if}\n    </div>\n</div>\n<div class=\"preview_modal_container container\">\n    <div class=\"modal fade\" id=\"preview_confirm_modal\">\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\n                </div>\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForPreviewModalContent} id=\"previewDialogBody\" name=\"previewDialogBody\">\n                    {l.modal_data}\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"preview_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\n                    <button type=\"button\" class=\"preview_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"names":["l"],"mappings":"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"}