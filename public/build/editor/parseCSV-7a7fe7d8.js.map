{"version":3,"file":"parseCSV-7a7fe7d8.js","sources":["../../../clsSMChoiceMatrix/parseCSV.js"],"sourcesContent":["module.exports = {\n    parseCSVFormat: function(data) {\n\t\tlet newJSON = {stem:\"\",term:[],option:[]};\n\t\tlet arr = data.split(\"\\n\");\n\t\tlet newArr = [];\n\t\tarr.map((val)=>{\n\t\t\tif(val.trim()) {\n\t\t\t\tnewArr.push(val);\n\t\t\t}\n\t\t});\n\t\tnewArr.map(function(value,i){\n\t\t\tlet innerValue =  value.replace(/,$/gm,\"\");\n\t\t\tinnerValue = innerValue.split(\",\");\n\t\t\tif (i == 0) {\n\t\t\t\tinnerValue.map((value2,j)=>{\n\t\t\t\t\tif(j == 0) {\n\t\t\t\t\t\tnewJSON.stem = value2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewJSON.option.push({\n\t\t\t\t\t\t\tid:'o'+j,\n\t\t\t\t\t\t\ttext:value2.replace(/^\\s+/g, \"\")\n\t\t\t\t\t\t});0\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t} else {\n\t\t\t\tlet termText = \"\";\n\t\t\t\tlet termCorrect = \"\"\n\t\t\t\tinnerValue.map((termValue,k)=>{\n\t\t\t\t\tif(k == 0) {\n\t\t\t\t\t\ttermText = termValue.replace(/^\\s+/g, \"\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif(termValue.trim() == \"1\") {\n\t\t\t\t\t\t\ttermCorrect = \"o\"+k;\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tnewJSON.term.push({\n\t\t\t\t\tid:'t'+i,\n\t\t\t\t\ttext:termText,\n\t\t\t\t\tcorrect:termCorrect\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\n\t\treturn newJSON;\n    },\n\tCSVToArray: function (strData, strDelimiter) {\n\t\t// Check to see if the delimiter is defined. If not,\n\t\t// then default to comma.\n\t\tstrDelimiter = (strDelimiter || \",\");\n\t\t// Create a regular expression to parse the CSV values.\n\t\tvar objPattern = new RegExp((\n\t\t// Delimiters.\n\t\t\"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\t\t// Quoted fields.\n\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\t\t// Standard fields.\n\t\t\"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"), \"gi\");\n\t\t// Create an array to hold our data. Give the array\n\t\t// a default empty first row.\n\t\tvar arrData = [[]];\n\t\t// Create an array to hold our individual pattern\n\t\t// matching groups.\n\t\tvar arrMatches = null;\n\t\t// Keep looping over the regular expression matches\n\t\t// until we can no longer find a match.\n\t\twhile (arrMatches = objPattern.exec(strData)) {\n\t\t\t// Get the delimiter that was found.\n\t\t\tvar strMatchedDelimiter = arrMatches[1];\n\t\t\t// Check to see if the given delimiter has a length\n\t\t\t// (is not the start of string) and if it matches\n\t\t\t// field delimiter. If id does not, then we know\n\t\t\t// that this delimiter is a row delimiter.\n\t\t\tif (strMatchedDelimiter.length && (strMatchedDelimiter != strDelimiter)) {\n\t\t\t\t// Since we have reached a new row of data,\n\t\t\t\t// add an empty row to our data array.\n\t\t\t\tarrData.push([]);\n\t\t\t}\n\t\t\t// Now that we have our delimiter out of the way,\n\t\t\t// let's check to see which kind of value we\n\t\t\t// captured (quoted or unquoted).\n\t\t\tif (arrMatches[2]) {\n\t\t\t\t// We found a quoted value. When we capture\n\t\t\t\t// this value, unescape any double quotes.\n\t\t\t\tvar strMatchedValue = arrMatches[2].replace(\n\t\t\t\tnew RegExp(\"\\\"\\\"\", \"g\"), \"\\\"\");\n\t\t\t} else {\n\t\t\t\t// We found a non-quoted value.\n\t\t\t\tvar strMatchedValue = arrMatches[3];\n\t\t\t}\n\t\t\t// Now that we have our value string, let's add\n\t\t\t// it to the data array.\n\t\t\tarrData[arrData.length - 1].push(strMatchedValue);\n\t\t}\n\t\t// Return the parsed data.\n\t\treturn (arrData);\n\t},\n\tCSV2JSON: function (csv) {\n\t\tvar array = this.CSVToArray(csv);\n\t\tvar objArray = [];\n\t\tfor (var i = 1; i < array.length; i++) {\n\t\t\tobjArray[i - 1] = {};\n\t\t\tfor (var k = 0; k < array[0].length && k < array[i].length; k++) {\n\t\t\t\tvar key = array[0][k];\n\t\t\t\tobjArray[i - 1][key] = array[i][k]\n\t\t\t}\n\t\t}\n\n\t\tvar json = JSON.stringify(objArray);\n\t\tvar str = json.replace(/},/g, \"},\\r\\n\");\n\n\t\treturn str;\n\t}\n}"],"names":[],"mappings":"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"}