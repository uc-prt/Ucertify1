{"version":3,"file":"AudioRecorder-779c1847.js","sources":["../../../clsSMAudioRecorder/AudioRecorder.svelte"],"sourcesContent":["<!--\n *  File Name   : AudioRecorder.svelte\n *  Description : Container for AudioRecorder Authoring Module\n *  Author      : Rashmi Kumari\n *  Package     : pe-items\n *  Last update : 15-Feb-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount } from \"svelte\";\n    import { XMLToJSON, AH } from '../helper/HelperAI.svelte';\n    import l from '../src/libs/editorLib/language';\n    export let getChildXml;\n    export let xml;\n    let recognition;\n    let synth;\n    let resetClicked = 'no';\n    let areaLabelForStopButton;\n    let areaLabelForModalContent;\n    let areaLabelForRecordButton;\n    let timeForRecording = 15;\n    let manageTimer, voiceForSpeech;\n    let state = {\n        language: '',\n        cdata: '',\n        disabled: true,\n        xml: '',\n        status: '',\n        isReset: true,\n        showTranscript: false,\n        counter: 0\n    } \n\n    onMount(() => {\n        // stores the xml value in xml state\n        state.xml = xml;\n        loadModule(xml);\n    });\n\n    $: {\n        if ((xml != state.xml)) {\n            // stores the xml value in xml state\n\t\t\tstate.xml = xml;\n            loadModule(xml);\n        }\n    }\n    // load the module according to the value of xml\n    function loadModule(loadXml) {\n        // contains json data of xml\n        let newXml = XMLToJSON(loadXml);\n        // parses the xml data and update the xml\n        parseXMLAuthoring(newXml);\n    }\n\n    // parses the xml data and update the xml\n    function parseXMLAuthoring(MYXML) {\n        try {\n            // used to set the value of the state language from the value of language key of xml json\n            state.language = MYXML.smxml._language,\n            // used to set the value of the state cdata from the value of cdata key of xml json\n            state.cdata = MYXML.smxml.__cdata,\n            // used to set the value of the state status from the value of status key of xml json\n            state.status = MYXML.smxml._status,\n            // used to sets the value of the state disabled to false if the value of 'status' key of xml json is 'recordingStopped' otherwise 'true' \n            state.disabled = ((MYXML.smxml._status == 'recordingStopped') ? false: true),\n            // used to set the value of the state isReset from the value of isReset key of xml json\n            state.isReset = ((MYXML.smxml._isReset == 'true') ? true: false),\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n        } catch(event) {\n            console.warn({\n                'error': event.message,\n                'function name': 'parseXMLAuthoring',\n                'File name': 'AudioRecorder.svelte'\n            });\n        } \n    }\n\n    // assign the value of 'showTranscript' state to target elements checked value\n    function handleCheck(event) {\n        state.showTranscript = event.target.checked;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    }\n\n    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n    function checkState() {\n        let state_timer = setTimeout(function() {\n            // creates the xml according to the value of states: status, language, isReset, showTranscript and cdata\n            let xml = '<smxml type=\"43\" name=\"AudioRecorder\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><!--[CDATA[' + state.cdata + ']]--></smxml>';\n            // update the xml\n            updateData(xml);\n            (state.status != '') ? (\n                // disabled the show transcript checkbox and language select dropdown\n                AH.select('.disability_apply, #showTranscript').disabled = 'disabled',\n                // makes label of language select and show transcript to look like disabled\n                AH.selectAll('.transcript_container, .select_label_container label', 'addClass', 'disabledState')\n            ) : (\n                // enables the show transcript checkbox and language select dropdown\n                AH.select('.disability_apply, #showTranscript').disabled = '',\n                // makes label of language select and show transcript to look like active\n                AH.selectAll('.transcript_container, .select_label_container label', 'removeClass', 'disabledState')\n            );\n            // used for screen reader to read the message when user reached on play button\n            areaLabelForStopButton = AH.select('#authoring_container #stopButton span').getAttribute('data-original-title');\n            // used for screen reader to read the message when user reached on record button\n            areaLabelForRecordButton = AH.select('#authoring_container #recordButton span').getAttribute('data-original-title');\n            // used for screen reader to read the message when user open the reset modalbox\n            areaLabelForModalContent = AH.select('#dialogBody').innerText;\n            // clear the previously set timeout\n            clearTimeout(state_timer);\n        }, 100);\n    }\n\n    // updates the xml\n    function updateData(xml) {\n        getChildXml(xml);\n    }\n\n    // used for handle the states value\n    function handleChange(event) {\n        state[event.target.name] = event.target.value;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    }\n\n    // starts the recording\n    function startRecording() {\n        switch(state.status) {\n            case 'recording':\n                // stops the recording when stop recording button clicked\n                stopRecording();\n                break;\n            case 'recordingStopped':\n                // for show the reset modalbox when start recording button clicked and recording is done previously\n                AH.getBS('#authoring_confirm_modal','Modal').show();\n                // focus on reset modalbox for screen reader purpose\n                AH.select('.modal-body').focus();\n                break;\n            default:\n                dictate();\n                state.status = 'recording';\n                state.isReset = false;\n                // used for count the second after recording start\n                state.counter = 0;\n                // used for automatically end the recording after 15 sec\n                timeForRecording = 15;\n                // ends recording after 15 sec\n                manageTime();\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                checkState();\n                // adds the stop recording icon to record button\n                AH.selectAll('#recordButton span', 'removeClass', ['icomoon-circle-2', 's2', 'text-danger']);\n                AH.selectAll('#recordButton span', 'addClass', 'icomoon-24px-stop');\n        }\n    }\n\n    //check that reset button is clicked or not\n    function setData() {\n        resetClicked = 'yes';\n    }\n\n    // called for speak the recorded text\n    function playRecording() {\n        if (window.speechSynthesis) {\n            synth = window.speechSynthesis;\n            if (state.cdata != '') {\n                // hides the initial state image of the audio container and recording gif\n                AH.selectAll('.authRecordingOn, .authInitialState', 'addClass', 'h');\n                // shows the play gif\n                AH.selectAll('.authAudioPlaying', 'removeClass', 'h');\n                state.disabled = true;\n                // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                checkState();\n                // removes all utterances from the utterance queue.\n                //synth.cancel();\n                // speak the recorded text after defining some properties value and adding event\n                isSpeechSynthesisSupported();\n            } else {\n                // hides the play and recording gif\n                AH.selectAll('.authRecordingOn, .authAudioPaused', 'addClass', 'h');\n                // shows the initial state image of the audio container\n                AH.selectAll('.authInitialState', 'removeClass', 'h');\n                // message for no data recorded\n                AH.alert(l.no_data_msg);\n            }\n        } else {\n            // message for not supported speechSynthesis\n            AH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    // speak the text after defining some properties value and adding event\n    function isSpeechSynthesisSupported() {\n        // Returns a new SpeechSynthesisUtterance object instance\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\n        // sets the voice name according to the value of language state\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\n        // event listener fired when the utterance has finished being spoken.\n        utterThis.addEventListener('end', function() {\n            // hides the gif of recording and play\n            AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\n            // shows the initial state image of the audio container\n            AH.selectAll('.authInitialState', 'removeClass', 'h');\n            // enables the play button\n            state.disabled = false;\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n            // removes all utterances from the utterance queue.\n            synth.cancel();\n        });\n        // array of available voices\n        setTimeout(function () {\n            voiceForSpeech = synth.getVoices();\n            for (let index_no = 0; index_no < voiceForSpeech.length; index_no++) {\n                if (voiceForSpeech[index_no].name == voice_name) {\n                    //  sets the voice that will be used to speak the utterance.\n                    utterThis.voice = voiceForSpeech[index_no];\n                    // sets the pitch at which the utterance will be spoken at.\n                    utterThis.pitch = 1;\n                    // sets the speed at which the utterance will be spoken at.\n                    utterThis.rate = 1;\n                    // sets the language of the utterance\n                    utterThis.lang = state.language;\n                    // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n                    synth.speak(utterThis);\n                }\n            }\n        }, 10);\n    }\n\n    // stops capturing incoming audio\n    function stopRecording() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        // clears the timeout which is started when recording stared\n        clearTimeout(manageTimer);\n        // change the value of status state\n        state.status = 'recordingStopped';\n        // change the value of disabled state to false that enables the play button\n        state.disabled = false;\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n        // shows the initial view of the audio container\n        AH.select('.authInitialState', 'removeClass', 'h');\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n        recognition.stop();\n    }\n\n    // handles with gif of recording and play and icon of record button\n    function manageStopStatus() {\n        // hides the gif of recording and playing\n        AH.selectAll('.authAudioPlaying, .authRecordingOn', 'addClass', 'h');\n        // shows the initial state image of the audio container\n        AH.selectAll('.authInitialState', 'removeClass', 'h');\n        // removes the stop icon from recording button and adds start recording icon\n        AH.selectAll('#recordButton span', 'removeClass', 'icomoon-24px-stop');\n        AH.selectAll('#recordButton span', 'addClass', ['icomoon-circle-2', 's2', 'text-danger']);\n    }\n\n    // reset the previous recorded data\n    function manageData() {\n        // when reset modalbox open after click on reset button\n        if (resetClicked == 'yes') {\n            // reset the previously recorded data\n            resetAudioData();\n            resetClicked = 'no';\n        } else {\n            // when reset modalbox open after click on record button\n            state.cdata = '',\n            // disabled the play button\n            state.disabled = true,\n            state.status = '';\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n            let manage_data_timer = setTimeout(function() {\n                // called for start the recording\n                startRecording();\n                // clear the timeout\n                clearTimeout(manage_data_timer);\n            }, 120);\n        }\n    }\n\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n    function isSpeechRecognitionSupported() {\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n            // creates new recognition object\n            recognition = new SpeechRecognition();\n            //Controls whether continuous results are returned for each recognition\n            recognition.continuous = true;\n            // returns interim results \n            recognition.interimResults = true;\n            //  sets the language of the current SpeechRecognition\n            recognition.lang = state.language;\n            // used for globally access the recogniton \n            window.recognitionData = recognition;\n            recognition.addEventListener('end', function() {\n                if (!state.isReset) {\n                    // clears the timeout which is started when recording stared\n                    clearTimeout(manageTimer);\n                    // shows message that recording ended\n                    AH.alert(l.recording_ended);\n                    // handles with gif of recording and play and icon of record button\n                    manageStopStatus();\n                    // shows the initial state image of the audio container\n                    AH.selectAll('.authInitialState', 'removeClass', 'h');\n                    state.status = 'recordingStopped';\n                    // enables the play button\n                    state.disabled = false;\n                    // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n                    checkState();\n                }\n            });\n        } else {\n            // shows the message that SpeechRecognition not supported\n            AH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    // ends recording after 15 sec\n    function manageTime() {\n        timeForRecording = timeForRecording - 1;\n        state.counter = state.counter + 1;\n        manageTimer = setTimeout(function() {\n            if (timeForRecording > 0) {\n                // calls again the method manageTime for counting the second value\n                manageTime();\n            } else {\n                // stops the recording\n                stopRecording();\n            }\n        }, 1000);\n    }\n\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \n    function dictate() {\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n        isSpeechRecognitionSupported();\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\n        recognition.start();\n        // enables reset button\n        AH.select('#resetButton').disabled = '';\n        // hides the initial state image of the audio container and play gif\n        AH.selectAll('.authAudioPlaying, .authInitialState', 'addClass', 'h');\n        // shows recording gif\n        AH.selectAll('.authRecordingOn', 'removeClass', 'h');\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\n        recognition.onresult = (event) => {\n            let speechToText = '';\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\n                speechToText += event.results[index_no][0].transcript;\n            }\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\n            state.cdata = speechToText.trim();\n            // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n            checkState();\n        }\n    }\n\n    // disabled the reset and play button and blanks the value of cdata and xml of state\n    function resetAudioData() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        if (state.status == 'recording') {\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n            recognition.stop();\n        }\n        state.language = '';\n        state.cdata = '';\n        state.disabled = true;\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n        // clears the timeout which is started when recording stared\n        clearTimeout(manageTimer);\n        // used for update the xml and disabled the element for language selection and to show the transcript checkbox\n        checkState();\n    } \n\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\n    function modalResponse() {\n        resetClicked = 'no';\n    } \n\n    // for ada checkbox\n    function adaKeyupCheckbox(e) {\n        if (e.keyCode == 13) {\n            handleCheck(e);\n        }\n    }\n</script>\n<div id=\"authoring_container\" class=\"container\">\n    <div class=\"row\">\n        <div class=\"col-12\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\n            <b class=\"noteColor bolder\">{l.note_label}</b>\n            {l.recording_warning}\n        </div>\n        <div class=\"col-6 py-2 mb-1\">\n            <div class=\"pb-2\"><b>{l.spoken_label}</b></div>\n            <textarea id=\"data_container\" disabled=\"disabled\" name=\"cdata\" class=\"form-control\" rows=\"3\" cols=\"75\" on:change={handleChange} value={state.cdata} aria-label={l.spoken_label + \" \" + ((state.cdata != \"\") ? state.cdata: \"Nothing\")}></textarea>\n        </div>\n        <div class=\"col-6 py-2 mb-1\">\n            <div class=\"select_label_container\">\n                <label for=\"language_select\"><b>{l.select_lang}</b></label>\n            </div>\n            <select id=\"language_select\" name=\"language\" class=\"disability_apply form-control form-control-sm\" on:change={handleChange} on:blur={handleChange} value={state.language} aria-label=\"Select the language for Recording\">\n                <option value=\"en-US\" aria-label=\"English United States\">{l.english_us}</option>\n                <option value=\"de-DE\" aria-label=\"German\">{l.german_lang}</option>\n                <option value=\"fr-FR\" aria-label=\"French\">{l.french_lang}</option>\n                <option value=\"es-ES\" aria-label=\"Spanish\">{l.spanish_lang}</option>\n                <option value=\"hi-IN\" aria-label=\"Hindi\">{l.hindi_lang}</option>\n                <option value=\"ja-JP\" aria-label=\"Japanese\">{l.japanese_lang}</option>\n                <option value=\"ko-KR\" aria-label=\"Korean\">{l.korean_lang}</option>\n                <option value=\"it-IT\" aria-label=\"Italian\">{l.italiano}</option>\n            </select>\n            <div class=\"form-check form-check-inline transcript_container mt-3\">\n                <label for=\"showTranscript\" class=\"custom_checkbox_new float-left mr-1\">\n                    <input \n                        type=\"checkbox\" \n                        on:click={handleCheck}\n                        on:keyup={adaKeyupCheckbox}\n                        name=\"showTranscript\" \n                        id=\"showTranscript\"\n                        tabindex=\"0\"\n                        class=\"form-check-input\"\n                        checked={state.showTranscript}\n                    >\n                    <div class=\"check_mark_custom pt-sm1\"></div>\n                </label>\n                <label for=\"showTranscript\" class=\"form-check-label\">{l.show_transcript}</label>\n            </div>\n        </div>\n        <div class=\"col-12 col-md-8 offset-md-2\">\n            <div class=\"border rounded shadow-sm\">\n                <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\">\n                    <b>{l.audio_recorder}</b>\n                </div>\n                <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\n                    <span class=\"align-self-center mx-auto authInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\n                    <div class=\"h authRecordingOn w-100 h-100 tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\n                    </div>\n                    <div class=\"h authAudioPlaying w-100 h-100 tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\n                        <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\n                    </div>\n                </div>\n                <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2\">\n                    <button \n                        type=\"button\" \n                        name=\"recordButton\" \n                        id=\"recordButton\" \n                        on:click={startRecording} \n                        class=\"btn btn-light py-0\" \n                        aria-label={\"Click for \" + areaLabelForRecordButton}\n                    >\n                        <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")}></span>\n                    </button>\n                    <button \n                        type=\"button\" \n                        name=\"stopButton\" \n                        id=\"stopButton\" \n                        on:click={playRecording} \n                        disabled={state.disabled} \n                        class=\"btn btn-light py-0\" \n                        aria-label={\"Click for \" + areaLabelForStopButton}\n                    >\n                        <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"Play Audio\"></span>\n                    </button>\n                    <button \n                        type=\"button\" \n                        name=\"resetButton\" \n                        id=\"resetButton\" \n                        on:click={setData} \n                        class=\"btn btn-light py-0\" \n                        disabled={state.isReset} \n                        data-bs-toggle=\"modal\" \n                        data-bs-target=\"#authoring_confirm_modal\" \n                        aria-label=\"Click on this button for override the previous recording\"\n                    >\n                        <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" title=\"Reset Data\"></span>\n                    </button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"authoring_modal_container container\">\n    <div class=\"modal fade\" id=\"authoring_confirm_modal\">\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\n                </div>\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForModalContent} id=\"dialogBody\" name=\"dialogBody\">\n                    {l.modal_data}\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"authoring_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\n                    <button type=\"button\" class=\"authoring_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"names":["l"],"mappings":"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"}