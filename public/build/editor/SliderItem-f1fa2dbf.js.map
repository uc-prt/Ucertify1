{"version":3,"file":"SliderItem-f1fa2dbf.js","sources":["../../../clsSMSlider/inputItem.svelte","../../../clsSMSlider/SliderButton.svelte","../../../clsSMSlider/SliderItem.svelte"],"sourcesContent":["<script>\n    import { createEventDispatcher } from 'svelte';\n    export let label, classVal, name, id, value, min, max, key, disabledValue, funcChange, funcBlur, inputText, inputRange, defaultValue, step;\n    const dispatch = createEventDispatcher();\n\n    function preventNonNumericalInput(e) {\n        e = e || window.event;\n        var charCode = (typeof e.which == \"undefined\") ? e.keyCode : e.which;\n        var charStr = String.fromCharCode(charCode);\n\n        if (!charStr.match(/^[0-9]+$/)) {\n            e.preventDefault();\n        }\n    }\n</script>\n{#if inputText == 1}\n    <input\n        id={id}\n        type=\"text\"\n        name=\"slider_title\"\n        class=\"sm_input_text slidertitle mb-3 form-control {classVal}\"\n        value={value}\n        aria-label=\"Title\"\n        placeholder=\"Title\"\n        on:change={(e)=>dispatch('updateXmlValue', {index: key, func: funcChange, value: e})}\n    />\n{:else if inputRange == 1}\n    <input\n        id={id}\n        type=\"range\"\n        name=\"sliderrange\"\n        defaultValue={defaultValue}\n        min={min}\n        max={max}\n        step={step}\n        class=\"slideritem\"\n        aria-label=\"Range\"\n        on:input={(e)=>dispatch('updateXmlValue', {index: key, func: funcChange, value: e})}\n        value={value}\n        disabled={disabledValue}\n    />\n{:else}\n<div class=\"float-start mb-2 pr-2 width100\">\n    <label for={id} class=\"pr-1 mb-0\">{label} </label>\n    <input\n        class=\"sm_input_text sm-num {classVal} mt-0\"\n        type=\"number\"\n        name=\"{name}\"\n        id={id}\n        value={value}\n        on:change={(e)=>dispatch('updateXmlValue', {index: key, func: funcChange, value: e})}\n        min={min}\n        max={max}\n        on:blur={(e)=>dispatch('updateXmlValue', {index: key, func: funcBlur, value: e})}\n        on:keypress=\"{preventNonNumericalInput}\"\n        disabled={disabledValue}\n    />\n</div>\n{/if}","<script>\n    import { createEventDispatcher } from 'svelte';\n    export let classVal, funcClick, buttonName, disabledValue=false, id, modalbtn, key=\"\";\n    const dispatch = createEventDispatcher();\n</script>\n<button\n    type=\"button\"\n    id={id}\n    class=\"{classVal}\"\n    on:click={(e)=>dispatch('updateXmlValue', {index: key, func: funcClick, value: e})}\n    disabled={disabledValue}\n>\n    <span class=\"d-flex align-items-center\">\n        {#if modalbtn != 1}<span class=\"icomoon-new-24px-add-circle-1 s3 me-1\"></span> {/if}{buttonName}\n    </span>\n</button>","<!--\n *  File Name   : SliderItem.svelte\n *  Description : Container for Slider Authoring Module\n *  Author      : Rashmi Kumari\n *  Package     : pe-items\n *  Last update : 19-Jan-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount } from \"svelte\";\n\timport l from '../src/libs/editorLib/language';\n    import InputItem from './inputItem.svelte';\n\timport { writable } from \"svelte/store\";\n\timport { XMLToJSON, AH, JSONToXML } from '../helper/HelperAI.svelte';\n    import SliderButton from \"./SliderButton.svelte\";\n    let sliderData = \"\";\n    let localSliderData = [];\n    let isValidationOK = true;\n    let target_id = '';\n    export let xml;\n    export let getChildXml;\n    let state = {};\n    let authordata = writable({ \n        xml: {},\n        acorrect: {},\n        adefault: {},\n        aanswer: {},\n        astep: {},\n        formkey: ''\n    });\n\n    const unsubscribe = authordata.subscribe((items) => {\n\t\tstate = items;\n    })\n    $: {\n        if (xml!=state.xml) {\n\t\t\tstate.xml = xml\n\t\t\tloadModule(xml); \t\n\t\t}\n    }\n    onMount(() => {\n        state.xml = xml;\n        loadModule(xml);\n    });\n\n    // loads the module and update the xml\n    function loadModule(loadXml) {\n        // contains the json data of xml\n        loadXml = XMLToJSON(loadXml);\n        // parses the xml and updates the sliders elements value\n        parseXMLAuthoring(loadXml);\n    }\n\n    // parses the xml and updates the values of sliders elements\n    function parseXMLAuthoring(SLIDERXML) {\n        // contains array of slider object\n        sliderData = SLIDERXML.smxml.slider;\n        // empties an array firstly for storing the data to update the values of sliders elements\n        localSliderData = [];\n        if (sliderData) {\n            if (Array.isArray(sliderData) == false) {\n                // creates an array\n                sliderData = [];\n                // assign the value of slider key at index zero\n                sliderData[0] = SLIDERXML.smxml.slider;\n            }\n        }\n        for (let i = 0; i < sliderData.length; i++) {\n            localSliderData.push({\n                sliderid: sliderData[i]._key,\n                // used to set the id of the range element at index 'i'\n                sliderid1: \"a_\" + sliderData[i]._key,\n                // used to set the value of range and of the element have class slideroutput  at index 'i'\n                anskey: sliderData[i]._anskey,\n                // used to set the title value of the slider at index 'i'\n                title_val: sliderData[i]._title,\n                // used to set the step value of the slider at index 'i'\n                step_val: sliderData[i]._step,\n                // used to set the default value of the slider at index 'i'\n                defaultans: sliderData[i]._defaultans,\n                // used to set the id of default element of the slider at index 'i'\n                defaultans_id: \"defaultans\" + sliderData[i]._key,\n                // used to set the id of title element of the slider at index 'i'\n                title_id: \"title\" + sliderData[i]._key,\n                // used to set the id of step element of the slider at index 'i'\n                step_id: \"step\" + sliderData[i]._key,\n                // used to set the id and name of the hidden element have class sliderans of the slider at index 'i'\n                sliderans: \"slider\" + sliderData[i]._key,\n                // used to set the id of delete button of the slider at index 'i'\n                remove_item: \"remove_item\" + sliderData[i]._key,\n                // used to set the id of min element of the slider at index 'i'\n                minid: \"min\" + sliderData[i]._key,\n                // used to set the id of max element of the slider at index 'i'\n                maxid: \"max\" + sliderData[i]._key,\n                // used to set the id of correct element of the slider at index 'i'\n                sliderop: \"sliderop\" + sliderData[i]._key,\n                // used to set the min value of the slider at index 'i'\n                minval: sliderData[i]._minmax.split(\",\")[0],\n                // used to set the max value of the slider at index 'i'\n                maxval: sliderData[i]._minmax.split(\",\")[1],\n            });\n            localSliderData= localSliderData;\n        }\n    }\n\n    // updates the xml when the value of any elements changed\n    function updateXmlValue(eve) {    \n        let index = eve.detail.index;\n        let e = eve.detail.value;\n        let selector = eve.detail.func;\n        // contains the target element's value\n        let value = eve.detail.value.target.value;\n        // contains the json data of state xml\n        let xml = XMLToJSON(state.xml);\n        // assign the value of slider key of xml json into variable sliderData\n        sliderData = xml.smxml.slider;\n        if (sliderData) {\n            if (Array.isArray(sliderData) == false) {\n                // creates an array for key slider of xml json\n                xml.smxml.slider = [];\n                // assign the value of index zero of slider key array of xml json\n                xml.smxml.slider[0] = sliderData;\n            }\n        } else if (typeof (sliderData) == 'string') {\n            // makes the value of slider key of xml json to empty\n            xml.smxml.slider = [];\n        }\n\n        switch (selector) {\n            case \"setTitle\":\n                // sets the value of title key at given index of slider key of xml json \n                xml.smxml.slider[index]._title = value;\n                break;\n            case \"setStep\":\n                // sets the value of step key at given index of slider key of xml json \n                xml.smxml.slider[index]._step = value;\n                break;\n            case \"setDefault\":\n                let target_value_current = parseInt(eve.detail.value.target.value);\n                // sets the value of defaultans key at given index of slider key of xml json after converting the target element's value in integer \n                xml.smxml.slider[index]._defaultans = target_value_current;\n                break;\n            case \"setDefaultOnBlur\":\n            case \"setMinOnBlur\":\n            case \"setMaxOnBlur\":\n                isValidationOK = true;\n                target_id = '';\n                // contains the value of target element after converting it into integer\n                let target_value = parseInt(eve.detail.value.target.value);\n                // contains the min value of target element after converting it into integer\n                let target_min = parseInt(eve.detail.value.target.min);\n                // contains the max value of target element after converting it into integer\n                let target_max = parseInt(eve.detail.value.target.max);\n                if ((target_value > target_max) || (target_value < target_min)) {\n                    //eve.detail.value.target.focus();\n                    //AH.select('#'+eve.detail.value.target.id).focus();\n                    // shows the warning message if value exceeds it's max value\n                    AH.alert(\"Value must be greater than or equal to \" + target_min + \" and less than or equal to \" + target_max);\n                    isValidationOK = false;\n                    target_id = eve.detail.value.target.id;\n                } else {\n                    // array containing min and max value at index 0 and 1 of slider at given index\n                    let minmax_data = xml.smxml.slider[index]._minmax.split(',');\n                    // contains min value after parsing it into integer\n                    let min_data = parseInt(minmax_data[0]);\n                    // contains max value after parsing it into integer\n                    let max_data = parseInt(minmax_data[1]);\n                    // contains defaultans value of slider at given index after parsing it into integer\n                    let default_data = parseInt(AH.select('#defaultansID' + index).value);\n                    if ((selector == \"setMinOnBlur\") && (min_data > max_data)) {\n                        // focus the min field\n                        //eve.detail.value.target.focus();\n                        //AH.select('#'+eve.detail.value.target.id).focus();\n                        // warning message if min field value is greater than max field value of slider at given index\n                        AH.alert(\"Minimum value must be less than or equal to the maximum value.\");\n                        isValidationOK = false;\n                        target_id = eve.detail.value.target.id;\n                    } else if ((selector == \"setMaxOnBlur\") && (min_data > max_data)) {\n                        // focus the max field\n                        //eve.detail.value.target.focus();\n                        //AH.select('#'+eve.detail.value.target.id).focus();\n                        // warning message if max field value is less than min field value of slider at given index\n                        AH.alert(\"Max value must be greater than or equal to min value\");\n                        isValidationOK = false;\n                        target_id = eve.detail.value.target.id;\n                    } else if ((min_data <= max_data) && ((default_data > max_data) || (default_data < min_data))) {\n                        // warning message if min and max field value is ok but the value of defaultans field of slider at given index is either greater than th value of max or less than the value of min field\n                        AH.alert(\"Value must be greater than or equal to \" + min_data + \" and less than or equal to \" + max_data);\n                        // focus the defaultans field of slider at given index\n                        AH.select('#defaultansID' + index).focus();\n                        isValidationOK = false;\n                        target_id = 'defaultansID' + index;\n                    }\n                }\n                break;\n            case \"setMin\":\n            case \"setMax\":\n                // contains the value of target element after parsing it into integer\n                value = parseInt(eve.detail.value.target.value);\n                // array containing min and max value at index 0 and 1 of slider at given index\n                let minmax = xml.smxml.slider[index]._minmax.split(',');\n                if (selector == \"setMin\") {\n                    // assign the value of min field at index 0 of array minmax\n                    minmax[0] = value;\n                } else {\n                    // assign the value of max field at index 1 of array minmax\n                    minmax[1] = value;\n                }\n                // joins the minmax array into string separated by comma\n                minmax = minmax.join(',');\n                // assign the value of minmax string into the value of minmax key of slider key at given index of xml json\n                xml.smxml.slider[index]._minmax = minmax;\n                break;\n            case \"delete\":\n                // close the delete confirmation dialog box\n                AH.getBS('#delete_modal','Modal').hide();\n                if (xml.smxml.slider.length > 1) {\n                    // removes given index slider from slider key array of xml json\n                    xml.smxml.slider.splice(index, 1);\n                    // used for reset the id of the Sliders\n                    for (let index_no = 0; index_no < xml.smxml.slider.length; index_no += 1) {\n                        xml.smxml.slider[index_no]._key = 'ID' + index_no;\n                    }\n                } else {\n                    AH.alert(\"You can not delete the default slider\");\n                }\n                break;\n            case \"add\":\n                if (xml.smxml.slider.length < 10) {\n                    // adds the slider at index 'xml.smxml.slider.length' in slider key array of json xml\n                    xml.smxml.slider[parseInt(xml.smxml.slider.length)] = {\n                        '_key': \"ID\" + xml.smxml.slider.length,\n                        '_minmax': \"0,100\",\n                        '_step': \"1\",\n                        '_title': \"\",\n                        '_anskey': \"0\",\n                        '_defaultans': \"0\",\n                    };\n                } else {\n                    AH.alert(\"You can not add more than 10 sliders\");\n                }\n                break;\n            case \"setAnswer\":\n                // sets the value for correct answer of the slider at given index in slider key array of json xml\n                xml.smxml.slider[index]._anskey = value;\n        }\n        // update the xml after converting json xml into xml\n        getChildXml(JSONToXML(xml));\n    }\n</script>\n<div id=\"mainslider\" class=\"border\">\n    <div class=\"slider_item_container\">\n        {#each localSliderData as data, i}\n            <div key={i} class=\"clearfix slider_container shadow-sm slider_container mb-3 rounded\">\n                <div class=\"slider_heading pt-sm text-white font-weight-bold bg-primary\">\n                    <span class=\"slider_title float-start ml-3\"> {i + 1}</span>\n                    <span\n                        class=\"removeitem icomoon-24px-delete-1 height21 float-end {(isValidationOK) ? '' : 'pointer_event_none'}\"\n                        id={data.remove_item}\n                        on:click={() => { (isValidationOK) && (state.formkey= i);AH.getBS('#delete_modal','Modal').show(); } }\n                        tabindex=\"0\"\n                        data-bs-toggle=\"tooltip\"\n                        title=\"Delete item\"\n                    >\n                    </span>\n                </div>\n                <div class=\"col-md-12 select_slider pt-4 px-3 pb-2\">\n                    <InputItem \n                        classVal={((isValidationOK) ? '' : 'cursor_not_allowed')}\n                        id={data.title_id}\n                        value={data.title_val}\n                        key={i}\n                        on:updateXmlValue = {updateXmlValue}\n                        funcChange={'setTitle'}\n                        inputText=1\n                    />\n                    <InputItem \n                        classVal={((isValidationOK) ? '' : 'cursor_not_allowed')}\n                        id={data.sliderid1}\n                        value={data.anskey}\n                        defaultValue={data.defaultans}\n                        key={i}\n                        step={data.step_val}\n                        on:updateXmlValue = {updateXmlValue}\n                        funcChange={'setAnswer'}\n                        min={data.minval}\n                        max={data.maxval}\n                        inputRange=1\n                        disabledValue={((isValidationOK) ? '' : true)}\n                    />\n                    <div class=\"clear-both mt-2\">\n                        <InputItem \n                            label={l.min_val} \n                            classVal=\"slidermin\"\n                            name=\"minval\"\n                            id={data.minid}\n                            value={data.minval}\n                            min={0}\n                            max={999}\n                            key={i}\n                            on:updateXmlValue = {updateXmlValue}\n                            funcChange={'setMin'}\n                            funcBlur={'setMinOnBlur'}\n                            disabledValue = {(((target_id.indexOf('minID') < 0) && (target_id != '')) ? 'disabled' : (((target_id != data.defaultans_id) && (target_id != '')) ? 'disabled' : false))}\n                        />\n                        <InputItem \n                            label={l.max_val} \n                            classVal=\"slidermax\"\n                            name=\"maxval\"\n                            id={data.maxid}\n                            value={data.maxval}\n                            min={data.minval}\n                            max={999}\n                            key={i}\n                            on:updateXmlValue = {updateXmlValue}\n                            funcChange={'setMax'}\n                            funcBlur={'setMaxOnBlur'}\n                            disabledValue = {(((target_id.indexOf('maxID') < 0) && (target_id != '')) ? 'disabled' : (((target_id != data.defaultans_id) && (target_id != '')) ? 'disabled' : false))}\n                        />\n                        <InputItem \n                            label={l.default} \n                            classVal=\"sliderdefaultans\"\n                            name=\"defaultans\"\n                            id={data.defaultans_id}\n                            value={data.defaultans}\n                            min={data.minval}\n                            max={data.maxval}\n                            key={i}\n                            on:updateXmlValue = {updateXmlValue}\n                            funcChange={'setDefault'}\n                            funcBlur={'setDefaultOnBlur'}\n                            disabledValue = {(((target_id.indexOf('defaultansID') < 0) && (target_id != '')) ? 'disabled' : (((target_id != data.defaultans_id) && (target_id != '')) ? 'disabled' : false))}\n                        />\n                        <InputItem \n                            label={l.step} \n                            classVal=\"sliderstep\"\n                            name=\"stepval\"\n                            id={data.step_id}\n                            value={data.step_val}\n                            min=0\n                            max=5\n                            key={i}\n                            on:updateXmlValue = {updateXmlValue}\n                            funcChange={'setStep'}\n                            funcBlur={'setDefaultOnBlur'}\n                            disabledValue = {((isValidationOK) ? false : true)}\n                        />\n                        <div class=\"float-start mb-2 pr-2 width100\">\n                            <label for={data.sliderop} class=\"pr-4 me-3 mb-0\">{l.correct}</label>\n                            <div class=\"slideroutput mt-0 text-center\">\n                                <output\n                                    for={data.sliderid}\n                                    id={data.sliderop}\n                                    class=\"slideropt position-relative\"\n                                >\n                                    {data.anskey}\n                                </output>\n                            </div>\n                        </div>\n                    </div>\n                    <input type=\"hidden\" name={data.sliderans} id={data.sliderans} class=\"sliderans\" />\n                </div>\n            </div>\n        {/each}\n    </div>\n    <div class=\"slider_head_content pb-3 text-start pl-3 pt-0 ms-1\">\n        <div>\n            <SliderButton \n                classVal=\"add-option btn btn-outline-primary btn-sm pr-2\"\n                on:updateXmlValue = {updateXmlValue}\n                funcClick={'add'}\n                disabledValue = {((isValidationOK) ? false : true)}\n                buttonName={l.add_slider}\n            />\n        </div>\n    </div>\n</div>\n<input type=\"hidden\" id=\"special_module_xml\" value={state.xml} />\n\n<div class=\"modal\" id=\"delete_modal\">\n    <div class=\"modal-dialog modal-dialog-centered span4\">\n        <div class=\"modal-content\">\n            <div class=\"modal-header\">\n                <h4 class=\"modal-title\">{l.save_header}</h4>\n                <button type=\"button\" class=\"btn-close\" data-bs-dismiss=\"modal\" aria-hidden=\"true\"></button>\n            </div>\n            <div class=\"modal-body text-center\">\n                <div class=\"row\">\n                    <span class=\"col-md-12\">{l.del_confirmation}</span>\n                </div>\n            </div>\n            <div class=\"modal-footer mt-0\">\n                <button type=\"button\" id=\"cancel_btn\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">{l.no_label}</button>\n                <SliderButton \n                    classVal=\"btn btn-primary\"\n                    id=\"ok_btn\"\n                    key={state.formkey}\n                    on:updateXmlValue = {updateXmlValue}\n                    funcClick={'delete'}\n                    buttonName={l.yes_label}\n                    modalbtn=1\n                />\n            </div>\n        </div>\n    </div>\n</div>"],"names":["ctx","preventNonNumericalInput","e","charCode","window","event","which","keyCode","String","fromCharCode","match","preventDefault","label","classVal","name","id","value","min","max","key","disabledValue","funcChange","funcBlur","inputText","inputRange","defaultValue","step","dispatch","createEventDispatcher","index","func","funcClick","buttonName","modalbtn","l","correct","anskey","title_id","title_val","sliderid1","defaultans","step_val","minval","maxval","min_val","minid","indexOf","defaultans_id","max_val","maxid","default","step_id","remove_item","sliderop","sliderid","sliderans","length","add_slider","formkey","yes_label","save_header","del_confirmation","no_label","xml","sliderData","localSliderData","isValidationOK","target_id","getChildXml","state","writable","acorrect","adefault","aanswer","astep","subscribe","items","loadModule","loadXml","SLIDERXML","smxml","slider","Array","isArray","i","push","_key","_anskey","_title","_step","_defaultans","_minmax","split","parseXMLAuthoring","XMLToJSON","onMount","eve","detail","selector","target","target_value_current","parseInt","target_value","target_min","target_max","AH","alert","minmax_data","min_data","max_data","default_data","select","focus","minmax","join","getBS","hide","splice","index_no","JSONToXML","show"],"mappings":"2TA2CuCA,mCAAvBA,qEAEqBA,8CAEtBA,eACHA,cACGA,eAEFA,gBACAA,iBAGKA,4JADIC,2BAXiBD,qBAAvBA,0CAEqBA,8CAEtBA,oBACHA,qBACGA,sBAEFA,sBACAA,yBAGKA,yFA3BNA,uEAGUA,iBACTA,gBACAA,iBACCA,mEAICA,gBACGA,2EAXNA,iCAGUA,uBACTA,sBACAA,0BACCA,sBAICA,yBACGA,0FAtBNA,iHAGgDA,cAC7CA,iIAJHA,iEAGgDA,sCAC7CA,eAAAA,0EANG,GAAbA,QAWmB,GAAdA,uMArBGC,EAAyBC,OAE1BC,OAA8B,KADlCD,EAAIA,GAAKE,OAAOC,OACSC,MAAwBJ,EAAEK,QAAUL,EAAEI,MACjDE,OAAOC,aAAaN,GAErBO,MAAM,aACfR,EAAES,6CATCC,eAAOC,WAAUC,SAAMC,YAAIC,UAAOC,UAAKC,UAAKC,oBAAKC,iBAAeC,eAAYC,gBAAUC,iBAAWC,mBAAYC,WAAcC,WAChIC,EAAWC,khBAqBD1B,GAAIyB,EAAS,kBAAmBE,MAAOV,EAAKW,KAAMT,EAAYL,MAAOd,IAatEA,GAAIyB,EAAS,kBAAmBE,MAAOV,EAAKW,KAAMT,EAAYL,MAAOd,IAapEA,GAAIyB,EAAS,kBAAmBE,MAAOV,EAAKW,KAAMT,EAAYL,MAAOd,IAGvEA,GAAIyB,EAAS,kBAAmBE,MAAOV,EAAKW,KAAMR,EAAUN,MAAOd,8YCxC5D,GAAZF,4DAAgFA,6EANrFA,kBACIA,iBAEEA,2FAGW,GAAZA,2DAAgFA,qBANrFA,uBACIA,uBAEEA,+EARCa,gBAAUkB,iBAAWC,oBAAYZ,GAAc,SAAOL,eAAIkB,UAAUd,EAAI,YAC7EQ,EAAWC,iRAMN1B,GAAIyB,EAAS,kBAAmBE,MAAOV,EAAKW,KAAMC,EAAWf,MAAOd,yTCsPjBF,MAAI,QA6FSkC,EAAEC,cAO5CnC,MAAKoC,oFAvFNpC,KAAkB,GAAK,wBAC/BA,MAAKqC,eACFrC,MAAKsC,cACPtC,iBAEO,mDADSA,+BAKTA,KAAkB,GAAK,wBAC/BA,MAAKuC,gBACFvC,MAAKoC,oBACEpC,MAAKwC,eACdxC,WACCA,MAAKyC,oBAEC,gBACPzC,MAAK0C,WACL1C,MAAK2C,qCAEO3C,MAAkB,6BALdA,4BASVkC,EAAEU,8CAGL5C,MAAK6C,YACF7C,MAAK0C,WACP,MACA,QACA1C,iBAEO,kBACF,8BACUA,KAAU8C,QAAQ,SAAW,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,qCAHvDA,4BAMdkC,EAAEc,8CAGLhD,MAAKiD,YACFjD,MAAK2C,WACP3C,MAAK0C,WACL,QACA1C,iBAEO,kBACF,8BACUA,KAAU8C,QAAQ,SAAW,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,qCAHvDA,4BAMdkC,EAAEgB,yDAGLlD,MAAK+C,oBACF/C,MAAKwC,eACPxC,MAAK0C,WACL1C,MAAK2C,WACL3C,iBAEO,sBACF,kCACUA,KAAU8C,QAAQ,gBAAkB,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,qCAH9DA,4BAMdkC,EAAER,6CAGL1B,MAAKmD,cACFnD,MAAKyC,6BAGPzC,iBAEO,mBACF,kCACSA,+BAHEA,icArFoCA,KAAkB,GAAK,kCAChFA,MAAKoD,mLA0FOpD,MAAKqD,oDAGJrD,MAAKsD,qBACNtD,MAAKqD,iNAQErD,MAAKuD,sBAAevD,MAAKuD,uGA3GlDvD,qdAI+DA,KAAkB,GAAK,0DAChFA,MAAKoD,uDAUGpD,KAAkB,GAAK,iCAC/BA,MAAKqC,wBACFrC,MAAKsC,iDAOAtC,KAAkB,GAAK,iCAC/BA,MAAKuC,yBACFvC,MAAKoC,6BACEpC,MAAKwC,yBAEbxC,MAAKyC,sBAGNzC,MAAK0C,oBACL1C,MAAK2C,+BAEO3C,MAAkB,oCAO3BA,MAAK6C,qBACF7C,MAAK0C,+BAOQ1C,KAAU8C,QAAQ,SAAW,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,4CAMxEA,MAAKiD,qBACFjD,MAAK2C,oBACP3C,MAAK0C,+BAMU1C,KAAU8C,QAAQ,SAAW,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,4CAMxEA,MAAK+C,6BACF/C,MAAKwC,wBACPxC,MAAK0C,oBACL1C,MAAK2C,+BAKU3C,KAAU8C,QAAQ,gBAAkB,GAAoB,IAAb9C,MAAoCA,MAAaA,MAAK+C,eAAgC,IAAb/C,OAArD,4CAM/EA,MAAKmD,uBACFnD,MAAKyC,iCAOOzC,kCAGPA,MAAKqD,8CAORrD,MAAKoC,sCAJDpC,MAAKsD,2CACNtD,MAAKqD,0CAQErD,MAAKuD,6CAAevD,MAAKuD,8ZA5GzDvD,0BAALwD,iKAsHiB,qBACQxD,gBACPkC,EAAEuB,qCAHOzD,iEA2BZA,KAAM0D,kBAEA,oBACCxB,EAAEyB,iDAFO3D,mNAdAkC,EAAE0B,yFAKE1B,EAAE2B,iEAIsD3B,EAAE4B,kPAfnD9D,KAAM+D,0xBA7H3C/D,aAALwD,qHAAAA,kEAuHyBxD,iCAMiBA,KAAM+D,0CAmBjC/D,KAAM0D,gDAhJrBF,gQA7OFQ,EAAa,GACbC,KACAC,GAAiB,EACjBC,EAAY,QACLJ,kBACAK,KACPC,KACaC,GACbP,OACAQ,YACAC,YACAC,WACAC,SACAhB,QAAS,KAGkBiB,WAAWC,QAC5CP,EAAQO,eAcGC,EAAWC,aAQOC,GAEvBf,EAAae,EAAUC,MAAMC,WAE7BhB,MACID,GACiC,GAA7BkB,MAAMC,QAAQnB,KAEdA,KAEAA,EAAW,GAAKe,EAAUC,MAAMC,gBAG/BG,EAAI,EAAGA,EAAIpB,EAAWR,OAAQ4B,IACnCnB,EAAgBoB,MACZ/B,SAAUU,EAAWoB,GAAGE,KAExB/C,UAAW,KAAOyB,EAAWoB,GAAGE,KAEhClD,OAAQ4B,EAAWoB,GAAGG,QAEtBjD,UAAW0B,EAAWoB,GAAGI,OAEzB/C,SAAUuB,EAAWoB,GAAGK,MAExBjD,WAAYwB,EAAWoB,GAAGM,YAE1B3C,cAAe,aAAeiB,EAAWoB,GAAGE,KAE5CjD,SAAU,QAAU2B,EAAWoB,GAAGE,KAElCnC,QAAS,OAASa,EAAWoB,GAAGE,KAEhC/B,UAAW,SAAWS,EAAWoB,GAAGE,KAEpClC,YAAa,cAAgBY,EAAWoB,GAAGE,KAE3CzC,MAAO,MAAQmB,EAAWoB,GAAGE,KAE7BrC,MAAO,MAAQe,EAAWoB,GAAGE,KAE7BjC,SAAU,WAAaW,EAAWoB,GAAGE,KAErC5C,OAAQsB,EAAWoB,GAAGO,QAAQC,MAAM,KAAK,GAEzCjD,OAAQqB,EAAWoB,GAAGO,QAAQC,MAAM,KAAK,YAjDjDC,CAFAf,EAAUgB,EAAUhB,IARxBiB,YACI1B,EAAMN,IAAMA,KACZc,EAAWd,0HAPPA,GAAKM,EAAMN,UACpBM,EAAMN,IAAMA,KACZc,EAAWd,uBAqEciC,OAChBnE,EAAQmE,EAAIC,OAAOpE,MAEnBqE,GADIF,EAAIC,OAAOjF,MACJgF,EAAIC,OAAOnE,MAEtBd,EAAQgF,EAAIC,OAAOjF,MAAMmF,OAAOnF,MAEhC+C,EAAM+B,EAAUzB,EAAMN,YAE1BC,EAAaD,EAAIiB,MAAMC,OACnBjB,EACiC,GAA7BkB,MAAMC,QAAQnB,KAEdD,EAAIiB,MAAMC,UAEVlB,EAAIiB,MAAMC,OAAO,GAAKjB,GAEI,iBAAfA,IAEfD,EAAIiB,MAAMC,WAGNiB,OACC,WAEDnC,EAAIiB,MAAMC,OAAOpD,GAAO2D,OAASxE,YAEhC,UAED+C,EAAIiB,MAAMC,OAAOpD,GAAO4D,MAAQzE,YAE/B,iBACGoF,EAAuBC,SAASL,EAAIC,OAAOjF,MAAMmF,OAAOnF,OAE5D+C,EAAIiB,MAAMC,OAAOpD,GAAO6D,YAAcU,YAErC,uBACA,mBACA,mBACDlC,GAAiB,OACjBC,EAAY,QAERmC,EAAeD,SAASL,EAAIC,OAAOjF,MAAMmF,OAAOnF,OAEhDuF,EAAaF,SAASL,EAAIC,OAAOjF,MAAMmF,OAAOlF,KAE9CuF,EAAaH,SAASL,EAAIC,OAAOjF,MAAMmF,OAAOjF,QAC7CoF,EAAeE,GAAgBF,EAAeC,EAI/CE,EAAGC,MAAM,0CAA4CH,EAAa,8BAAgCC,OAClGtC,GAAiB,OACjBC,EAAY6B,EAAIC,OAAOjF,MAAMmF,OAAOpF,aAGhC4F,EAAc5C,EAAIiB,MAAMC,OAAOpD,GAAO8D,QAAQC,MAAM,KAEpDgB,EAAWP,SAASM,EAAY,IAEhCE,EAAWR,SAASM,EAAY,IAEhCG,EAAeT,SAASI,EAAGM,OAAO,gBAAkBlF,GAAOb,OAC9C,gBAAZkF,GAAgCU,EAAWC,GAK5CJ,EAAGC,MAAM,sEACTxC,GAAiB,OACjBC,EAAY6B,EAAIC,OAAOjF,MAAMmF,OAAOpF,KAChB,gBAAZmF,GAAgCU,EAAWC,GAKnDJ,EAAGC,MAAM,4DACTxC,GAAiB,OACjBC,EAAY6B,EAAIC,OAAOjF,MAAMmF,OAAOpF,KAC5B6F,GAAYC,IAAeC,EAAeD,GAAcC,EAAeF,KAE/EH,EAAGC,MAAM,0CAA4CE,EAAW,8BAAgCC,GAEhGJ,EAAGM,OAAO,gBAAkBlF,GAAOmF,YACnC9C,GAAiB,OACjBC,EAAY,eAAiBtC,cAIpC,aACA,SAEDb,EAAQqF,SAASL,EAAIC,OAAOjF,MAAMmF,OAAOnF,WAErCiG,EAASlD,EAAIiB,MAAMC,OAAOpD,GAAO8D,QAAQC,MAAM,KACnC,UAAZM,EAEAe,EAAO,GAAKjG,EAGZiG,EAAO,GAAKjG,EAGhBiG,EAASA,EAAOC,KAAK,KAErBnD,EAAIiB,MAAMC,OAAOpD,GAAO8D,QAAUsB,YAEjC,YAEDR,EAAGU,MAAM,gBAAgB,SAASC,OAC9BrD,EAAIiB,MAAMC,OAAOzB,OAAS,GAE1BO,EAAIiB,MAAMC,OAAOoC,OAAOxF,EAAO,WAEtByF,EAAW,EAAGA,EAAWvD,EAAIiB,MAAMC,OAAOzB,OAAQ8D,GAAY,EACnEvD,EAAIiB,MAAMC,OAAOqC,GAAUhC,KAAO,KAAOgC,OAG7Cb,EAAGC,MAAM,mDAGZ,MACG3C,EAAIiB,MAAMC,OAAOzB,OAAS,GAE1BO,EAAIiB,MAAMC,OAAOoB,SAAStC,EAAIiB,MAAMC,OAAOzB,UACvC8B,KAAQ,KAAOvB,EAAIiB,MAAMC,OAAOzB,OAChCmC,QAAW,QACXF,MAAS,IACTD,OAAU,GACVD,QAAW,IACXG,YAAe,KAGnBe,EAAGC,MAAM,kDAGZ,YAED3C,EAAIiB,MAAMC,OAAOpD,GAAO0D,QAAUvE,EAG1CoD,EAAYmD,EAAUxD,aAYaG,OAAoBG,EAAMX,QAAS0B,KAAGqB,EAAGU,MAAM,gBAAgB,SAASK"}