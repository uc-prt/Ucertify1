{"version":3,"file":"Insight-30a8aeb5.js","sources":["../../../clsSMInsight/Insight.svelte"],"sourcesContent":["<!--\n *  File Name   : Insight.svelte\n *  Description : Responsible for Authoring Side functionality\n *  Author      : Ayush Srivastava\n *  Package     : Insight (Authoring & Preview)\n *  Last update : 09-Feb-2021\n *  Last Updated By : Ayush Srivastava\n-->\n<script>\n    import { afterUpdate, beforeUpdate, onMount } from 'svelte';\n\timport { writable } from 'svelte/store';\n    import { AH , XMLToJSON, JSONToXML} from '../helper/HelperAI.svelte';\n    import l from '../src/libs/Lang';\n    import Loader from '../helper/Loader.svelte';\n    import swal from 'sweetalert';\n    import Sortable from 'sortablejs';\n\n    export let xml;\n    export let getChildXml;\n    export let user;\n    export let editorState;\n    export let itemIcons;\n    const category = { 'quiz': 'knowledge_check', 'terminal': 'lab', 'simulation': 'lab', 'insight': 'lab', 'lablink': 'lab', 'playground': 'lab', 'video': 'media', 'audio': 'media', 'exhibit': 'link', 'pdf': 'link', 'weblink': 'link', 'download': 'link', 'object3d': 'objects' };\n    let itemArray = ['quiz', 'link', 'terminal', 'object3d', 'exhibit', 'insight', 'lablink', 'playground', 'simulation'],\n    sceneTemp = \"\",\n    characterData  = \"\",\n    localcharacterData   = [],\n    localcharacterChoice = [],\n    insightData = [],\n    stepData    = \"\",\n    isSmartChat = \"\",\n    localstepData     = [],\n    scoreCategoryData = \"\",\n    localscoreCategoryData = [],\n    assetData       = \"\",\n    localassetData  = [],\n    tabData         = \"\",\n    localtabData    = [],\n    modeData        = \"\",\n    localmodeData   = [],\n    assetsData      = \"\",\n    localassetsData = [],\n    defaultScene = 0,\n    sceneName    = \"\",\n    sceneJson    = \"\",\n    qxml         = \"\",\n    resultTitle  = \"\",\n    BGsrc      = \"\",\n    began      = \"\",\n    updateAnimation = [],\n    sceneData       = {},\n    localpage_value  = 0,\n    data_active = 1,\n    state = {},\n    menuLayout   = [],\n    sceneArr     = [],\n    is_scene_load = false,\n    show_dom = false;\n\n    // it need to change by baseUrl\n    let check_domain = (window.location.origin.search('localhost') > 0 || window.location.origin.search('demo-a.ucertify.com') > 0);\n    let curDomain = (check_domain) ? 'https://www.jigyaasa.info/' : baseUrl;\n\n    // creating the authoring writable store\n    let auth_store = writable({\n        xml: \"\",\n        activeTab: 1,\n        category: 'knowledge_check',\n        type: 'simulation',\n        content_type: 'q,u',\n        content_subtype: '16',\n        currentItem: \"\",\n        msg : \"\",\n        sceneData: \"\",\n        tabvalue: 0,\n        layout: 0,\n        toggleMode: \"\",\n        end: 12,\n    });\n\n    // subscribing to the store\n    const unsubscribe = auth_store.subscribe((item)=> {\n\t\tstate = item;\n\t});\n\n    // calling beforeUpdate which calls before every time there is update\n    beforeUpdate(async() => {\n        if (is_scene_load) {\n\n            // checking for authoring and preview mode\n            if (editorState.toggleMode != state.toggleMode) {\n                if (editorState.toggleMode) {\n                    qxml = state.xml;\n                    auth_store.update( (item) => {\n                        item.xml = qxml;\n                        return item;\n                    });\n\n                    getChildXml(qxml);\n\n                    if (AH.selectAll('#authoringArea form').length) {\n                        AH.select('#authoringArea form').remove();\n                    }\n\n                    let formaction = baseUrl + 'sim/smartsim/index.php?insight=1&in_editor=1&insight_navigation=1';\n                    let testHtml = '<form method=\"post\" target=\"authoringFrame\" action=\"' + formaction + '\"><input type=\"hidden\" name=\"no_header\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">'+qxml+'</textarea><input type=\"hidden\" name=\"uxml\" value=\"\"/><input type=\"hidden\" name=\"content_guid\" value=\"0\" /></form>';\n\n                    AH.insert('#authoringArea', testHtml, 'beforeend');\n                    let element = AH.selectAll('#title, #stem,.insight_tabs, #remediation, .editor_placeholder');\n                    for (let index = 0; index < element.length; index++) {\n                        AH.setCss(element[index], {\n                            display: 'none',\n                        })\n                    }\n                    AH.insert('#title', '<div id=\"tilteShow\">' + AH.select('#title').innerHTML + '</div>', 'afterend');\n                    AH.insert('#stem', '<div id=\"stemShow\">' + AH.select('#stem').innerHTML + '</div>', 'afterend');\n                    AH.insert('#remediation', '<div id=\"remediationShow\">' + AH.select('#remediation').innerHTML + '</div>', 'afterend');\n                    editorState.activator = true;\n                    AH.select('form[target=\"authoringFrame\"]').submit();\n                    AH.select(\"#authoringFrame\").style.display = 'block';\n                } else {\n                    AH.selectAll('#tilteShow, #stemShow, #remediationShow' , 'remove');\n                    let element = AH.selectAll('#title, #stem, #remediation, #externalInputs, .insight_tabs, .editor_placeholder');\n                    for (let index = 0; index < element.length; index++) {\n                        AH.setCss(element[index], {\n                            display: 'block',\n                        })\n                    }\n                    try { \n                        AH.select(\"#authoringFrame\").contentWindow.responsiveVoice.cancel(); \n                    } catch(e) { \n                        console.log(e); \n                    }\n                    AH.select(\"#authoringFrame\").style.display = 'none';\n                }\n                auth_store.update( (item) => {\n                    item.toggleMode = editorState.toggleMode;\n                    return item;\n                });\n            }\n\n            // checking for change in xml\n            if (state.xml != xml) {\n                loadModule(xml);\n                auth_store.update( (item) => {\n                    item.xml = xml;\n                    return item;\n                });\n\n                loadScene(state.end);\n            }\n\n            // setting visibles tabs according to the selected scene\n            if (state.sceneData) {\n                for (let index = 0; index < state.sceneData.scene.length; index++) {\n                    if (sceneName == state.sceneData.scene[index].title) {\n                        defaultScene = index;\n                        if (AH.select('.insightTab8').nodeName && AH.select('.insightTab5').nodeName && AH.select('.insightTab4').nodeName) {\n                            if (state.sceneData.scene[defaultScene].anim.length < 1) {\n                                AH.select('.insightTab8').style.display = 'none';\n                            } else {\n                                AH.select('.insightTab8').style.display = 'block';\n                            }\n                            if (state.sceneData.scene[defaultScene].assets.length < 2) {\n                                AH.select('.insightTab4').style.display = 'none';\n                                AH.select('.insightTab5').style.display = 'none';\n                            } else {\n                                AH.select('.insightTab4').style.display = 'block';\n                            }\n                        }\n                    } \n                }\n            }\n        } else {\n            // removing editor activator after scene fetch\n            editorState.activator = true;\n        }\n    });\n\n    // binding up neccessary events \n    onMount( async() => {\n        // for getting the insight data\n        getDataFromApi();\n\n        AH.listen('body', 'keyup', '#stem .ebook_item_text', function () {\n            updateXmlValue();\n        });\n\n\n        AH.listen('body', 'keyup', '#search', function (current, event) {\n            searchTable(event);\n        });\n\n        AH.listen('body', 'click', '.pagination_btn', function (current, event) {\n            data_active = event.target.value;\n            AH.selectAll(\".pagination_btn\", \"removeClass\", \"active\");\n            current.classList.add('active');\n            menuLayout = [];\n            createPagination();\n            state.end = 24;\n        });\n\n        AH.listen('body', 'click', '#table_list tr', function (current, event) {\n            let guid = AH.find(current, 'td').innerText;\n            let index = AH.select(\"#currentItem\").value;\n            localstepData[index].guids = guid;\n            updateXmlValue(event, index, \"\", \"\", guid);\n            AH.getBS('#player_modal', 'Modal').hide();\n        });\n\n        document.querySelector(\"#authoringFrame\").addEventListener('load', ()=> { \n            if (editorState.toggleMode) {\n                editorState.activator = false;\n            }\n\t\t});\n\n        AH.select('#preview').style.display = 'none';\n        AH.select('#authoringFrame').style.display = 'none';\n\n        AH.listen('body', 'click', '.tabbutton', function(element) {\n            AH.selectAll('.tabbutton', 'removeClass', 'active');\n            element.classList.add('active');\n            auth_store.update( (item) => {\n                item.tabvalue = Number(element.getAttribute('data-tab'));\n                return item;\n            });\n        });\n    })\n\n    // afterUpdate is called after updation of the varibale here it set the content type & also manage sortable event\n    afterUpdate( async() => {\n        let isFound = itemArray.indexOf(state.type);\n        if (isFound > -1) {\n            setContentType();\n        }\n\n        if (state.tabvalue == 6) {\n            let sortable = new Sortable(AH.select('#sortable'), {\n                animation: 150,\n                handle: '.allowDraggable',\n                onEnd: function (evt) {\n                    if (evt.oldIndex > evt.newIndex) {\n                        for (let index = evt.oldIndex; index > evt.newIndex; index--) {\n                            let tempValue = localstepData[index - 1];\n                            localstepData[index-1] = localstepData[index];\n                            localstepData[index] = tempValue;\n                        }\n                    } else if (evt.oldIndex < evt.newIndex) {\n                        for (let index = evt.oldIndex; index < evt.newIndex; index++) {\n                            let tempValue = localstepData[index + 1];\n                            localstepData[index+1] = localstepData[index];\n                            localstepData[index] = tempValue;\n                        }\n                    } else {\n                        localstepData[evt.oldIndex] = localstepData[evt.newIndex];\n                    }\n                    \n                    let swap_element = AH.selectAll('.step_swap');\n                    swap_element.forEach((el) => {\n                        el.click();\n                    });\n                    AH.select('.insightTab6').click();\n                    let insight_timer = setTimeout( ()=> {\n                        AH.select('.insightTab7').click();\n                        clearTimeout(insight_timer);\n                    }, 10);\n                },\n            });\n        }\n\n    });\n\n    // used for fetching the insight data from the api\n    function getDataFromApi() {\n        AH.activate(2);\n        AH.ajax({\n            type: 'GET',\n            url: baseUrl + 'editor/index.php?action=getinsight&insightId=054oF',\n            onEnd: function() {\n                editorState.activator = false;\n                AH.activate(0);\n                show_dom = true;\n                is_scene_load = true;\n            }\n        }).then(function(data) {\n            data = JSON.parse(data);\n            auth_store.update( (item) => {\n                item.sceneData = data;\n                return item;\n            });\n\n            createPagination();\n            loadScene(12);\n\n            if (AH.selectAll(\"#placeHolderRemediation\").length) {\n                let parent = AH.select(\"#placeHolderRemediation\").parentElement;\n                parent.classList.add(\"float-start\");\n                parent.classList.add(\"col-12\");\n                parent.style.zIndex = '9';\n            }\n        });\n    }\n\n    // responsible for loading the module on the basis of xml\n    function loadModule(loadXml) {\n        let new_xml = XMLToJSON(loadXml);\n        parseXMLAuthoring(new_xml); \n    }\n\n    // create variable and store data in variable and used for parsing the xml\n    function parseXMLAuthoring(INSIGHTXML) {\n        localstepData          = [];\n        localcharacterData \t   = [];\n        localcharacterChoice   = [];\n        localscoreCategoryData = [];\n        localassetData         = [];\n        localassetsData        = [];\n        localtabData           = [];\n        localmodeData          = [];\n        insightData            = JSON.parse(INSIGHTXML.smxml.__cdata);\n        stepData               = insightData.steps;\n        scoreCategoryData      = insightData.scoreCategories;\n        assetData              = insightData.assets;\n        tabData                = insightData.link;\n        modeData               = insightData.mode;\n        sceneName              = INSIGHTXML.smxml._sceneName;\n        sceneJson              = INSIGHTXML.smxml._sceneJson;\n        isSmartChat            = INSIGHTXML.smxml._isSmartChat;\n        began\t\t\t\t   = insightData.begin;\n        BGsrc\t\t\t\t   = insightData.bgImage;\n        resultTitle\t\t\t   = insightData.detail;\n        // setting the pagination count according to the total scenes\n        if (state.sceneData) {\n            for (let index = 0; index < state.sceneData.scene.length; index++) {\n                if (sceneName == state.sceneData.scene[index].title) {\n                    defaultScene = index;\n                } \n            }\n        }\n\n        characterData = insightData.characters;\n        // set all data of charaters like name id visiblity etc.\n\n        for (let index = 0; index < characterData.length; index++) {\n            localcharacterData = [\n                ...localcharacterData, {\n                visible  : characterData[index].visible,\n                name     : characterData[index].name,\n            }];\t\n            localcharacterChoice = [\n                ...localcharacterChoice, {\n                visible  : characterData[index].visible,\n                name     : characterData[index].name,\n            }];\t\n        }\n\n        assetsData = insightData.assets;\n        // set all data of assets like name id visiblity etc\n\n        for (let index = 0; index < assetsData.length; index++) {\n            localassetsData = [\n                ...localassetsData, {\n                name         : assetsData[index].asset,\n                visible      : assetsData[index].visible,\n                assets_click : assetData[index].assets_click,\n                tooltip      : assetData[index].tooltip,\n                anim         : assetData[index].anim,\n                focus\t\t : assetData[index].focus,\n            }];\t\n        }\n\n        // push all data into variables\n        if (Object.keys(stepData).length) {\n            for (let index = 0; index < stepData.length; index++) {\n                if (typeof stepData[index].image == 'undefined') {\n                    stepData[index].image = '';\n                }\n                localstepData = [ \n                    ...localstepData, {\n                    id      \t\t : stepData[index].id,\n                    name     \t\t : stepData[index].name,\n                    allowChoices     : stepData[index].allowChoices,\n                    camera     \t\t : stepData[index].camera,\n                    voice     \t\t : stepData[index].voice,\n                    message     \t : stepData[index].message,\n                    stepIndex     \t : stepData[index].stepIndex,\n                    guids     \t     : stepData[index].guids,\n                    choicesScore     : stepData[index].choicesScore,\n                    state\t\t\t : stepData[index].state,\n                    speech\t\t\t : stepData[index].speech,\n                    auto\t\t\t : stepData[index].auto,\n                    choicesCategory  : stepData[index].choicesCategory,\n                    condition        : stepData[index].condition,\n                    image            : stepData[index].image,\n                    choices     \t : [],\n                    title\t\t\t : stepData[index].title,\n                    important_node   : stepData[index].important_node,\n                    level_text       : stepData[index].level_text\n                }];\n            }\n            for (let index = 0; index < localstepData.length; index++) {\n                for (let sub_index = 0; sub_index < stepData[index].choices.length; sub_index++) {\n                    if (typeof stepData[index].choices[sub_index].fdbk_char_cam == 'undefined') {\n                        stepData[index].choices[sub_index].fdbk_char_cam = stepData[index].choices[sub_index].camera;\n                    }\n                    if (typeof stepData[index].choices[sub_index].fdbk_char_voice == 'undefined') {\n                        stepData[index].choices[sub_index].fdbk_char_voice = stepData[index].choices[sub_index].voice;\n                    }\n                    localstepData[index].choices = [ \n                        ...localstepData[index].choices, {\n                        id      \t\t : stepData[index].choices[sub_index].id,\n                        correct     \t : stepData[index].choices[sub_index].correct,\n                        text             : stepData[index].choices[sub_index].text,\n                        feedback         : stepData[index].choices[sub_index].feedback,\n                        choicesScore     : stepData[index].choices[sub_index].choicesScore,\n                        choicesCategory  : stepData[index].choices[sub_index].choicesCategory,\n                        stepIndex        : stepData[index].choices[sub_index].stepIndex,\n                        feedback_charact : stepData[index].choices[sub_index].feedback_charact,\n                        fdbk_char_cam    : stepData[index].choices[sub_index].fdbk_char_cam,\n                        fdbk_char_voice  : stepData[index].choices[sub_index].fdbk_char_voice\n                    }];\t\n                }\n            }\n        }\n        if (Object.keys(scoreCategoryData).length) {\n            for (let index = 0; index < scoreCategoryData.length; index++) {\n                localscoreCategoryData = [\n                    ...localscoreCategoryData, {\n                    id      : scoreCategoryData[index].id,\n                    name    : scoreCategoryData[index].name,\n                    value   : scoreCategoryData[index].value,\n                }];\t\t\n            }\n        }\n        if (Object.keys(assetData).length) {\n            for (let index = 0; index < assetData.length; index++) {\n                localassetData = [\n                    ...localassetData, {\n                    src         : assetData[index].src,\n                    title       : assetData[index].title,\n                    icon        : assetData[index].icon ,\n                    text        : assetData[index].text ,\n                }];\t\t\n            }\n        }\n        if (Object.keys(tabData).length) {\n            for (let index = 0; index < tabData.length; index++) {\n                localtabData = [ ...localtabData , {\n                    title      : tabData[index].title,\n                    name       : tabData[index].name ,\n                    guid       : tabData[index].guid ,\n                    focus      : tabData[index].focus ,\n                    dialog     : tabData[index].dialog,\n                }];\n            }\n        }\n\n        localmodeData = (modeData) ? modeData :  0;\n    }\n\n    // for uploading the image \n    function onChoiceImageSelect(event, i) {\n        let files = event.target.files[0];\n        const fd = new FormData();\n        let rand =  Math.floor(100 * Math.random()) + 1;\n        let image_name = 'uc_' + rand + 'choice' + i;\n        if (files.size > 32768) {\n            fd.append('image',files, '/' + image_name + '.png');\n            AH.select('#bgResult').nodeName && AH.select(\"#bgResult\").setAttribute(\"src\", curDomain + 'labs/insight/Images/loading.gif');\n            AH.select(\"#samplechoice_image\" + i).nodeName && AH.select(\"#samplechoice_image\" + i).setAttribute(\"src\", curDomain + 'labs/insight/Images/loading.gif');\n            \n            AH.ajax({\n                type:'POST',\n                url: baseUrl+'editor/index.php?func=choiceupload&folder=Choice_question_images',\n                data: fd,\n                formData: true,\n            }).then(function() {\n                AH.select(\"#result_img\").nodeName && AH.select(\"#result_img\").setAttribute('value', curDomain + 'labs/insight/Choice_question_images/' + image_name + '.png');\n                AH.select(\"#choice_question_image\" + i).nodeName && AH.select(\"#choice_question_image\" + i).setAttribute('value', curDomain + 'labs/insight/Choice_question_images/' + image_name + '.png');\n                AH.select(\"#result_img\").nodeName && AH.select(\"#result_img\").click();\n                AH.select(\"#choice_question_image\" + i).nodeName && AH.select(\"#choice_question_image\" + i).click();\n            })\n        } else {\n            if (AH.select(\"#result_img\").nodeName) {\n                AH.select(\"#result_img\").innerText = \"File size is too small\";\n            }\n            if (AH.select(\"#choice_question_image\").nodeName) {\n                AH.select(\"#choice_question_image\").innerText = \"File size is too small\";\n            }\n            swal(\"File size is too small\");\n        }\n    }\n\n    // for removing the tags in the tags\n    function removeTags(text) {\n        let strippedText = text.replace(/(<([^>]+)>)/ig, '').replace(/\\n/g, ' ');\n        return strippedText;\n    }\n\n    // for setting the content type and content subtype\n    function setContentType() {\n        let content_type = '', content_subtype = '';\n        switch (state.type) {\n            case \"terminal\":\n                content_type = \"q,f\";\n                content_subtype = \"13\";\n                break;\n            case \"lablink\":\n                content_type = \"q\";\n                content_subtype = \"25\";\n                break;\n            case \"playground\":\n                content_type = \"q\";\n                content_subtype = \"24\";\n                break;\n            case \"simulation\":\n                content_type = \"q\";\n                content_subtype = \"16\";\n                break;\n            default:\n                content_type = content_subtype = '';\n                break;\n        }\n        if (state.content_type != content_type || state.content_subtype != content_subtype) {\n            auth_store.update( (item) => {\n                item.content_type = content_type;\n                item.content_subtype = content_subtype;\n                return item;\n            });\n        }\n    }\n\n    // For getting the snippet \n    function getSnippet() {\n        AH.selectAll(\".list_content, #not_found, #info_data, .search_list\", 'addClass', 'h')\n        AH.select(\"#not_found\").innerText = l.no_record;\n        if (state.content_type != '' || state.content_subtype != '') {\n            if (editor.course) {\n                AH.select(\"#list_process\").classList.remove(\"h\");\n                AH.ajax({\n                    url: baseUrl + 'editor/index.php?action=getSnippet&ajax=1',\n                    data: {\n                        course_code: editor.course.split('.')[0],\n                        content_type: state.content_type,\n                        content_subtype: state.content_subtype\n                    },\n                    type: 'post',\n                }).then(function (response) {\n                    if (response != 0) {\n                        let data = JSON.parse(response);\n                        let table = '';\n                        for (let index in data) {\n                            table += '<tr><td>' + index + '</td>';\n                            table += '<td>' + data[index]['snippet'] + '</td>';\n                            table += '<td class=\"text-center player_modal_tooltip\" data-bs-toggle=\"tooltip\" title=\"' + ((itemIcons[state.content_subtype]) ? (itemIcons[state.content_subtype].title) : '') + '\"><i class=\"' + ((itemIcons[state.content_subtype]) ? (itemIcons[state.content_subtype].icon) : '') + '\"></i></td></tr>';\n                        }\n                        AH.select(\"#table_list\").innerHTML = table;\n                        if (table == '') {\n                            AH.selectAll(\"#not_found\", 'removeClass', \"h\");\n                        } else {\n                            AH.selectAll(\"#list_content_tbl, .search_list\", 'removeClass', \"h\");\n                        }\n                        let tooltip_timer = setTimeout(function() {\n                            AH.enableBsAll('.player_modal_tooltip', 'Tooltip', {\n                                container: '#player_modal'\n                            });\n                            clearTimeout(tooltip_timer);\n                        }, 100);\n                    } else {\n                        AH.selectAll(\"#not_found\", 'removeClass', \"h\");\n                    }\n                    AH.select(\"#list_process\").classList.add(\"h\");\n                }).catch(function() {\n                    AH.selectAll(\"#list_process, .search_list\", 'addClass', \"h\");\n                    AH.selectAll(\"#not_found\", 'removeClass', \"h\");\n                    AH.showmsg(l.unable_to_get);\n                    AH.activate(0);\n                });\n            } else {\n                AH.selectAll(\"#not_found\", 'removeClass', \"h\");\n                AH.select(\"#not_found\").innerText = l.load_course;\n            }\n        }\n    }\n\n    // for searching in the table\n    function searchTable(event) {\n        let input_val = event.target.value, count = 0;\n        let table_tr = AH.selectAll('.table_search tbody tr');\n        for (let index = 0; index < table_tr.length; index++) {\n            let text = table_tr[index].innerText;\n            if (text && input_val && (text.toLowerCase().indexOf(input_val.toLowerCase()) == -1)) {\n                table_tr[index].classList.add('h');\n            } else {\n                table_tr[index].classList.remove('h');\n                count++;\n            }\n        }\n        if (count > 0) {\n            AH.select('#not_found').classList.add('h');\n            AH.select('#list_content_tbl').classList.remove('h');\n        } else {\n            AH.select('#not_found').classList.remove('h');\n            AH.select('#list_content_tbl').classList.add('h');\n        }\n    }\n\n    // for creating the pagination on scene tab\n    function createPagination() {\n        if (state.sceneData.scene.length > 12 * data_active) {\n            data_active = parseInt(data_active) + 1;\n            let end = 12 * data_active;\n            menuLayout = [\n                ...menuLayout, \n                {\n                    data_active: data_active,\n                    end: end\n                }\n            ];\n        } else {\n            menuLayout = [];\n        }\n    }\n\n    // whenever there is change in the knowledge item dropdown\n    function handlePlayer(event) {\n        AH.selectAll(\".list_content, #not_found, .search_list\", 'addClass', 'h')\n        AH.selectAll(\"#info_data\", 'removeClass', 'h')\n        AH.select('#table_list').innerHTML = '';\n        auth_store.update( (item) => {\n            item.msg = '';\n            return item;\n        });\n    }\n\n    // for loading the scene\n    function loadScene(end) {\n        localpage_value = end;\n        sceneArr = [];\n        state.sceneData && state.sceneData.scene.map((data, i)=>{\n            if (i < end && i < state.sceneData.scene.length) {\n                if (i == defaultScene) {\n                    sceneArr = [\n                        ...sceneArr, {\n                            key: i,\n                            background: '#F0F0F0',\n                            alt: data.title,\n                            type: 0\n                        }\n                    ]\n                } else if (data.by == user['user_guid']) {\n                    sceneArr = [\n                        ...sceneArr, {\n                            key: i,\n                            alt: data.title,\n                            type: 1\n                        }\n                    ]\n                } else {\n                    sceneArr = [\n                        ...sceneArr, {\n                            key: i,\n                            alt: data.title,\n                            type: 2\n                        }\n                    ]\n                }\n            }\n        });\n        auth_store.update( (item) => {\n            item.layout = item.layout++;\n            return item;\n        });\n    }\n    \n    // for updating the xml value this function is responsible\n    function updateXmlValue(event, index ,parentIndex=\"\", selector , value) {\n        if (event) {\n            value = event.target.value;\n        }\n        let xml = XMLToJSON(state.xml);\n        switch(selector) { \n            case \"addItem\":\n                AH.getBS('#player_modal', 'Modal').show();\n                auth_store.update( (item) => {\n                    item.currentItem = index;;\n                    return item;\n                });\n                break;\n            case \"setCharacter\" : \n                localcharacterData[index].name = value;\n                localcharacterChoice[index].name = value;\n                sceneData = state.sceneData;\n                sceneData.scene[defaultScene].characters[index].name = value;\n                auth_store.update( (item) => {\n                    item.sceneData = sceneData;\n                    return item;\n                });\n                break;\n            case \"setCategoryName\" :\n                localscoreCategoryData[index].name = value;\n                break;\n            case \"deleteStep\" :\n                localstepData.splice(index, 1);\n                break;\n            case \"deleteScene\" :\n                swal({\n                    title: \"Are you sure?\",\n                    text: \"Once deleted, you will not be able to recover this scene!\",\n                    type: \"warning\",\n                    buttons: true,\n                    dangerMode: true,\n                }).then(function(isConfirm) {\n                    if (!isConfirm && index > 0) {\n                        state.sceneData.scene.splice(index,1);\n                        var output = JSON.stringify(state.sceneData);\n                        AH.select('#pagination_btn1').click();\n                        AH.ajax({\n                            type: 'POST',\n                            data: {myData:output},\n                            url: baseUrl+'editor/index.php?action=setinsight&insightId=054oF',\n                        }).then( () => {\n                            swal(\"Delete successfully\");\n                        });\n                    }\n                });\n                break;\n            case \"addStep\" :\n                var avaliableCharacter = 0;\n                for (let increment = 0; increment < localcharacterData.length; increment++) {\n                    if (localcharacterData[increment].visible == 0) {\n                        avaliableCharacter = increment;\n                        break;\n                    }\n                }\n                localstepData[localstepData.length] = {\n                    'id'          : localstepData.length,\n                    'name'        : avaliableCharacter,\n                    'allowChoices': 0,\n                    \"camera\"      : state.sceneData.scene[defaultScene].characters[avaliableCharacter].camera,\n                    \"speech\"      : 0,\n                    \"auto\"        : 0,\n                    \"state\"       : \"talking\",\n                    \"voice\"       : state.sceneData.scene[defaultScene].characters[avaliableCharacter].voice,\n                    \"choices\"     : [],\n                    \"message\"     : \"\",\n                    \"level_text\"   : \"\",\n                    \"important_node\"   : \"\"\n                };\n                break;\n            case \"addChoice\" :\n                var avaliableCharacterChoice = 0;\n                for (let increment = 0; increment < localcharacterChoice.length; increment++) {\n                    if (localcharacterChoice[increment].visible == 0) {\n                        avaliableCharacterChoice = increment;\n                        break;\n                    }\n                }\n                localstepData[index].choices[localstepData[index].choices.length] = {\n                    'id'              : localstepData[index].choices.length,\n                    \"choicesScore\"    : 0,\n                    \"choicesCategory\" : 0,\n                    \"correct\"         : 0,\n                    \"text\"            : \"\",\n                    \"feedback\"        : \"\",\n                    \"feedback_charact\": avaliableCharacterChoice,\n                    \"fdbk_char_cam\"   : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,\n                    \"fdbk_char_voice\" : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice\n                };\n                break;\n            case \"deleteChoice\" :\n                localstepData[parentIndex].choices.splice(index,1);\n                break;\n            case \"assetVisible\" :\n                if (localassetsData[index].visible == 0) {\n                    localassetsData[index].visible = 1;\n                } else {\n                    localassetsData[index].visible = 0;\n                }\n                sceneData = state.sceneData;\n                sceneData.scene[defaultScene].assets[index].visible = value;\n                auth_store.update( (item) => {\n                    item.sceneData = sceneData;\n                    return item;\n                });\n                break;\n            case \"setAssetsClick\" :\n                localassetsData[index].assets_click = parseInt(value);\n                break;\n            case \"setTooltip\" :\n                localassetsData[index].tooltip = value;\n                break;\n            case \"assetAnim\" :\n                localassetsData[index].anim = Number(value);\n                localassetsData[index].focus = state.sceneData.scene[defaultScene].anim[Number(value)].name;\n                sceneData = state.sceneData;\n                sceneData.scene[defaultScene].assets[index].anim = Number(value);\n                auth_store.update( (item) => {\n                    item.sceneData = sceneData;\n                    return item;\n                });\n                break;\n            case \"updateChoiceType\" :\n                //Added for alert switch blank page issue.\n                if (localstepData[index].name   == \"\") {\n                    localstepData[index].name = 0;\n                }\n\n                if (localstepData[index].image == \"\") {\n                    localstepData[index].image = 0;\n                }\n\n                var avaliableCharacterChoice = 0;\n                for (let increment = 0; increment < localcharacterChoice.length; increment++) {\n                    if (localcharacterChoice[increment].visible == 0) {\n                        avaliableCharacterChoice = increment;\n                        break;\n                    }\n                }\n                localstepData[index].allowChoices  = parseInt(value);\n                if (localstepData[index].choices.length === 0) {\n                    if (value == 1 || value == 3) {\n                        localstepData[index].choices[localstepData[index].choices.length] = {\n                            'id'              : localstepData[index].choices.length,\n                            \"choicesScore\"    : 0,\n                            \"choicesCategory\" : 0,\n                            \"correct\"         : 0,\n                            \"text\"            : \"\",\n                            \"feedback\"        : \"\",\n                            \"image\"\t\t      : \"\",\n                            \"feedback_charact\": avaliableCharacterChoice,\n                            \"fdbk_char_cam\"   : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,\n                            \"fdbk_char_voice\" : state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice\n                        };\n                    }\n                }\n                if (value == 2 || value == 4 || value == 5) {\n                    localstepData[index].guids = \"\";\n                    localstepData[index].cvalue = \"\";\n                    localstepData[index].choicesScore = 10;\n                    localstepData[index].choicesCategory = 0;\n                    localstepData[index].message = \"\";\n                }\n                if (value == 7) {\n                    localstepData[index].camera = 0;\n                    localstepData[index].name   = \"\";\n                    localstepData[index].voice  = 1;\n                    localstepData[index].image  = \"\";\n                }\n                break;\n            case \"updateStepChracter\" :\n                localstepData[index].voice = state.sceneData.scene[defaultScene].characters[value].voice;\n                localstepData[index].camera = state.sceneData.scene[defaultScene].characters[value].camera;\n                localstepData[index].name  = parseInt(value);\n                break;\n            case \"updateFeedbackChracter\" :\n                    localstepData[parentIndex].choices[index].feedback_charact = parseInt(value);\n                    localstepData[parentIndex].choices[index].fdbk_char_voice = state.sceneData.scene[defaultScene].characters[value].voice;\n                    localstepData[parentIndex].choices[index].fdbk_char_cam  = state.sceneData.scene[defaultScene].characters[value].camera;\n                    break;\n            case \"updateSpeech\" :\n                if (localstepData[index].speech == 0) {\n                    localstepData[index].speech  = 1;\n                } else {\n                    localstepData[index].speech  = 0;\n                }\n                break;\n            case \"updateAuto\" :\n                if (localstepData[index].auto == 0) {\n                    localstepData[index].auto  = 1;\n                } else {\n                    localstepData[index].auto  = 0;\n                }\n                break;\n            \n            case \"setImageSrc\":\n                localstepData[index].image = value;\n                break;\n            case \"updateIntroVoice\" :\n                localstepData[index].voice = parseInt(value);\n                break;\n            case \"setStepStatement\" :\n                // For remove the html tag to be seen in smart chat scene in chat box\n                if (sceneName == \"Smart Chat\") {\n                    if (value) {\n                        value = value.toString().replace(/<[^>]*>/gm, '');\n                    }\n                }\n                localstepData[index].message = value;\n                break;\n            case \"setStepBTN\" :\n                localstepData[index].btn = value;\n                break;\n            case \"setStepanim\" :\n                localstepData[index].anim = value;\n                break;\n            \n            case \"setStepCondition\" :\n                localstepData[index].condition = value;\n                break;\n            case \"setGuids\" :\n                localstepData[index].guids = value;\n                break;\n            case \"setChoiceText\" :\n                localstepData[parentIndex].choices[index].text = value;\n                break;\n            case \"setChoiceFeedback\" :\n                localstepData[parentIndex].choices[index].feedback = value;\n                break;\n            case \"setChoiceCategoryValue\" :\n                localstepData[parentIndex].choices[index].choicesScore = parseInt(event.target.value);\n                break;\n            case \"setChoiceStepIndex\" :\n                if (event.target.value < 0 || event.target.value > localstepData.length) {\n                    localstepData[parentIndex].choices[index].stepIndex = parentIndex;\n                } else {\n                    localstepData[parentIndex].choices[index].stepIndex = event.target.value;\n                }\n                break;\n            case \"setChoiceCorrect\" :\n                localstepData[parentIndex].choices[index].correct = parseInt(value);\n                break;\n            case \"setChoiceCorrectR\":\n                for (let dd = 0; dd < localstepData[parentIndex].choices.length; dd++) {\n                    if (index == dd) {\n                        localstepData[parentIndex].choices[dd].correct = Number(value);\t\n                    } else {\n                        localstepData[parentIndex].choices[dd].correct = 0;\n                    }\n                }\n                break;\n            case \"setChoiceCategory\" :\n                localstepData[parentIndex].choices[index].choicesCategory = Number(value);\n                break;\n            case \"setStepCategory\" :\n                localstepData[index].choicesCategory = parseInt(value);\n                break;\n            case \"setStepCategoryValue\" :\n                localstepData[index].choicesScore = event.target.value;\n                break;\n            case \"addCategory\" :\n                localscoreCategoryData[localscoreCategoryData.length] = {\n                    'id'    : localscoreCategoryData.length,\n                    'name'  : \"\",\n                    'value' : \"0\",\n                };\n                break;\n            case \"deleteCategory\" :\n                auth_store.update( (item) => {\n                    item.open = false;\n                    return item;\n                });\n\n                if (localscoreCategoryData.length > 1) {\n                    localscoreCategoryData.splice(index,1);\n                } else {\n                    swal(\"You cannot delete default node\");\n                }\n                break;\n            case \"addtab\" :\n                localtabData[localtabData.length] = {\n                    'title' : \"\",\n                    'name'  : \"\",\n                    'guid'  : \"\",\n                    'dialog': \"\",\n                };\n                break;\n            case \"setTabTitle\" :\n                localtabData[index].title = value;\n                break;\n            case \"setTabDialog\" :\n                localtabData[index].dialog = value;\n                break;\n            case \"setTabName\" :\n                localtabData[index].name = value;\n                localtabData[index].focus = state.sceneData.scene[defaultScene].anim[value].name;\n                break;\n            case \"setTabGuid\" :\n                localtabData[index].guid = value;\n                break;\n            case \"deleteTab\" :\n                localtabData.splice(index, 1);\n                break;\n            case \"setScene\" :\n                defaultScene = value;\n                sceneName    = state.sceneData.scene[defaultScene].title;\n                sceneJson    = state.sceneData.scene[defaultScene].json;\n                isSmartChat    = (state.sceneData.scene[defaultScene].is_smartchat == \"1\") ? \"1\" : \"0\";\n                let sceneCharacters = [];\n                if (state.sceneData.scene[defaultScene].assets.length < 2) {\n                    AH.select('.insightTab4').style.display = 'none';\n                    AH.select('.insightTab5').style.display = 'none';\n                } else {\n                    AH.select('.insightTab4').style.display = 'block';\n                }\n                for (let i = 0; i < state.sceneData.scene[defaultScene].characters.length; i++) {\n                    sceneCharacters = [\n                        ...sceneCharacters, {\n                        id     : i,\n                        name   : state.sceneData.scene[defaultScene].characters[i].name,\n                        visible: state.sceneData.scene[defaultScene].characters[i].visible\n                    }];\n                }\n                let sceneAssets = [];\n                for (let i = 0 ; i < state.sceneData.scene[defaultScene].assets.length; i++) {\n                    sceneAssets = [\n                        ...sceneAssets, {\n                        name    : state.sceneData.scene[defaultScene].assets[i].asset,\n                        visible : state.sceneData.scene[defaultScene].assets[i].visible,\n                        anim    : state.sceneData.scene[defaultScene].assets[i].anim,\n                        tooltip : state.sceneData.scene[defaultScene].assets[i].tooltip,\n                    }];\n                }\n                localcharacterData     = sceneCharacters;\n                localcharacterChoice   = sceneCharacters;\n                localassetsData \t   = sceneAssets;\n                localscoreCategoryData = [];\n                localscoreCategoryData[localscoreCategoryData.length] = {\n                    'id'    : localscoreCategoryData.length,\n                    'name'  : \"Mission\",\n                    'value' : \"0\",\n                };\n                localstepData = [];\n                if (state.sceneData.scene[defaultScene].anim.length < 1) {\n                    AH.select('.insightTab8').style.display = 'none';\n                } else {\n                    AH.select('.insightTab8').style.display = 'block';\n                }\n                loadScene(localpage_value);\n                break;\n            case \"updateMode\" :\n                localmodeData = parseInt(value);\n                break;\n            case \"voiceData2\" :\n                for (let indent = 0; indent < localstepData.length; indent++) {\n                    if (localstepData[indent].name == index) {\n                        localstepData[indent].voice = parseInt(value);\n                    }\n                }\n                state.sceneData.scene[defaultScene].characters[index].voice = parseInt(value);\n                break;\n            case \"visibleCharacter\" :\n                if (localcharacterData[index].visible == 0) {\n                    localcharacterData[index].visible = 1;\n                } else {\n                    localcharacterData[index].visible = 0;\n                }\n                sceneData = state.sceneData;\n                sceneData.scene[defaultScene].characters[index].visible = value;\n                auth_store.update( (item) => {\n                    item.sceneData = sceneData;\n                    return item;\n                });\n                state.sceneData.scene[defaultScene].characters[index].visible = value;\n                break;\n            case \"trigerchoiceimage\" :\n                AH.select(\"#choiceimg\"+index).click();\n                break;\n            case \"titleUpdate\":\n                resultTitle = value;\n                break;\n            case \"BGupdate\":\n                BGsrc = value;\n                AH.select(\"#bgResult\").setAttribute('src',value);\n                break;\n            case \"beganupdate\":\n                began = value;\n                /* It not allowed to add more than one word at the name of Begin button */\n                /*let begin = value.replace(/[^a-zA-Z]/gi, '');\n                began = begin;*/\n                AH.select(\"#begin_Button\").value = began;\n                break;\n            case \"labelupdate\":\n                localstepData[index].level_text = event.target.value;\n                break;\n            case \"updateNote\":\n                localstepData[index].important_node = event.target.value;\n                break;\n        }\n\n        for (let index = 0; index < localscoreCategoryData.length; index++) {\n            localscoreCategoryData[index].value = 0;\n        }\n\n        for (let index = 0; index < localstepData.length; index++) {\n            if (localstepData[index].allowChoices == 1 || localstepData[index].allowChoices == 3 ||  localstepData[index].allowChoices == 6) { \n                for (let sub_index = 0; sub_index < localstepData[index].choices.length; sub_index++) {\n                    let choicesScoreIndex = localstepData[index].choices[sub_index].choicesCategory;\n                    localscoreCategoryData[choicesScoreIndex].value += parseInt(localstepData[index].choices[sub_index].choicesScore);\n                    localstepData[index].choices[sub_index].id = sub_index;\n                }\n            } \n            if (localstepData[index].allowChoices == 2 || localstepData[index].allowChoices == 4 || localstepData[index].allowChoices ==  5) {\n                var scoreIndex = localstepData[index].choicesCategory;\t\n                localscoreCategoryData[scoreIndex].value += parseInt(localstepData[index].choicesScore);\t\n            }\n            localstepData[index].id = index;\n        }\n\n        xml.smxml._sceneName = sceneName;\n        xml.smxml._sceneJson = sceneJson;\n        xml.smxml._isSmartChat = isSmartChat;\n        let insightupdatedData = { 'characters': localcharacterData, 'steps': localstepData, 'scoreCategories': localscoreCategoryData, 'assets': localassetsData, 'link': localtabData, 'mode': localmodeData, 'bgImage': BGsrc, 'detail': resultTitle, 'begin': began, 'insight_intro': tinyMCE.get(\"stem\").getContent({ format: 'text' }).trim()}\n        insightupdatedData = JSON.stringify(insightupdatedData, null, 4);\n        xml.smxml.__cdata = insightupdatedData;\n        xml = JSONToXML(xml);\n\t\tif (xml.indexOf('<!--[CDATA') > -1) {\n\t\t\txml = xml.replace('<!--[CDATA', '<![CDATA').replace(']]-->', ']]>');\n        }\n        getChildXml(xml);\n    }\n\n    // for deleting the steps or mission\n    function triggerDelete(event, type, index) {\n        swal({\n            text: l.del_confirmation,\n            type: \"warning\",\n            buttons: true,\n            dangerMode: true,\n        }).then(function(isConfirm) {\n            if (isConfirm) {\n                updateXmlValue(event, index, \"\", type);\n            }\n        });\n    }\n    \n</script>\n\n<div id=\"authoringArea\">\n    <center>\n        <div id=\"frame\">\n            <iframe id=\"authoringFrame\" title=\"insight_frame\" name=\"authoringFrame\" height=\"580\" width=\"94%\" ></iframe>\n        </div>\n    </center>\n    \n    {#if state.tabvalue == 6}\n        <div id=\"player_modal\" class=\"modal player_dialog fade\" tabIndex=\"-1\">\n            <div class=\"modal-dialog modal-dialog-centered\">\n                <div class=\"modal-content\">\n                    <div class=\"modal-body overflow-y\">\n                        <div class=\"row\">\n                            <div class=\"col-6\">\n                                <div class=\"input-group\">\n                                    <label class=\"input-group-text\" for=\"module_type\">{l.module}</label>\n                                    <!-- svelte-ignore a11y-no-onchange -->\n                                    <select id=\"module_type\" on:change={handlePlayer} bind:value={state.type} class=\"form-select\">\n                                        <option value=\"simulation\">{l.simulation_txt}</option>\n                                        <option value=\"playground\">{l.playground}</option>\n                                        <option value=\"terminal\">{l.terminal_txt}</option>\n                                        <option value=\"lablink\">{l.livelab}</option>\n                                    </select>\n                                </div>\n                            </div>\n                        </div>\n                        <div>\n                            <input type=\"hidden\" name=\"currentItem\" id=\"currentItem\" value={state.currentItem}/>\n                            <div class=\"col-12 mb-0 mt-3 px-0 search_list h\">\n                                <input class=\"form-control search\" id=\"search\" name=\"search\" type=\"text\" placeholder={l.search_item_txt}/>\n                            </div>\n                            <div class=\"col-12 px-0 float-start\" style=\"max-height: 300px;\">\n                                <table id=\"list_content_tbl\" class=\"h list_content table table-hover table_list table_search w-100\">\n                                    <thead class=\"always_show\">\n                                        <tr>\n                                            <th class=\"text-dark border\">{l.item_id}</th>\n                                            <th class=\"text-dark border\">{l.title}</th>\n                                            <th class=\"text-dark border\">{l.type}</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody id=\"table_list\"></tbody>\n                                </table>\n                                <div class=\"alert alert-info col-12 float-start mb-0 mt-4\" id=\"info_data\">{l.select_instruction}</div>\n                                <div class=\"alert alert-danger mt-2 col-12 float-start h\" id=\"not_found\">{l.no_record}</div>\n                                <center id=\"list_process\" class=\"mt-4 pt-1 h\">\n                                    <Loader size={60} msg={'Please Wait'} />\n                                </center>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"modal-footer\">\n                        <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">{l.cancel}</button>\n                        <button type=\"button\" class=\"btn btn-secondary\" on:click={getSnippet}>{l.list_content}</button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    {/if}\n\n    {#if show_dom}\n        <div class=\"insight_tabs\">\n            <div class=\"btn-toolbar justify-content-between\" role=\"toolbar\" aria-label=\"Tabs\">\n                <div class=\"btn-group col-12 flex-wrap px-0\" role=\"group\" aria-label=\"Insight Tabs\">\n                    <button type=\"button\" data-tab=\"0\" class:active = {state.tabvalue == 0} class=\"btn btn-outline-secondary tabbutton insightTab1\">{l.scene}</button>\n                    <button type=\"button\" data-tab=\"1\" class:active = {state.tabvalue == 1} class=\"btn btn-outline-secondary tabbutton insightTab2\">{l.intro}</button>\n                    <button type=\"button\" data-tab=\"2\" class:active = {state.tabvalue == 2} class=\"btn btn-outline-secondary tabbutton insightTab3\">{l.characters}</button>\n                    <button type=\"button\" data-tab=\"3\" class:active = {state.tabvalue == 3} class=\"btn btn-outline-secondary tabbutton insightTab4 h\">{l.assets}</button>\n                    <button type=\"button\" data-tab=\"4\" class:active = {state.tabvalue == 4} class=\"btn btn-outline-secondary tabbutton insightTab5 h\">{l.chat_windows}</button>\n                    <button type=\"button\" data-tab=\"5\" class:active = {state.tabvalue == 5} class=\"btn btn-outline-secondary tabbutton insightTab6\">{l.mission}</button>\n                    <button type=\"button\" data-tab=\"6\" class:active = {state.tabvalue == 6} class=\"btn btn-outline-secondary tabbutton insightTab7\">{l.communication}</button>\n                    <button type=\"button\" data-tab=\"7\" class:active = {state.tabvalue == 7} class=\"btn btn-outline-secondary tabbutton insightTab8 h\">{l.animation}</button>\n                    <button type=\"button\" data-tab=\"8\" class:active = {state.tabvalue == 8} class=\"btn btn-outline-secondary tabbutton insightTab9\">{l.result}</button>\n                </div>\n            </div>\n\n            {#if state.tabvalue == 0}\n                <center>\n                    <div class=\"img_gridView row col-12\">\n                        {#if sceneArr.length > 0}\n                            {#each sceneArr as data} \n                                <div key={data.key} class=\"col-lg-3 col-sm-4 col scene_image float-start p-2\" class:bg-light={data.type == 0}>\n                                    <div class=\"card card-body shadow-sm  p-2 h-100\">\n                                        <div class=\"image_view w-100 bg-light d-flex\">\n                                            <img \n                                                alt = {data.alt}\n                                                width=\"200\"\n                                                height=\"200\"\n                                                src = {curDomain + 'labs/insight/Images/'+data.alt+'/scene.png'}\n                                                class=\"w-100 border rounded\"\n                                            />\n                                        </div>\n                                        <div class=\"row pt-2\">\n                                            <div class=\"col-sm-12\">\n                                                <div class=\"image_dec font18 overflow-hidden w-100 h-100 pt-2 text-center text-truncate\" data-bs-toggle=\"tooltip\" title=\"{data.alt}\">\n                                                    <span htmlFor={\"choose_btn\" + (data.key)}>{data.alt}</span>\n                                                </div>\n                                            </div>\n                                            <div class=\"col-sm-12\">\n                                                <div class=\"grid_btn pt-2\">\n                                                    {#if data.type == 0}\n                                                        <button type=\"button\" \n                                                            value={data.key}\n                                                            class=\"btn choose_btn btn-secondary float-end px-1 px-sm-3\"\n                                                            id={\"choose_btn\"+(data.key)} \n                                                            on:click = {(event) => {\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\n                                                            }}\n                                                        >\n                                                            {l.no_of_token}\n                                                        </button>\n                                                    {:else if data.type == 1}\n                                                        <button type=\"button\" value={data.key}\n                                                            class=\"btn choose_btn btn-light float-end text-dark\"\n                                                            id={\"choose_btn\"+(data.key)} \n                                                            data-bs-toggle=\"tooltip\"\n                                                            title={l.click_to_select + (data.alt).toLowerCase() + \".\"}\n                                                            on:click = {(event) => {\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\n                                                            }}\n                                                        >\n                                                            {l.select}\n                                                        </button>\n                                                        <button type=\"button\" on:click = {(event) => {updateXmlValue(event, data.key, data.key, \"deleteScene\")}} class=\"delete_button ml-auto\" tabIndex=\"0\" role=\"button\" aria-pressed=\"false\"  style=\"border: none;background: white\">\n                                                            <span class=\"icomoon-remove-2 s4\" style=\"color: #000;cursor: pointer;\"></span>\n                                                        </button>\n                                                    {:else}\n                                                        <button type=\"button\" value={data.key}\n                                                            class=\"btn choose_btn float-end btn-light text-dark px-1 px-sm-3\"\n                                                            id={\"choose_btn\"+(data.key)} \n                                                            data-bs-toggle=\"tooltip\"\n                                                            title={l.click_to_select + (data.alt).toLowerCase()+\".\"}\n                                                            on:click = {(event) => {\n                                                                updateXmlValue(event, \"\", \"\", \"setScene\")\n                                                            }}\n                                                        >\n                                                            {l.select}\n                                                        </button>\n                                                    {/if}\n                                                </div>\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            {/each}\n                        {/if}\n                    </div>\n                    <div class=\"col-12 float-start pb-3 px-0 row\">\n                        <div class=\"col-12 px-0\">\n                            {#if menuLayout.length > 0}\n                                {#each menuLayout as data} \n                                    <div class=\"pagination m-sm-1 justify-content-center\">\n                                        <button tabIndex=\"0\" type=\"button\" class=\"btn btn-outline-dark page-item form-control pagination_btn active col-6 col-sm-3\" id={\"pagination_btn\" + (data.data_active)} value={data.data_active} key={data.data_active} on:click={() => {loadScene(data.end)}}>{l.load_more}</button>\n                                    </div>\n                                {/each}\n                            {/if}\n                        </div>\n                    </div>\n                </center>\n            {:else if state.tabvalue == 1}\n                <div>\n                    <div class=\"row col-md-10 mx-auto my-5\">\n                        <div class=\"col-sm-7\">\n                            <div class=\"card card-body intro_image_view shadow-sm p-2 min_height_300\">\n                                <img \n                                    alt = {sceneName}\n                                    src = {curDomain + 'labs/insight/Images/' + sceneName +'/scene.png'}\n                                    class = \"min_height_300 w-100\"\n                                />\n                            </div>\t\t\t\t\t\t\t\n                        </div>\n                        <div class=\"col-sm-5 mt-3 mt-sm-0\">    \n                            <div class=\"form-group row mb-0\">\n                                <div class=\"input-group mb-3\">\n                                    <label for=\"select_Mode\" class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.select_game_mode} htmlFor=\"select_Mode\" on:click=\"{(event) => { updateXmlValue(event,\"select_Mode\",\"\",\"triggerForm\")}}\"> Mode </label>\n                                    \n                                    <!-- svelte-ignore a11y-no-onchange -->\n                                    <select \n                                        class=\"form-select\" \n                                        id=\"select_Mode\"\n                                        bind:value={localmodeData}\n                                        on:change= {(event) => updateXmlValue(event, sceneTemp, \"\", \"updateMode\")} \n                                    >\n                                        <option value={0}>{l.test}</option>\n                                        <option value={1}>{l.learn}</option>\n                                    </select>\n                                </div>\n                            </div>\n                            <div class=\"form-group row mb-0\">\n                                <div class=\"input-group mb-3\">\n                                    <label class=\"input-group-text\" for=\"begin_Button\" data-bs-toggle=\"tooltip\" title={l.start_button}>{l.name_text}</label>\n                                    <input \n                                        type=\"text\" \n                                        class=\"form-control\" \n                                        placeholder=\"{l.placeholder_text}\" \n                                        id= \"begin_Button\"\n                                        bind:value={began}\n                                        on:change= {(event) => updateXmlValue(event, 0, \"\", \"beganupdate\")}\n                                        aria-describedby=\"buttonHelpBlock\"\n                                    />\n                                </div>\n                                <div class=\"col-md-12\">\n                                    <small id=\"buttonHelpBlock\" class=\"form-text text-muted font14 buttonHelpBlock mb-2\">\n                                    {l.button_text}</small>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {:else if state.tabvalue == 2}\n                <div class=\"col-md-10 mx-auto offset-3 mt-5\">\n                    <table class=\"w-100\">\n                        <tbody>\n                            {#each localcharacterData as data, index}\n                                <tr key={index}>\n                                    <td align=\"center\" class=\"char_image\">\n                                        <div class=\"text-center\">\n                                            <img width=\"145px\" height=\"145px\" alt={'Character '+(index + 1)} src={curDomain + 'labs/insight/Images/'+sceneName+'/chracter' + (index + 1) + '.png'}/>\n                                        </div>\n                                    </td>\n                                    <td class=\"p-3\">\n                                        <div class=\"form-check form-switch ms-3\">\n                                            <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" id={'char_visibl' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"visibleCharacter\")}}  value={data.visible} checked={(data.visible == 0) ? true : false} />\n                                            <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.set_chr_visiblity} for={'char_visibl' + (index)}>Visibility</label>\n                                        </div>\n                                        <div class=\"form-group row mb-2\">\n                                            <div class=\"input-group\">\n                                                <label for={'character_name'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.add_chr_nm} htmlFor={'character_name'+(index)}> Character Name </label>\n                                                \n                                                <input \n                                                    type=\"text\" \n                                                    class=\"form-control\" \n                                                    placeholder=\"Character Name\" \n                                                    id= {'character_name'+(index)}\n                                                    bind:value={data.name}\n                                                    disabled={data.visible == 0 ? (false) : (true)}\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setCharacter\")}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row mb-2\">\n                                            <div class=\"input-group\">\n                                                <label for={'char_voice'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.chr_voice} htmlFor={'char_voice'+(index)}> {l.character_voice} </label>\n                                                {#if (state.sceneData.scene[defaultScene].characters[index].voice == 1 || state.sceneData.scene[defaultScene].characters[index].voice == 3 || state.sceneData.scene[defaultScene].characters[index].voice == 7 || state.sceneData.scene[defaultScene].characters[index].voice == 9)}\n                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                    <select \n                                                        class=\"form-select\" \n                                                        id={'char_voice' + index}\n                                                        bind:value={state.sceneData.scene[defaultScene].characters[index].voice}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"voiceData2\")} \n                                                        disabled={data.visible == 0 ? (false) : (true)}\n                                                    >\n                                                        <option value={1}>{l.male_one}</option>\n                                                        <option value={3}>{l.male_two}</option>\n                                                        <option value={7}>{l.male_three}</option>\n                                                        <option value={9}>{l.male_four}</option>\n                                                    </select>\n                                                {:else}\n                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                    <select \n                                                        class=\"form-select\" \n                                                        id={'char_voice' + index}\n                                                        bind:value={state.sceneData.scene[defaultScene].characters[index].voice}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"voiceData2\")} \n                                                        disabled={data.visible == 0 ? (false) : (true)}\n                                                    >\n                                                        <option value={0}>{l.female_one}</option>\n                                                        <option value={2}>{l.female_two}</option>\n                                                        <option value={4}>{l.female_three}</option>\n                                                        <option value={6}>{l.female_four}</option>\n                                                        <option value={8}>{l.female_five}</option>\n                                                        <option value={10}>{l.female_six}</option>\n                                                    </select>\n                                                {/if}\n                                            </div>\n                                        </div>\n                                    </td>\n                                </tr>\n                            {/each}\n                        </tbody>\n                    </table>\n                </div>\n            {:else if state.tabvalue == 3} \n                <div class=\"col-md-10 mx-auto offset-3 mt-5\">\n                    <table class=\"w-100\">\n                        <tbody>\n                            {#each state.sceneData.scene[defaultScene].assets as data, index}\n                                <tr key={index}>\n                                    <td align=\"center\" class=\"w-25\">\n                                        <div class=\"text-center\">\n                                            <img class=\"img-thumbnail\" width=\"145px\" height=\"145px\" alt={'Assets '+(index + 1)} src={curDomain + 'labs/insight/Images/'+sceneName+'/assets' + (index + 1) + '.png'}/>\n                                        </div>\n                                        <div class=\"text-center mt-2\">\n                                            <input type=\"text\" bind:value={data.asset} disabled=\"disabled\" class=\"form-control\" />\n                                        </div>\n                                    </td>\n                                    <td class=\"p-3\">\n                                        <div class=\"form-check form-switch ms-3\">\n                                            <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" id={'asset_visible' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"assetVisible\")}} value={data.visible} checked={localassetsData[index].visible == 0 ? (false) : (true)}/>\n                                            <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.asset_visibility} for={'asset_visible' + (index)}>{l.visibility}</label>\n                                        </div>\n                                        <div class=\"form-group row mb-2\">\n                                            <div class=\"input-group\">\n                                                <label for={'asset_anim'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.asset_animation} htmlFor={'asset_anim'+(index)}> {l.animation} </label>\n                                                <!-- svelte-ignore a11y-no-onchange -->\n                                                <select \n                                                    class=\"form-select\" \n                                                    id={'asset_anim' + index}\n                                                    bind:value={data.anim}\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"assetAnim\")} \n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\n                                                >\n                                                    {#each state.sceneData.scene[defaultScene].anim as animation, key}\n                                                        <option value={key} key={key}>{animation.name}</option>\n                                                    {/each}\n                                                </select>\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row mb-2\">\n                                            <div class=\"input-group\">\n                                                <label for={'asset_label'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.tooltip_txt} htmlFor={'asset_label'+(index)}> {l.tooltip} </label>\n                                                <input \n                                                    type=\"text\" \n                                                    class=\"form-control\" \n                                                    placeholder=\"Tooltip Name\" \n                                                    id= {'asset_label' + (index)}\n                                                    bind:value={data.tooltip}\n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setTooltip\")}\n                                                />\n                                            </div>\n                                        </div>\n                                        <div class=\"form-group row mb-2\">\n                                            <div class=\"input-group\">\n                                                <label for={'asset_stepindex'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.tooltip_txt} htmlFor={'asset_stepindex'+(index)}> {l.onclick_step} </label>\n                                                <input \n                                                    type=\"number\" \n                                                    class=\"form-control\"\n                                                    id= {'asset_stepindex' + (index)}\n                                                    min=\"1\"\n                                                    max={localstepData.length} \n                                                    bind:value={data.assets_click}\n                                                    disabled={localassetsData[index].visible == 0 ? (true) : (false)}\n                                                    on:change= {(event) => updateXmlValue(event, index, \"\", \"setAssetsClick\")}\n                                                />\n                                            </div>\n                                        </div>\n                                    </td>\n                                </tr>\n                            {/each}\n                        </tbody>\n                    </table>\n                </div>\n            {:else if state.tabvalue == 5} \n                <div class=\"table_container col-md-10 mx-auto offset-2 mt-4\">\n                    {#if localscoreCategoryData.length > 0}\n                        <table class=\"w-100 table mb-2\" style=\"border: 1px solid #dee2e6!important;\">\n                            <tbody>\n                                {#each localscoreCategoryData as data, index}\n                                    <tr key={index}>\n                                        <td align=\"center\" class=\"tabcol border-0 ps-3\">\n                                            <div class=\"row\">\n                                                <div class=\"col-5 col-lg-9 col-sm-7\">\n                                                    <input\n                                                        type=\"text\"\n                                                        bind:value={data.name}\n                                                        on:change={(event) => { updateXmlValue(event, index,\"\",\"setCategoryName\")}}\n                                                        class = \"form-control\"\n                                                        id={\"main_mission\" + (index)}\n                                                        placeholder={\"Mission #\" + (index + 1) + \" title\"}\n                                                    />\n                                                </div>\n                                                <div class=\"col-7 col-sm-3 px-0\">\n                                                    <div class=\"input-group\">\n                                                        <label for=\"inputPassword\" data-bs-toggle=\"tooltip\" title={l.points_text} class=\"input-group-text\">{l.points}</label> \n                                                        <input type=\"number\" min=\"0\" bind:value={data.value} max=\"100\" class=\"cursor_not_allowed form-control px-0 text-center\" disabled={true}>\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </td>\n                                        <td align=\"center\" class=\"border-0 float-end\">\n                                            <button type=\"button\" class=\"bg-white delete_button ms-auto text-white border-0 mt-1\" on:click={(event) => { triggerDelete(event, 'deleteCategory', index)}} tabindex=\"0\" role=\"button\" aria-pressed=\"false\">\n                                                <span data-bs-toggle=\"tooltip\" title={l.delete}  class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                {/each}      \n                            </tbody>\n                        </table>\n                    {/if}\n                    <div class=\"row\">\n                        <div class=\"col-12\">\n                            <div class=\"add_step float-end mt-2\" on:click={(event) => {updateXmlValue(event, localscoreCategoryData.length ,\"\",\"addCategory\")}}>\n                                <button data-bs-toggle=\"tooltip\" title={l.new_mission} class=\"btn rounded-pill img-shadow border shadow-sm\">\n                                    <b>{l.add_mission}</b>\n                                    <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            {:else if state.tabvalue == 6} \n                <div>\n                    <div id=\"sortable\">\n                        {#if localstepData.length > 0}\n                            {#each localstepData as data, index}\n                                <div class=\"accordion p-2\" id={\"steps_accordian\" + index} >\n                                    <div class=\"accordion-item\">\n                                        <div class=\"accordion-header allowDraggable\" style=\"cursor: move;\" id={\"steps_heading\" + index}>\n                                            <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#{\"steps_collapse\" + index}\" aria-expanded=\"false\" aria-controls=\"{\"steps_collapse\" + index}\">\n                                                <span>\n                                                    <span class=\"icomoon-new-24px-arrow-right-2 position-relative icon_setup s4\"></span>\n                                                    {'Step ' + (index + 1)}\n                                                </span>\n                                            </button>\n                                        </div>\n                                        <div id=\"{\"steps_collapse\" + index}\" class=\"accordion-collapse collapse\" aria-labelledby={\"steps_heading\" + index} data-bs-parent={\"#steps_accordian\" + index}>\n                                            <div class=\"accordion-body\">\n                                                <div class=\"row\">\n                                                    <input type=\"hidden\" class=\"step_swap\" on:click={(event) => { updateXmlValue(event, index, \"\",\"swapSteps\")}} />\n                                                    {#if data.allowChoices != 7}\n                                                        <div class=\"col-3 pt-1\">\n                                                            <div class=\"row mb-2 mx-0\">\n                                                                <label for={'select-character'+(index)} class=\"d-inline font18 px-0 text-truncate\" htmlFor={'select-character'+(index)}>{l.choose_character}</label>\n                                                            </div>\n                                                            <div class=\"row mx-0\">\n                                                                <div class=\"stmnt_img w-100 px-0\">\n                                                                    {#if localcharacterData[data.name].visible == 0}\n                                                                        <img style=\"width: 100%; height:100%;\" alt={'Character '+ ( data.name + 1) + '' + index} src={curDomain + 'labs/insight/Images/' + sceneName + '/chracter' + (data.name + 1) + '.png'}/>\n                                                                    {:else}\n                                                                        <img style=\"width: 100%; height:100%;\" alt={'Character '+ (data.name + 1)} src={curDomain + 'labs/insight/Images/character.png'}/>\n                                                                    {/if}\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"row mx-0\">\n                                                                {#if localcharacterData[data.name].visible == 0}\n                                                                    <div class=\"input-group input-group-sm mt-1 px-0\">\n                                                                        <!-- svelte-ignore a11y-no-onchange -->\n                                                                        <select \n                                                                            class=\"form-select\" \n                                                                            id={\"select-character\" + (index)}\n                                                                            bind:value={data.name}\n                                                                            on:change= {(event) => updateXmlValue(event, index, \"\", \"updateStepChracter\")} \n                                                                        >\n                                                                            {#each localcharacterData as character, keys}\n                                                                                {#if localcharacterData[keys].visible == 0}\n                                                                                    <option value={keys}>{character.name}</option>\n                                                                                {/if}\n                                                                            {/each}\n                                                                        </select>\n                                                                    </div>\n                                                                {:else}\n                                                                    <div class=\"input-group input-group-sm mt-1 px-0\">\n                                                                        <!-- svelte-ignore a11y-no-onchange -->\n                                                                        <select \n                                                                            class=\"form-select\" \n                                                                            id={\"select-character\" + (index)}\n                                                                            bind:value={data.name}\n                                                                            on:change= {(event) => updateXmlValue(event, index, \"\", \"updateStepChracter\")} \n                                                                        >\n                                                                            {#each localcharacterData as character, keys}\n                                                                                {#if localcharacterData[keys].visible == 0}\n                                                                                    <option value={keys}>{character.name}</option>\n                                                                                {/if}\n                                                                            {/each}\n                                                                            <option value={data.name} k={data.name}>{l.not_visible}</option>\n                                                                        </select>\n                                                                    </div>\n                                                                {/if}\n                                                            </div>\n                                                        </div>\n                                                    {/if}\n                                                    <div class={(data.allowChoices != 7) ? \"col-9 pl-0\" :\"col-12\"}>\n                                                        <div class=\"row mx-0\">\n                                                            {#if data.allowChoices == 7} \n                                                                <div class=\"col-lg-2 col-3 form-group pl-0\">\n                                                                    <div class=\"float-start w-100\">\n                                                                        <div class=\"input-group input-group-sm\">\n                                                                            <label for=\"selectVoice\" data-bs-toggle=\"tooltip\" title={l.narrater_voice} class=\"input-group-text\">{l.voice}</label>\n                                                                            <!-- svelte-ignore a11y-no-onchange -->\n                                                                            <select \n                                                                                class=\"form-select\" \n                                                                                id=\"selectVoice\"\n                                                                                bind:value={data.voice}\n                                                                                on:change= {(event) => updateXmlValue(event, index, \"\", \"updateIntroVoice\")} \n                                                                            >\n                                                                                <option value={0}>{l.female}</option>\n                                                                                <option value={1}>{l.male}</option>\n                                                                            </select>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            {/if}\n                                                \n                                                            <div class=\"col-lg-4 col-6 form-group pl-0\">\n                                                                <div class=\"input-group input-group-sm\">\n                                                                    <label for={\"select-type\" + (index)} data-bs-toggle=\"tooltip\" title={l.type_of_step} class=\"d-md-block d-none input-group-text\">{l.conversion_type}</label>\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                                    <select \n                                                                        class=\"form-select\" \n                                                                        id={\"select-type\" + (index)}\n                                                                        bind:value={data.allowChoices}\n                                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"updateChoiceType\")} \n                                                                    >\n                                                                        <option value={0}>{l.statement}</option>\n                                                                        <option value={1}>{l.choice}</option>\n                                                                        <option value={2}>{l.item}</option>\n                                                                        <option value={3}>{l.multichoice}</option>\n                                                                        <option value={7}>{l.alert}</option>\n                                                                    </select>\n                                                                </div>\n                                                            </div>\n                                                            {#if data.allowChoices <= 0}\n                                                                <div class=\"col-4 col-lg-3 col-md-4 pr-0\">\n                                                                    <div class=\"form-check form-switch mt-1\">\n                                                                        <input class=\"form-check-input\" tabindex=\"0\" type=\"checkbox\" data-bs-toggle=\"tooltip\" title={l.autocomplete_txt} id={'selectAuto' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"updateAuto\")}}  bind:value={data.auto} checked={data.auto == 0 ? false : true}/>\n                                                                        <label class=\"text-truncate form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.autocomplete_txt} for={\"selectAuto\" + (index)}>{l.autocomplete}</label>\n                                                                    </div>\n                                                                </div>\n                                                            {/if}\n                                                            <div class=\"{ (data.allowChoices > 0) ? 'col-1 ml-auto text-right px-0' : 'col-lg-5 col-2 px-0 text-right'}\">\n                                                                <button data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"bg-white delete_button mx-auto border-0 px-0\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" on:click= {(event) => { triggerDelete(event, 'deleteStep', index) } }>\n                                                                    <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\n                                                                </button>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"row mx-0\">\n                                                            <!-- Uploading in choice and multichoice-->\n                                                            {#if data.allowChoices == 1 || data.allowChoices == 3}\n                                                                <div class=\"col-4 px-0\">\n                                                                    <!-- svelte-ignore a11y-img-redundant-alt -->\n                                                                    <img \n                                                                        id={\"samplechoice_image\"+ index}\n                                                                        alt = \"Choice Question Image\"\n                                                                        src = {(data.image == \"\" || data.image == null || data.image == \"undefined\") ? (curDomain + 'labs/insight/Images/bl.jpg') : (data.image)}\n                                                                        class=\"img-thumbnail choiceimage rounded-0 w-100\"\n                                                                    />\n                                                                    <button type=\"button\" class=\"btn btn-dark rounded-0 w-100 text-truncate\"\n                                                                        data-bs-toggle=\"tooltip\"\n                                                                        title={l.image_size_txt}\n                                                                        on:click = {(event) => { updateXmlValue(event , index, \"\", \"trigerchoiceimage\")}}\n                                                                    >\n                                                                        {l.file_elem}\n                                                                    </button>\n                                                                </div>\n                                                                <input class=\"h\" accept=\"image/png\" type=\"file\" id={\"choiceimg\" + index} on:change={(event) => onChoiceImageSelect(event, index)}/> \n                                                                <input\n                                                                    type=\"hidden\"\n                                                                    bind:value={data.image}\n                                                                    id={\"choice_question_image\" + (index)}\n                                                                    class=\"form-control w-50 choice_image_upld\"\n                                                                    on:click = {(event) => { updateXmlValue(event , index, \"\", \"setImageSrc\")}}\n                                                                    placeholder={l.image_link}\n                                                                />\n                                                            {/if}\n                                                            <div class={ data.allowChoices == 7 ? \"float-start col px-0\" : \"border-dark float-start ml-0 pl-2 px-0\"} class:col-8 = {data.allowChoices == 1 || data.allowChoices == 3}>\n                                                                <div class={ data.allowChoices == 7 ? \"border-dark\" : \"\" } >\n                                                                    <textarea\n                                                                        class=\"commu_textarea w-100\"\n                                                                        value={removeTags(data.message)}\n                                                                        id={\"statementTxt\" + index}\n                                                                        on:change={(event) => {updateXmlValue(event, index, \"\", \"setStepStatement\")}}\n                                                                        placeholder=\"Conversation text\"\n                                                                    ></textarea>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n\n                                                <!-- Item id, mission , score -->\n                                                {#if (data.allowChoices == 2 || data.allowChoices == 4 || data.allowChoices == 5) }\n                                                    <div class=\"col-12 mt-2 px-0\">\n                                                        <div class=\"row\">\n                                                            <div class=\"col-3\">\n                                                                <div class=\"input-group\">\n                                                                    <label\n                                                                        for={\"itemTxt\" + index}\n                                                                        class=\"input-group-text\"\n                                                                        data-bs-toggle=\"tooltip\"\n                                                                        title={l.guid_value}\n                                                                    >\n                                                                        {(data.allowChoices == 5 || data.allowChoices == 4) ? 'Value' : 'Item Id'}\n                                                                    </label>\n                                                                    <input\n                                                                        type=\"text\"\n                                                                        bind:value={data.guids}\n                                                                        on:change={ (event) => { updateXmlValue(event, index, \"\", \"setGuids\") }}\n                                                                        placeholder=\"Enter Value\"\n                                                                        class=\"form-control\"\n                                                                        id={\"itemTxt\" + index}\n                                                                    />\n                                                                    <div\n                                                                        class=\"add_item_button border btn p-1\"\n                                                                        tabindex=\"0\"\n                                                                        on:click={ (event) => {updateXmlValue( event, index, \"\", \"addItem\")}}\n                                                                    >\n                                                                        <span class=\"align-middle text-dark pointer icomoon-new-24px-add-circle-1 s4\"></span>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n\n                                                            <div class=\"col-3\">\n                                                                <div class=\"input-group\">\n                                                                    <label\n                                                                        for={\"selectMission\" + index}\n                                                                        class=\"input-group-text\"\n                                                                        data-bs-toggle=\"tooltip\"\n                                                                        title={l.mission_name}\n                                                                    >\n                                                                        {l.mission}\n                                                                    </label>\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                                    <select \n                                                                        class=\"form-select\" \n                                                                        id={\"selectMission\" + (index)}\n                                                                        bind:value={data.choicesCategory}\n                                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setStepCategory\")} \n                                                                    >\n                                                                        {#each localscoreCategoryData as category, keys}\n                                                                                <option value={keys}>{category.name}</option>\n                                                                        {/each}\n                                                                    </select>\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"col-3\">\n                                                                <div class=\"input-group\">\n                                                                    <label\n                                                                        for={\"selectScore\" + index}\n                                                                        class=\"input-group-text\"\n                                                                        data-bs-toggle=\"tooltip\"\n                                                                        title={l.score_value}\n                                                                    >\n                                                                        {l.score}\n                                                                    </label>\n                                                                    <input\n                                                                        type=\"number\"\n                                                                        min=\"0\"\n                                                                        max=\"100\"\n                                                                        bind:value={data.choicesScore}\n                                                                        on:change={ (event) => { updateXmlValue(event, index, \"\", \"setStepCategoryValue\") }}\n                                                                        id={\"selectScore\" + index}\n                                                                        class=\"form-control\"\n                                                                    />\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                {/if}\n\n                                                <!-- Speech checkbox-->\n                                                {#if data.allowChoices <= 0}\n                                                    <div class=\"col-12 mt-2 px-0\">\n                                                        <div class=\"row\">\n                                                            <div class=\"col-3\">\n                                                                <div class=\"form-check form-switch ms-3 mt-2\">\n                                                                    <input class=\"form-check-input\" tabindex=\"0\" data-bs-toggle=\"tooltip\" title={l.speech_input} type=\"checkbox\" id={'selectSpeech' + (index)}  on:change= {(event) => { updateXmlValue(event, index, \"\", \"updateSpeech\")}}  bind:value={data.speech} checked={data.speech == 0 ? (false) : (true)}/>\n                                                                    <label class=\"form-check-label mt-small\" data-bs-toggle=\"tooltip\" title={l.speech_txt} for={\"selectSpeech\" + (index)}>{l.speech}</label>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                {/if}\n\n                                                <!-- Branching Conditions -->\n                                                {#if data.allowChoices > 4 && data.allowChoices != 7 && data.allowChoices != 8}\n                                                    <div class=\"col-12 mt-2 px-0\">\n                                                        <div class=\"form-floating\">\n                                                            <input type=\"text\" class=\"form-control\" id=\"branching_condition\" placeholder=\"Enter conditions here\" bind:value={data.condition} on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepCondition\")}}>\n                                                            <label for=\"branching_condition\">{l.branch_condition}</label>\n                                                        </div>\n                                                    </div>\n                                                {/if}\n\n                                                <!-- Button Name & Animation -->\n                                                {#if data.allowChoices == 8}\n                                                    <div class=\"col-12 mt-2 px-0\">\n                                                        <div class=\"row\">\n                                                            <div class=\"col-6\">\n                                                                <div class=\"form-floating\">\n                                                                    <input type=\"text\" class=\"form-control\" id=\"button_name\" placeholder={l.enter_btn_name} bind:value={data.btn} on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepBTN\")}}>\n                                                                    <label for=\"button_name\">{l.btn_name}</label>\n                                                                </div>\n                                                            </div>\n                                                            <div class=\"col-6\">\n                                                                <div class=\"form-floating\">\n                                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                                    <select \n                                                                        class=\"form-select\" \n                                                                        id=\"animation\" \n                                                                        data-bs-toggle=\"tooltip\"\n                                                                        title={l.animation}\n                                                                        bind:value = {data.anim}\n                                                                        on:change = {(event) => {updateXmlValue(event, index , \"\", \"setStepanim\")}}\n                                                                    >\n                                                                        {#each state.sceneData.scene[defaultScene].anim as animation , key}\n                                                                            <option value={key} key={key}>{animation.name}</option>\n                                                                        {:else}\n                                                                            <option value=\"\" key=\"0\" selected disabled>{l.no_anim_avail}</option>\n                                                                        {/each}\n                                                                    </select>\n                                                                    <label for=\"animation\">{l.animation}</label>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                {/if}\n\n                                                <!--Choice accordian-->\n                                                {#if (data.allowChoices == 1 || data.allowChoices == 3 || data.allowChoices == 6)}\n                                                    {#each data.choices as choices, key}\n                                                        <div class=\"accordion py-2\" id={\"choices_accordian\" + index + \"_\" + key} >\n                                                            <div class=\"accordion-item\">\n                                                                <div class=\"accordion-header\" id={\"choices_heading\" + index + \"_\" + key}>\n                                                                    <button class=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#{\"choices_collapse\" + index + \"_\" + key}\" aria-expanded=\"false\" aria-controls=\"{\"choices_collapse\" + index + \"_\" + key}\">\n                                                                        {'Choice ' + (key + 1)}\n                                                                    </button>\n                                                                </div>\n                                                                <div id=\"{\"choices_collapse\" + index + \"_\" + key}\" class=\"accordion-collapse collapse\" aria-labelledby={\"choices_heading\" + index + \"_\" + key} data-bs-parent={\"#choices_accordian\" + index + \"_\" + key}>\n                                                                    <div class=\"row\">\n                                                                        <div class=\"col-12\">\n                                                                            <div class=\"row p-2\">\n                                                                                <div class=\"col-6\">\n                                                                                    <div class=\"form-floating\">\n                                                                                        <input type=\"text\" class=\"form-control\" id=\"textUpdate\" data-bs-toggle=\"tooltip\" placeholder={l.enter_choice_text} title={l.choice_text} bind:value={choices.text} on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceText\")}}>\n                                                                                        <label for=\"textUpdate\">{l.text}</label>\n                                                                                    </div>\n                                                                                </div>\n                                                                                <div class=\"col-6\">\n                                                                                    <div class=\"form-floating\">\n                                                                                        <input type=\"text\" class=\"form-control\" id={'updatefeedback' + index} placeholder={l.enter_choice_feedback} data-bs-toggle=\"tooltip\" title={l.feedback_text} bind:value={choices.feedback} on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceFeedback\")}}>\n                                                                                        <label for={'updatefeedback' + index}>Feedback</label>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                        <div class=\"col-12\">\n                                                                            <div class=\"row p-2\">\n                                                                                <div class=\"col-6\">\n                                                                                    <div class=\"form-floating\">\n\n                                                                                        {#if (localcharacterChoice[data.name].visible == 0)}\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\n                                                                                            <select \n                                                                                                class=\"form-select\" \n                                                                                                id={'feedback_character' + index} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title= {l.fb_char_name}\n                                                                                                bind:value = {choices.feedback_charact}\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"updateFeedbackChracter\")}}\n                                                                                            >\n                                                                                                {#each localcharacterChoice as character , character_key}\n                                                                                                    {#if character.visible == 0}\n                                                                                                        <option value={character_key} key={character_key}>{character.name}</option>\n                                                                                                    {/if}\n                                                                                                {/each}\n                                                                                            </select>\n                                                                                        {:else}\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\n                                                                                            <select \n                                                                                                class=\"form-select\" \n                                                                                                id={'feedback_character' + index} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title= {l.fb_char_name}\n                                                                                                bind:value = {data.name}\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"updateFeedbackChracter\")}}\n                                                                                            >\n                                                                                                {#each localcharacterChoice as character , character_key}\n                                                                                                    {#if character.visible == 0}\n                                                                                                        <option value={character_key} key={character_key}>{character.name}</option>\n                                                                                                    {/if}\n                                                                                                {/each}\n                                                                                                <option value={data.name} k={data.name}>{l.not_visible}</option>\n                                                                                            </select>\n                                                                                        {/if}\n                                                                                        <label for={'feedback_character' + index}>{l.fb_char}</label>\n                                                                                    </div>\n                                                                                </div>\n                                                                                <div class=\"col-6\">\n                                                                                    <div class=\"form-floating\">\n                                                                                        <!-- svelte-ignore a11y-no-onchange -->\n                                                                                        <select \n                                                                                            class=\"form-select\" \n                                                                                            id={'selectMission' + key} \n                                                                                            data-bs-toggle=\"tooltip\"\n                                                                                            title= \"Mission Name\"\n                                                                                            bind:value = {choices.choicesCategory}\n                                                                                            on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCategory\")}}\n                                                                                        >\n                                                                                            {#each localscoreCategoryData as category , category_key}\n                                                                                                <option value={category_key} key={category_key}>{category.name}</option>\n                                                                                            {/each}\n                                                                                        </select>\n                                                                                        <label for={'selectMission' + key}>{l.mission}</label>\n                                                                                    </div>\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                        <div class=\"col-12\">\n                                                                            <div class=\"row p-2\">\n                                                                                {#if data.allowChoices == 3}\n                                                                                    <div class=\"col-3\">\n                                                                                        <div class=\"form-floating\">\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\n                                                                                            <select \n                                                                                                class=\"form-select\" \n                                                                                                id={'selectCorrect' + key} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title= {l.select_choics}\n                                                                                                bind:value = {choices.correct}\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCorrect\")}}\n                                                                                            >\n                                                                                                <option value={0}>{l.false}</option>\n                                                                                                <option value={1}>{l.true}</option>\n                                                                                                <option value={2}>{l.none}</option>\n                                                                                            </select>\n                                                                                            <label for={'selectCorrect' + key}>{l.correct}</label>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                    <div class=\"col-3\">\n                                                                                        <div class=\"form-floating\">\n                                                                                            <input type=\"number\" \n                                                                                                class=\"form-control\" \n                                                                                                id={'selectScoreChoice' + key} \n                                                                                                min=\"0\" \n                                                                                                max=\"100\" \n                                                                                                placeholder={l.score_value} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title={l.score_value} \n                                                                                                bind:value={choices.choicesScore} \n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceCategoryValue\")}}\n                                                                                            >\n                                                                                            <label for={'selectScoreChoice' + key}>Score</label>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                {:else if data.allowChoices == 1}\n                                                                                    <div class=\"col-3\">\n                                                                                        <div class=\"form-floating\">\n                                                                                            <!-- svelte-ignore a11y-no-onchange -->\n                                                                                            <select \n                                                                                                class=\"form-select\" \n                                                                                                id={'selectCorrect' + key} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title= \"Select true or false to indicate if the choice correct or not.\"\n                                                                                                bind:value = {choices.correct}\n                                                                                                defaultValue={choices.correct}\n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index, \"setChoiceCorrectR\")}}\n                                                                                            >\n                                                                                                <option value={0}>{l.false}</option>\n                                                                                                <option value={1}>{l.true}</option>\n                                                                                            </select>\n                                                                                            <label for={'selectCorrect' + key}>{l.correct}</label>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                    <div class=\"col-3\">\n                                                                                        <div class=\"form-floating\">\n                                                                                            <input type=\"number\" \n                                                                                                class=\"form-control\" \n                                                                                                id={'selectScoreChoice' + key} \n                                                                                                min=\"0\" \n                                                                                                max=\"100\" \n                                                                                                placeholder={l.score_value} \n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title={l.score_value} \n                                                                                                bind:value={choices.choicesScore} \n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceCategoryValue\")}}\n                                                                                            >\n                                                                                            <label for={'selectScoreChoice' + key}>{l.score}</label>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                    <div class=\"col-3\">\n                                                                                        <div class=\"form-floating\">\n                                                                                            <input type=\"number\" \n                                                                                                class=\"form-control\" \n                                                                                                id={'selectChoicestepIndex' + key} \n                                                                                                min=\"1\" \n                                                                                                max={localstepData.length}\n                                                                                                data-bs-toggle=\"tooltip\"\n                                                                                                title={l.step_index_txt}\n                                                                                                bind:value={choices.stepIndex} \n                                                                                                on:change = {(event) => {updateXmlValue(event, key, index , \"setChoiceStepIndex\")}}\n                                                                                            >\n                                                                                            <label for={'selectChoicestepIndex' + key}>{l.step_index}</label>\n                                                                                        </div>\n                                                                                    </div>\n                                                                                {/if}\n                                                                                <div class=\"{(data.allowChoices == 1) ? 'col-3' : 'col-6'}\">\n                                                                                    <button data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"float-end bg-white delete_button ms-auto text-white border-0 mt-1\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\" on:click={(event) => {updateXmlValue(event, key, index, \"deleteChoice\")}}>\n                                                                                        <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\n                                                                                    </button>\n                                                                                </div>\n                                                                            </div>\n                                                                        </div>\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    {/each}\n\n                                                    <!--Add Choices buttons-->\n                                                    <div class=\"col-12\">\n                                                        <div class=\"row\">\n                                                            <div class=\"col-12 px-0 mt-2\">\n                                                                <div class=\"add_choices float-start\" on:click={(event) => {updateXmlValue(event, index ,\"\",\"addChoice\")}}>\n                                                                    <button data-bs-toggle=\"tooltip\" title={l.new_mission} class=\"btn rounded-pill img-shadow border shadow-sm\">\n                                                                        <b>{l.add_choice}</b>\n                                                                        <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\n                                                                    </button>\n                                                                </div>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                {/if}\n\n                                                <!--Level and insert note-->\n                                                <div class=\"col-12 mt-3 px-0\">\n                                                    <div class=\"row\">\n                                                        <div class=\"col-6\">\n                                                            <div class=\"input-group\">\n                                                                <label class=\"input-group-text\" for={\"level_text\" + index}>{l.level_text}</label>\n                                                                <input type=\"text\" class=\"form-control\" id={\"level_text\" + index} placeholder={l.level_placeholder} bind:value={data.level_text} on:change = {(event) => {updateXmlValue(event, index , \"\", \"labelupdate\")}}>\n                                                            </div>\n                                                        </div>\n                                                        <div class=\"col-6\">\n                                                            <div class=\"input-group\">\n                                                                <label class=\"input-group-text\" for={\"important_note\" + index}>{l.insert_note}</label>\n                                                                <input type=\"text\" class=\"form-control\" id={\"important_note\" + index} placeholder={l.note_placeholder} bind:value={data.important_node} on:change = {(event) => {updateXmlValue(event, index , \"\", \"updateNote\")}}>\n                                                            </div>\n                                                        </div>\n                                                    </div>\n                                                </div>\n\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            {/each}\n                        {/if}\n                    </div>\n                    <div class=\"add_step text-center mt-3\">\n                        <button data-bs-toggle=\"tooltip\" title={l.new_step} on:click={(event) => {updateXmlValue(event, localstepData.length ,\"\",\"addStep\")}} class=\"btn  rounded-pill img-shadow border shadow-sm\">\n                            <b>Add Step</b>\n                            <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\n                        </button>\n                    </div>\n                </div>\n            {:else if state.tabvalue == 7} \n                <div class=\"mx-auto py-2 row\">\n                    <div class=\"row\">\n                        <div class=\"relative text-center mt-2\">\n                            <button on:click={(event) => {updateXmlValue(event, sceneTemp, \"\", \"addtab\")}} class=\"btn bg-white rounded-pill img-shadow mb-2 border shadow-sm\">\n                                <b>{l.add_anim}</b>\n                                <span class=\"icomoon-plus-circle-2 s4 relative ms-1 float-end\"></span>\n                            </button>\n                        </div>\n                    </div>\n                    <div class=\"table-responsive\">\n                        <table class=\"table w-100\">\n                            {#if localtabData.length > 0}\n                                {#each localtabData as data, index}\n                                    <tr key={index}>\n                                        <td>\n                                            <div class=\"text-center\">({index + 1})</div>\n                                        </td>\n                                        <td>\n                                            <div class=\"form-group row mb-2\">\n                                                <div class=\"input-group\">\n                                                    <label for={'anim_btnName'+(index)} class=\"input-group-text\" title={l.btn_name} data-bs-toggle=\"tooltip\" htmlFor={'anim_btnName'+(index)}> {l.btn_name} </label>\n                                                    <input \n                                                        type=\"text\" \n                                                        class=\"form-control\" \n                                                        placeholder={l.enter_btn_name}\n                                                        id= {'anim_btnName' + (index)}\n                                                        bind:value={data.title}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabTitle\")}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row mb-2\">\n                                                <div class=\"input-group\">\n                                                    <label for={'anim_play'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.animation_play} htmlFor={'anim_play'+(index)}> {l.animation_play} </label>\n                                                    <!-- svelte-ignore a11y-no-onchange -->\n                                                    <select \n                                                        class=\"form-select\" \n                                                        id={'anim_play' + index}\n                                                        bind:value={data.name}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabName\")} \n                                                    >\n                                                        {#each state.sceneData.scene[defaultScene].anim as animation, key}\n                                                            <option value={key} key={key}>{animation.name}</option>\n                                                        {/each}\n                                                    </select>\n                                                </div>\n                                            </div>\n                                        </td>\n                                        <td>\n                                            <div class=\"form-group row mb-2\">\n                                                <div class=\"input-group\">\n                                                    <label for={'anim_dilog'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.dialog} htmlFor={'anim_dilog'+(index)}> {l.dialog} </label>\n                                                    <input \n                                                        type=\"text\" \n                                                        class=\"form-control\" \n                                                        placeholder={l.dialog} \n                                                        id= {'anim_dilog' + (index)}\n                                                        bind:value={data.dialog}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabDialog\")}\n                                                    />\n                                                </div>\n                                            </div>\n                                            <div class=\"form-group row mb-2\">\n                                                <div class=\"input-group\">\n                                                    <label for={'anim_stepindex'+(index)} class=\"input-group-text\" data-bs-toggle=\"tooltip\" title={l.step_index} htmlFor={'anim_stepindex'+(index)}> {l.step_index} </label>\n                                                    <input \n                                                        type=\"number\" \n                                                        class=\"form-control\" \n                                                        id= {'anim_stepindex' + (index)}\n                                                        min=\"1\" \n                                                        max={localstepData.length}\n                                                        bind:value={data.guid}\n                                                        on:change= {(event) => updateXmlValue(event, index, \"\", \"setTabGuid\")}\n                                                    />\n                                                </div>\n                                            </div>\n                                        </td>\n                                        <td align=\"center\">\n                                            <button on:click={(event) => {updateXmlValue(event, index, \"\", \"deleteTab\")}} data-bs-toggle=\"tooltip\" title={l.delete} type=\"button\" class=\"bg-white delete_button ms-auto text-white border-0 mt-1\" tabindex=\"0\" role=\"button\" aria-pressed=\"false\">\n                                                <span class=\"icomoon-remove-2 s4 pointer text-dark\"></span>\n                                            </button>\n                                        </td>\n                                    </tr>\n                                {/each}\n                            {/if}\n                        </table>\n                    </div>\n                </div>\n            {:else if state.tabvalue == 8} \n                <div class=\"mx-auto pt-2 row\">\n                    <div class=\"row\">\n                        <div class=\"col-6 m-auto\">\n                            <img \n                                alt = {sceneName}\n                                id = \"bgResult\"\n                                src = {(BGsrc && BGsrc.trim() != '') ? BGsrc : (curDomain + 'labs/insight/Images/bl.jpg')}\n                                class=\"img-thumbnail w-100\"\n                            />\n                        </div>\n                    </div>\n                    <div class=\"row mt-2\">\n                        <div class=\"col-4 col-lg-4 col-sm-6 m-auto\">\n                            <input class=\"h\" accept=\"image/png\" type=\"file\" id={\"choiceimg\" + sceneTemp} on:change={(e) => onChoiceImageSelect(e, sceneTemp)}/> \n                            <input\n                                type=\"hidden\"\n                                bind:value={BGsrc}\n                                id=\"result_img\"\n                                class=\"choice_image_upld\"\n                                on:click = {(event) => { updateXmlValue(event, sceneTemp, \"\", \"BGupdate\")}}\n                                placeholder=\"Image Link\"\n                                aria-describedby=\"result_screen_img\"\n                            />\n                            <button type=\"button\" class=\"btn btn-dark w-100\"\n                                data-bs-toggle=\"tooltip\"\n                                title={l.image_size_txt}\n                                on:click= {(event) => { updateXmlValue(event, sceneTemp, \"\", \"trigerchoiceimage\")}}\n                            >\n                                {l.result_bg}\n                            </button>\n                            <small id=\"result_screen_img\" class=\"form-text text-center text-muted\">\n                                {l.result_info}\n                            </small>\n                        </div>\n                    </div>\n                    <div class=\"row mt-2\">\n                        <div class=\"col-6 m-auto\">\n                            <div class=\"input-group\">\n                                <label class=\"input-group-text\" for='result_title' data-bs-toggle=\"tooltip\" title={l.enter_result_title}>{l.result_title}</label>\n                                <input\n                                    type=\"text\"\n                                    class = \"form-control\"\n                                    placeholder = {l.title}\n                                    id='result_title'\n                                    bind:value={resultTitle}\n                                    on:change={ (event) => {updateXmlValue(event, sceneTemp, \"\", \"titleUpdate\")}}\n                                />\n                            </div>\n                            <small id=\"result_screen_img\" class=\"form-text text-muted text-center font14\">{l.result_btn_info}</small>\n                        </div>\n                    </div>\n                </div>\n            {/if}\n        </div>\n    {/if}\n    \n</div>\n<style>\n    .scene_image {\n        width: 32%;\n        margin: 5px 0;\n        padding: 5px;\n    }\n\n    .choiceimage {\n        height: 225px;\n    }\n\n    .image_view {\n        height: 70%;\n        min-height: 100px;\n    }\n\n    .choose_btn {\n        padding: 2px 20px;\n    }\n\n    .stmnt_img {\n        height: 228px;\n        border: 1px solid;\n        margin: 0 auto;\n    }\n\n    .commu_textarea {\n        padding: 10px;\n        height: 261px;\n        max-height: 261px;\n        overflow-y: scroll;\n        font-size: 14px !important;\n    }\n\n    .min_height_300 {\n        min-height: 300px;\n    }\n\n    .icon_setup {\n        top: 3px;\n        right: 10px;\n    }\n\n    .tabbutton:hover {\n        box-shadow: 0 0 0 .2rem rgba(135,135,135,.5)!important;\n    }\n</style>"],"names":["l","module","simulation_txt","playground","terminal_txt","livelab","item_id","title","type","select_instruction","no_record","cancel","list_content","ctx","currentItem","search_item_txt","tabvalue","scene","intro","characters","assets","chat_windows","mission","communication","animation","result","result_bg","result_title","result_info","result_btn_info","trim","image_size_txt","enter_result_title","length","add_anim","new_step","add_mission","new_mission","sceneData","name_text","test","learn","button_text","select_game_mode","start_button","placeholder_text","name","btn_name","animation_play","dialog","step_index","anim","enter_btn_name","delete","guid","visible","choose_character","not_visible","voice","female","male","narrater_voice","autocomplete","autocomplete_txt","auto","file_elem","image","image_link","allowChoices","score","guid_value","mission_name","choicesCategory","score_value","guids","choicesScore","speech","speech_input","speech_txt","branch_condition","condition","btn","no_anim_avail","choices","add_choice","fb_char_name","feedback_charact","false","true","correct","step_index_txt","stepIndex","none","select_choics","text","fb_char","enter_choice_text","choice_text","enter_choice_feedback","feedback_text","feedback","conversion_type","statement","choice","item","multichoice","alert","level_text","insert_note","type_of_step","removeTags","message","level_placeholder","note_placeholder","important_node","points","points_text","value","visibility","tooltip","onclick_step","asset_visibility","asset_animation","tooltip_txt","asset","assets_click","female_one","female_two","female_three","female_four","female_five","female_six","male_one","male_two","male_three","male_four","character_voice","set_chr_visiblity","add_chr_nm","chr_voice","select","key","click_to_select","alt","toLowerCase","no_of_token","load_more","data_active","replace","xml","getChildXml","user","editorState","itemIcons","itemArray","sceneTemp","characterData","localcharacterData","localcharacterChoice","insightData","stepData","isSmartChat","localstepData","scoreCategoryData","localscoreCategoryData","assetData","localassetData","tabData","localtabData","modeData","localmodeData","assetsData","localassetsData","defaultScene","sceneName","sceneJson","qxml","resultTitle","BGsrc","began","localpage_value","state","menuLayout","sceneArr","is_scene_load","show_dom","curDomain","window","location","origin","search","baseUrl","auth_store","writable","activeTab","category","content_type","content_subtype","msg","layout","toggleMode","end","subscribe","onChoiceImageSelect","event","i","files","target","fd","FormData","image_name","Math","floor","random","size","append","AH","nodeName","setAttribute","ajax","url","data","formData","then","click","innerText","swal","createPagination","parseInt","loadScene","map","background","by","update","updateXmlValue","index","parentIndex","selector","XMLToJSON","getBS","show","splice","buttons","dangerMode","isConfirm","output","JSON","stringify","myData","avaliableCharacter","increment","id","camera","avaliableCharacterChoice","fdbk_char_cam","fdbk_char_voice","Number","focus","cvalue","toString","dd","open","json","is_smartchat","sceneCharacters","style","display","sceneAssets","indent","sub_index","choicesScoreIndex","scoreIndex","smxml","_sceneName","_sceneJson","_isSmartChat","insightupdatedData","steps","scoreCategories","link","mode","bgImage","detail","begin","insight_intro","tinyMCE","get","getContent","format","__cdata","JSONToXML","indexOf","triggerDelete","del_confirmation","beforeUpdate","selectAll","remove","testHtml","insert","element","setCss","innerHTML","activator","submit","contentWindow","responsiveVoice","e","console","log","INSIGHTXML","parse","Object","keys","src","icon","parseXMLAuthoring","onMount","activate","[object Object]","parent","parentElement","classList","add","zIndex","listen","current","input_val","count","table_tr","searchTable","find","hide","document","querySelector","addEventListener","getAttribute","afterUpdate","setContentType","Sortable","handle","evt","oldIndex","newIndex","tempValue","forEach","el","insight_timer","setTimeout","clearTimeout","editor","course","course_code","split","response","table","tooltip_timer","enableBsAll","container","catch","showmsg","unable_to_get","load_course","quiz","terminal","simulation","insight","lablink","video","audio","exhibit","pdf","weblink","download","object3d"],"mappings":"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"}