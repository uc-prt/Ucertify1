{"version":3,"file":"HotspotTokenPreview-c2f9b030.js","sources":["../../../clsSMHotspot/HotspotTokenPreview.svelte"],"sourcesContent":["<script>\r\n    import { beforeUpdate, onMount, tick } from \"svelte\";\r\n    import { writable } from \"svelte/store\";\r\n    import ItemHelper from \"../helper/ItemHelper.svelte\";\r\n    import { AH, onUserAnsChange, XMLToJSON } from \"../helper/HelperAI.svelte\";\r\n    import l from '../src/libs/editorLib/language';\r\n    export let xml;\r\n    export let editorState;\r\n    export let isReview;\r\n    export let showAns;\r\n    export let uxml;\r\n\r\n    let customReview = false;\r\n    let ansSwitch = 0;\r\n    let state = {}; \r\n    let hdd = writable({\r\n            xml: \"\",\r\n            itemType: \"\",\r\n            cdata: \"\",\r\n            correctAns: \"\",\r\n            userAns: [],\r\n            itemLayout: [],\r\n            smController: \"h\",\r\n            pointerEvents: \"auto\",\r\n            iconVisible: \"h\",\r\n            isReview: false,\r\n    });\r\n    let onError = \"\";\r\n    const unsubs = hdd.subscribe((items)=> {\r\n        state = items;\r\n    })\r\n\r\n\r\n    // go in block if there is change in remediation mode\r\n    $:{\r\n        if (isReview != customReview){\r\n            if (isReview) {\r\n                setReview(); \r\n                if(editorState && ansSwitch == 0) {\r\n                    // check tha answer\r\n                    ansSwitch = 1;\r\n                    checkAns();\r\n                }\r\n            } else {\r\n                // if review mode is off\r\n                ansSwitch = 0;\r\n                if (editorState) unsetReview();\r\n            }\r\n            customReview = isReview;\r\n        }\r\n    }\r\n\r\n    // calls whenever there is change in props or state\r\n    beforeUpdate(()=> {\r\n        // go in block if there is change in xml\r\n        if (xml != state.xml) {\r\n            // set the state of xml to the current(changed) xml\r\n            state.xml = xml;\r\n            // reset the correct and user ans\r\n            resetValue();\r\n            // load the module\r\n            loadModule(xml);\r\n        }\r\n    })\r\n\r\n    // run just after rendering\r\n    onMount(()=> {\r\n\r\n        // select token press the Enter Key ADA\r\n        AH.listen('body', 'keydown', '.token', (_this, e)=> { \r\n            if (e.which === 13) {\r\n                _this.click();\r\n            }\r\n        });\r\n\r\n        if (window.inNative) {\r\n            window.getHeight && window.getHeight();\r\n        }\r\n    });\r\n\r\n    // when review mode is on\r\n    function setReview() {\r\n        state.isReview = true;\r\n        state.smController = \"\";\r\n        state.pointerEvents = \"none\";\r\n        showAnswer(\"yans\", \"showIcon\");\r\n        AH.selectAll(\".tokenHeader\", 'attr', {tabIndex: \"0\"});\r\n    }\r\n\r\n    // when review mode is off\r\n    function unsetReview() {\r\n        state.isReview = false;\r\n        state.smController = \"h\";\r\n        state.pointerEvents = \"auto\";\r\n        showAnswer(\"yans\", \"hideIcon\");\r\n        AH.selectAll(\".tokenHeader\", 'removeAttr', 'tabindex');\r\n    }\r\n\r\n    // for resetting the value\r\n    function resetValue() {\r\n        state.correctAns = [];\r\n        state.userAns = [];\r\n    }\r\n\r\n    // load the module\r\n    function loadModule(loadXml) {\r\n        // Here xml is converted into the json and pass into the parseXMLAuthoring for xml parsing\r\n        loadXml = XMLToJSON(loadXml);\r\n        parseXMLPreview(loadXml);\r\n    }\r\n\r\n    // parse function for the preview\r\n    async function parseXMLPreview(MYXML) {\r\n        try {\r\n            // split the correctAns by , & stored it in the current state \r\n            state.correctAns = MYXML.smxml.div._correctAns.split(\",\");\r\n            // set the type of module wether it is w,p or s\r\n            state.itemType = MYXML.smxml.div._type;\r\n            // set the state of cdata on the basis of xml and after that parse the xml according to its type\r\n            state.cdata = MYXML.smxml.div.__cdata;\r\n            await tick();\r\n            switch(MYXML.smxml.div._type) {\r\n                case \"w\" :\r\n                    // if the type is word\r\n                    // function for parse word\r\n                    parseWord(state.cdata);\r\n                    break;\r\n                case \"s\" :\r\n                    // if the type is sentence\r\n                    // function for parse sentence\r\n                    parseSentance(state.cdata);\r\n                    break;\r\n                case \"p\" :\r\n                    // if the type is paragraph\r\n                    // function for parse paragraph\r\n                    parseParagraph(state.cdata);\r\n                    break;\r\n                default :\r\n                    console.warn(\"No type found to parse\");\r\n                    break;\r\n            }\r\n            if (uxml) {\r\n               // parse the user ans\r\n               parseUserAns(uxml);\r\n            }\r\n        } catch (error) {\r\n            onError = error;\r\n            console.warn({'error':error.message,'function name':'parseXMLPreview','File name':'HotspotTokenPreview.js'});\r\n        }\r\n    }\r\n\r\n    // in case of word \r\n    function parseWord(str) {\r\n        // replace the newline with \" #newline# \"\r\n        str = str.replace(/\\n/g, \" #newline# \");\r\n        //Split the string with space and remove array which contain null value\r\n        let word = str.split(\" \").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let wordArray = [];\r\n        let tempWord = [];\r\n        /* split punctuation mark in word and store in the tempWord array */\r\n        word.map((data, i)=> {\r\n            let special_symbol = data.match(/[.,]/g);\r\n            if (special_symbol) {\r\n                let splitText = data.split(special_symbol[0]);\r\n                tempWord.push(splitText[0]);\r\n                tempWord.push(special_symbol[0]);\r\n                if (splitText[1].trim()) {\r\n                    tempWord.push(splitText[1]);\r\n                }\r\n            } else {\r\n                tempWord.push(data)\r\n            }\r\n        });\r\n        /*end*/\r\n        // store id, value and selected in wordArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        tempWord.map((data, i)=> {\r\n            wordArray.push({\r\n                id: \"ID\"+i,\r\n                value: data,\r\n                selected: false,\r\n            });\r\n        });\r\n       state.itemLayout = wordArray;\r\n    }\r\n\r\n    // in case of sentence\r\n    function parseSentance(str) {\r\n        //Split the string with fullstop and remove array which contain null value\r\n        let sentance = str.split(\".\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let sentanceArray = [];\r\n        // store id, value and selected in sentanceArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        sentance.map((data, i)=> {\r\n            sentanceArray.push({\r\n                id: \"ID\"+i,\r\n                value: data+\".\",\r\n                selected: false\r\n            });\r\n        });\r\n        state.itemLayout = sentanceArray;\r\n    }\r\n\r\n    // in case of paragraph\r\n    function parseParagraph(str) {\r\n        //Split the string with paragraph and remove array which contain null value\r\n        let paragraph = str.split(\"\\n\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let paragraphArray = [];\r\n        // store id, value and selected in paragraphArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        paragraph.map((data, i)=> {\r\n            paragraphArray.push({\r\n                id: \"ID\"+i,\r\n                value: data,\r\n                selected: false\r\n            });\r\n        });\r\n        state.itemLayout = paragraphArray;\r\n    }\r\n\r\n    function getCorrect(id) {\r\n        //Return true if this id is correct answer\r\n        return (AH.findInArray(id, state.correctAns) ? true: false);\r\n    }\r\n\r\n    // for checking the answer\r\n    function checkAns() {\r\n        // used for switch on next question in prepengine if current question is attempted\r\n\t\tISSPECIALMODULEUSERXMLCHANGE = 1;\r\n        let resultLength = 0;\r\n        const correctLength = state.correctAns.length;\r\n        //Check if correct answer is equal to user answer\r\n        state.correctAns.map((data, i)=> {\r\n            state.userAns.map((data2, j)=> {\r\n                if (data == data2) {\r\n                    resultLength = resultLength + 1;\r\n                }\r\n            });\r\n        });\r\n        let ans = (correctLength == resultLength && resultLength == state.userAns.length) ? true : false;\r\n        onUserAnsChange({ans: ans, uXml: uxml});\r\n\r\n        showAns && showAns(ans ? \"Correct\" : \"Incorrect\");\r\n    }\r\n\r\n    // for stting the user answer for selected one\r\n    function setSelected(pos) {\r\n        state.itemLayout[pos].selected = !state.itemLayout[pos].selected;\r\n        setUserAns(pos, state.itemLayout[pos].selected);\r\n    }\r\n\r\n    function setUserAns(id,selected) {\r\n        let tempUserAns = state.userAns;\r\n        //Push the index in user answer array if clicked first time\r\n        //and delete the index from user answer if it is already selected\r\n        if (selected == true) {\r\n            // push in the userAns if it is selected\r\n            tempUserAns.push(\"ID\"+id);\r\n            state.userAns = tempUserAns;\r\n        } else if (selected == false) {\r\n            let deleteValue = tempUserAns.indexOf(\"ID\"+id);\r\n            if (deleteValue > -1) {\r\n                // delete from the user ans if it is deselected\r\n                tempUserAns.splice(deleteValue, 1);\r\n            }\r\n            state.userAns = tempUserAns;\r\n        }\r\n\r\n        // getting height in native\r\n        if (window.inNative) {\r\n            window.getHeight && window.getHeight();\r\n        }\r\n        // updating the uaXml\r\n        uxml = \"<smans><div userAns='\" + state.userAns.join()+\"'></div></smans>\";\r\n        // AH.select(\"#special_module_user_xml\", 'value', \"<smans><div userAns='\"+state.userAns.join()+\"'></div></smans>\")\r\n        // check for correct answer\r\n        checkAns();\r\n    }\r\n\r\n    // for showing answer\r\n    function showAnswer(val,iconState) {\r\n        //show correct incorrect icon with respect to iconState\r\n        state.iconVisible = (iconState == \"showIcon\") ? \"\" : \"h\";\r\n        //change token highlight with respect to val\r\n        //either to show correct answer or user answer\r\n        let ans = [];\r\n        if (val == \"cans\") {\r\n            // if correct ans tab\r\n            ans = state.correctAns;\r\n        } else if (val == \"yans\") {\r\n            // if user answer tab\r\n            ans = state.userAns;\r\n        }\r\n        state.itemLayout.map((data, j)=> {\r\n            data.selected =  AH.findInArray(data.id, ans) ? true : false;\r\n            //return data;\r\n        });\r\n    }\r\n\r\n    // for parsing the user ans function\r\n    function parseUserAns(uans) {\r\n        // converting the xml into the json and stored in userAnswer\r\n        let userAnswer = XMLToJSON(uans);\r\n        // cheking for the 2 elements smans,div, and one attribute of div i.e, userAns\r\n        if (userAnswer.smans && userAnswer.smans.div && userAnswer.smans.div._userAns) {\r\n            // splitting the userAns with ,\r\n            state.userAns = userAnswer.smans.div._userAns.split(\",\");\r\n            // get the selection on the basis of the user answer\r\n            state.itemLayout.map((data, j)=> {\r\n                data.selected =  AH.findInArray(data.id, state.userAns) ? true :false;\r\n            });\r\n        }\r\n    }\r\n\r\n    function handleReviewClick(mode, event) {\r\n        if (mode == 'c') {\r\n            showAnswer(\"cans\", \"hideIcon\");\r\n        } else {\r\n            showAnswer(\"yans\", \"showIcon\");\r\n        }\r\n    }\r\n</script>\r\n{#if onError != \"\"}\r\n    <div class=\"alert alert-danger font-weight-bold\">\r\n        <span>Oops Something went wrong please check your ParseXML Function </span>\r\n    </div>\r\n{:else}\r\n    <div class=\"hotspot-token-preview\" tabindex=\"0\">\r\n        <center>\r\n        <ItemHelper \r\n            on:setReview={setReview}\r\n            on:unsetReview={unsetReview}\r\n            handleReviewClick={handleReviewClick}\r\n            reviewMode={state.isReview}\r\n        />\r\n        <div \r\n            class=\"token_highlight_heading font17 p-2 text-left\"\r\n            style=\"\r\n                max-width: 600px;\r\n                border-top: 2px solid #96bbf6;\r\n                background-color: #d9e7fd;\r\n            \"\r\n        >\r\n            {l.token_highlight}\r\n        </div>\r\n        <div\r\n            class=\"p-2\"\r\n            style=\"\r\n                max-width: 600px;\r\n                border: 2px solid #d9e7fd;\r\n                display: flow-root;\r\n                text-align: left;\r\n                justify-content: left;\r\n            \"\r\n        >\r\n            {#if state.itemLayout}   \r\n                {#each state.itemLayout as data, i }\r\n                    <div class=\"h\">\r\n                        {#if data.value.indexOf('##pt') > -1 }\r\n                            {data.value = data.value.replace(/##pt/g, '.')}\r\n                        {/if}\r\n                        {#if data.value.indexOf('#cm') > -1 }\r\n                            {data.value = data.value.replace(/#cm/g, ',')}\r\n                        {/if}\r\n                    </div>\r\n                    {#if data.value == \",\" || data.value == \".\"}\r\n                        <div class=\"float-left position-relative d-inline\" style=\"width: 1.5px; height: 1px\">\r\n                            <span\r\n                                class=\"float-left position-absolute\"\r\n                                style=\"left: -2.5px; top: 2px;\"\r\n                            >{data.value}</span>\r\n                        </div>\r\n                    {:else if data.value == \"#newline#\"}\r\n                        <br/>\r\n                    {:else}\r\n                        <div key={i} class=\"tokenHeader position-relative float-left d-inline\">\r\n                            \r\n                            <span\r\n                                data-id={\"ID\"+i}\r\n                                data-correct={AH.findInArray(\"ID\"+i, state.correctAns)}\r\n                                on:click={setSelected.bind(this, i)}\r\n                                data-selected={data.selected}\r\n                                tabindex={(state.pointerEvents == \"auto\") ? \"0\" : \"1\"}\r\n                                class=\"pointer float-left text-left font14 token {(data.selected) ? 'token_selected' : ''}\"\r\n                                style=\"\r\n                                    margin: 1px;\r\n                                    user-select: none;\r\n                                    border: 1px solid transparent;\r\n                                    padding: 1px 1px;\r\n                                    border-radius: 3px;\r\n                                    pointer-events: {state.pointerEvents}\r\n                                \"\r\n                            >\r\n                                {@html data.value}\r\n                            </span>\r\n                            <span\r\n                                class={state.iconVisible} \r\n                                style=\"\r\n                                    position: absolute;\r\n                                    width: 17px;\r\n                                    height: 17px;\r\n                                    right: -8px;\r\n                                    top: -9px;\r\n                                    background: white;\r\n                                    border-radius: 15px 12px 12px;\r\n                                    font-size: 18px;\r\n                                    z-index: 1;\r\n                                    display: {(state.iconVisible == \"\" && data.selected) ? 'block' : 'none'}\r\n                                \"\r\n                            >\r\n                                <span \r\n                                    class=\"position-relative {AH.findInArray(\"ID\"+i, state.correctAns) ? 'icomoon-new-24px-checkmark-circle-1': 'icomoon-new-24px-cancel-circle-1'}\" \r\n                                    style=\"color: {AH.findInArray(\"ID\"+i, state.correctAns) ? 'green' : 'red'}; bottom: 3px; left: 0;\" \r\n                                    aria-label={AH.findInArray(\"ID\"+i, state.correctAns) ? \"marked as correct\":\"marked as incorrect\"}\r\n                                ></span>\r\n                            </span>\r\n                        </div>\r\n                    {/if}\r\n                {/each}\r\n            {/if}\r\n        </div>\r\n        </center>\r\n    </div>\r\n{/if}\r\n<style>\r\n    .token:hover {\r\n        border: 1px solid #000!important;\r\n    }\r\n\r\n    :global(.bla .token:hover){\r\n        border: 1px solid #fff!important;\r\n    }\r\n\r\n    .token_selected {\r\n        background-color: #64bb63;\r\n        color: #fff;\r\n    }\r\n\r\n    :global(.bla .token_highlight_heading) {\r\n        color: #000!important;\r\n    }\r\n\r\n    .hotspot-token-preview br {\r\n        clear: both;\r\n    }\r\n</style>"],"names":["ctx","isReview","itemLayout","l","token_highlight","insert","append","length","value","replace","AH","findInArray","correctAns","selected","pointerEvents","iconVisible","bind","this","indexOf","xml","editorState","showAns","uxml","customReview","ansSwitch","state","hdd","writable","itemType","cdata","userAns","smController","onError","subscribe","items","setReview","showAnswer","selectAll","tabIndex","unsetReview","checkAns","ISSPECIALMODULEUSERXMLCHANGE","resultLength","correctLength","map","data","i","data2","j","ans","onUserAnsChange","uXml","val","iconState","id","beforeUpdate","MYXML","smxml","div","_correctAns","split","_type","__cdata","tick","str","word","item","trim","filter","arr","wordArray","tempWord","special_symbol","match","splitText","push","parseWord","sentance","sentanceArray","parseSentance","paragraph","paragraphArray","parseParagraph","console","warn","uans","userAnswer","XMLToJSON","smans","_userAns","parseUserAns","error","message","function name","File name","parseXMLPreview","onMount","listen","_this","e","which","click","window","inNative","getHeight","pos","tempUserAns","deleteValue","splice","join","setUserAns","mode","event"],"mappings":"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"}