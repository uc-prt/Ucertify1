
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, M as append_styles, C as validate_each_argument, v as validate_slots, L as beforeUpdate, o as onMount, A as AH, ab as afterUpdate, X as XMLToJSON, N as JSONToXML, y as l, w as writable, z as empty, n as insert_dev, x as detach_dev, c as create_component, f as space, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, e as element, j as attr_dev, k as add_location, p as append_dev, K as destroy_each, l as set_style, q as listen_dev, r as group_outros, u as check_outros, G as prop_dev, H as run_all, B as noop, h as text } from './main-249b21c5.js';
import { G as GriddedHelper } from './GriddedHelper-ea0a0b45.js';

/* clsSMGridded\Gridded.svelte generated by Svelte v3.40.2 */

const { console: console_1 } = globals;
const file = "clsSMGridded\\Gridded.svelte";

function add_css(target) {
	append_styles(target, "svelte-1wrfq8n", ".custom_checkbox_new.svelte-1wrfq8n.svelte-1wrfq8n{display:block;position:relative;width:20px;height:20px;margin-bottom:0;cursor:pointer;font-size:18px}.layoutHeading{font-weight:bold;font-size:16px;color:#1877b1}.items_element:hover{border:1.2px solid #777}.moreOptions{-webkit-box-shadow:3px 4px 6px #c4c5c5;-moz-box-shadow:3px 4px 6px #c4c5c5;box-shadow:3px 4px 6px #c4c5c5;background-color:#f0f0f0;border-top:1px solid #1877b1;border-bottom:1px solid #1877b1}.moreOptionDetails{background-color:#f7f7f7}.input_col{position:relative;left:5px}.layoutheading{padding:5px;font-size:20px;font-weight:bold}.numbr_range{position:relative;left:130px}.numbr_range_txt{position:relative;left:200px}.plus_minus_fraction{position:relative;top:20px}.floating_fraction{position:relative;top:27px}.plus_minus_span{position:relative;left:5px}.floating_decimal{float:right;margin-right:45px}.fontStyle{width:100px;float:right;margin-right:60px}.fraction_slash{position:relative;left:177px}.minus_tab,\r\n.plus_tab,\r\n.slash_tab{text-align:center}.gridded_tab.svelte-1wrfq8n.svelte-1wrfq8n{background-color:#f0f0f0;user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.font_size_label{position:relative;left:198px}.font_size{position:relative;left:225px}.decimal_col{position:relative;left:208px;width:90px}.correct_color{background-color:#E9FFE9}.fixed_decimal_check{position:relative;top:26px;left:13px}.correct_incorrect_icon_fill{position:relative;width:19px;height:19px;right:121px;top:-55px;background:white;border-radius:50%}.row_column_decimal{position:relative;top:30px;left:5px}.fixed_point_class{position:relative;left:7px}.row_column{position:relative;left:5px}.answer_icon{position:absolute;top:3px;right:34px}.col_range{width:205px}.posSize{position:relative;left:7px}.fontSmall{font-size:12px;text-align:center}.fontNormal{font-size:14px;text-align:center}.fontLarge{font-size:24px;text-align:center}.fontExtraLarge{font-size:26px;text-align:center}.grid{position:relative;top:10px;box-shadow:10px 5px 10px #000}.items_element{border:1px solid #8080807a;padding:6px 10px;border-radius:50%;background-color:white}.griddedModule .active{color:white;transition:1s;background:#696969;border:2px solid #fff}.sla_point{padding:6px 11px}.griddedModule.svelte-1wrfq8n table tr td.svelte-1wrfq8n:last-child{border-right:1px solid #ccc !important}.griddedModule.svelte-1wrfq8n .lastGrid tr:last-child td.svelte-1wrfq8n{border-bottom:1px solid #ccc !important}.griddedModule td{border:1px solid #f0f0f0 !important;border-left:1px solid #ccc !important}.token:hover{border:1px solid #000 !important}.bla .token:hover{border:1px solid #fff !important}.token_selected{background-color:#64bb63;color:#fff}.bla .token_highlight_heading{color:#000 !important}.griddedModule .expandIcon{font-size:27px;font-weight:bold;color:#1877b1}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,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 */");
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[30] = list[i];
	child_ctx[32] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	child_ctx[35] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[33] = list[i];
	child_ctx[35] = i;
	return child_ctx;
}

// (573:24) {:else}
function create_else_block_1(ctx) {
	let input;
	let input_id_value;
	let input_name_value;
	let input_value_value;
	let input_data_tag_value;
	let input_style_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			input = element("input");
			attr_dev(input, "type", "text");
			attr_dev(input, "id", input_id_value = /*val*/ ctx[33].id);
			attr_dev(input, "name", input_name_value = /*val*/ ctx[33].name);

			input.value = input_value_value = /*val*/ ctx[33].value == undefined
			? ''
			: /*val*/ ctx[33].value;

			attr_dev(input, "data-tag", input_data_tag_value = /*val*/ ctx[33].dataTag);
			attr_dev(input, "style", input_style_value = 'width:50px;text-align:center;');
			attr_dev(input, "class", "tdFont fo");
			add_location(input, file, 573, 32, 19592);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", /*rowValidation*/ ctx[13], false, false, false),
					listen_dev(input, "input", highLight, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*ColsFirstRow*/ 64 && input_id_value !== (input_id_value = /*val*/ ctx[33].id)) {
				attr_dev(input, "id", input_id_value);
			}

			if (dirty[0] & /*ColsFirstRow*/ 64 && input_name_value !== (input_name_value = /*val*/ ctx[33].name)) {
				attr_dev(input, "name", input_name_value);
			}

			if (dirty[0] & /*ColsFirstRow*/ 64 && input_value_value !== (input_value_value = /*val*/ ctx[33].value == undefined
			? ''
			: /*val*/ ctx[33].value) && input.value !== input_value_value) {
				prop_dev(input, "value", input_value_value);
			}

			if (dirty[0] & /*ColsFirstRow*/ 64 && input_data_tag_value !== (input_data_tag_value = /*val*/ ctx[33].dataTag)) {
				attr_dev(input, "data-tag", input_data_tag_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(573:24) {:else}",
		ctx
	});

	return block;
}

// (571:24) {#if val.decpoint == true}
function create_if_block_4(ctx) {
	let input;

	const block = {
		c: function create() {
			input = element("input");
			attr_dev(input, "type", "text");
			set_style(input, "width", "50px");
			set_style(input, "text-align", "center");
			input.value = ".";
			attr_dev(input, "class", "tdFont");
			input.disabled = "true";
			add_location(input, file, 571, 28, 19424);
		},
		m: function mount(target, anchor) {
			insert_dev(target, input, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(input);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(571:24) {#if val.decpoint == true}",
		ctx
	});

	return block;
}

// (569:20) {#each ColsFirstRow as val,i}
function create_each_block_2(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*val*/ ctx[33].decpoint == true) return create_if_block_4;
		return create_else_block_1;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(569:20) {#each ColsFirstRow as val,i}",
		ctx
	});

	return block;
}

// (580:8) {#if state.plus_minus == 1}
function create_if_block_3(ctx) {
	let griddedhelper0;
	let t;
	let griddedhelper1;
	let current;

	griddedhelper0 = new GriddedHelper({
			props: {
				loop: /*Cols*/ ctx[5],
				class1: "tdFont plus_tab points",
				className: "tdFont plus_tab items_element",
				tableId: "plus_minus_tab",
				tableClass: "plus_minus_tab gridded_tab mt-0 myP",
				value: "+"
			},
			$$inline: true
		});

	griddedhelper0.$on("handleClickCombo", /*handleClickCombo*/ ctx[15]);

	griddedhelper1 = new GriddedHelper({
			props: {
				loop: /*Cols_Minus*/ ctx[4],
				class1: "tdFont plus_tab",
				className: "tdFont minus_point text-center items_element",
				tableId: "plus_minus_tab",
				tableClass: "plus_minus_tab gridded_tab mt-0 myP",
				value: "-"
			},
			$$inline: true
		});

	griddedhelper1.$on("handleClickCombo", /*handleClickCombo*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(griddedhelper0.$$.fragment);
			t = space();
			create_component(griddedhelper1.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(griddedhelper0, target, anchor);
			insert_dev(target, t, anchor);
			mount_component(griddedhelper1, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const griddedhelper0_changes = {};
			if (dirty[0] & /*Cols*/ 32) griddedhelper0_changes.loop = /*Cols*/ ctx[5];
			griddedhelper0.$set(griddedhelper0_changes);
			const griddedhelper1_changes = {};
			if (dirty[0] & /*Cols_Minus*/ 16) griddedhelper1_changes.loop = /*Cols_Minus*/ ctx[4];
			griddedhelper1.$set(griddedhelper1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(griddedhelper0.$$.fragment, local);
			transition_in(griddedhelper1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(griddedhelper0.$$.fragment, local);
			transition_out(griddedhelper1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(griddedhelper0, detaching);
			if (detaching) detach_dev(t);
			destroy_component(griddedhelper1, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(580:8) {#if state.plus_minus == 1}",
		ctx
	});

	return block;
}

// (600:8) {#if state.slash_val == 1}
function create_if_block_2(ctx) {
	let griddedhelper;
	let current;

	griddedhelper = new GriddedHelper({
			props: {
				loop: /*Cols_slash*/ ctx[3],
				class1: "tdFont points",
				className: "tdFont text-center items_element sla_point",
				tableId: "slash_tab",
				tableClass: "slash_tab gridded_tab mt-0 myP",
				value: "/"
			},
			$$inline: true
		});

	griddedhelper.$on("handleClickCombo", /*handleClickCombo*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(griddedhelper.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(griddedhelper, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const griddedhelper_changes = {};
			if (dirty[0] & /*Cols_slash*/ 8) griddedhelper_changes.loop = /*Cols_slash*/ ctx[3];
			griddedhelper.$set(griddedhelper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(griddedhelper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(griddedhelper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(griddedhelper, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(600:8) {#if state.slash_val == 1}",
		ctx
	});

	return block;
}

// (611:8) {#if state.decimal_val == 1}
function create_if_block_1(ctx) {
	let griddedhelper;
	let current;

	griddedhelper = new GriddedHelper({
			props: {
				loop: /*Cols_slash*/ ctx[3],
				class1: "tdFont points",
				className: "tdFont text-center items_element decl_point",
				tableId: "slash_tab",
				tableClass: "slash_tab gridded_tab mt-0 myP",
				value: "."
			},
			$$inline: true
		});

	griddedhelper.$on("handleClickCombo", /*handleClickCombo*/ ctx[15]);

	const block = {
		c: function create() {
			create_component(griddedhelper.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(griddedhelper, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const griddedhelper_changes = {};
			if (dirty[0] & /*Cols_slash*/ 8) griddedhelper_changes.loop = /*Cols_slash*/ ctx[3];
			griddedhelper.$set(griddedhelper_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(griddedhelper.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(griddedhelper.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(griddedhelper, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(611:8) {#if state.decimal_val == 1}",
		ctx
	});

	return block;
}

// (633:28) {:else}
function create_else_block(ctx) {
	let td;
	let span;
	let t_value = +/*no*/ ctx[32] + "";
	let t;
	let span_tabindex_value;
	let span_key_value;
	let span_name_value;
	let span_data_tag_value;
	let span_id_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			td = element("td");
			span = element("span");
			t = text(t_value);
			attr_dev(span, "tabindex", span_tabindex_value = 0);
			attr_dev(span, "key", span_key_value = /*val*/ ctx[33].key);
			attr_dev(span, "name", span_name_value = /*val*/ ctx[33].name);
			attr_dev(span, "data-tag", span_data_tag_value = /*val*/ ctx[33].name);
			attr_dev(span, "class", "tdFont td_data text-center items_element");
			attr_dev(span, "id", span_id_value = /*val*/ ctx[33].id);
			add_location(span, file, 634, 36, 22352);
			attr_dev(td, "width", "50");
			attr_dev(td, "class", "text-center svelte-1wrfq8n");
			add_location(td, file, 633, 32, 22279);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, span);
			append_dev(span, t);

			if (!mounted) {
				dispose = listen_dev(span, "click", /*handleClick*/ ctx[14], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*totalCols*/ 4 && span_key_value !== (span_key_value = /*val*/ ctx[33].key)) {
				attr_dev(span, "key", span_key_value);
			}

			if (dirty[0] & /*totalCols*/ 4 && span_name_value !== (span_name_value = /*val*/ ctx[33].name)) {
				attr_dev(span, "name", span_name_value);
			}

			if (dirty[0] & /*totalCols*/ 4 && span_data_tag_value !== (span_data_tag_value = /*val*/ ctx[33].name)) {
				attr_dev(span, "data-tag", span_data_tag_value);
			}

			if (dirty[0] & /*totalCols*/ 4 && span_id_value !== (span_id_value = /*val*/ ctx[33].id)) {
				attr_dev(span, "id", span_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(633:28) {:else}",
		ctx
	});

	return block;
}

// (629:28) {#if val.decpoint == true}
function create_if_block(ctx) {
	let td;
	let td_key_value;

	const block = {
		c: function create() {
			td = element("td");
			attr_dev(td, "key", td_key_value = /*val*/ ctx[33].key);
			attr_dev(td, "class", "tdFont text-center points svelte-1wrfq8n");
			attr_dev(td, "width", "50");
			attr_dev(td, "disabled", "true");
			add_location(td, file, 629, 28, 22058);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*totalCols*/ 4 && td_key_value !== (td_key_value = /*val*/ ctx[33].key)) {
				attr_dev(td, "key", td_key_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(629:28) {#if val.decpoint == true}",
		ctx
	});

	return block;
}

// (628:24) {#each totalCols as val, i}
function create_each_block_1(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*val*/ ctx[33].decpoint == true) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(628:24) {#each totalCols as val, i}",
		ctx
	});

	return block;
}

// (626:16) {#each totalRows as data, no}
function create_each_block(ctx) {
	let tr;
	let t;
	let tr_key_value;
	let each_value_1 = /*totalCols*/ ctx[2];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			tr = element("tr");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			attr_dev(tr, "key", tr_key_value = "row" + /*no*/ ctx[32]);
			add_location(tr, file, 626, 20, 21901);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tr, null);
			}

			append_dev(tr, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*totalCols, handleClick*/ 16388) {
				each_value_1 = /*totalCols*/ ctx[2];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tr, t);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(626:16) {#each totalRows as data, no}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let div23;
	let table0;
	let tbody;
	let tr;
	let table0_style_value;
	let t0;
	let t1;
	let t2;
	let t3;
	let table1;
	let t4;
	let div22;
	let div21;
	let h2;
	let button;
	let t6;
	let div20;
	let div19;
	let div6;
	let div2;
	let div0;
	let t8;
	let div1;
	let input0;
	let input0_value_value;
	let t9;
	let div5;
	let div3;
	let t11;
	let div4;
	let input1;
	let input1_value_value;
	let t12;
	let div11;
	let div8;
	let div7;
	let input2;
	let input2_inputprops_value;
	let label0;
	let t14;
	let div10;
	let div9;
	let input3;
	let input3_inputprops_value;
	let label1;
	let t16;
	let div16;
	let div13;
	let div12;
	let input4;
	let input4_inputprops_value;
	let t17;
	let label2;
	let t19;
	let div15;
	let div14;
	let input5;
	let input5_inputprops_value;
	let label3;
	let t21;
	let div18;
	let div17;
	let input6;
	let input6_style_value;
	let current;
	let mounted;
	let dispose;
	let each_value_2 = /*ColsFirstRow*/ ctx[6];
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let if_block0 = /*state*/ ctx[0].plus_minus == 1 && create_if_block_3(ctx);
	let if_block1 = /*state*/ ctx[0].slash_val == 1 && create_if_block_2(ctx);
	let if_block2 = /*state*/ ctx[0].decimal_val == 1 && create_if_block_1(ctx);
	let each_value = /*totalRows*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			main = element("main");
			div23 = element("div");
			table0 = element("table");
			tbody = element("tbody");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			table1 = element("table");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t4 = space();
			div22 = element("div");
			div21 = element("div");
			h2 = element("h2");
			button = element("button");
			button.textContent = `${l.layout_options}`;
			t6 = space();
			div20 = element("div");
			div19 = element("div");
			div6 = element("div");
			div2 = element("div");
			div0 = element("div");
			div0.textContent = `${l.row_count}`;
			t8 = space();
			div1 = element("div");
			input0 = element("input");
			t9 = space();
			div5 = element("div");
			div3 = element("div");
			div3.textContent = `${l.col_count}`;
			t11 = space();
			div4 = element("div");
			input1 = element("input");
			t12 = space();
			div11 = element("div");
			div8 = element("div");
			div7 = element("div");
			input2 = element("input");
			label0 = element("label");
			label0.textContent = "Plus/Minus Column";
			t14 = space();
			div10 = element("div");
			div9 = element("div");
			input3 = element("input");
			label1 = element("label");
			label1.textContent = "Fraction/Slash";
			t16 = space();
			div16 = element("div");
			div13 = element("div");
			div12 = element("div");
			input4 = element("input");
			t17 = space();
			label2 = element("label");
			label2.textContent = "Fixed Decimal";
			t19 = space();
			div15 = element("div");
			div14 = element("div");
			input5 = element("input");
			label3 = element("label");
			label3.textContent = "Floating Decimal";
			t21 = space();
			div18 = element("div");
			div17 = element("div");
			input6 = element("input");
			add_location(tr, file, 567, 16, 19261);
			add_location(tbody, file, 566, 12, 19236);
			attr_dev(table0, "border", "1");
			attr_dev(table0, "id", "tab2");
			attr_dev(table0, "class", "tab2");
			attr_dev(table0, "style", table0_style_value = 'border-collapse: collapse;text-align: center;');
			add_location(table0, file, 565, 8, 19123);
			attr_dev(table1, "id", "gridded_sheet");
			attr_dev(table1, "class", "gridded_tab lastGrid mt-0 myP svelte-1wrfq8n");
			add_location(table1, file, 623, 8, 21754);
			attr_dev(button, "class", "accordion-button collapsed py-0");
			attr_dev(button, "type", "button");
			attr_dev(button, "data-bs-toggle", "collapse");
			attr_dev(button, "data-bs-target", "#collapseOne");
			attr_dev(button, "aria-expanded", "false");
			attr_dev(button, "aria-controls", "collapseOne");
			add_location(button, file, 646, 16, 22929);
			attr_dev(h2, "class", "accordion-header mt-0");
			attr_dev(h2, "id", "headingOne");
			add_location(h2, file, 645, 12, 22861);
			attr_dev(div0, "class", "font-weight-bold");
			add_location(div0, file, 655, 28, 23520);
			attr_dev(input0, "type", "number");
			attr_dev(input0, "min", "1");
			attr_dev(input0, "max", "9");
			input0.value = input0_value_value = /*state*/ ctx[0].rowNum;
			attr_dev(input0, "name", "col_range");
			attr_dev(input0, "id", "col_range");
			attr_dev(input0, "class", "form-control  inline-block");
			attr_dev(input0, "data-label", "Number of rows");
			add_location(input0, file, 657, 32, 23638);
			add_location(div1, file, 656, 28, 23599);
			attr_dev(div2, "class", "col-sm-6");
			add_location(div2, file, 654, 24, 23468);
			attr_dev(div3, "class", "font-weight-bold");
			add_location(div3, file, 661, 28, 23989);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "min", "1");
			attr_dev(input1, "max", "6");
			input1.value = input1_value_value = /*state*/ ctx[0].colNum;
			attr_dev(input1, "name", "col_nmbr");
			attr_dev(input1, "id", "col_range");
			attr_dev(input1, "class", "form-control  inline-block");
			attr_dev(input1, "data-label", "Number of rows");
			add_location(input1, file, 663, 32, 24107);
			add_location(div4, file, 662, 28, 24068);
			attr_dev(div5, "class", "col-sm-6");
			add_location(div5, file, 660, 24, 23937);
			attr_dev(div6, "class", "row form-group");
			add_location(div6, file, 652, 20, 23396);
			attr_dev(input2, "type", "checkbox");
			attr_dev(input2, "class", "custom_checkbox_new float-left svelte-1wrfq8n");
			attr_dev(input2, "id", "plus_minus_checkbox");
			attr_dev(input2, "inputprops", input2_inputprops_value = { 'aria-label': 'Plus/Minus Column' });
			add_location(input2, file, 671, 36, 24621);
			attr_dev(label0, "for", "plus_minus_checkbox");
			attr_dev(label0, "class", "pl-1");
			add_location(label0, file, 675, 38, 24964);
			attr_dev(div7, "class", "inline-block");
			add_location(div7, file, 670, 28, 24557);
			attr_dev(div8, "class", "col-sm-6");
			add_location(div8, file, 669, 24, 24505);
			attr_dev(input3, "type", "checkbox");
			attr_dev(input3, "id", "fraction_slash_checkbox");
			attr_dev(input3, "class", "custom_checkbox_new float-left svelte-1wrfq8n");
			attr_dev(input3, "inputprops", input3_inputprops_value = { 'aria-label': 'Fraction/Slash' });
			add_location(input3, file, 680, 36, 25245);
			attr_dev(label1, "for", "fraction_slash_checkbox");
			attr_dev(label1, "class", "pl-1");
			add_location(label1, file, 680, 208, 25417);
			attr_dev(div9, "class", "inline-block");
			add_location(div9, file, 679, 28, 25181);
			attr_dev(div10, "class", "col-sm-6");
			add_location(div10, file, 678, 24, 25129);
			attr_dev(div11, "class", "row form-group");
			add_location(div11, file, 668, 20, 24451);
			attr_dev(input4, "type", "checkbox");
			attr_dev(input4, "id", "fixed_decimal_checkbox");
			attr_dev(input4, "class", "custom_checkbox_new float-left svelte-1wrfq8n");
			attr_dev(input4, "inputprops", input4_inputprops_value = { 'aria-label': 'Fixed Decimal' });
			add_location(input4, file, 688, 32, 25769);
			attr_dev(label2, "for", "fixed_decimal_checkbox");
			attr_dev(label2, "class", "pl-1");
			add_location(label2, file, 689, 35, 25967);
			attr_dev(div12, "class", "inline-block");
			add_location(div12, file, 687, 24, 25709);
			attr_dev(div13, "class", "col-sm-6");
			add_location(div13, file, 686, 20, 25661);
			attr_dev(input5, "type", "checkbox");
			attr_dev(input5, "id", "floating_decimal_checkbox");
			attr_dev(input5, "class", "custom_checkbox_new float-left svelte-1wrfq8n");
			attr_dev(input5, "inputprops", input5_inputprops_value = { 'aria-label': 'Floating Decimal' });
			add_location(input5, file, 694, 28, 26224);
			attr_dev(label3, "for", "floating_decimal_checkbox");
			attr_dev(label3, "class", "pl-1");
			add_location(label3, file, 695, 30, 26431);
			attr_dev(div14, "class", "inline-block");
			add_location(div14, file, 693, 24, 26168);
			attr_dev(div15, "class", "col-sm-6");
			add_location(div15, file, 692, 20, 26120);
			attr_dev(div16, "class", "row form-group");
			add_location(div16, file, 685, 16, 25611);
			attr_dev(input6, "type", "number");
			attr_dev(input6, "min", "1");
			attr_dev(input6, "max", "7");
			attr_dev(input6, "name", "Fixed_decimal_column");
			attr_dev(input6, "id", "Fixed_decimal_column");
			attr_dev(input6, "class", "form-control  inline-block");
			attr_dev(input6, "placeholder", "Fixed decimal column");
			attr_dev(input6, "style", input6_style_value = 'display: none');
			attr_dev(input6, "data-label", "Fixed decimal column");
			input6.disabled = "true";
			add_location(input6, file, 701, 24, 26702);
			add_location(div17, file, 700, 20, 26671);
			attr_dev(div18, "class", "col-sm-6 inline-block pl-0");
			add_location(div18, file, 699, 16, 26609);
			attr_dev(div19, "class", "accordion-body");
			add_location(div19, file, 651, 16, 23346);
			attr_dev(div20, "id", "collapseOne");
			attr_dev(div20, "class", "accordion-collapse collapse");
			attr_dev(div20, "aria-labelledby", "headingOne");
			attr_dev(div20, "data-bs-parent", "#accordionExample");
			attr_dev(div20, "style", "");
			add_location(div20, file, 650, 12, 23197);
			attr_dev(div21, "class", "accordion-item");
			add_location(div21, file, 644, 12, 22819);
			attr_dev(div22, "class", "accordion mt-5");
			attr_dev(div22, "id", "accordionExample");
			set_style(div22, "background-color", "#F0F0F0");
			add_location(div22, file, 643, 8, 22721);
			attr_dev(div23, "class", "griddedModule svelte-1wrfq8n");
			add_location(div23, file, 564, 4, 19086);
			add_location(main, file, 563, 0, 19074);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, div23);
			append_dev(div23, table0);
			append_dev(table0, tbody);
			append_dev(tbody, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append_dev(div23, t0);
			if (if_block0) if_block0.m(div23, null);
			append_dev(div23, t1);
			if (if_block1) if_block1.m(div23, null);
			append_dev(div23, t2);
			if (if_block2) if_block2.m(div23, null);
			append_dev(div23, t3);
			append_dev(div23, table1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(table1, null);
			}

			append_dev(div23, t4);
			append_dev(div23, div22);
			append_dev(div22, div21);
			append_dev(div21, h2);
			append_dev(h2, button);
			append_dev(div21, t6);
			append_dev(div21, div20);
			append_dev(div20, div19);
			append_dev(div19, div6);
			append_dev(div6, div2);
			append_dev(div2, div0);
			append_dev(div2, t8);
			append_dev(div2, div1);
			append_dev(div1, input0);
			append_dev(div6, t9);
			append_dev(div6, div5);
			append_dev(div5, div3);
			append_dev(div5, t11);
			append_dev(div5, div4);
			append_dev(div4, input1);
			append_dev(div19, t12);
			append_dev(div19, div11);
			append_dev(div11, div8);
			append_dev(div8, div7);
			append_dev(div7, input2);
			append_dev(div7, label0);
			append_dev(div11, t14);
			append_dev(div11, div10);
			append_dev(div10, div9);
			append_dev(div9, input3);
			append_dev(div9, label1);
			append_dev(div19, t16);
			append_dev(div19, div16);
			append_dev(div16, div13);
			append_dev(div13, div12);
			append_dev(div12, input4);
			append_dev(div12, t17);
			append_dev(div12, label2);
			append_dev(div16, t19);
			append_dev(div16, div15);
			append_dev(div15, div14);
			append_dev(div14, input5);
			append_dev(div14, label3);
			append_dev(div19, t21);
			append_dev(div19, div18);
			append_dev(div18, div17);
			append_dev(div17, input6);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "keyup", /*changeRowCol*/ ctx[11], false, false, false),
					listen_dev(input0, "change", /*changeRowCol*/ ctx[11], false, false, false),
					listen_dev(input1, "keyup", /*changeRowCol*/ ctx[11], false, false, false),
					listen_dev(input1, "change", /*changeRowCol*/ ctx[11], false, false, false),
					listen_dev(input2, "click", /*plusMinusSetVal*/ ctx[7], false, false, false),
					listen_dev(input3, "click", /*slashFuncSetVal*/ ctx[8], false, false, false),
					listen_dev(input4, "click", /*fixedFunc*/ ctx[9], false, false, false),
					listen_dev(input5, "click", /*decimalFuncSetVal*/ ctx[10], false, false, false),
					listen_dev(input6, "change", /*fixedDecimalPoints*/ ctx[12], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*ColsFirstRow, rowValidation*/ 8256) {
				each_value_2 = /*ColsFirstRow*/ ctx[6];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tr, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (/*state*/ ctx[0].plus_minus == 1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*state*/ 1) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div23, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*state*/ ctx[0].slash_val == 1) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*state*/ 1) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(div23, t2);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}

			if (/*state*/ ctx[0].decimal_val == 1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*state*/ 1) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div23, t3);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (dirty[0] & /*totalCols, handleClick, totalRows*/ 16390) {
				each_value = /*totalRows*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(table1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (!current || dirty[0] & /*state*/ 1 && input0_value_value !== (input0_value_value = /*state*/ ctx[0].rowNum)) {
				prop_dev(input0, "value", input0_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input1_value_value !== (input1_value_value = /*state*/ ctx[0].colNum)) {
				prop_dev(input1, "value", input1_value_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			transition_in(if_block2);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			transition_out(if_block2);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_each(each_blocks_1, detaching);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function highLight(event) {
	let cell_class = event.target.getAttribute('name');
	let column_index = document.getElementsByName(cell_class);

	for (let i = 1; i < column_index.length; i++) {
		if (column_index[i].classList.contains("active")) {
			column_index[i].classList.remove("active");
		}

		if (column_index[i].innerHTML == event.target.value) {
			column_index[i].classList.add("active");
		}
	}
}

function removeClass() {
	let el = document.getElementsByClassName('points');

	for (let i = 0; i < el.length; i++) {
		if (el[i].classList.contains("active")) {
			el[i].classList.remove("active");
		}
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Gridded', slots, []);
	let state = {};
	let { getChildXml } = $$props;
	let correctAns = [];
	let { xml } = $$props;

	let stateData = writable({
		rowNum: 4,
		colNum: 4,
		tableName: "Gridded System",
		plus_minus: 0,
		slash_val: 0,
		decimal_val: 0,
		xml: '',
		textSize: 14,
		resAns: '',
		correctAns: [],
		correctAnsSplit: [],
		listAns: [],
		res: '',
		fixed_decimal_val: 0,
		decimal_point: 0
	});

	const unsubscribe = stateData.subscribe(items => {
		$$invalidate(0, state = items);
	});

	beforeUpdate(() => {
		AI.selectAll('.tdFont', 'css', { fontSize: '14px' });
	});

	onMount(() => {
		AH.listen('body', 'keydown', '.td_data', (_this, e) => {
			console.log("Evnts => ", e);

			if (e.which === 13) {
				_this.click();
			}
		});
	});

	afterUpdate(() => {
		if (xml != state.xml) {
			$$invalidate(0, state.xml = xml, state);
			loadModule(xml);
		}

		firstRowItem();
		slashFunc();
		decimalFloating();
		plusMinusSign();
		createdSheetRow();
	});

	function loadModule(loadXml) {
		loadXml = XMLToJSON(loadXml);
		parseXMLAuthoring(loadXml);
	}

	function parseXMLAuthoring(MYXML) {
		try {
			$$invalidate(0, state.rowNum = MYXML.smxml._row, state);
			$$invalidate(0, state.colNum = MYXML.smxml._col, state);
			$$invalidate(0, state.slash_val = MYXML.smxml._slash, state);
			$$invalidate(0, state.plus_minus = MYXML.smxml._plusminus, state);
			$$invalidate(0, state.decimal_val = MYXML.smxml._decimal, state);
			$$invalidate(0, state.textSize = MYXML.smxml._font, state);
			$$invalidate(0, state.correctAns = MYXML.smxml._correctAns, state);
			$$invalidate(0, state.correctAnsSplit = MYXML.smxml._correctAns.split(','), state);
			getChildXml(JSONToXML(MYXML));

			if (MYXML.smxml._plusminus == 1) {
				document.getElementById('plus_minus_checkbox').checked = true;
			}

			if (MYXML.smxml._slash == 1) {
				document.getElementById('fraction_slash_checkbox').checked = true;
			}

			if (MYXML.smxml._decimal == 1) {
				document.getElementById('floating_decimal_checkbox').checked = true;
			}
		} catch(events) {
			console.warn({
				'error': events.message,
				'function name': 'parseXMLAuthoring',
				'File name': 'Gridded.js'
			});
		}
	}

	// Set boolean value in plus/minus
	function plusMinusSetVal() {
		$$invalidate(0, state.plus_minus = state.plus_minus == 0 ? 1 : 0, state);
		updateXml();
	}

	// slash function set value true or false
	function slashFuncSetVal(event) {
		$$invalidate(0, state.slash_val = state.slash_val == 0 ? 1 : 0, state);
		updateXml();
	}

	// This function disable decimal input box
	function fixedFunc(event) {
		if (state.fixed_decimal_val == 0) {
			$$invalidate(0, state.fixed_decimal_val = 1, state);
			let elem = document.getElementById('Fixed_decimal_column');
			elem.disabled = false;
			elem.style.display = 'inline-block';
		} else {
			$$invalidate(0, state.fixed_decimal_val = 0, state);
			$$invalidate(0, state.decimal_point = 0, state);
			let elem = document.getElementById('Fixed_decimal_column');
			elem.value = " ";
			elem.disabled = true;
			elem.style.display = 'none';
			updateXml();
		}
	}

	// Set value decimal floating
	function decimalFuncSetVal(event) {
		$$invalidate(0, state.decimal_val = state.decimal_val == 0 ? 1 : 0, state);
		updateXml();
	}

	// This function decided to row or column function
	function changeRowCol(event) {
		if (event.target.value.length > 1) {
			AH.alert('accept only single value');
			event.target.value = 4;
			return false;
		}

		let val = event.target.value;

		if (!(val > 0 && val <= 10)) {
			AH.alert(l.grid_one_to_ten);
			event.target.value = 4;
			return false;
		}

		if (event.target.name == "col_nmbr") {
			if (event.target.value < 1) {
				AH.alert(l.col_less_one);
				event.target.value = 1;
				return false;
			} else if (event.target.value > 6) {
				AH.alert(l.type_one_to_seven);
				event.target.value = 4;
				$$invalidate(0, state.colNum = 4, state);
				updateXml();
				return false;
			}

			$$invalidate(0, state.colNum = event.target.value, state);
		} else {
			if (event.target.value < 1) {
				AH.alert(l.row_less_one);
				event.target.value = 1;
				return false;
			} else if (event.target.value > 10) {
				AH.alert(l.type_one_to_ten);
				event.target.value = 4;
				$$invalidate(0, state.rowNum = 4, state);
				updateXml();
				return false;
			}

			$$invalidate(0, state.rowNum = event.target.value, state);
		}

		updateXml();
	}

	function fixedDecimalPoints(event) {
		let decimalPosition = event.target.value;

		if (event.target.value.length > 1) {
			AH.alert('accept only single value');
			event.target.value = "";
			return false;
		}

		if (event.target.value == "") {
			decimalPosition = '';
		}

		if (event.target.value.length > 1 || event.target.value < 1 || state.colNum <= event.target.value) {
			decimalPosition = 1;
			event.target.value = 1;
			AH.alert(l.decimal_position + (state.colNum - 1) + ".");
			AH.select('.sa-info', 'css', { display: 'block' });
		}

		$$invalidate(0, state.decimal_point = decimalPosition, state);
		updateXml();
	}

	// Update the xml
	function updateXml() {
		let updatedXml = '<smxml type="56" name="Gridded" plusminus="' + state.plus_minus + '" slash="' + state.slash_val + '" decimal="' + state.decimal_val + '" fixed_point="' + state.decimal_point + '" font="' + state.textSize + '" row="' + state.rowNum + '" col="' + state.colNum + '" correctAns="' + state.res + '" ><!--[CDATA[]]--></smxml>';
		getChildXml(updatedXml);
	}

	// Create a sheet according to range
	let totalRows = [], totalCols = [];

	function createdSheetRow() {
		AH.select('.tdFont', 'css', { fontSize: state.textSize });
		$$invalidate(1, totalRows = []);
		let dec_point = state.decimal_point;

		for (let i = 0; i < state.rowNum; i++) {
			$$invalidate(2, totalCols = []);

			for (let j = 0; j < state.colNum; j++) {
				if (j == dec_point - 1 && dec_point != 0) {
					$$invalidate(2, totalCols = [...totalCols, { key: "col" + i + j, decpoint: true }]);
				} else {
					if (totalCols.length < state.colNum) {
						$$invalidate(2, totalCols = [
							...totalCols,
							{
								key: "col" + i + j,
								name: j,
								id: "td" + j + "-" + i + j,
								decpoint: false
							}
						]);
					}
				}
			}

			$$invalidate(1, totalRows = [...totalRows, { key: "row" + i }]);
		}
	}

	

	// created a slash row in gridded sheet
	let Cols_slash;

	function slashFunc(event) {
		$$invalidate(3, Cols_slash = []);
		let dec_point = state.decimal_point;

		for (let j = 0; j < state.colNum; j++) {
			if (j == dec_point - 1 && dec_point != 0) {
				$$invalidate(3, Cols_slash = [...Cols_slash, { key: "col" + j, decpoint: true }]);
			} else {
				if (Cols_slash.length < state.colNum) {
					$$invalidate(3, Cols_slash = [
						...Cols_slash,
						{
							id: "td" + j,
							name: j,
							dataTag: j,
							decpoint: false
						}
					]);
				}
			}
		}
	}

	// Create a decimal floating row
	let Cols_decimal;

	function decimalFloating(event) {
		Cols_decimal = [];
		let dec_point = state.decimal_point;

		for (let j = 0; j < state.colNum; j++) {
			if (j == dec_point - 1 && dec_point != 0) {
				Cols_decimal = [...Cols_decimal, { key: "col" + j, decpoint: true }];
			} else {
				if (Cols_decimal.length < state.colNum) {
					Cols_decimal.push(Cols_decimal = [
						...Cols_decimal,
						{
							id: "td" + j,
							name: j,
							dataTag: j,
							decpoint: false
						}
					]);
				}
			}
		}
	}

	// create plus and minus row
	let Cols_Minus = [], Cols = [];

	function plusMinusSign(event) {
		$$invalidate(5, Cols = []);
		$$invalidate(4, Cols_Minus = []);
		let dec_point = state.decimal_point;

		for (let j = 0; j < state.colNum; j++) {
			if (j == dec_point - 1 && dec_point != 0) {
				$$invalidate(5, Cols = [
					...Cols,
					{
						id: "td" + j,
						dataTag: j,
						name: j,
						decpoint: true
					}
				]);
			} else {
				if (Cols.length < state.colNum) {
					$$invalidate(5, Cols = [
						...Cols,
						{
							id: "td" + j,
							dataTag: j,
							name: j,
							decpoint: false
						}
					]);
				}
			}

			if (j == dec_point - 1 && dec_point != 0) {
				$$invalidate(4, Cols_Minus = [
					...Cols_Minus,
					{
						id: "td" + j,
						dataTag: j,
						name: j,
						decpoint: true
					}
				]);
			} else {
				if (Cols_Minus.length < state.colNum) {
					$$invalidate(4, Cols_Minus = [
						...Cols_Minus,
						{
							id: "td" + j,
							name: j,
							dataTag: j,
							decpoint: false
						}
					]);
				}
			}
		}
	}

	// Create very first row and store data according to click
	let ColsFirstRow = [];

	function firstRowItem() {
		$$invalidate(6, ColsFirstRow = []);
		let dec_point = state.decimal_point;

		for (let j = 0; j < state.colNum; j++) {
			if (j === dec_point - 1 && dec_point != 0) {
				$$invalidate(6, ColsFirstRow = [...ColsFirstRow, { decpoint: true }]);
			} else {
				if (ColsFirstRow.length < state.colNum) {
					$$invalidate(6, ColsFirstRow = [
						...ColsFirstRow,
						{
							id: 'td' + j,
							value: state.correctAnsSplit[j] == "%blank%"
							? ''
							: state.correctAnsSplit[j],
							name: j,
							dataTag: j,
							decpoint: false
						}
					]);
				}
			}
		}
	}

	// Check validation first row input type
	function rowValidation(event) {
		console.log('number' + state.plus_minus);
		let a = state.rowNum - 1;

		if (event.target.value.length > 1) {
			AH.alert(l.double_digit);
			event.target.value = '';
			return false;
		} else if (event.target.value < 0) {
			AH.alert(l.less_one);
			event.target.value = "";
			return false;
		} else if (a < event.target.value) {
			AH.alert(l.number_from + a);
			event.target.value = '';
			return false;
		} else if (state.plus_minus == 0 && event.target.value == "+" || event.target.value == "-") {
			AH.alert('Plz select plus and minus option');
			event.target.value = "";
			return false;
		} else if (state.slash_val == 0 && event.target.value == "/") {
			AH.alert('Plz select slash option');
			event.target.value = "";
			return false;
		} else if (state.decimal_val == 0 && event.target.value == ".") {
			AH.alert('Plz select decimal option');
			event.target.value = "";
			return false;
		}

		let attribute = event.target.attributes.getNamedItem('data-tag').value;
		correctAns[attribute] = event.target.value;

		for (let i = 0; i < correctAns.length; i++) {
			if (typeof correctAns[i] == 'undefined' || correctAns[i] == "") {
				correctAns[i] = "%blank%";
			} //console.log(correctAns);
		}

		if (correctAns[correctAns.length - 1] == "%blank%") {
			correctAns.pop();
		}

		$$invalidate(0, state.listAns = correctAns, state);
		$$invalidate(0, state.res = state.listAns.toString(), state);
		updateXml();
	}

	function handleClick(event) {
		let cell_class = event.target.getAttribute('name');
		let column_index = document.getElementsByName(cell_class);

		for (let i = 0; i < column_index.length; i++) {
			if (column_index[i].classList.contains("active")) {
				column_index[i].classList.remove("active");
			}
		}

		event.target.classList.add("active");
		let target_id = event.target.id;
		let target_to_display = target_id.split("-");
		document.getElementById(target_to_display[0]).value = event.target.innerHTML;
		let attribute = event.target.attributes.getNamedItem('data-tag').value;
		correctAns[attribute] = event.target.innerHTML;

		for (let i = 0; i < correctAns.length; i++) {
			if (typeof correctAns[i] == 'undefined') {
				correctAns[i] = "%blank%";
			} //console.log(correctAns);
		}

		$$invalidate(0, state.listAns = correctAns, state);
		$$invalidate(0, state.res = state.listAns.toString(), state);
		updateXml();
	}

	// Insert a data in top row according to click  and change colors
	function handleClickCombo(event) {
		//let cell_class = event.target.getAttribute('name');
		let cell_class = event.detail.target.getAttribute('name');

		let column_index = document.getElementsByName(cell_class);

		for (let i = 0; i < column_index.length; i++) {
			if (column_index[i].classList.contains("active")) {
				column_index[i].classList.remove("active");
			}
		}

		event.detail.target.classList.add("active");
		let target_id = event.detail.target.id;
		let target_to_display = target_id.split("-");
		document.getElementById(target_to_display[0]).value = event.detail.target.innerHTML;

		//let attribute = event.target.attributes.getNamedItem('data-tag').value;
		let attribute = event.detail.target.attributes.getNamedItem('data-tag').value;

		correctAns[attribute] = event.detail.target.innerHTML;

		for (let i = 0; i < correctAns.length; i++) {
			if (typeof correctAns[i] == 'undefined') {
				correctAns[i] = "%blank%";
			} //console.log(correctAns);
		}

		$$invalidate(0, state.listAns = correctAns, state);
		$$invalidate(0, state.res = state.listAns.toString(), state);
		updateXml();
	}

	const writable_props = ['getChildXml', 'xml'];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Gridded> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('getChildXml' in $$props) $$invalidate(16, getChildXml = $$props.getChildXml);
		if ('xml' in $$props) $$invalidate(17, xml = $$props.xml);
	};

	$$self.$capture_state = () => ({
		l,
		writable,
		AH,
		XMLToJSON,
		JSONToXML,
		onMount,
		afterUpdate,
		beforeUpdate,
		GriddedHelper,
		state,
		getChildXml,
		correctAns,
		xml,
		stateData,
		unsubscribe,
		loadModule,
		parseXMLAuthoring,
		plusMinusSetVal,
		slashFuncSetVal,
		fixedFunc,
		decimalFuncSetVal,
		changeRowCol,
		fixedDecimalPoints,
		updateXml,
		totalRows,
		totalCols,
		createdSheetRow,
		Cols_slash,
		slashFunc,
		Cols_decimal,
		decimalFloating,
		Cols_Minus,
		Cols,
		plusMinusSign,
		ColsFirstRow,
		firstRowItem,
		rowValidation,
		highLight,
		handleClick,
		handleClickCombo,
		removeClass
	});

	$$self.$inject_state = $$props => {
		if ('state' in $$props) $$invalidate(0, state = $$props.state);
		if ('getChildXml' in $$props) $$invalidate(16, getChildXml = $$props.getChildXml);
		if ('correctAns' in $$props) correctAns = $$props.correctAns;
		if ('xml' in $$props) $$invalidate(17, xml = $$props.xml);
		if ('stateData' in $$props) stateData = $$props.stateData;
		if ('totalRows' in $$props) $$invalidate(1, totalRows = $$props.totalRows);
		if ('totalCols' in $$props) $$invalidate(2, totalCols = $$props.totalCols);
		if ('Cols_slash' in $$props) $$invalidate(3, Cols_slash = $$props.Cols_slash);
		if ('Cols_decimal' in $$props) Cols_decimal = $$props.Cols_decimal;
		if ('Cols_Minus' in $$props) $$invalidate(4, Cols_Minus = $$props.Cols_Minus);
		if ('Cols' in $$props) $$invalidate(5, Cols = $$props.Cols);
		if ('ColsFirstRow' in $$props) $$invalidate(6, ColsFirstRow = $$props.ColsFirstRow);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		state,
		totalRows,
		totalCols,
		Cols_slash,
		Cols_Minus,
		Cols,
		ColsFirstRow,
		plusMinusSetVal,
		slashFuncSetVal,
		fixedFunc,
		decimalFuncSetVal,
		changeRowCol,
		fixedDecimalPoints,
		rowValidation,
		handleClick,
		handleClickCombo,
		getChildXml,
		xml
	];
}

class Gridded extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { getChildXml: 16, xml: 17 }, add_css, [-1, -1]);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Gridded",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*getChildXml*/ ctx[16] === undefined && !('getChildXml' in props)) {
			console_1.warn("<Gridded> was created without expected prop 'getChildXml'");
		}

		if (/*xml*/ ctx[17] === undefined && !('xml' in props)) {
			console_1.warn("<Gridded> was created without expected prop 'xml'");
		}
	}

	get getChildXml() {
		throw new Error("<Gridded>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<Gridded>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xml() {
		throw new Error("<Gridded>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<Gridded>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Gridded;
//# sourceMappingURL=Gridded-6ed655ef.js.map
