
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, C as validate_each_argument, e as element, f as space, j as attr_dev, k as add_location, n as insert_dev, p as append_dev, x as detach_dev, K as destroy_each, h as text, F as set_data_dev, z as empty, B as noop, Y as src_url_equal, g as globals, A as AH, a1 as add_render_callback, o as onMount, ad as afterUpdate, X as XMLToJSON, a5 as onUserAnsChange, y as l, q as listen_dev, _ as prevent_default, H as run_all, c as create_component, m as mount_component, t as transition_in, a as transition_out, b as destroy_component, l as set_style, r as group_outros, u as check_outros } from './main-2959c61b.js';
import { I as ItemHelper } from './ItemHelper-da31643a.js';
import { s as styleInject } from './style-inject.es-1c867377.js';

/* clsSMAlignMatch\showAnswer.svelte generated by Svelte v3.40.2 */

const file = "clsSMAlignMatch\\showAnswer.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[6] = list[i];
	child_ctx[8] = i;
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

// (9:0) {#if jsondataCategory}
function create_if_block(ctx) {
	let table;
	let tbody;
	let tr;
	let t;
	let each_value_2 = /*jsondataCategory*/ ctx[0].categories;
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value = /*objValues*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			table = element("table");
			tbody = element("tbody");
			tr = element("tr");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(tr, "class", "remedcolumn height50");
			add_location(tr, file, 11, 12, 313);
			add_location(tbody, file, 10, 8, 292);
			attr_dev(table, "class", "table");
			attr_dev(table, "id", "alignmatch-table");
			add_location(table, file, 9, 4, 239);
		},
		m: function mount(target, anchor) {
			insert_dev(target, table, anchor);
			append_dev(table, tbody);
			append_dev(tbody, tr);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(tr, null);
			}

			append_dev(tbody, t);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty & /*jsondataCategory*/ 1) {
				each_value_2 = /*jsondataCategory*/ ctx[0].categories;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(tr, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty & /*correct_ans_bg, objValues, your_ans_class, state, user_ans_table*/ 62) {
				each_value = /*objValues*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(9:0) {#if jsondataCategory}",
		ctx
	});

	return block;
}

// (13:16) {#each jsondataCategory.categories as obj}
function create_each_block_2(ctx) {
	let td;
	let h3;
	let t0_value = /*obj*/ ctx[12].text + "";
	let t0;
	let t1;
	let td_key_value;

	const block = {
		c: function create() {
			td = element("td");
			h3 = element("h3");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(h3, "tabindex", "0");
			attr_dev(h3, "class", "m-0 font-italic");
			add_location(h3, file, 14, 24, 505);
			attr_dev(td, "key", td_key_value = /*obj*/ ctx[12].text + '_' + /*obj*/ ctx[12].id);
			attr_dev(td, "class", "steel-bg");
			add_location(td, file, 13, 20, 428);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			append_dev(td, h3);
			append_dev(h3, t0);
			append_dev(td, t1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*jsondataCategory*/ 1 && t0_value !== (t0_value = /*obj*/ ctx[12].text + "")) set_data_dev(t0, t0_value);

			if (dirty & /*jsondataCategory*/ 1 && td_key_value !== (td_key_value = /*obj*/ ctx[12].text + '_' + /*obj*/ ctx[12].id)) {
				attr_dev(td, "key", td_key_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(13:16) {#each jsondataCategory.categories as obj}",
		ctx
	});

	return block;
}

// (21:20) {#if rowTagWise }
function create_if_block_1(ctx) {
	let each_1_anchor;
	let each_value_1 = /*rowTagWise*/ ctx[6];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*objValues, your_ans_class, state, user_ans_table*/ 54) {
				each_value_1 = /*rowTagWise*/ ctx[6];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(21:20) {#if rowTagWise }",
		ctx
	});

	return block;
}

// (51:62) 
function create_if_block_6(ctx) {
	let div;
	let raw_value = /*col*/ ctx[9].label + "";
	let div_title_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "elementText");
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "title", div_title_value = /*col*/ ctx[9].label);
			add_location(div, file, 51, 40, 2911);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*objValues*/ 2 && raw_value !== (raw_value = /*col*/ ctx[9].label + "")) div.innerHTML = raw_value;
			if (dirty & /*objValues*/ 2 && div_title_value !== (div_title_value = /*col*/ ctx[9].label)) {
				attr_dev(div, "title", div_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(51:62) ",
		ctx
	});

	return block;
}

// (41:36) {#if col.imagealt && col.imageurl && col.imageurl != ''}
function create_if_block_5(ctx) {
	let div;
	let img;
	let img_src_value;
	let img_alt_value;
	let img_title_value;

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			attr_dev(img, "class", "imagData");
			if (!src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*col*/ ctx[9].imageurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "tabindex", "0");
			attr_dev(img, "alt", img_alt_value = /*col*/ ctx[9].imagealt);
			attr_dev(img, "title", img_title_value = /*col*/ ctx[9].imagealt);
			add_location(img, file, 42, 44, 2321);
			add_location(div, file, 41, 40, 2270);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*objValues*/ 2 && !src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*col*/ ctx[9].imageurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*objValues*/ 2 && img_alt_value !== (img_alt_value = /*col*/ ctx[9].imagealt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*objValues*/ 2 && img_title_value !== (img_title_value = /*col*/ ctx[9].imagealt)) {
				attr_dev(img, "title", img_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(41:36) {#if col.imagealt && col.imageurl && col.imageurl != ''}",
		ctx
	});

	return block;
}

// (24:32) {#if user_ans_table == 1}
function create_if_block_2(ctx) {
	let if_block_anchor;

	function select_block_type_1(ctx, dirty) {
		if (/*col*/ ctx[9].imagealt && /*col*/ ctx[9].imageurl && /*state*/ ctx[2].userAnswerArr[/*col*/ ctx[9].tags][/*ind*/ ctx[11]].imageurl != '') return create_if_block_3;
		if (/*col*/ ctx[9].label != '') return create_if_block_4;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if (if_block) {
				if_block.d(detaching);
			}

			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(24:32) {#if user_ans_table == 1}",
		ctx
	});

	return block;
}

// (33:62) 
function create_if_block_4(ctx) {
	let div;
	let raw_value = /*state*/ ctx[2].userAnswerArr[/*col*/ ctx[9].tags][/*ind*/ ctx[11]].label + "";
	let div_title_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "elementText");
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "title", div_title_value = /*col*/ ctx[9].label);
			add_location(div, file, 33, 40, 1759);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty & /*state, objValues*/ 6 && raw_value !== (raw_value = /*state*/ ctx[2].userAnswerArr[/*col*/ ctx[9].tags][/*ind*/ ctx[11]].label + "")) div.innerHTML = raw_value;
			if (dirty & /*objValues*/ 2 && div_title_value !== (div_title_value = /*col*/ ctx[9].label)) {
				attr_dev(div, "title", div_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(33:62) ",
		ctx
	});

	return block;
}

// (25:36) {#if col.imagealt && col.imageurl && state.userAnswerArr[col.tags][ind].imageurl != ''}
function create_if_block_3(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;
	let img_title_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "imagData");
			if (!src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*state*/ ctx[2].userAnswerArr[/*col*/ ctx[9].tags][/*ind*/ ctx[11]].imageurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "tabindex", "0");
			attr_dev(img, "alt", img_alt_value = /*col*/ ctx[9].imagealt);
			attr_dev(img, "title", img_title_value = /*col*/ ctx[9].imagealt);
			add_location(img, file, 25, 40, 1210);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*state, objValues*/ 6 && !src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*state*/ ctx[2].userAnswerArr[/*col*/ ctx[9].tags][/*ind*/ ctx[11]].imageurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty & /*objValues*/ 2 && img_alt_value !== (img_alt_value = /*col*/ ctx[9].imagealt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty & /*objValues*/ 2 && img_title_value !== (img_title_value = /*col*/ ctx[9].imagealt)) {
				attr_dev(img, "title", img_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(25:36) {#if col.imagealt && col.imageurl && state.userAnswerArr[col.tags][ind].imageurl != ''}",
		ctx
	});

	return block;
}

// (22:24) {#each rowTagWise as col, ind}
function create_each_block_1(ctx) {
	let td;
	let t;
	let td_key_value;
	let td_col_value;
	let td_class_value;

	function select_block_type(ctx, dirty) {
		if (/*user_ans_table*/ ctx[5] == 1) return create_if_block_2;
		if (/*col*/ ctx[9].imagealt && /*col*/ ctx[9].imageurl && /*col*/ ctx[9].imageurl != '') return create_if_block_5;
		if (/*col*/ ctx[9].label != '') return create_if_block_6;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			td = element("td");
			if (if_block) if_block.c();
			t = space();
			attr_dev(td, "key", td_key_value = /*ind*/ ctx[11]);
			attr_dev(td, "col", td_col_value = /*col*/ ctx[9].id);
			attr_dev(td, "class", td_class_value = "position-relative " + /*your_ans_class*/ ctx[4] + " align-middle column_" + (/*ind*/ ctx[11] + 1));
			add_location(td, file, 22, 28, 884);
		},
		m: function mount(target, anchor) {
			insert_dev(target, td, anchor);
			if (if_block) if_block.m(td, null);
			append_dev(td, t);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(td, t);
				}
			}

			if (dirty & /*objValues*/ 2 && td_col_value !== (td_col_value = /*col*/ ctx[9].id)) {
				attr_dev(td, "col", td_col_value);
			}

			if (dirty & /*your_ans_class*/ 16 && td_class_value !== (td_class_value = "position-relative " + /*your_ans_class*/ ctx[4] + " align-middle column_" + (/*ind*/ ctx[11] + 1))) {
				attr_dev(td, "class", td_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(td);

			if (if_block) {
				if_block.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(22:24) {#each rowTagWise as col, ind}",
		ctx
	});

	return block;
}

// (19:12) {#each objValues as rowTagWise, i}
function create_each_block(ctx) {
	let tr;
	let t;
	let tr_key_value;
	let tr_class_value;
	let if_block = /*rowTagWise*/ ctx[6] && create_if_block_1(ctx);

	const block = {
		c: function create() {
			tr = element("tr");
			if (if_block) if_block.c();
			t = space();
			attr_dev(tr, "key", tr_key_value = /*i*/ ctx[8]);
			attr_dev(tr, "class", tr_class_value = "" + (/*correct_ans_bg*/ ctx[3] + " remedcolumn row_" + (/*i*/ ctx[8] + 1)));
			add_location(tr, file, 19, 16, 698);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			if (if_block) if_block.m(tr, null);
			append_dev(tr, t);
		},
		p: function update(ctx, dirty) {
			if (/*rowTagWise*/ ctx[6]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(tr, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*correct_ans_bg*/ 8 && tr_class_value !== (tr_class_value = "" + (/*correct_ans_bg*/ ctx[3] + " remedcolumn row_" + (/*i*/ ctx[8] + 1)))) {
				attr_dev(tr, "class", tr_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if (if_block) if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(19:12) {#each objValues as rowTagWise, i}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let if_block_anchor;
	let if_block = /*jsondataCategory*/ ctx[0] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*jsondataCategory*/ ctx[0]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('ShowAnswer', slots, []);
	let { jsondataCategory } = $$props;
	let { objValues } = $$props;
	let { state } = $$props;
	let { correct_ans_bg = '' } = $$props;
	let { your_ans_class = '' } = $$props;
	let { user_ans_table } = $$props;

	const writable_props = [
		'jsondataCategory',
		'objValues',
		'state',
		'correct_ans_bg',
		'your_ans_class',
		'user_ans_table'
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ShowAnswer> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ('jsondataCategory' in $$props) $$invalidate(0, jsondataCategory = $$props.jsondataCategory);
		if ('objValues' in $$props) $$invalidate(1, objValues = $$props.objValues);
		if ('state' in $$props) $$invalidate(2, state = $$props.state);
		if ('correct_ans_bg' in $$props) $$invalidate(3, correct_ans_bg = $$props.correct_ans_bg);
		if ('your_ans_class' in $$props) $$invalidate(4, your_ans_class = $$props.your_ans_class);
		if ('user_ans_table' in $$props) $$invalidate(5, user_ans_table = $$props.user_ans_table);
	};

	$$self.$capture_state = () => ({
		jsondataCategory,
		objValues,
		state,
		correct_ans_bg,
		your_ans_class,
		user_ans_table
	});

	$$self.$inject_state = $$props => {
		if ('jsondataCategory' in $$props) $$invalidate(0, jsondataCategory = $$props.jsondataCategory);
		if ('objValues' in $$props) $$invalidate(1, objValues = $$props.objValues);
		if ('state' in $$props) $$invalidate(2, state = $$props.state);
		if ('correct_ans_bg' in $$props) $$invalidate(3, correct_ans_bg = $$props.correct_ans_bg);
		if ('your_ans_class' in $$props) $$invalidate(4, your_ans_class = $$props.your_ans_class);
		if ('user_ans_table' in $$props) $$invalidate(5, user_ans_table = $$props.user_ans_table);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		jsondataCategory,
		objValues,
		state,
		correct_ans_bg,
		your_ans_class,
		user_ans_table
	];
}

class ShowAnswer extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			jsondataCategory: 0,
			objValues: 1,
			state: 2,
			correct_ans_bg: 3,
			your_ans_class: 4,
			user_ans_table: 5
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "ShowAnswer",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*jsondataCategory*/ ctx[0] === undefined && !('jsondataCategory' in props)) {
			console.warn("<ShowAnswer> was created without expected prop 'jsondataCategory'");
		}

		if (/*objValues*/ ctx[1] === undefined && !('objValues' in props)) {
			console.warn("<ShowAnswer> was created without expected prop 'objValues'");
		}

		if (/*state*/ ctx[2] === undefined && !('state' in props)) {
			console.warn("<ShowAnswer> was created without expected prop 'state'");
		}

		if (/*user_ans_table*/ ctx[5] === undefined && !('user_ans_table' in props)) {
			console.warn("<ShowAnswer> was created without expected prop 'user_ans_table'");
		}
	}

	get jsondataCategory() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsondataCategory(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get objValues() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set objValues(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get state() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set state(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get correct_ans_bg() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set correct_ans_bg(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get your_ans_class() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set your_ans_class(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get user_ans_table() {
		throw new Error("<ShowAnswer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user_ans_table(value) {
		throw new Error("<ShowAnswer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

var css_248z = ".alignTestarea{user-select:none}.alignTestarea p{margin:2rem 0;font-size:1.6rem;line-height:1.5;font-weight:400;font-family:Roboto,sans-serif}.alignTestarea p:first-of-type{margin-top:3rem}.categoryinnercontainer{border:2px solid #4182b9;display:block}.card_border{background:#eee;padding-top:3px;border-radius:10px 10px 0 0;border-bottom:2px solid #ccc;width:99.5%;height:auto;margin:0 auto}.categoryitemcontainer{width:100%;position:relative}.nextbutton,.prevbutton{display:block;opacity:.8;position:relative;cursor:pointer;height:94px;color:#4182b9;text-align:center}.nextbutton:hover,.prevbutton:hover{opacity:1}.btnGrp{position:relative;top:50%}.categoryiteminnercontainer img{display:block;margin:0 auto}.matchbutton,.reset_btn{font-size:19px;padding-left:70px;padding-right:70px}.element{width:100%;height:100%;display:table-cell;vertical-align:middle}.overlay{background-color:transparent;position:relative;top:0;left:0;right:0;bottom:0;width:100%;height:100%;-webkit-transition:background-color .2s ease-in;transition:background-color .2s ease-in;z-index:20}.item.left{float:left}.item.clear{clear:both}.typeCorrect{background:#d1f5cb}.typeIncorrect{background:#f0cbd1}.remedcolumn{border:1px solid #000;position:relative;width:100px;height:100px;text-align:center}.categoryAuthorcontainer table{font-family:arial,sans-serif;border-collapse:unset;width:100%}.categoryAuthorcontainer table td{border:1px solid #ddd;text-align:left;padding:8px}.categoryAuthorcontainer table tr:nth-child(even){background-color:#ddd}.fileUpload{width:19px;height:24px;position:relative;left:-26px;bottom:20px}.categoryAuthorcontainer table tr td button{width:29px;height:22px}.fileUpload span{top:-5px;left:-7px}.categoryAuthorcontainer table tr td button span{left:-1px}.btn_category{width:20px;height:30px;position:relative;right:-1px;margin:6px 0 0 10px;padding:3px 0 0 7px}.btn_category span{left:-6px;top:-6px;font-size:13px}.tableContainer{overflow-x:auto}.rowContainer{width:100%;margin-bottom:8px;min-height:70px;display:inline-flex}.columnContainer{width:180px;padding:5px 8px 5px 0;min-height:70px;display:inline-flex;border:1px solid #747477;margin:0 0 6px 10px}.nextbutton img,.prevbutton img{position:relative;top:36%;width:57%}.remedcolumn td{border:1px solid #000!important;text-align:center}.elementText{padding:17px 0;font-weight:700;font-size:18px}td .elementText{line-height:normal;font-weight:700;font-size:14px;overflow:hidden;text-overflow:ellipsis;margin:0 auto}.remedcolumn .elementText.other{font-weight:400;font-size:14px}.heightmin{height:0%}.glyCorrect{color:green}.glyIncorrect{color:red}.yourAnswer table{width:100%!important;border-collapse:unset}.correctAnswer table{width:100%!important;border-collapse:unset}.text_alignmatch{min-height:56px;max-height:150px;cursor:pointer}.r-lg{-webkit-border-radius:15px;-moz-border-radius:15px;border-radius:15px}.span9{width:700px}.wrong_ans{animation:shake .82s cubic-bezier(.36,.07,.19,.97) both;transform:translate3d(0,0,0);backface-visibility:hidden;perspective:1000px}.steel-bg{background-color:#7aa8ce;color:#fff!important}@keyframes shake{10%,90%{transform:translate3d(-1px,0,0)}20%,80%{transform:translate3d(2px,0,0)}30%,50%,70%{transform:translate3d(-4px,0,0)}40%,60%{transform:translate3d(4px,0,0)}}.light-cyan-bg{background-color:#d4e4ff;color:#333}.add_cat_btn{transform:rotate(270deg);width:109px}.scoreDiv{overflow:auto}.height50{height:50px}.btn-light:not([disabled]):not(.disabled).active{color:#fff!important;-webkit-box-shadow:inset 0 2px 0 #1266f1!important;box-shadow:inset 0 2px 0 #1266f1!important;background-color:#2572f2!important;border-color:#2572f2!important;border-top-color:#0c57d3!important}";
styleInject(css_248z);

/* clsSMAlignMatch\AlignMatchPreview.svelte generated by Svelte v3.40.2 */

const { Object: Object_1, console: console_1, window: window_1 } = globals;
const file$1 = "clsSMAlignMatch\\AlignMatchPreview.svelte";

function get_each_context$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[36] = list[i];
	child_ctx[38] = i;
	return child_ctx;
}

function get_each_context_1$1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[39] = list[i];
	return child_ctx;
}

// (685:12) {#if state.xml}
function create_if_block_3$1(ctx) {
	let each_1_anchor;
	let each_value = /*state*/ ctx[2].xml.category.categories;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*nextbutton, state, onImgLoad, ignoreItemIds, prevbutton*/ 964) {
				each_value = /*state*/ ctx[2].xml.category.categories;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context$1(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3$1.name,
		type: "if",
		source: "(685:12) {#if state.xml}",
		ctx
	});

	return block;
}

// (699:44) {#if datai.id == dataj.category && (ignoreItemIds.indexOf(dataj.id) == -1)}
function create_if_block_4$1(ctx) {
	let if_block_anchor;
	let if_block = /*state*/ ctx[2].correct_match['category_' + /*dataj*/ ctx[39].sequence] == false && create_if_block_5$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*state*/ ctx[2].correct_match['category_' + /*dataj*/ ctx[39].sequence] == false) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_5$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4$1.name,
		type: "if",
		source: "(699:44) {#if datai.id == dataj.category && (ignoreItemIds.indexOf(dataj.id) == -1)}",
		ctx
	});

	return block;
}

// (700:48) {#if state.correct_match['category_'+ dataj.sequence] == false}
function create_if_block_5$1(ctx) {
	let div;
	let t;
	let div_seq_no_value;
	let div_key_value;
	let div_data_tags_value;

	function select_block_type(ctx, dirty) {
		if (/*dataj*/ ctx[39].imageurl != '') return create_if_block_6$1;
		if (/*dataj*/ ctx[39].label != '') return create_if_block_7;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			div = element("div");
			if (if_block) if_block.c();
			t = space();
			attr_dev(div, "class", "element bg-white m-0");
			attr_dev(div, "seq_no", div_seq_no_value = "category_" + /*dataj*/ ctx[39].sequence);
			attr_dev(div, "key", div_key_value = /*dataj*/ ctx[39].id);
			attr_dev(div, "data-tags", div_data_tags_value = /*dataj*/ ctx[39].tags);
			set_style(div, "display", "none");
			add_location(div, file$1, 700, 52, 36802);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append_dev(div, t);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, t);
				}
			}

			if (dirty[0] & /*state*/ 4 && div_seq_no_value !== (div_seq_no_value = "category_" + /*dataj*/ ctx[39].sequence)) {
				attr_dev(div, "seq_no", div_seq_no_value);
			}

			if (dirty[0] & /*state*/ 4 && div_key_value !== (div_key_value = /*dataj*/ ctx[39].id)) {
				attr_dev(div, "key", div_key_value);
			}

			if (dirty[0] & /*state*/ 4 && div_data_tags_value !== (div_data_tags_value = /*dataj*/ ctx[39].tags)) {
				attr_dev(div, "data-tags", div_data_tags_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);

			if (if_block) {
				if_block.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5$1.name,
		type: "if",
		source: "(700:48) {#if state.correct_match['category_'+ dataj.sequence] == false}",
		ctx
	});

	return block;
}

// (704:84) 
function create_if_block_7(ctx) {
	let div;
	let raw_value = /*dataj*/ ctx[39].label + "";
	let div_tabindex_value;
	let div_title_value;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "elementText");
			attr_dev(div, "tabindex", div_tabindex_value = 0);
			attr_dev(div, "title", div_title_value = /*dataj*/ ctx[39].label);
			add_location(div, file$1, 704, 60, 37492);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			div.innerHTML = raw_value;
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4 && raw_value !== (raw_value = /*dataj*/ ctx[39].label + "")) div.innerHTML = raw_value;
			if (dirty[0] & /*state*/ 4 && div_title_value !== (div_title_value = /*dataj*/ ctx[39].label)) {
				attr_dev(div, "title", div_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(704:84) ",
		ctx
	});

	return block;
}

// (702:56) {#if dataj.imageurl != ''}
function create_if_block_6$1(ctx) {
	let img;
	let img_data_check_value;
	let img_src_value;
	let img_tabindex_value;
	let img_alt_value;
	let img_title_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "data-check", img_data_check_value = /*index*/ ctx[38]);
			if (!src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*dataj*/ ctx[39].imageurl)) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "img-fluid");
			attr_dev(img, "tabindex", img_tabindex_value = 0);

			attr_dev(img, "alt", img_alt_value = /*dataj*/ ctx[39].imagealt
			? /*dataj*/ ctx[39].imagealt
			: "No alt of image");

			attr_dev(img, "title", img_title_value = /*dataj*/ ctx[39].imagealt
			? /*dataj*/ ctx[39].imagealt
			: "No alt of image");

			add_location(img, file$1, 702, 60, 37077);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);

			if (!mounted) {
				dispose = listen_dev(img, "load", /*onImgLoad*/ ctx[7], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4 && !src_url_equal(img.src, img_src_value = "//s3.amazonaws.com/jigyaasa_content_static//" + /*dataj*/ ctx[39].imageurl)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*state*/ 4 && img_alt_value !== (img_alt_value = /*dataj*/ ctx[39].imagealt
			? /*dataj*/ ctx[39].imagealt
			: "No alt of image")) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*state*/ 4 && img_title_value !== (img_title_value = /*dataj*/ ctx[39].imagealt
			? /*dataj*/ ctx[39].imagealt
			: "No alt of image")) {
				attr_dev(img, "title", img_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6$1.name,
		type: "if",
		source: "(702:56) {#if dataj.imageurl != ''}",
		ctx
	});

	return block;
}

// (698:40) {#each state.xml.item.items as dataj}
function create_each_block_1$1(ctx) {
	let show_if = /*datai*/ ctx[36].id == /*dataj*/ ctx[39].category && /*ignoreItemIds*/ ctx[6].indexOf(/*dataj*/ ctx[39].id) == -1;
	let if_block_anchor;
	let if_block = show_if && create_if_block_4$1(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4) show_if = /*datai*/ ctx[36].id == /*dataj*/ ctx[39].category && /*ignoreItemIds*/ ctx[6].indexOf(/*dataj*/ ctx[39].id) == -1;

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4$1(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1$1.name,
		type: "each",
		source: "(698:40) {#each state.xml.item.items as dataj}",
		ctx
	});

	return block;
}

// (686:16) {#each state.xml.category.categories as datai, index}
function create_each_block$1(ctx) {
	let div8;
	let div0;
	let span0;
	let div0_class_value;
	let div0_tabindex_value;
	let t0;
	let div6;
	let div2;
	let div1;
	let raw_value = /*datai*/ ctx[36].text + "";
	let div1_tabindex_value;
	let div1_title_value;
	let t1;
	let div5;
	let div4;
	let div3;
	let div5_class_value;
	let t2;
	let div7;
	let span1;
	let div7_class_value;
	let div7_tabindex_value;
	let t3;
	let div8_key_value;
	let mounted;
	let dispose;
	let each_value_1 = /*state*/ ctx[2].xml.item.items;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1$1(get_each_context_1$1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			div8 = element("div");
			div0 = element("div");
			span0 = element("span");
			t0 = space();
			div6 = element("div");
			div2 = element("div");
			div1 = element("div");
			t1 = space();
			div5 = element("div");
			div4 = element("div");
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t2 = space();
			div7 = element("div");
			span1 = element("span");
			t3 = space();
			attr_dev(span0, "class", "icomoon-arrow-left font26 btnGrp");
			add_location(span0, file$1, 688, 28, 35721);
			attr_dev(div0, "class", div0_class_value = "prevbutton col-lg-1 col-md-1 col-sm-2 col-2 px-sm-3 px-0 prevbutton_" + /*index*/ ctx[38]);
			attr_dev(div0, "tabindex", div0_tabindex_value = 0);
			attr_dev(div0, "title", "previous");
			add_location(div0, file$1, 687, 24, 35507);
			attr_dev(div1, "class", "font20 text-center text-dark");
			attr_dev(div1, "tabindex", div1_tabindex_value = 0);
			attr_dev(div1, "title", div1_title_value = /*datai*/ ctx[36].text);
			add_location(div1, file$1, 692, 32, 36016);
			attr_dev(div2, "class", "categorytitle card_border");
			add_location(div2, file$1, 691, 28, 35943);
			attr_dev(div3, "class", "elementContainer w-100 h-100 d-table");
			add_location(div3, file$1, 696, 36, 36385);
			attr_dev(div4, "class", "categoryiteminnercontainer w-100 h-100 text-center");
			add_location(div4, file$1, 695, 32, 36283);
			attr_dev(div5, "class", div5_class_value = "categoryitemcontainer p-1 categoryitemcontainer_" + /*index*/ ctx[38]);
			add_location(div5, file$1, 694, 28, 36180);
			attr_dev(div6, "class", "categoryinnercontainer p-0 r-lg col-lg-10 col-md-10 col-sm-8 col-8");
			add_location(div6, file$1, 690, 24, 35833);
			attr_dev(span1, "class", "icomoon-arrow-right-2 font26 btnGrp");
			add_location(span1, file$1, 715, 28, 38226);
			attr_dev(div7, "class", div7_class_value = "nextbutton col-md-1 col-lg-1 col-sm-2 col-2 px-sm-3 px-0 nextbutton_" + /*index*/ ctx[38]);
			attr_dev(div7, "tabindex", div7_tabindex_value = 0);
			attr_dev(div7, "title", "next");
			add_location(div7, file$1, 714, 24, 38031);
			attr_dev(div8, "class", "row np mb-3");
			attr_dev(div8, "key", div8_key_value = /*index*/ ctx[38]);
			add_location(div8, file$1, 686, 20, 35444);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, div0);
			append_dev(div0, span0);
			append_dev(div8, t0);
			append_dev(div8, div6);
			append_dev(div6, div2);
			append_dev(div2, div1);
			div1.innerHTML = raw_value;
			append_dev(div6, t1);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append_dev(div8, t2);
			append_dev(div8, div7);
			append_dev(div7, span1);
			append_dev(div8, t3);

			if (!mounted) {
				dispose = [
					listen_dev(div0, "click", prevent_default(/*prevbutton*/ ctx[8]), false, true, false),
					listen_dev(div0, "keydown", keydownAda, false, false, false),
					listen_dev(div7, "click", /*nextbutton*/ ctx[9], false, false, false),
					listen_dev(div7, "keydown", keydownAda, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4 && raw_value !== (raw_value = /*datai*/ ctx[36].text + "")) div1.innerHTML = raw_value;
			if (dirty[0] & /*state*/ 4 && div1_title_value !== (div1_title_value = /*datai*/ ctx[36].text)) {
				attr_dev(div1, "title", div1_title_value);
			}

			if (dirty[0] & /*state, onImgLoad, ignoreItemIds*/ 196) {
				each_value_1 = /*state*/ ctx[2].xml.item.items;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1$1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1$1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block$1.name,
		type: "each",
		source: "(686:16) {#each state.xml.category.categories as datai, index}",
		ctx
	});

	return block;
}

// (723:12) {#if AH.get('alignMatchReset') == true}
function create_if_block_2$1(ctx) {
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			button.textContent = `${l.reset}`;
			attr_dev(button, "type", "button");
			attr_dev(button, "id", "reset_btn");
			attr_dev(button, "class", "btn btn-primary me-sm-2 me-0 mb-2 reset_btn");
			button.disabled = "disabled";
			add_location(button, file$1, 723, 16, 38509);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*resetButton*/ ctx[13], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2$1.name,
		type: "if",
		source: "(723:12) {#if AH.get('alignMatchReset') == true}",
		ctx
	});

	return block;
}

// (726:12) {#if state.xml}
function create_if_block_1$1(ctx) {
	let button;
	let t_value = /*state*/ ctx[2].xml.settings.matchButtonText + "";
	let t;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "matchbutton btn btn-primary mb-2");
			add_location(button, file$1, 726, 16, 38727);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*matchButton*/ ctx[12], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4 && t_value !== (t_value = /*state*/ ctx[2].xml.settings.matchButtonText + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1$1.name,
		type: "if",
		source: "(726:12) {#if state.xml}",
		ctx
	});

	return block;
}

// (731:4) {#if targetView == 'block'}
function create_if_block$1(ctx) {
	let div3;
	let div2;
	let div0;
	let showanswer0;
	let t;
	let div1;
	let showanswer1;
	let current;

	showanswer0 = new ShowAnswer({
			props: {
				jsondataCategory: /*jsonData*/ ctx[1].category,
				objValues: objectValues(/*correctAnswerArray*/ ctx[5]),
				state: /*state*/ ctx[2],
				correct_ans_bg: "typeCorrect"
			},
			$$inline: true
		});

	showanswer1 = new ShowAnswer({
			props: {
				user_ans_table: "1",
				jsondataCategory: /*jsonData*/ ctx[1].category,
				objValues: objectValues(/*correctAnswerArray*/ ctx[5]),
				state: /*state*/ ctx[2],
				your_ans_class: "your_ans_td"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div0 = element("div");
			create_component(showanswer0.$$.fragment);
			t = space();
			div1 = element("div");
			create_component(showanswer1.$$.fragment);
			attr_dev(div0, "class", "correctAnswer h");
			add_location(div0, file$1, 733, 16, 39029);
			attr_dev(div1, "class", "yourAnswer");
			add_location(div1, file$1, 736, 16, 39256);
			attr_dev(div2, "class", "scoreDiv");
			add_location(div2, file$1, 732, 12, 38989);
			attr_dev(div3, "class", "finalResult");
			add_location(div3, file$1, 731, 8, 38950);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div0);
			mount_component(showanswer0, div0, null);
			append_dev(div2, t);
			append_dev(div2, div1);
			mount_component(showanswer1, div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const showanswer0_changes = {};
			if (dirty[0] & /*jsonData*/ 2) showanswer0_changes.jsondataCategory = /*jsonData*/ ctx[1].category;
			if (dirty[0] & /*correctAnswerArray*/ 32) showanswer0_changes.objValues = objectValues(/*correctAnswerArray*/ ctx[5]);
			if (dirty[0] & /*state*/ 4) showanswer0_changes.state = /*state*/ ctx[2];
			showanswer0.$set(showanswer0_changes);
			const showanswer1_changes = {};
			if (dirty[0] & /*jsonData*/ 2) showanswer1_changes.jsondataCategory = /*jsonData*/ ctx[1].category;
			if (dirty[0] & /*correctAnswerArray*/ 32) showanswer1_changes.objValues = objectValues(/*correctAnswerArray*/ ctx[5]);
			if (dirty[0] & /*state*/ 4) showanswer1_changes.state = /*state*/ ctx[2];
			showanswer1.$set(showanswer1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(showanswer0.$$.fragment, local);
			transition_in(showanswer1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(showanswer0.$$.fragment, local);
			transition_out(showanswer1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			destroy_component(showanswer0);
			destroy_component(showanswer1);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block$1.name,
		type: "if",
		source: "(731:4) {#if targetView == 'block'}",
		ctx
	});

	return block;
}

function create_fragment$1(ctx) {
	let div4;
	let div0;
	let itemhelper;
	let t0;
	let div3;
	let div1;
	let div1_class_value;
	let t1;
	let div2;
	let show_if = AH.get('alignMatchReset') == true;
	let t2;
	let div3_class_value;
	let t3;
	let current;
	let mounted;
	let dispose;
	add_render_callback(/*onwindowresize*/ ctx[20]);

	itemhelper = new ItemHelper({
			props: {
				reviewMode: /*isReview*/ ctx[0],
				handleReviewClick: /*handleReviewMode*/ ctx[14]
			},
			$$inline: true
		});

	itemhelper.$on("setReview", /*setReview*/ ctx[10]);
	itemhelper.$on("unsetReview", /*unsetReview*/ ctx[11]);
	let if_block0 = /*state*/ ctx[2].xml && create_if_block_3$1(ctx);
	let if_block1 = show_if && create_if_block_2$1(ctx);
	let if_block2 = /*state*/ ctx[2].xml && create_if_block_1$1(ctx);
	let if_block3 = /*targetView*/ ctx[4] == 'block' && create_if_block$1(ctx);

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			create_component(itemhelper.$$.fragment);
			t0 = space();
			div3 = element("div");
			div1 = element("div");
			if (if_block0) if_block0.c();
			t1 = space();
			div2 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			attr_dev(div0, "class", "switchbutton");
			add_location(div0, file$1, 674, 4, 34863);
			attr_dev(div1, "class", div1_class_value = "categorycontainer center-block " + (/*windowwidth*/ ctx[3] > 1200 ? 'span9' : ''));
			add_location(div1, file$1, 683, 8, 35240);
			attr_dev(div2, "class", "text-center");
			add_location(div2, file$1, 721, 8, 38413);
			attr_dev(div3, "class", div3_class_value = "alignTestarea px-3 mx-auto mt-3 " + (/*targetView*/ ctx[4] == 'block' ? 'h' : ''));
			set_style(div3, "max-width", /*state*/ ctx[2].maxWidth);
			add_location(div3, file$1, 682, 4, 35112);
			add_location(div4, file$1, 673, 0, 34852);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			mount_component(itemhelper, div0, null);
			append_dev(div4, t0);
			append_dev(div4, div3);
			append_dev(div3, div1);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div3, t1);
			append_dev(div3, div2);
			if (if_block1) if_block1.m(div2, null);
			append_dev(div2, t2);
			if (if_block2) if_block2.m(div2, null);
			append_dev(div4, t3);
			if (if_block3) if_block3.m(div4, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(window_1, "resize", /*onwindowresize*/ ctx[20]);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const itemhelper_changes = {};
			if (dirty[0] & /*isReview*/ 1) itemhelper_changes.reviewMode = /*isReview*/ ctx[0];
			itemhelper.$set(itemhelper_changes);

			if (/*state*/ ctx[2].xml) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3$1(ctx);
					if_block0.c();
					if_block0.m(div1, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (!current || dirty[0] & /*windowwidth*/ 8 && div1_class_value !== (div1_class_value = "categorycontainer center-block " + (/*windowwidth*/ ctx[3] > 1200 ? 'span9' : ''))) {
				attr_dev(div1, "class", div1_class_value);
			}

			if (show_if) if_block1.p(ctx, dirty);

			if (/*state*/ ctx[2].xml) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1$1(ctx);
					if_block2.c();
					if_block2.m(div2, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (!current || dirty[0] & /*targetView*/ 16 && div3_class_value !== (div3_class_value = "alignTestarea px-3 mx-auto mt-3 " + (/*targetView*/ ctx[4] == 'block' ? 'h' : ''))) {
				attr_dev(div3, "class", div3_class_value);
			}

			if (!current || dirty[0] & /*state*/ 4) {
				set_style(div3, "max-width", /*state*/ ctx[2].maxWidth);
			}

			if (/*targetView*/ ctx[4] == 'block') {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*targetView*/ 16) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block$1(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div4, null);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(itemhelper.$$.fragment, local);
			transition_in(if_block3);
			current = true;
		},
		o: function outro(local) {
			transition_out(itemhelper.$$.fragment, local);
			transition_out(if_block3);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			destroy_component(itemhelper);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

const CORRECT = 2, INCORRECT = 0;

// return an array that contains the value of that properties which are the own properties of object not inherited properties which is passed in argument at the time of function calling 
function objectValues(obj) {
	let res = [];

	for (let index in obj) {
		if (obj.hasOwnProperty(index)) {
			// pushes the value of key that is equals to the value of variable 'index' of object 'obj'
			res.push(obj[index]);
		}
	}

	// not clear what does it work
	window.prettifyContent && prettifyContent({
		imgAltText: 1,
		container: ['#alignmatch-table']
	});

	// returns the array res
	return res;
}

// For ADA
function keydownAda(event) {
	if (event.which === 13) {
		// click the textarea element or image upload icon on which keydown
		this.click();
	}
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('AlignMatchPreview', slots, []);
	let { xml } = $$props;
	let { uxml } = $$props;
	let { showAns } = $$props;
	let { isReview } = $$props;
	let { updateCSV } = $$props;
	let { editorState } = $$props;

	let jsonData = {},
		state = {
			// contains xml
			xml: "",
			// not used
			content: "",
			// not used
			settings: "",
			// shows the remediation status
			remediationState: false,
			// allowed to perform the task
			gameStatus: false,
			// used for set the match container width
			maxWidth: "",
			// contains user answer performed
			userAnswerArr: [],
			// used to set the height of the categories item container
			imgHeight: "",
			// not used
			idCheck: 0,
			correct_match: []
		};

	// contains userXML
	let userXML = {};

	let windowwidth;
	let targetView = "none";
	let isAnswerCorrect = []; //used for coloring of individual row(true: green row, false: red row)
	let blnAllAttempted = false; //used to check if all the questions are attempted and correct atleast once, if firstTime correct then accidently incorrect, it doesn't matter. At least once correct.
	let correctAnswerArray = []; //stores correct Answer tagWise
	let obj = [], tmpArr = [], noOfQuestions;

	// contains correct attemped by user
	let ignoreItemIdKeys = [];

	// contains the items id which not exist in 'correctAnswerArray' array
	let ignoreItemIds = [];

	onMount(() => {
		$$invalidate(2, state.xml = xml, state);
		$$invalidate(2, state.uxml = uxml, state);

		if (state.uxml == '<smans type="35"></smans>' || state.uxml == '<SMANS></SMANS>') {
			// sets the user answer xml value blank if task not performed by user
			$$invalidate(2, state.uxml = '', state);
		}

		/* @saquib:Added this condition due to usexml break*/
		if (state.uxml && state.uxml.includes("&useransxml=")) {
			// replaces the string '&useransxml=' to blank of user answer xml 
			let replacedVal = state.uxml.replace("&useransxml=", "");

			// re-set the value of user answer xml after remove the string '&useransxml='
			$$invalidate(2, state.uxml = replacedVal, state);
		}

		loadModule(xml);

		if (editorState && editorState.isCSV) {
			// updates the value of props isCSV
			updateElements('csv'); // update elements
		}
	});

	afterUpdate(() => {
		if (ignoreItemIdKeys.length > 0) {
			if (!blnAllAttempted) {
				ignoreItemIdKeys.forEach((i, id) => {
					// contains the value of key 'tags' of item have id equals to the value of variable 'id'
					let tag = obj[id].tags;

					correctAnswerArray[tag].slice(1).forEach((i, val) => {
						// contains the items id which not exist in 'correctAnswerArray' array
						ignoreItemIds.push(val.id);
					});
				});
			}
		}
	});

	// loads the module according to the value of question xml and user xml
	function loadModule(loadXml) {
		reverseToInitial();

		// contains json data of xml
		loadXml = XMLToJSON(loadXml);

		// updates the xml after parsing the xml and shows answer
		parseXMLPreview(loadXml);

		// update the image after trigger the loaded event
		updateImage();
	}

	// update the image after trigger the loaded event
	function updateImage() {
		AH.selectAll(".elementContainer").forEach(function () {
			// it is category selector
			let element_id = this;

			AH.find(element_id, 'img', 'all').forEach(function (j, val) {
				// contains index of the category
				let id = AH.select(val).getAttribute('data-check');

				// removes the value of height from item container that exist inside current category
				AH.select('.categoryitemcontainer_' + id).height = '';

				// removes the value of height from previous button that exist inside current category
				AH.select('.prevbutton_' + id).height = '';

				// removes the value of height from next button that exist inside current category
				AH.select('.nextbutton_' + id).height = '';

				// fired the load event to the element equals the value of variable 'val'
				AH.select(val).trigger("load");
			});
		});
	}

	// updates the xml after parsing the xml and shows answer
	function parseXMLPreview(MYXML) {
		// sets the value of state maxWidth
		$$invalidate(2, state.maxWidth = MYXML.smxml._maxwidth ? MYXML.smxml._maxwidth : 800, state);

		// contains the value of cdata
		$$invalidate(1, jsonData = JSON.parse(MYXML.smxml.__cdata));

		// creates temporary array obj & temporary array tmpArr
		jsonData.item.items.forEach(function (item) {
			// contains data of array key 'items' defined at index equals to the value of variable 'key' 
			obj[item.id] = item;
		});

		// contains no of question exist
		noOfQuestions = jsonData.item.items.length / jsonData.category.categories.length;

		$$invalidate(5, correctAnswerArray = []);
		$$invalidate(2, state.correct_match = [], state);

		jsonData.item.items.forEach(function (value, seq) {
			if (correctAnswerArray[value.tags] == null) {
				// makes value blank at index equals to the value of key 'tags' of object defined in variable 'value' of array correctAnswerArray
				$$invalidate(5, correctAnswerArray[value.tags] = [], correctAnswerArray);

				// makes value blank at index equals to the value of key 'tags' of object defined in variable 'value' of array tmpArr
				tmpArr[value.tags] = [];
			}

			correctAnswerArray[value.tags].push(value);

			// pushes the object defined in variable 'value' into array defined at index equals to the value of key 'tags' of object defined in variable 'value'
			tmpArr[value.tags].push(value);

			$$invalidate(2, state.correct_match['category_' + seq] = false, state);
			value.sequence = seq;
		});

		// used to check that user answer value is defined in array tmpArr or not
		let tmpArrDone = false;

		if (xml != undefined && (state.uxml != '' && state.uxml != undefined)) {
			// contains json data of user answer xml
			userXML = JSON.parse(state.uxml);

			// shows the answer (Correct/Incorrect)
			displayAnswer();

			// destruct the array have value equals to the value of key 'correct_attempt' of userXML object
			Object.keys(userXML.items).forEach(itemArr => {
				if (userXML.items[itemArr].slice(-1)[0] == 2) {
					// sets the value 'true' at index equals to the value of variable 'itemKey' of array isAnswerCorrect
					isAnswerCorrect[itemArr] = true;
				}
			});

			// contains true if attemped question equals to the no of exist question otherwise contains false
			blnAllAttempted = userXML.correct_attempt.length === noOfQuestions;

			if (blnAllAttempted) {
				// apply the opacity '0.7' and cursor style 'not-allowed' and adds class complete to the Match container
				AH.selectAll('.alignTestarea', 'addClass', 'complete');

				AH.setCss(".categorycontainer", {
					'opacity': '0.7',
					'cursor': 'not-allowed'
				});

				// disabled the 'Match' button
				AH.select('.matchbutton').disabled = true;
			}

			// returns enumerable properties of a simple array.
			let firstRowIds = Object.keys(userXML.items);

			// checks for blank question exist or not
			let blnQueExists;

			for (let i in tmpArr) {
				for (let j in tmpArr[i]) {
					if (j == 0) {
						// defines the value true or false according to the matched condition
						blnQueExists = firstRowIds.indexOf(tmpArr[i][j].id) > -1;
					} else if (!blnQueExists) {
						// sets the value of multi-dimention array tmpArr at row equals to the value of variable 'i' and column equals to the value of variable 'j'
						tmpArr[i][j] = {
							// defines the value blank of key 'imageurl'
							imageurl: '',
							// defines the value 'Unattempted' of key 'label' 
							label: 'Unattempted'
						};
					} else if (blnQueExists) {
						// contains value of item id from the value of 'id' key defined at row equals to the value of variable 'i' and column 0 of multi-dimention array 'tmpArr' 
						let queId = tmpArr[i][0].id;

						// contains the value defined at row equals to the value of variable 'queId' and column equals to the value of variable 'j' - 1
						let _uXmlAnsItem = userXML.items[queId][j - 1];

						// sets the value of multi-dimention array tmpArr at row equals to the value of variable 'i' and column equals to the value of 'j' to the value of key equals to the value of variable '_uXmlAnsItem' of object obj
						tmpArr[i][j] = obj[_uXmlAnsItem];
					}
				}
			}

			// sets the value 'true' of variable 'tmpArrDone'  to show that user answer value is defined in tmpArr array
			tmpArrDone = true;
		}

		if (!tmpArrDone) {
			for (let i in tmpArr) {
				for (let j in tmpArr[i]) {
					if (j > 0) {
						// sets the value of multi-dimention array tmpArr at row equals to the value of variable 'i' and column equals to the value of variable 'j'
						tmpArr[i][j] = {
							imageurl: '',
							imagealt: '',
							label: 'Unattempted'
						};
					}
				}
			}
		}

		// sets the value of state userAnswerArr
		$$invalidate(2, state.userAnswerArr = tmpArr, state);

		// sets the value of state xml
		$$invalidate(2, state.xml = jsonData, state);

		// allow to start the game
		beginGame();
	}

	// shows the answer (Correct/Incorrect)
	function displayAnswer() {
		// contains true or false according to match the condition
		let blnAllCorrect = userXML.answer && userXML.answer == CORRECT;

		// shows correct or incorrect according to the value of variable 'blnAllCorrect'
		if (editorState) {
			showAns(blnAllCorrect ? 'Correct' : 'Incorrect');
		} else {
			AH.select("#answer").checked = blnAllCorrect;

			if (!editorState && state.uxml && state.uxml != '') {
				let blnAllCorrectStatus = blnAllCorrect ? true : false;

				onUserAnsChange({
					uXml: state.uxml,
					ans: blnAllCorrectStatus
				});
			}
		}
	}

	// sets the height of next, previous buttons and also of category item container
	function onImgLoad(event) {
		// contains the index of the category in which this image lies
		let id = event.target.getAttribute('data-check');

		// contains the height of the item container including keyword 'px'
		let containerHeight = AH.select('.categoryitemcontainer_' + id).style.height;

		// contains the value after reducing 11 from the value of height 
		let elementContainerHeight = containerHeight.substr(0, containerHeight.indexOf("p")) - 11;

		// contains real height of the image
		let height = event.target.naturalHeight;

		if (elementContainerHeight != '' && elementContainerHeight != null && !isNaN(elementContainerHeight)) {
			if (elementContainerHeight <= height) {
				// sets the value of state 'height'
				$$invalidate(2, state.imgHeight = height, state);

				// used to set the height of item container and of next, previous buttons
				updateColumnHeight(state.imgHeight, id);
			}
		} else {
			// sets the value of state 'height'
			$$invalidate(2, state.imgHeight = height, state);

			// used to set the height of item container and of next, previous buttons
			updateColumnHeight(state.imgHeight, id);
		}
	}

	// used to set the height of item container and of next, previous buttons
	function updateColumnHeight(height, index) {
		// sets the height of item container of category have index defined in variable 'index'
		AH.select('.categoryitemcontainer_' + index).style.height = height + 11 + "px";

		// sets the height of item previous button of category have index defined in variable 'index'
		AH.select('.prevbutton_' + index).style.height = height + 50 + "px";

		// sets the height of item next button of category have index defined in variable 'index'
		AH.select('.nextbutton_' + index).style.height = height + 50 + "px";
	}

	// shows the item randomly after click on next or previous button and in case of csv it updates the value of props isCSV
	function updateElements(action) {
		setTimeout(
			function () {
				AH.selectAll(".categoryinnercontainer ", 'all').forEach(function (container, i) {
					AH.find(container, '.element', 'all').forEach(function (val, k) {
						// sets unique id attribute of each items lies in same category
						val.setAttribute('id', 'element_' + (k + 1));

						val.style.display = 'none';
					});

					// contains number of questions exist
					let eleLen = AH.find(container, '.element', 'all').length;

					// contains the random number that cab be 1 to value of variable 'eleLen'
					let toShow = Math.floor(Math.random() * eleLen) + 1;

					// shows the item have id 'element_' + value of the variable 'toShow' inside the category at index equals to the value of variable 'key'
					AH.select('.categoryitemcontainer_' + i + ' #element_' + toShow).style.display = '';
				});
			},
			200
		);

		if (action == 'csv') {
			setTimeout(
				function () {
					// sets the value 'false' of prop isCSV 
					updateCSV('csv', false);

					console.log("csv Updated");
				},
				1200
			);
		}
	}

	// allow to start the game
	function beginGame() {
		setTimeout(
			function () {
				if (!blnAllAttempted) {
					// sets the value 'true' of state gameStatus that allow to perform the task
					$$invalidate(2, state.gameStatus = true, state);
				}
			},
			200
		);
	}

	// sets the value 'false' of state gameStatus
	function reverseToInitial() {
		$$invalidate(2, state.gameStatus = false, state);
	}

	function prevbutton() {
		if (!blnAllAttempted) {
			// selects next sibling item that have class 'categoryinnercontainer'
			let categoryinnercontainer = AH.nextElm(this, '.categoryinnercontainer');

			// selects items that is visible in that category which previous button clicked
			let catInnerImg;

			AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element', 'all').forEach(function (i) {
				if (getComputedStyle(i, null).display == 'table-cell') {
					catInnerImg = i;
				}
			});

			if (catInnerImg && AH.prevElm(catInnerImg)) {
				// shows previous sibling item and hides current item of that category whicn previous button clicked 
				AH.prevElm(catInnerImg).style.display = '';

				AH.nextElm(AH.prevElm(catInnerImg)).style.display = 'none';
			} else {
				// hides the currently visible item that exist in that category which previous button clicked
				if (catInnerImg) {
					catInnerImg.style.display = 'none';
				}

				// hides all items inside that category which previous button clicked and shows the last item
				AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element').style.display = 'none';

				AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element:last-child').style.display = '';
			}

			return false;
		}
	}

	function nextbutton() {
		if (!blnAllAttempted) {
			// selects previous sibling item that have class 'categoryinnercontainer'
			let categoryinnercontainer = AH.prevElm(this, '.categoryinnercontainer');

			let catInnerImg;

			// selects items that is visible in that category which next button clicked
			AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element', 'all').forEach(function (i) {
				if (getComputedStyle(i, null).display == 'table-cell') {
					catInnerImg = i;
				}
			});

			if (catInnerImg && AH.nextElm(catInnerImg)) {
				// shows next sibling item and hides current item of that category whicn next button clicked 
				AH.nextElm(catInnerImg).style.display = '';

				AH.prevElm(AH.nextElm(catInnerImg)).style.display = 'none';
			} else {
				// hides the currently visible item that exist in that category which next button clicked
				if (catInnerImg) {
					catInnerImg.style.display = 'none';
				}

				// hides all items inside that category which next button clicked and shows the first item
				AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element').style.display = 'none';

				AH.find(categoryinnercontainer, '.categoryitemcontainer .categoryiteminnercontainer .element:first-child').style.display = '';
			}

			return false;
		}
	}

	function setReview() {
		$$invalidate(0, isReview = true);
		$$invalidate(4, targetView = "block");

		setTimeout(function () {
			AH.selectAll('.your_ans_td:first-child').forEach(
				tdval => {
					let td_id = tdval.getAttribute('col');

					if (isAnswerCorrect[td_id]) {
						AH.parent(tdval).classList.add('typeCorrect');
					} else {
						AH.parent(tdval).classList.add('typeIncorrect');
					}
				},
				100
			);
		});

		// shows the answer (Correct/Incorrect)
		displayAnswer();
	}

	function unsetReview() {
		$$invalidate(4, targetView = "none");
		$$invalidate(0, isReview = false);
	}

	function matchButton() {
		if (!blnAllAttempted) {
			// selects the closest element that have class 'alignTestarea' when click on match button
			let alignTestarea = this.closest('.alignTestarea');

			// selects the visible items inside container category
			let visibleEle = [];

			AH.find(alignTestarea, '.categorycontainer .categoryinnercontainer .categoryitemcontainer .categoryiteminnercontainer .element', 'all').forEach(function (val) {
				if (getComputedStyle(val, null).display == 'table-cell') {
					visibleEle = [...visibleEle, val];
				}
			});

			let tagName, firstTagName;
			let blnCorrect = null;
			let currentItem = null;
			let mainKey = null;

			visibleEle.forEach(function (value, key) {
				// contains the value of 'data-tags' attribute of element defined in variable 'value'
				tagName = value.getAttribute('data-tags');

				// used for contain the item value
				let itemValue;

				if (key == 0) {
					// sets the value of variable 'tagName' to variable 'firstTagName'
					firstTagName = tagName;
				}

				if (AH.find(value, 'img')) {
					// contains value of src attribute of img tag exist inside the element defined in variable 'value'
					itemValue = AH.find(value, 'img').getAttribute('src');
				} else {
					// contains text of div element exist inside the element defined in variable 'value'
					itemValue = '';

					if (AH.find(value, 'div') != null) {
						itemValue = AH.find(value, 'div').textContent;
					}
				}

				/**userXML generation start*/
				// contains all the items available
				let items = state.xml.item.items;

				//changed to for in loop
				for (let i in items) {
					// contains value exist at index 'i' of array 'items'
					let qxmlItem = items[i];

					if (qxmlItem.tags == tagName) {
						// contains image src or text according to the value of key 'imageurl' of object qxmlItem
						let valueOfItem = qxmlItem.imageurl
						? '//s3.amazonaws.com/jigyaasa_content_static//' + qxmlItem.imageurl
						: qxmlItem.label;

						if (valueOfItem == itemValue) {
							// contains object qxmlItem
							currentItem = qxmlItem;

							break;
						}
					}
				}

				if (userXML.items == null) {
					// defines empty object into the value of items key of object userXML
					userXML.items = {};
				}

				if (key == 0) {
					// sets value equals to the value of variable tagName of variable 'blnCorrect'
					blnCorrect = tagName;

					// contains the value of key 'id' of object 'currentItem'
					mainKey = currentItem.id;

					// assign blank array at the key have value equals to the value of variable 'mainKey' of key 'items' of object userXML
					userXML.items[mainKey] = [];
				} else {
					if (tagName != blnCorrect) {
						// sets value 'null' of variable 'blnCorrect'
						blnCorrect = null;
					}

					// pushes the value 'id' key of object currentItem into array defined at key equals to the value of variable 'mainKey'
					userXML.items[mainKey].push(currentItem.id);

					// defines the object that have key 'imageurl' and 'label' into state object userAnswerArr where array key is equals to the value of variable 'firstTagName' and index is equals to the value of variable 'key' image url and
					$$invalidate(
						2,
						state.userAnswerArr[firstTagName][key] = {
							imageurl: currentItem.imageurl,
							label: currentItem.label
						},
						state
					);
				}
			}); /**userXML generation end */

			// defines the value of variable 'wrongAnswer'
			let wrongAnswer = blnCorrect == null;

			// pushes the value 'CORRECT/INCORRECT' according to the value of variable 'wrongAnswer' into array key 'items' of object userXML
			userXML.items[mainKey].push(wrongAnswer ? INCORRECT : CORRECT);

			/**storing only the ids of questions that are attempted and correct as least once.
    ***SECTION START */
			userXML.correct_attempt = userXML.correct_attempt || [];

			if (!wrongAnswer && userXML.correct_attempt.indexOf(mainKey) == -1) {
				// pushes the value of variable 'mainKey' into array key 'correct_attempt' of object userXML
				userXML.correct_attempt.push(mainKey);
			}

			/**SECTION END */
			// update the value of array isAnswerCorrect have key equals to the value of variable 'mainKey'
			isAnswerCorrect[mainKey] = !wrongAnswer;

			// sets the value of state 'userAnswerArr'
			$$invalidate(2, state);

			// defines the variable 'correctCount'
			let correctCount = 0;

			for (let item in userXML.items) {
				// contains array defined at key equals to the value of variable 'item' in array key 'items' of object userXML
				let itemArr = userXML.items[item];

				if (itemArr.slice(-1)[0] === CORRECT) {
					// increases the value of variable 'correctCount' by 1
					correctCount += 1;
				}
			}

			// finds total no of question exist
			let totalcount = AH.selectAll(".categoryiteminnercontainer:first-child .elementContainer .element").length;

			if (typeof calculatePoint != "undefined") {
				// sets the value of variable 'totalcount' to the input element have id 'answer_points' and type hidden and value of the variable 'correctCount' to the input element have id 'user_points' and type hidden
				calculatePoint(totalcount, correctCount);
			}

			// by default sets INCORRECT value of the key 'answer' of userXML object
			userXML.answer = INCORRECT;

			if (noOfQuestions === correctCount) {
				// sets CORRECT value of the key 'answer' of userXML object
				userXML.answer = CORRECT;
			}

			// contains true if attemped question equals to the no of exist question otherwise contains false
			blnAllAttempted = userXML.correct_attempt.length === noOfQuestions;

			if (!wrongAnswer) {
				// enables reset button if any matching made correct
				AH.select('#reset_btn').disabled = false;

				AH.selectAll(".categoryinnercontainer ", 'all').forEach(function (container, i) {
					if (AH.find(container, '.element', 'all').length > 1) {
						AH.find(container, '.element', 'all').forEach(function (val) {
							// removes the visible element have class 'element' inside the category defined at index equals to the value of variable 'key'
							if (getComputedStyle(val, null).display == 'table-cell') {
								$$invalidate(2, state.correct_match[val.getAttribute('seq_no')] = true, state);
							}
						});

						setTimeout(
							function () {
								AH.find(container, '.element', 'all').forEach(function (val, k) {
									// sets unique id attribute of each items lies in same category
									val.setAttribute('id', 'element_' + (k + 1));

									val.style.display = 'none';
								});

								// contains number of questions exist
								let eleLen = AH.find(container, '.element', 'all').length;

								// contains the random number that cab be 1 to value of variable 'eleLen'
								let toShow = Math.floor(Math.random() * eleLen) + 1;

								// shows the item have id 'element_' + value of the variable 'toShow' inside the category at index equals to the value of variable 'key'
								AH.select('.categoryitemcontainer_' + i + ' #element_' + toShow).style.display = '';
							},
							100
						);
					} else {
						// apply the opacity '0.7' and cursor style 'not-allowed' and adds class complete to the Match container
						AH.setCss(".categorycontainer", {
							'opacity': '0.7',
							'cursor': 'not-allowed'
						});

						AH.selectAll('.categorycontainer', 'addClass', "complete");

						// not allowed click on previous and next button 
						AH.setCss(".nextbutton", { 'pointer-events': 'none' });

						AH.setCss(".prevbutton", { 'pointer-events': 'none' });

						// disabled the 'Match' button
						AH.select('.matchbutton').disabled = true;

						// shows game completion message
						AH.alert("Game Completed!!");

						// shows the answer (Correct/Incorrect)
						displayAnswer();
					}
				});
			} else {
				// apply shake effect for transition just like as slide
				if (AH.select(".categorycontainer ").classList.contains("wrong_ans")) {
					AH.selectAll('.categorycontainer', 'removeClass', "wrong_ans");
				}

				setTimeout(
					function () {
						AH.selectAll('.categorycontainer', 'addClass', "wrong_ans");
					},
					100
				);

				// shows the warning message
				AH.showmsg("Please match all the items correctly.", 3000);
			}

			// allow to start the game
			beginGame();

			// tells that user xml changed
			ISSPECIALMODULEUSERXMLCHANGE = 1;

			// update the user answer xml
			$$invalidate(2, state.uxml = JSON.stringify(userXML), state);

			AH.select("#special_module_user_xml").value = JSON.stringify(userXML);
		} //AH.selectAll('.yourAnswer .remedcolumn td:first-child')
	}

	function resetButton() {
		// makes user answer xml value blank
		userXML = {};

		isAnswerCorrect = []; //used for coloring of individual row(true: green row, false: red row)
		blnAllAttempted = false; //used to check if all the questions are attempted and correct atleast once, if firstTime correct then accidently incorrect, it doesn't matter. At least once correct.
		$$invalidate(5, correctAnswerArray = []); //stores correct Answer tagWise
		AH.selectAll('.categorycontainer', 'removeClass', 'complete');
		AH.setCss(".categorycontainer", { 'opacity': '1', 'cursor': 'pointer' });

		// allows click on next and previous button
		AH.setCss(".nextbutton", { 'pointer-events': 'auto' });

		AH.setCss(".prevbutton", { 'pointer-events': 'auto' });

		// enabled the 'Match' button
		AH.select('.matchbutton').disabled = false;

		// removes performed useranswer
		$$invalidate(2, state.uxml = '', state);

		// makes value blank of state 'xml'
		$$invalidate(2, state.xml = '', state);

		$$invalidate(2, state.correct_match = [], state);

		// reload the module after removing user answer that was performed previously
		loadModule(xml);

		// shows the first item of each row
		const elementContainerAll = AH.selectAll('.categoryitemcontainer .categoryiteminnercontainer .elementContainer');

		if (elementContainerAll && elementContainerAll.length) {
			elementContainerAll.forEach(eleContainer => {
				const eleContainerChild = AH.findChild(eleContainer, '.element', 'all');

				if (eleContainerChild && eleContainer.length) {
					eleContainerChild.forEach(ele => ele.style.display = 'none');
					const randIndex = Math.round(Math.random() * eleContainerChild.length) - 1;
					eleContainerChild[randIndex].style.display = '';
				}
			});
		}

		// disabled the reset button
		AH.select('#reset_btn').disabled = true;
	}

	function handleReviewMode(mode) {
		if (mode == 'c') {
			//AH.select('.correctAnswer').style.display = 'block';
			AH.select('.correctAnswer', 'removeClass', 'h');

			//AH.select('.yourAnswer').style.display = 'none';
			AH.select('.yourAnswer', 'css', { display: 'none' });
		} else if (mode == 'u') {
			//AH.select('.yourAnswer').style.display = 'block';
			AH.select('.yourAnswer', 'css', { display: 'block' });

			//AH.select('.correctAnswer').style.display = 'none';
			AH.select('.correctAnswer', 'addClass', 'h');
		}
	}

	const writable_props = ['xml', 'uxml', 'showAns', 'isReview', 'updateCSV', 'editorState'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<AlignMatchPreview> was created with unknown prop '${key}'`);
	});

	function onwindowresize() {
		$$invalidate(3, windowwidth = window_1.innerWidth);
	}

	$$self.$$set = $$props => {
		if ('xml' in $$props) $$invalidate(15, xml = $$props.xml);
		if ('uxml' in $$props) $$invalidate(16, uxml = $$props.uxml);
		if ('showAns' in $$props) $$invalidate(17, showAns = $$props.showAns);
		if ('isReview' in $$props) $$invalidate(0, isReview = $$props.isReview);
		if ('updateCSV' in $$props) $$invalidate(18, updateCSV = $$props.updateCSV);
		if ('editorState' in $$props) $$invalidate(19, editorState = $$props.editorState);
	};

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		XMLToJSON,
		AH,
		onUserAnsChange,
		ItemHelper,
		ShowAnswer,
		l,
		xml,
		uxml,
		showAns,
		isReview,
		updateCSV,
		editorState,
		CORRECT,
		INCORRECT,
		jsonData,
		state,
		userXML,
		windowwidth,
		targetView,
		isAnswerCorrect,
		blnAllAttempted,
		correctAnswerArray,
		obj,
		tmpArr,
		noOfQuestions,
		ignoreItemIdKeys,
		ignoreItemIds,
		loadModule,
		updateImage,
		parseXMLPreview,
		displayAnswer,
		objectValues,
		onImgLoad,
		updateColumnHeight,
		updateElements,
		beginGame,
		reverseToInitial,
		keydownAda,
		prevbutton,
		nextbutton,
		setReview,
		unsetReview,
		matchButton,
		resetButton,
		handleReviewMode
	});

	$$self.$inject_state = $$props => {
		if ('xml' in $$props) $$invalidate(15, xml = $$props.xml);
		if ('uxml' in $$props) $$invalidate(16, uxml = $$props.uxml);
		if ('showAns' in $$props) $$invalidate(17, showAns = $$props.showAns);
		if ('isReview' in $$props) $$invalidate(0, isReview = $$props.isReview);
		if ('updateCSV' in $$props) $$invalidate(18, updateCSV = $$props.updateCSV);
		if ('editorState' in $$props) $$invalidate(19, editorState = $$props.editorState);
		if ('jsonData' in $$props) $$invalidate(1, jsonData = $$props.jsonData);
		if ('state' in $$props) $$invalidate(2, state = $$props.state);
		if ('userXML' in $$props) userXML = $$props.userXML;
		if ('windowwidth' in $$props) $$invalidate(3, windowwidth = $$props.windowwidth);
		if ('targetView' in $$props) $$invalidate(4, targetView = $$props.targetView);
		if ('isAnswerCorrect' in $$props) isAnswerCorrect = $$props.isAnswerCorrect;
		if ('blnAllAttempted' in $$props) blnAllAttempted = $$props.blnAllAttempted;
		if ('correctAnswerArray' in $$props) $$invalidate(5, correctAnswerArray = $$props.correctAnswerArray);
		if ('obj' in $$props) obj = $$props.obj;
		if ('tmpArr' in $$props) tmpArr = $$props.tmpArr;
		if ('noOfQuestions' in $$props) noOfQuestions = $$props.noOfQuestions;
		if ('ignoreItemIdKeys' in $$props) ignoreItemIdKeys = $$props.ignoreItemIdKeys;
		if ('ignoreItemIds' in $$props) $$invalidate(6, ignoreItemIds = $$props.ignoreItemIds);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*xml, isReview*/ 32769) {
			 {
				loadModule(xml);

				if (isReview) {
					$$invalidate(4, targetView = "block");
					setReview();
				} else {
					$$invalidate(4, targetView = "none");
					unsetReview();
					updateElements();
				}
			}
		}
	};

	return [
		isReview,
		jsonData,
		state,
		windowwidth,
		targetView,
		correctAnswerArray,
		ignoreItemIds,
		onImgLoad,
		prevbutton,
		nextbutton,
		setReview,
		unsetReview,
		matchButton,
		resetButton,
		handleReviewMode,
		xml,
		uxml,
		showAns,
		updateCSV,
		editorState,
		onwindowresize
	];
}

class AlignMatchPreview extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance$1,
			create_fragment$1,
			safe_not_equal,
			{
				xml: 15,
				uxml: 16,
				showAns: 17,
				isReview: 0,
				updateCSV: 18,
				editorState: 19
			},
			null,
			[-1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "AlignMatchPreview",
			options,
			id: create_fragment$1.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*xml*/ ctx[15] === undefined && !('xml' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'xml'");
		}

		if (/*uxml*/ ctx[16] === undefined && !('uxml' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'uxml'");
		}

		if (/*showAns*/ ctx[17] === undefined && !('showAns' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'showAns'");
		}

		if (/*isReview*/ ctx[0] === undefined && !('isReview' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'isReview'");
		}

		if (/*updateCSV*/ ctx[18] === undefined && !('updateCSV' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'updateCSV'");
		}

		if (/*editorState*/ ctx[19] === undefined && !('editorState' in props)) {
			console_1.warn("<AlignMatchPreview> was created without expected prop 'editorState'");
		}
	}

	get xml() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get uxml() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set uxml(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showAns() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showAns(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get isReview() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set isReview(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get updateCSV() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set updateCSV(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get editorState() {
		throw new Error("<AlignMatchPreview>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<AlignMatchPreview>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default AlignMatchPreview;
//# sourceMappingURL=AlignMatchPreview-4bbc3ce2.js.map
