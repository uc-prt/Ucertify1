
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, y as l, M as Dialog, N as binding_callbacks, O as bind, R as Button, v as validate_slots, o as onMount, A as AH, I as beforeUpdate, a1 as tick, af as tag_player, P as Snackbar, w as writable, ab as Loader, e as element, h as text, f as space, j as attr_dev, l as set_style, k as add_location, n as insert_dev, p as append_dev, q as listen_dev, E as set_data_dev, x as detach_dev, B as noop, G as run_all, c as create_component, m as mount_component, Y as add_flush_callback, t as transition_in, a as transition_out, b as destroy_component, a0 as select_option, r as group_outros, u as check_outros, F as prop_dev, C as validate_each_argument, D as is_function, H as destroy_each, U as src_url_equal } from './main-ee807999.js';
import './style-inject.es-1c867377.js';
import './codemirror.min-41ad232c.js';
import './simplescrollbars-c1002091.js';

/* clsSMEval\Eval.svelte generated by Svelte v3.40.2 */

const { Object: Object_1, console: console_1, window: window_1 } = globals;
const file = "clsSMEval\\Eval.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[76] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[79] = list[i];
	return child_ctx;
}

// (1392:40) {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == "psql")}
function create_if_block_3(ctx) {
	let button;
	let t0_value = /*state*/ ctx[0].database + "";
	let t0;
	let t1;
	let span;
	let button_tabindex_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			span = element("span");
			attr_dev(span, "class", "icomoon-arrow-down-2 position-relative");
			set_style(span, "font-size", "20px");
			set_style(span, "top", "3px");
			add_location(span, file, 1399, 48, 60416);
			attr_dev(button, "type", "button");
			attr_dev(button, "tabindex", button_tabindex_value = l.zero);
			attr_dev(button, "class", "btn btn-md btn-light mr px-2 pt-1 database_select_button font14");
			add_location(button, file, 1392, 44, 59906);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t0);
			append_dev(button, t1);
			append_dev(button, span);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*handleDatabaseModalOpen*/ ctx[8], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 1 && t0_value !== (t0_value = /*state*/ ctx[0].database + "")) set_data_dev(t0, t0_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(1392:40) {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == \\\"psql\\\")}",
		ctx
	});

	return block;
}

// (1420:40) {#if (state.lang_type =='sql' || state.lang_type == 'mssql' || state.lang_type == "psql")}
function create_if_block_2(ctx) {
	let button;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			button.textContent = `${l.resetDB}`;
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-light mr px-2 font14");
			add_location(button, file, 1420, 44, 61978);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*resetDB*/ ctx[11], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(1420:40) {#if (state.lang_type =='sql' || state.lang_type == 'mssql' || state.lang_type == \\\"psql\\\")}",
		ctx
	});

	return block;
}

// (1512:36) {#if !isPreview}
function create_if_block_1(ctx) {
	let select;
	let option0;
	let option1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			select = element("select");
			option0 = element("option");
			option0.textContent = "HTML";
			option1 = element("option");
			option1.textContent = "RAW";
			option0.__value = "html";
			option0.value = option0.__value;
			option0.selected = "selected";
			add_location(option0, file, 1520, 44, 69093);
			option1.__value = "raw";
			option1.value = option1.__value;
			add_location(option1, file, 1521, 44, 69193);
			attr_dev(select, "id", "raw_btn");
			attr_dev(select, "class", "form-select secure-icon d-inline-block mr-2 pull-right font14");
			attr_dev(select, "name", "raw_btn");
			set_style(select, "height", "34px");
			set_style(select, "width", "90px");
			add_location(select, file, 1512, 40, 68538);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option0);
			append_dev(select, option1);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*showOutputData*/ ctx[10], false, false, false),
					listen_dev(select, "blur", /*showOutputData*/ ctx[10], false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(1512:36) {#if !isPreview}",
		ctx
	});

	return block;
}

// (1547:8) {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == "psql")}
function create_if_block(ctx) {
	let dialog;
	let updating_visible;
	let current;

	function dialog_visible_binding(value) {
		/*dialog_visible_binding*/ ctx[26](value);
	}

	let dialog_props = {
		class: "remove_right_margin",
		width: 225,
		"aria-labelledby": "simple-dialog-title",
		style: "background-color:#fff; border-radius: 5px;",
		$$slots: { default: [create_default_slot_5] },
		$$scope: { ctx }
	};

	if (/*state*/ ctx[0].database_modal_open !== void 0) {
		dialog_props.visible = /*state*/ ctx[0].database_modal_open;
	}

	dialog = new Dialog({ props: dialog_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog, 'visible', dialog_visible_binding));

	const block = {
		c: function create() {
			create_component(dialog.$$.fragment);
		},
		m: function mount(target, anchor) {
			mount_component(dialog, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const dialog_changes = {};

			if (dirty[0] & /*state*/ 1 | dirty[2] & /*$$scope*/ 1048576) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible && dirty[0] & /*state*/ 1) {
				updating_visible = true;
				dialog_changes.visible = /*state*/ ctx[0].database_modal_open;
				add_flush_callback(() => updating_visible = false);
			}

			dialog.$set(dialog_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(dialog, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(1547:8) {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == \\\"psql\\\")}",
		ctx
	});

	return block;
}

// (1556:20) {#each state.databases as database}
function create_each_block_1(ctx) {
	let div;
	let t0_value = /*database*/ ctx[79] + "";
	let t0;
	let t1;
	let div_key_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(div, "class", "dropdown-item evalpro_dropdown");
			attr_dev(div, "tabindex", "0");
			attr_dev(div, "key", div_key_value = /*database*/ ctx[79]);
			set_style(div, "height", "50px");
			set_style(div, "line-height", "45px");
			set_style(div, "cursor", "pointer");
			set_style(div, "padding-left", "20px");
			add_location(div, file, 1556, 24, 71398);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, t0);
			append_dev(div, t1);

			if (!mounted) {
				dispose = listen_dev(
					div,
					"click",
					function () {
						if (is_function(/*handleDatabaseItem*/ ctx[9].bind(this, /*database*/ ctx[79]))) /*handleDatabaseItem*/ ctx[9].bind(this, /*database*/ ctx[79]).apply(this, arguments);
					},
					false,
					false,
					false
				);

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*state*/ 1 && t0_value !== (t0_value = /*database*/ ctx[79] + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*state*/ 1 && div_key_value !== (div_key_value = /*database*/ ctx[79])) {
				attr_dev(div, "key", div_key_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(1556:20) {#each state.databases as database}",
		ctx
	});

	return block;
}

// (1548:12) <Dialog class="remove_right_margin" bind:visible={state.database_modal_open} width={225} aria-labelledby="simple-dialog-title" style="background-color:#fff; border-radius: 5px;">
function create_default_slot_5(ctx) {
	let h4;
	let div1;
	let div0;
	let t1;
	let span;
	let t3;
	let div2;
	let mounted;
	let dispose;
	let each_value_1 = /*state*/ ctx[0].databases;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			h4 = element("h4");
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "Select Database";
			t1 = space();
			span = element("span");
			span.textContent = "X";
			t3 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(div0, file, 1550, 24, 70982);
			attr_dev(span, "class", "position-relative");
			set_style(span, "left", "-16px");
			set_style(span, "top", "-10px");
			set_style(span, "font-size", "20px");
			set_style(span, "cursor", "pointer");
			add_location(span, file, 1551, 24, 71034);
			attr_dev(div1, "class", "d-flex justify-content-between");
			add_location(div1, file, 1549, 20, 70912);
			attr_dev(h4, "class", "mt-0 font21");
			add_location(h4, file, 1548, 16, 70866);
			set_style(div2, "height", "500px");
			set_style(div2, "overflow-y", "auto");
			set_style(div2, "padding-right", "18px");
			add_location(div2, file, 1554, 16, 71247);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, div1);
			append_dev(div1, div0);
			append_dev(div1, t1);
			append_dev(div1, span);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			if (!mounted) {
				dispose = listen_dev(span, "click", /*handleDatabaseModalOpen*/ ctx[8], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, handleDatabaseItem*/ 513) {
				each_value_1 = /*state*/ ctx[0].databases;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(1548:12) <Dialog class=\\\"remove_right_margin\\\" bind:visible={state.database_modal_open} width={225} aria-labelledby=\\\"simple-dialog-title\\\" style=\\\"background-color:#fff; border-radius: 5px;\\\">",
		ctx
	});

	return block;
}

// (1572:16) {#each lang_type as lang}
function create_each_block(ctx) {
	let div2;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div1;
	let t1_value = /*lang*/ ctx[76].charAt(0).toUpperCase() + /*lang*/ ctx[76].slice(1) + "";
	let t1;
	let t2;
	let div2_key_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			t1 = text(t1_value);
			t2 = space();
			set_style(img, "border-radius", "50%");
			set_style(img, "height", "50px");
			if (!src_url_equal(img.src, img_src_value = window.itemUrl + "images/" + (/*lang*/ ctx[76] == "c#" ? "csharp" : /*lang*/ ctx[76]) + "_lang.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "alt", "Language");
			add_location(img, file, 1574, 28, 72745);
			attr_dev(div0, "class", "text-center d-inline-block");
			set_style(div0, "height", "50px");
			set_style(div0, "width", "50px");
			set_style(div0, "background", "#ccc");
			set_style(div0, "border-radius", "50%");
			add_location(div0, file, 1573, 24, 72603);
			attr_dev(div1, "class", "pl-1 d-inline-block");
			set_style(div1, "padding", "15px");
			add_location(div1, file, 1576, 24, 72947);
			attr_dev(div2, "class", "dropdown-item evalpro_dropdown");
			attr_dev(div2, "tabindex", "0");
			attr_dev(div2, "key", div2_key_value = /*lang*/ ctx[76]);
			set_style(div2, "height", "60px");
			set_style(div2, "cursor", "pointer");
			set_style(div2, "padding-left", "20px");
			add_location(div2, file, 1572, 20, 72400);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, img);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, t1);
			append_dev(div2, t2);

			if (!mounted) {
				dispose = listen_dev(div2, "click", /*handleLanguageSelection*/ ctx[7].bind(this, /*lang*/ ctx[76]), false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(1572:16) {#each lang_type as lang}",
		ctx
	});

	return block;
}

// (1564:8) <Dialog class="remove_right_margin" bind:visible={state.open} width={225} style="background-color:#fff; border-radius: 5px;">
function create_default_slot_4(ctx) {
	let h4;
	let div1;
	let div0;
	let t1;
	let span;
	let t3;
	let div2;
	let mounted;
	let dispose;
	let each_value = /*lang_type*/ ctx[3];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			h4 = element("h4");
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "Select Language";
			t1 = space();
			span = element("span");
			span.textContent = "X";
			t3 = space();
			div2 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(div0, file, 1566, 20, 72019);
			attr_dev(span, "class", "position-relative");
			set_style(span, "left", "-16px");
			set_style(span, "top", "-10px");
			set_style(span, "font-size", "20px");
			set_style(span, "cursor", "pointer");
			add_location(span, file, 1567, 20, 72067);
			attr_dev(div1, "class", "d-flex justify-content-between");
			add_location(div1, file, 1565, 16, 71953);
			attr_dev(h4, "class", "mt-0 font21");
			add_location(h4, file, 1564, 12, 71911);
			set_style(div2, "height", "500px");
			set_style(div2, "overflow-y", "auto");
			set_style(div2, "padding-right", "18px");
			add_location(div2, file, 1570, 12, 72268);
		},
		m: function mount(target, anchor) {
			insert_dev(target, h4, anchor);
			append_dev(h4, div1);
			append_dev(div1, div0);
			append_dev(div1, t1);
			append_dev(div1, span);
			insert_dev(target, t3, anchor);
			insert_dev(target, div2, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div2, null);
			}

			if (!mounted) {
				dispose = listen_dev(span, "click", /*handleLanguageModalOpen*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*lang_type, handleLanguageSelection*/ 136) {
				each_value = /*lang_type*/ ctx[3];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div2, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(h4);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div2);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(1564:8) <Dialog class=\\\"remove_right_margin\\\" bind:visible={state.open} width={225} style=\\\"background-color:#fff; border-radius: 5px;\\\">",
		ctx
	});

	return block;
}

// (1641:28) <Button                                   color="primary"                                   unelevated="true"                                  on:click={addMore}                                   aria-label="Add"                                   style="height: 40px; width: 40px; border-radius: 50%"                              >
function create_default_slot_3(ctx) {
	let spna;

	const block = {
		c: function create() {
			spna = element("spna");
			attr_dev(spna, "class", "icomoon-plus");
			add_location(spna, file, 1647, 32, 78429);
		},
		m: function mount(target, anchor) {
			insert_dev(target, spna, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(spna);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(1641:28) <Button                                   color=\\\"primary\\\"                                   unelevated=\\\"true\\\"                                  on:click={addMore}                                   aria-label=\\\"Add\\\"                                   style=\\\"height: 40px; width: 40px; border-radius: 50%\\\"                              >",
		ctx
	});

	return block;
}

// (1671:8) <Snackbar              bind:visible={state.snackback}               bg="#333"               bottom={true}                timeout={3000}               style="position:fixed; bottom:50px"          >
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*message*/ ctx[1]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*message*/ 2) set_data_dev(t, /*message*/ ctx[1]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(1671:8) <Snackbar              bind:visible={state.snackback}               bg=\\\"#333\\\"               bottom={true}                timeout={3000}               style=\\\"position:fixed; bottom:50px\\\"          >",
		ctx
	});

	return block;
}

// (1661:4) <Dialog bind:visible={state.remediationToggle} width={960} class="dialog bg-white">
function create_default_slot_1(ctx) {
	let div1;
	let div0;
	let t1;
	let div2;
	let center;
	let loader;
	let t2;
	let h4;
	let t3_value = l.calculate_answer + "";
	let t3;
	let br;
	let t4_value = l.please_wait + "";
	let t4;
	let t5;
	let snackbar;
	let updating_visible;
	let current;

	loader = new Loader({
			props: { size: 60, thickness: 3 },
			$$inline: true
		});

	function snackbar_visible_binding(value) {
		/*snackbar_visible_binding*/ ctx[29](value);
	}

	let snackbar_props = {
		bg: "#333",
		bottom: true,
		timeout: 3000,
		style: "position:fixed; bottom:50px",
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*state*/ ctx[0].snackback !== void 0) {
		snackbar_props.visible = /*state*/ ctx[0].snackback;
	}

	snackbar = new Snackbar({ props: snackbar_props, $$inline: true });
	binding_callbacks.push(() => bind(snackbar, 'visible', snackbar_visible_binding));

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			div0.textContent = `${l.remediation}`;
			t1 = space();
			div2 = element("div");
			center = element("center");
			create_component(loader.$$.fragment);
			t2 = space();
			h4 = element("h4");
			t3 = text(t3_value);
			br = element("br");
			t4 = text(t4_value);
			t5 = space();
			create_component(snackbar.$$.fragment);
			attr_dev(div0, "class", "font20");
			add_location(div0, file, 1662, 12, 79216);
			set_style(div1, "text-align", "left");
			add_location(div1, file, 1661, 8, 79171);
			add_location(br, file, 1667, 40, 79444);
			add_location(h4, file, 1667, 16, 79420);
			attr_dev(center, "class", "mt-xl");
			add_location(center, file, 1665, 12, 79324);
			attr_dev(div2, "id", "remediationModel");
			add_location(div2, file, 1664, 8, 79283);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, center);
			mount_component(loader, center, null);
			append_dev(center, t2);
			append_dev(center, h4);
			append_dev(h4, t3);
			append_dev(h4, br);
			append_dev(h4, t4);
			insert_dev(target, t5, anchor);
			mount_component(snackbar, target, anchor);
			current = true;
		},
		p: function update(ctx, dirty) {
			const snackbar_changes = {};

			if (dirty[0] & /*message*/ 2 | dirty[2] & /*$$scope*/ 1048576) {
				snackbar_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible && dirty[0] & /*state*/ 1) {
				updating_visible = true;
				snackbar_changes.visible = /*state*/ ctx[0].snackback;
				add_flush_callback(() => updating_visible = false);
			}

			snackbar.$set(snackbar_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			transition_in(snackbar.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			transition_out(snackbar.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			destroy_component(loader);
			if (detaching) detach_dev(t5);
			destroy_component(snackbar, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(1661:4) <Dialog bind:visible={state.remediationToggle} width={960} class=\\\"dialog bg-white\\\">",
		ctx
	});

	return block;
}

// (1681:12) <Button                  raised={true}                  on:click = {()=>{ state.remediationToggle = false}}                  class="bg-light"              >
function create_default_slot(ctx) {
	let t_value = l.cancel + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(1681:12) <Button                  raised={true}                  on:click = {()=>{ state.remediationToggle = false}}                  class=\\\"bg-light\\\"              >",
		ctx
	});

	return block;
}

// (1680:8) 
function create_footer_slot(ctx) {
	let div;
	let button;
	let current;

	button = new Button({
			props: {
				raised: true,
				class: "bg-light",
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*click_handler_2*/ ctx[28]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			attr_dev(div, "slot", "footer");
			attr_dev(div, "class", "svelteFooter");
			add_location(div, file, 1679, 8, 79768);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty[2] & /*$$scope*/ 1048576) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(1680:8) ",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div39;
	let div38;
	let div27;
	let div26;
	let div25;
	let div13;
	let div12;
	let div11;
	let div2;
	let div0;
	let button0;

	let t0_value = (/*state*/ ctx[0].lang_type == "php"
	? "PHP"
	: toTitleCase(/*state*/ ctx[0].lang_type)) + "";

	let t0;
	let t1;
	let span0;
	let button0_tabindex_value;
	let t2;
	let t3;
	let span1;

	let t4_value = (/*state*/ ctx[0].lang_type == "php"
	? "PHP"
	: toTitleCase(/*state*/ ctx[0].lang_type)) + "";

	let t4;
	let t5;
	let div1;
	let button1;
	let t6_value = l.add_testcase + "";
	let t6;
	let button1_tabindex_value;
	let t7;
	let t8;
	let button2;
	let i;
	let t9;
	let t10_value = l.run.toUpperCase() + "";
	let t10;
	let button2_tabindex_value;
	let t11;
	let div10;
	let div3;
	let span2;
	let t13;
	let button3;
	let t14_value = (/*state*/ ctx[0].preBlockShow ? "Hide" : "Show") + "";
	let t14;
	let button3_tabindex_value;
	let t15;
	let div4;
	let textarea0;
	let textarea0_placeholder_value;
	let div4_class_value;
	let t16;
	let div6;
	let span3;
	let t18;
	let div5;
	let label0;
	let t19_value = l.enableline + "";
	let t19;
	let t20;
	let label0_tabindex_value;
	let t21;
	let input0;
	let input0_placeholder_value;
	let t22;
	let div7;
	let textarea1;
	let textarea1_placeholder_value;
	let t23;
	let div8;
	let span4;
	let t25;
	let button4;
	let t26_value = (/*state*/ ctx[0].postBlockShow ? "Hide" : "Show") + "";
	let t26;
	let t27;
	let div9;
	let textarea2;
	let textarea2_placeholder_value;
	let div9_class_value;
	let t28;
	let div24;
	let div23;
	let div16;
	let div14;
	let t30;
	let div15;
	let textarea3;
	let textarea3_placeholder_value;
	let t31;
	let div19;
	let div17;
	let span5;
	let t32_value = l.output + "";
	let t32;
	let span5_tabindex_value;
	let t33;
	let t34;
	let div18;
	let span6;
	let div18_tabindex_value;
	let t35;
	let div22;
	let div20;
	let a;
	let t37;
	let div21;
	let t38;
	let t39;
	let dialog0;
	let updating_visible;
	let t40;
	let div37;
	let div36;
	let div35;
	let div28;
	let input1;
	let t41;
	let h4;
	let t43;
	let button5;
	let span7;
	let t45;
	let div33;
	let div29;
	let h50;
	let lable;
	let t48;
	let label1;
	let t49_value = l.is_graph + "";
	let t49;
	let t50;
	let input2;
	let input2_value_value;
	let input2_data_attr_value;
	let input2_checked_value;
	let t51;
	let span8;
	let t52;
	let label2;
	let t53_value = l.ignore_error + "";
	let t53;
	let t54;
	let input3;
	let input3_value_value;
	let input3_checked_value;
	let t55;
	let span9;
	let t56;
	let label3;
	let t57_value = l.ignore_formatting + "";
	let t57;
	let t58;
	let input4;
	let input4_value_value;
	let input4_checked_value;
	let t59;
	let span10;
	let t60;
	let label4;
	let t61_value = l.ignore_reset_db + "";
	let t61;
	let t62;
	let input5;
	let input5_value_value;
	let input5_checked_value;
	let t63;
	let span11;
	let t64;
	let label5;
	let t65_value = l.pre_tag + "";
	let t65;
	let t66;
	let input6;
	let input6_value_value;
	let input6_checked_value;
	let t67;
	let span12;
	let t68;
	let div31;
	let div30;
	let h51;
	let span13;
	let t69_value = l.select_case_match + "";
	let t69;
	let span13_tabindex_value;
	let t70;
	let select;
	let option0;
	let option1;
	let option2;
	let select_value_value;
	let t74;
	let textarea4;
	let textarea4_class_value;
	let t75;
	let textarea5;
	let textarea5_class_value;
	let t76;
	let span14;
	let t77;
	let div32;
	let button6;
	let t78;
	let div34;
	let button7;
	let t80;
	let button8;
	let div37_tabindex_value;
	let t82;
	let dialog1;
	let updating_visible_1;
	let t83;
	let input7;
	let div39_tabindex_value;
	let current;
	let mounted;
	let dispose;
	let if_block0 = (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") && create_if_block_3(ctx);
	let if_block1 = (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") && create_if_block_2(ctx);
	let if_block2 = !/*isPreview*/ ctx[2] && create_if_block_1(ctx);
	let if_block3 = (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") && create_if_block(ctx);

	function dialog0_visible_binding(value) {
		/*dialog0_visible_binding*/ ctx[27](value);
	}

	let dialog0_props = {
		class: "remove_right_margin",
		width: 225,
		style: "background-color:#fff; border-radius: 5px;",
		$$slots: { default: [create_default_slot_4] },
		$$scope: { ctx }
	};

	if (/*state*/ ctx[0].open !== void 0) {
		dialog0_props.visible = /*state*/ ctx[0].open;
	}

	dialog0 = new Dialog({ props: dialog0_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog0, 'visible', dialog0_visible_binding));

	button6 = new Button({
			props: {
				color: "primary",
				unelevated: "true",
				"aria-label": "Add",
				style: "height: 40px; width: 40px; border-radius: 50%",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button6.$on("click", /*addMore*/ ctx[16]);

	function dialog1_visible_binding(value) {
		/*dialog1_visible_binding*/ ctx[30](value);
	}

	let dialog1_props = {
		width: 960,
		class: "dialog bg-white",
		$$slots: {
			footer: [create_footer_slot],
			default: [create_default_slot_1]
		},
		$$scope: { ctx }
	};

	if (/*state*/ ctx[0].remediationToggle !== void 0) {
		dialog1_props.visible = /*state*/ ctx[0].remediationToggle;
	}

	dialog1 = new Dialog({ props: dialog1_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog1, 'visible', dialog1_visible_binding));

	const block = {
		c: function create() {
			div39 = element("div");
			div38 = element("div");
			div27 = element("div");
			div26 = element("div");
			div25 = element("div");
			div13 = element("div");
			div12 = element("div");
			div11 = element("div");
			div2 = element("div");
			div0 = element("div");
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			span0 = element("span");
			t2 = space();
			if (if_block0) if_block0.c();
			t3 = space();
			span1 = element("span");
			t4 = text(t4_value);
			t5 = space();
			div1 = element("div");
			button1 = element("button");
			t6 = text(t6_value);
			t7 = space();
			if (if_block1) if_block1.c();
			t8 = space();
			button2 = element("button");
			i = element("i");
			t9 = space();
			t10 = text(t10_value);
			t11 = space();
			div10 = element("div");
			div3 = element("div");
			span2 = element("span");
			span2.textContent = "Pre";
			t13 = space();
			button3 = element("button");
			t14 = text(t14_value);
			t15 = space();
			div4 = element("div");
			textarea0 = element("textarea");
			t16 = space();
			div6 = element("div");
			span3 = element("span");
			span3.textContent = "Editor";
			t18 = space();
			div5 = element("div");
			label0 = element("label");
			t19 = text(t19_value);
			t20 = text(":");
			t21 = space();
			input0 = element("input");
			t22 = space();
			div7 = element("div");
			textarea1 = element("textarea");
			t23 = space();
			div8 = element("div");
			span4 = element("span");
			span4.textContent = "Post";
			t25 = space();
			button4 = element("button");
			t26 = text(t26_value);
			t27 = space();
			div9 = element("div");
			textarea2 = element("textarea");
			t28 = space();
			div24 = element("div");
			div23 = element("div");
			div16 = element("div");
			div14 = element("div");
			div14.textContent = `${l.input}`;
			t30 = space();
			div15 = element("div");
			textarea3 = element("textarea");
			t31 = space();
			div19 = element("div");
			div17 = element("div");
			span5 = element("span");
			t32 = text(t32_value);
			t33 = space();
			if (if_block2) if_block2.c();
			t34 = space();
			div18 = element("div");
			span6 = element("span");
			t35 = space();
			div22 = element("div");
			div20 = element("div");
			a = element("a");
			a.textContent = `${l.testcases}`;
			t37 = space();
			div21 = element("div");
			t38 = space();
			if (if_block3) if_block3.c();
			t39 = space();
			create_component(dialog0.$$.fragment);
			t40 = space();
			div37 = element("div");
			div36 = element("div");
			div35 = element("div");
			div28 = element("div");
			input1 = element("input");
			t41 = space();
			h4 = element("h4");
			h4.textContent = `${l.add_testcase}`;
			t43 = space();
			button5 = element("button");
			span7 = element("span");
			span7.textContent = "×";
			t45 = space();
			div33 = element("div");
			div29 = element("div");
			h50 = element("h5");
			lable = element("lable");
			lable.textContent = `${l.setting}:`;
			t48 = space();
			label1 = element("label");
			t49 = text(t49_value);
			t50 = space();
			input2 = element("input");
			t51 = space();
			span8 = element("span");
			t52 = space();
			label2 = element("label");
			t53 = text(t53_value);
			t54 = space();
			input3 = element("input");
			t55 = space();
			span9 = element("span");
			t56 = space();
			label3 = element("label");
			t57 = text(t57_value);
			t58 = space();
			input4 = element("input");
			t59 = space();
			span10 = element("span");
			t60 = space();
			label4 = element("label");
			t61 = text(t61_value);
			t62 = space();
			input5 = element("input");
			t63 = space();
			span11 = element("span");
			t64 = space();
			label5 = element("label");
			t65 = text(t65_value);
			t66 = space();
			input6 = element("input");
			t67 = space();
			span12 = element("span");
			t68 = space();
			div31 = element("div");
			div30 = element("div");
			h51 = element("h5");
			span13 = element("span");
			t69 = text(t69_value);
			t70 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${l.case_insensitive}`;
			option1 = element("option");
			option1.textContent = `${l.partial_matching}`;
			option2 = element("option");
			option2.textContent = `${l.special_char}`;
			t74 = space();
			textarea4 = element("textarea");
			t75 = space();
			textarea5 = element("textarea");
			t76 = space();
			span14 = element("span");
			t77 = space();
			div32 = element("div");
			create_component(button6.$$.fragment);
			t78 = space();
			div34 = element("div");
			button7 = element("button");
			button7.textContent = `${l.submit}`;
			t80 = space();
			button8 = element("button");
			button8.textContent = `${l.cancel}`;
			t82 = space();
			create_component(dialog1.$$.fragment);
			t83 = space();
			input7 = element("input");
			attr_dev(span0, "class", "icomoon-arrow-down-2 font20 position-relative");
			set_style(span0, "top", "3px");
			add_location(span0, file, 1389, 44, 59595);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "tabindex", button0_tabindex_value = l.zero);
			attr_dev(button0, "class", "btn btn-md btn-light mr px-2 pt-1 language_select_button font14");
			add_location(button0, file, 1382, 40, 59060);
			attr_dev(span1, "class", "d-inline-block pt-2 pl-2 selected_language  h-imp font14");
			add_location(span1, file, 1402, 40, 60653);
			attr_dev(div0, "class", "float-left");
			set_style(div0, "margin", "-9px -14px 0 -17px");
			add_location(div0, file, 1381, 36, 58959);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "tabindex", button1_tabindex_value = l.zero);
			attr_dev(button1, "class", "btn btn-md btn-light mr px-2 font14");
			attr_dev(button1, "id", "addTestCase");
			attr_dev(button1, "name", "addTestCase");
			attr_dev(button1, "data-bs-toggle", "modal");
			attr_dev(button1, "data-bs-target", "#testcaseActivator");
			add_location(button1, file, 1407, 40, 61071);
			attr_dev(i, "class", "fa fa-play");
			add_location(i, file, 1431, 44, 62736);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "tabindex", button2_tabindex_value = l.zero);
			attr_dev(button2, "class", "evalProRunCode btn btn-light px-2 font14");
			attr_dev(button2, "href", "#output");
			attr_dev(button2, "id", "evalProRunCode");
			attr_dev(button2, "name", "submitcode");
			add_location(button2, file, 1422, 40, 62165);
			attr_dev(div1, "class", "float-right");
			set_style(div1, "margin", "-9px -14px 0 4px");
			add_location(div1, file, 1406, 36, 60970);
			attr_dev(div2, "class", "card-header editor-heading pt-md");
			set_style(div2, "height", "44px");
			add_location(div2, file, 1380, 32, 58854);
			add_location(span2, file, 1442, 40, 63495);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "tabindex", button3_tabindex_value = l.zero);
			attr_dev(button3, "id", "pre_editor_add_button");
			attr_dev(button3, "class", "btn btn-sm btn-light px-2 pull-right font14");
			set_style(button3, "background-color", "#fff");
			add_location(button3, file, 1443, 40, 63553);
			attr_dev(div3, "class", "card-header editor-heading py-1 pr-2 d-flex align-items-center justify-content-between action_block font14");
			add_location(div3, file, 1441, 36, 63333);
			attr_dev(textarea0, "id", "pre-editor");
			attr_dev(textarea0, "class", "h");
			attr_dev(textarea0, "placeholder", textarea0_placeholder_value = l.pre_code);
			attr_dev(textarea0, "name", "pre-editor");
			add_location(textarea0, file, 1455, 40, 64371);
			attr_dev(div4, "class", div4_class_value = "" + ((/*state*/ ctx[0].preBlockShow ? '' : 'h-imp') + " pre-div"));
			add_location(div4, file, 1454, 36, 64272);
			attr_dev(span3, "class", "d-inline span4");
			add_location(span3, file, 1458, 40, 64725);
			attr_dev(label0, "tabindex", label0_tabindex_value = l.zero);
			attr_dev(label0, "class", "d-inline-block");
			attr_dev(label0, "for", "enable-line");
			add_location(label0, file, 1460, 44, 64879);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", input0_placeholder_value = l.separate_by_quote);
			attr_dev(input0, "class", "form-control d-inline-block pt-1");
			set_style(input0, "margin-left", "10px");
			set_style(input0, "width", "125px");
			attr_dev(input0, "id", "enable-line");
			add_location(input0, file, 1461, 44, 65014);
			attr_dev(div5, "class", "pull-right");
			add_location(div5, file, 1459, 40, 64809);
			set_style(div6, "height", "44px");
			attr_dev(div6, "class", "card-header editor-heading pr-2 d-flex align-items-center justify-content-between action_block font14");
			add_location(div6, file, 1457, 36, 64547);
			attr_dev(textarea1, "id", "repl-editor");
			attr_dev(textarea1, "class", "h");
			attr_dev(textarea1, "placeholder", textarea1_placeholder_value = l.write_function_here);
			attr_dev(textarea1, "name", "repl-editor");
			add_location(textarea1, file, 1471, 40, 65659);
			attr_dev(div7, "class", "replEditor");
			add_location(div7, file, 1470, 36, 65593);
			add_location(span4, file, 1474, 40, 66009);
			attr_dev(button4, "type", "button");
			attr_dev(button4, "id", "post_editor_add_button");
			attr_dev(button4, "class", "btn btn-sm btn-light px-2 pull-right font14");
			set_style(button4, "background-color", "#fff");
			add_location(button4, file, 1475, 40, 66068);
			attr_dev(div8, "class", "card-header editor-heading py-1 pr-2 d-flex align-items-center justify-content-between action_block font14");
			add_location(div8, file, 1473, 36, 65847);
			attr_dev(textarea2, "id", "post-editor");
			attr_dev(textarea2, "class", "h");
			attr_dev(textarea2, "placeholder", textarea2_placeholder_value = l.postcode);
			attr_dev(textarea2, "name", "post-editor");
			add_location(textarea2, file, 1486, 40, 66827);
			attr_dev(div9, "class", div9_class_value = "post-div " + (/*state*/ ctx[0].postBlockShow ? '' : 'h-imp'));
			add_location(div9, file, 1485, 36, 66725);
			attr_dev(div10, "class", "card-body");
			attr_dev(div10, "id", "code-editor");
			set_style(div10, "overflow", "none");
			set_style(div10, "border-bottom", "1px solid #dddddd");
			set_style(div10, "padding", "0px");
			set_style(div10, "min-height", "483px");
			set_style(div10, "height", "488px");
			add_location(div10, file, 1437, 32, 63035);
			attr_dev(div11, "class", "card card-default");
			attr_dev(div11, "id", "resizeable-editor");
			set_style(div11, "margin", "0");
			set_style(div11, "border-radius", "4px 4px 0 0");
			set_style(div11, "border-bottom", "0");
			add_location(div11, file, 1375, 28, 58570);
			attr_dev(div12, "class", "full-editor");
			set_style(div12, "min-height", "inherit");
			add_location(div12, file, 1374, 24, 58486);
			attr_dev(div13, "id", "editor-top");
			set_style(div13, "width", "60%");
			set_style(div13, "min-height", "546px");
			attr_dev(div13, "class", "float-left");
			add_location(div13, file, 1373, 20, 58381);
			attr_dev(div14, "class", "card-header font14");
			set_style(div14, "height", "44px");
			add_location(div14, file, 1495, 32, 67351);
			attr_dev(textarea3, "name", "sampleInput");
			attr_dev(textarea3, "class", "sampleInput");
			attr_dev(textarea3, "id", "sampleInput");
			attr_dev(textarea3, "placeholder", textarea3_placeholder_value = l.seperate_by_enter_key);
			set_style(textarea3, "margin", "0px");
			set_style(textarea3, "width", "100%");
			set_style(textarea3, "height", "80px");
			set_style(textarea3, "padding", "10px");
			set_style(textarea3, "resize", "none");
			set_style(textarea3, "outline", "none");
			set_style(textarea3, "border", "0px");
			add_location(textarea3, file, 1499, 36, 67600);
			attr_dev(div15, "id", "input");
			attr_dev(div15, "class", "card-body p-0");
			add_location(div15, file, 1498, 32, 67524);
			attr_dev(div16, "class", "card card-default m-b");
			add_location(div16, file, 1494, 28, 67282);
			attr_dev(span5, "class", "pt-2 d-inline-block font14");
			attr_dev(span5, "tabindex", span5_tabindex_value = l.zero);
			add_location(span5, file, 1510, 36, 68363);
			attr_dev(div17, "class", "card-header pr-0 pt-1");
			set_style(div17, "height", "44px");
			add_location(div17, file, 1509, 32, 68268);
			add_location(span6, file, 1531, 36, 69772);
			attr_dev(div18, "id", "output");
			attr_dev(div18, "tabindex", div18_tabindex_value = l.zero);
			attr_dev(div18, "class", "test card-body output");
			set_style(div18, "resize", "vertical");
			set_style(div18, "overflow", "auto");
			set_style(div18, "padding", "10px");
			set_style(div18, "height", "342px");
			set_style(div18, "min-height", "342px");
			add_location(div18, file, 1525, 32, 69393);
			attr_dev(div19, "class", "card card-default");
			set_style(div19, "margin-bottom", "0px");
			add_location(div19, file, 1508, 28, 68173);
			attr_dev(a, "data-bs-toggle", "tab");
			attr_dev(a, "id", "testcase-tab");
			attr_dev(a, "class", "inputOutput font14");
			attr_dev(a, "href", "#testcase");
			add_location(a, file, 1536, 36, 70079);
			attr_dev(div20, "class", "card-header");
			set_style(div20, "height", "44px");
			add_location(div20, file, 1535, 32, 69994);
			attr_dev(div21, "id", "testcase");
			attr_dev(div21, "class", "card-body in");
			set_style(div21, "resize", "none");
			set_style(div21, "overflow", "auto");
			set_style(div21, "padding", "10px");
			set_style(div21, "height", "180px");
			add_location(div21, file, 1538, 32, 70256);
			attr_dev(div22, "class", "card card-default");
			attr_dev(div22, "id", "test_card");
			set_style(div22, "display", "none");
			add_location(div22, file, 1534, 28, 69891);
			add_location(div23, file, 1493, 24, 67247);
			attr_dev(div24, "id", "editor-footer");
			attr_dev(div24, "class", "float-right");
			set_style(div24, "width", "39.5%");
			set_style(div24, "min-height", "120px");
			set_style(div24, "height", "585px");
			add_location(div24, file, 1492, 20, 67122);
			attr_dev(div25, "class", "clearboth w-100");
			set_style(div25, "padding-top", 10 + "px");
			add_location(div25, file, 1372, 16, 58301);
			attr_dev(div26, "class", "row");
			add_location(div26, file, 1371, 12, 58266);
			attr_dev(div27, "class", "container");
			add_location(div27, file, 1370, 8, 58229);
			attr_dev(input1, "class", "form-control testCaseInput h-imp");
			attr_dev(input1, "type", "text");
			attr_dev(input1, "id", "id1");
			add_location(input1, file, 1585, 24, 73464);
			add_location(h4, file, 1586, 24, 73561);
			attr_dev(span7, "aria-hidden", "true");
			add_location(span7, file, 1588, 28, 73721);
			attr_dev(button5, "type", "button");
			attr_dev(button5, "class", "close");
			attr_dev(button5, "data-bs-dismiss", "modal");
			attr_dev(button5, "aria-label", "Close");
			add_location(button5, file, 1587, 24, 73612);
			attr_dev(div28, "class", "modal-header");
			add_location(div28, file, 1584, 20, 73412);
			attr_dev(lable, "class", "mt-1");
			add_location(lable, file, 1594, 32, 74181);
			attr_dev(input2, "class", "is_graph");
			attr_dev(input2, "type", "checkbox");
			input2.value = input2_value_value = /*state*/ ctx[0].is_graph;
			attr_dev(input2, "data-attr", input2_data_attr_value = /*state*/ ctx[0].is_graph);
			input2.checked = input2_checked_value = /*state*/ ctx[0].is_graph;
			add_location(input2, file, 1596, 36, 74341);
			attr_dev(span8, "class", "checkmark_eval");
			add_location(span8, file, 1597, 36, 74498);
			attr_dev(label1, "class", "container_eval mr-4");
			add_location(label1, file, 1595, 32, 74256);
			attr_dev(input3, "class", "ignore_error");
			attr_dev(input3, "type", "checkbox");
			input3.value = input3_value_value = /*state*/ ctx[0].ignore_error;
			input3.checked = input3_checked_value = /*state*/ ctx[0].ignore_error;
			add_location(input3, file, 1600, 36, 74699);
			attr_dev(span9, "class", "checkmark_eval");
			add_location(span9, file, 1601, 36, 74839);
			attr_dev(label2, "class", "container_eval mr-4");
			add_location(label2, file, 1599, 32, 74610);
			attr_dev(input4, "class", "ignore_formatting");
			attr_dev(input4, "type", "checkbox");
			input4.value = input4_value_value = /*state*/ ctx[0].ignore_formatting;
			input4.checked = input4_checked_value = /*state*/ ctx[0].ignore_formatting;
			add_location(input4, file, 1604, 36, 75040);
			attr_dev(span10, "class", "checkmark_eval");
			add_location(span10, file, 1605, 36, 75195);
			attr_dev(label3, "class", "container_eval");
			add_location(label3, file, 1603, 32, 74951);
			attr_dev(input5, "class", "ignore_reset_db");
			attr_dev(input5, "type", "checkbox");
			input5.value = input5_value_value = /*state*/ ctx[0].ignore_reset_db;
			input5.checked = input5_checked_value = /*state*/ ctx[0].ignore_reset_db;
			add_location(input5, file, 1608, 36, 75394);
			attr_dev(span11, "class", "checkmark_eval");
			add_location(span11, file, 1609, 36, 75543);
			attr_dev(label4, "class", "container_eval");
			add_location(label4, file, 1607, 32, 75307);
			attr_dev(input6, "class", "is_pre_tag");
			attr_dev(input6, "type", "checkbox");
			input6.value = input6_value_value = /*state*/ ctx[0].is_pre_tag;
			input6.checked = input6_checked_value = /*state*/ ctx[0].is_pre_tag;
			add_location(input6, file, 1612, 36, 75734);
			attr_dev(span12, "class", "checkmark_eval");
			add_location(span12, file, 1613, 36, 75868);
			attr_dev(label5, "class", "container_eval");
			add_location(label5, file, 1611, 32, 75655);
			attr_dev(h50, "class", "float-left p-1");
			set_style(h50, "width", "100%");
			set_style(h50, "padding", "18px", 1);
			set_style(h50, "background", "#f1f1f1");
			set_style(h50, "display", "flex");
			set_style(h50, "justify-content", "space-between");
			add_location(h50, file, 1593, 28, 74009);
			attr_dev(div29, "id", "setting");
			attr_dev(div29, "class", "setting");
			add_location(div29, file, 1592, 24, 73945);
			attr_dev(span13, "tabindex", span13_tabindex_value = l.zero);
			add_location(span13, file, 1620, 36, 76296);
			option0.__value = "0";
			option0.value = option0.__value;
			add_location(option0, file, 1629, 40, 76940);
			option1.__value = "1";
			option1.value = option1.__value;
			add_location(option1, file, 1630, 40, 77029);
			option2.__value = "2";
			option2.value = option2.__value;
			add_location(option2, file, 1631, 40, 77118);
			set_style(select, "margin", "2px 24px");
			attr_dev(select, "class", "v-bottom form-select");
			attr_dev(select, "id", "testcase_sensitive");
			add_location(select, file, 1621, 36, 76413);
			attr_dev(h51, "class", "float-left");
			set_style(h51, "width", "auto");
			add_location(h51, file, 1619, 32, 76215);
			set_style(textarea4, "height", "100px");

			attr_dev(textarea4, "class", textarea4_class_value = /*state*/ ctx[0].lang_type == "sql" || /*state*/ ctx[0].lang_type == "psql"
			? "form-control width-md1 d-inline-block mr-md h-imp"
			: "form-control width-md1 d-inline-block mr-md");

			attr_dev(textarea4, "placeholder", "Input seperated by ','");
			add_location(textarea4, file, 1634, 32, 77281);
			attr_dev(textarea5, "style", "height; 100px;");

			attr_dev(textarea5, "class", textarea5_class_value = 'form-control ' + (/*state*/ ctx[0].lang_type == "sql" || /*state*/ ctx[0].lang_type == "psql"
			? "span9"
			: "width-md1") + ' d-inline-block ml-md');

			attr_dev(textarea5, "placeholder", "Output");
			add_location(textarea5, file, 1635, 32, 77560);
			attr_dev(span14, "tabindex", "0");
			attr_dev(span14, "class", "float-right icomoon-new-24px-delete-1 s5 pointer caseDelBtn");
			add_location(span14, file, 1636, 32, 77787);
			attr_dev(div30, "class", "caseStack m-sm");
			add_location(div30, file, 1618, 28, 76153);
			attr_dev(div31, "id", "caseContainer");
			attr_dev(div31, "class", "float-right mt-sm overflow-auto");
			set_style(div31, "width", "100%");
			add_location(div31, file, 1617, 24, 76039);
			attr_dev(div32, "class", "d-inline-flex pull-right");
			set_style(div32, "width", "50px");
			add_location(div32, file, 1639, 24, 77975);
			attr_dev(div33, "class", "modal-body overflow-auto mt-0 pt-0");
			set_style(div33, "max-height", "440px");
			add_location(div33, file, 1591, 20, 73845);
			attr_dev(button7, "type", "button");
			attr_dev(button7, "class", "btn btn-light addTestCase");
			attr_dev(button7, "data-bs-dismiss", "modal");
			add_location(button7, file, 1652, 24, 78636);
			attr_dev(button8, "type", "button");
			attr_dev(button8, "class", "btn btn-light");
			attr_dev(button8, "data-bs-dismiss", "modal");
			add_location(button8, file, 1653, 24, 78784);
			attr_dev(div34, "class", "modal-footer");
			add_location(div34, file, 1651, 20, 78584);
			attr_dev(div35, "class", "modal-content");
			add_location(div35, file, 1583, 16, 73363);
			attr_dev(div36, "class", "modal-dialog modal-lg");
			attr_dev(div36, "role", "document");
			add_location(div36, file, 1582, 12, 73294);
			attr_dev(div37, "class", "modal fade");
			attr_dev(div37, "id", "testcaseActivator");
			attr_dev(div37, "tabindex", div37_tabindex_value = l.minus_1);
			attr_dev(div37, "role", "dialog");
			attr_dev(div37, "aria-labelledby", "testcaseActivatorLabel");
			add_location(div37, file, 1581, 8, 73157);
			set_style(div38, "height", "auto");
			add_location(div38, file, 1369, 4, 58192);
			attr_dev(input7, "type", "hidden");
			attr_dev(input7, "id", "ansModeAnswer");
			input7.value = "";
			add_location(input7, file, 1689, 4, 80066);
			attr_dev(div39, "tabindex", div39_tabindex_value = l.zero);
			attr_dev(div39, "id", "authoringArea");
			add_location(div39, file, 1368, 0, 58144);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div39, anchor);
			append_dev(div39, div38);
			append_dev(div38, div27);
			append_dev(div27, div26);
			append_dev(div26, div25);
			append_dev(div25, div13);
			append_dev(div13, div12);
			append_dev(div12, div11);
			append_dev(div11, div2);
			append_dev(div2, div0);
			append_dev(div0, button0);
			append_dev(button0, t0);
			append_dev(button0, t1);
			append_dev(button0, span0);
			append_dev(div0, t2);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div0, t3);
			append_dev(div0, span1);
			append_dev(span1, t4);
			append_dev(div2, t5);
			append_dev(div2, div1);
			append_dev(div1, button1);
			append_dev(button1, t6);
			append_dev(div1, t7);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div1, t8);
			append_dev(div1, button2);
			append_dev(button2, i);
			append_dev(button2, t9);
			append_dev(button2, t10);
			append_dev(div11, t11);
			append_dev(div11, div10);
			append_dev(div10, div3);
			append_dev(div3, span2);
			append_dev(div3, t13);
			append_dev(div3, button3);
			append_dev(button3, t14);
			append_dev(div10, t15);
			append_dev(div10, div4);
			append_dev(div4, textarea0);
			append_dev(div10, t16);
			append_dev(div10, div6);
			append_dev(div6, span3);
			append_dev(div6, t18);
			append_dev(div6, div5);
			append_dev(div5, label0);
			append_dev(label0, t19);
			append_dev(label0, t20);
			append_dev(div5, t21);
			append_dev(div5, input0);
			append_dev(div10, t22);
			append_dev(div10, div7);
			append_dev(div7, textarea1);
			append_dev(div10, t23);
			append_dev(div10, div8);
			append_dev(div8, span4);
			append_dev(div8, t25);
			append_dev(div8, button4);
			append_dev(button4, t26);
			append_dev(div10, t27);
			append_dev(div10, div9);
			append_dev(div9, textarea2);
			append_dev(div25, t28);
			append_dev(div25, div24);
			append_dev(div24, div23);
			append_dev(div23, div16);
			append_dev(div16, div14);
			append_dev(div16, t30);
			append_dev(div16, div15);
			append_dev(div15, textarea3);
			append_dev(div23, t31);
			append_dev(div23, div19);
			append_dev(div19, div17);
			append_dev(div17, span5);
			append_dev(span5, t32);
			append_dev(div17, t33);
			if (if_block2) if_block2.m(div17, null);
			append_dev(div19, t34);
			append_dev(div19, div18);
			append_dev(div18, span6);
			append_dev(div23, t35);
			append_dev(div23, div22);
			append_dev(div22, div20);
			append_dev(div20, a);
			append_dev(div22, t37);
			append_dev(div22, div21);
			append_dev(div38, t38);
			if (if_block3) if_block3.m(div38, null);
			append_dev(div38, t39);
			mount_component(dialog0, div38, null);
			append_dev(div38, t40);
			append_dev(div38, div37);
			append_dev(div37, div36);
			append_dev(div36, div35);
			append_dev(div35, div28);
			append_dev(div28, input1);
			append_dev(div28, t41);
			append_dev(div28, h4);
			append_dev(div28, t43);
			append_dev(div28, button5);
			append_dev(button5, span7);
			append_dev(div35, t45);
			append_dev(div35, div33);
			append_dev(div33, div29);
			append_dev(div29, h50);
			append_dev(h50, lable);
			append_dev(h50, t48);
			append_dev(h50, label1);
			append_dev(label1, t49);
			append_dev(label1, t50);
			append_dev(label1, input2);
			append_dev(label1, t51);
			append_dev(label1, span8);
			append_dev(h50, t52);
			append_dev(h50, label2);
			append_dev(label2, t53);
			append_dev(label2, t54);
			append_dev(label2, input3);
			append_dev(label2, t55);
			append_dev(label2, span9);
			append_dev(h50, t56);
			append_dev(h50, label3);
			append_dev(label3, t57);
			append_dev(label3, t58);
			append_dev(label3, input4);
			append_dev(label3, t59);
			append_dev(label3, span10);
			append_dev(h50, t60);
			append_dev(h50, label4);
			append_dev(label4, t61);
			append_dev(label4, t62);
			append_dev(label4, input5);
			append_dev(label4, t63);
			append_dev(label4, span11);
			append_dev(h50, t64);
			append_dev(h50, label5);
			append_dev(label5, t65);
			append_dev(label5, t66);
			append_dev(label5, input6);
			append_dev(label5, t67);
			append_dev(label5, span12);
			append_dev(div33, t68);
			append_dev(div33, div31);
			append_dev(div31, div30);
			append_dev(div30, h51);
			append_dev(h51, span13);
			append_dev(span13, t69);
			append_dev(h51, t70);
			append_dev(h51, select);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			select_option(select, /*state*/ ctx[0].testcase_sensitive);
			append_dev(div30, t74);
			append_dev(div30, textarea4);
			append_dev(div30, t75);
			append_dev(div30, textarea5);
			append_dev(div30, t76);
			append_dev(div30, span14);
			append_dev(div33, t77);
			append_dev(div33, div32);
			mount_component(button6, div32, null);
			append_dev(div35, t78);
			append_dev(div35, div34);
			append_dev(div34, button7);
			append_dev(div34, t80);
			append_dev(div34, button8);
			append_dev(div39, t82);
			mount_component(dialog1, div39, null);
			append_dev(div39, t83);
			append_dev(div39, input7);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(window_1, "keyup", /*onkeyTouch*/ ctx[18], false, false, false),
					listen_dev(button0, "click", /*handleLanguageModalOpen*/ ctx[6], false, false, false),
					listen_dev(button1, "click", /*onOpenTestCase*/ ctx[15], false, false, false),
					listen_dev(button2, "click", /*runCode*/ ctx[12], false, false, false),
					listen_dev(button3, "click", /*click_handler*/ ctx[24], false, false, false),
					listen_dev(button4, "click", /*click_handler_1*/ ctx[25], false, false, false),
					listen_dev(select, "change", /*setDefaultXML*/ ctx[13], false, false, false),
					listen_dev(select, "blur", /*setDefaultXML*/ ctx[13], false, false, false),
					listen_dev(button7, "click", /*addTestCase*/ ctx[17], false, false, false),
					listen_dev(button8, "click", /*cancelTestCase*/ ctx[14], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if ((!current || dirty[0] & /*state*/ 1) && t0_value !== (t0_value = (/*state*/ ctx[0].lang_type == "php"
			? "PHP"
			: toTitleCase(/*state*/ ctx[0].lang_type)) + "")) set_data_dev(t0, t0_value);

			if (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div0, t3);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if ((!current || dirty[0] & /*state*/ 1) && t4_value !== (t4_value = (/*state*/ ctx[0].lang_type == "php"
			? "PHP"
			: toTitleCase(/*state*/ ctx[0].lang_type)) + "")) set_data_dev(t4, t4_value);

			if (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(div1, t8);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if ((!current || dirty[0] & /*state*/ 1) && t14_value !== (t14_value = (/*state*/ ctx[0].preBlockShow ? "Hide" : "Show") + "")) set_data_dev(t14, t14_value);

			if (!current || dirty[0] & /*state*/ 1 && div4_class_value !== (div4_class_value = "" + ((/*state*/ ctx[0].preBlockShow ? '' : 'h-imp') + " pre-div"))) {
				attr_dev(div4, "class", div4_class_value);
			}

			if ((!current || dirty[0] & /*state*/ 1) && t26_value !== (t26_value = (/*state*/ ctx[0].postBlockShow ? "Hide" : "Show") + "")) set_data_dev(t26, t26_value);

			if (!current || dirty[0] & /*state*/ 1 && div9_class_value !== (div9_class_value = "post-div " + (/*state*/ ctx[0].postBlockShow ? '' : 'h-imp'))) {
				attr_dev(div9, "class", div9_class_value);
			}

			if (!/*isPreview*/ ctx[2]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_1(ctx);
					if_block2.c();
					if_block2.m(div17, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*state*/ ctx[0].lang_type == 'sql' || /*state*/ ctx[0].lang_type == 'mssql' || /*state*/ ctx[0].lang_type == "psql") {
				if (if_block3) {
					if_block3.p(ctx, dirty);

					if (dirty[0] & /*state*/ 1) {
						transition_in(if_block3, 1);
					}
				} else {
					if_block3 = create_if_block(ctx);
					if_block3.c();
					transition_in(if_block3, 1);
					if_block3.m(div38, t39);
				}
			} else if (if_block3) {
				group_outros();

				transition_out(if_block3, 1, 1, () => {
					if_block3 = null;
				});

				check_outros();
			}

			const dialog0_changes = {};

			if (dirty[2] & /*$$scope*/ 1048576) {
				dialog0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible && dirty[0] & /*state*/ 1) {
				updating_visible = true;
				dialog0_changes.visible = /*state*/ ctx[0].open;
				add_flush_callback(() => updating_visible = false);
			}

			dialog0.$set(dialog0_changes);

			if (!current || dirty[0] & /*state*/ 1 && input2_value_value !== (input2_value_value = /*state*/ ctx[0].is_graph)) {
				prop_dev(input2, "value", input2_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input2_data_attr_value !== (input2_data_attr_value = /*state*/ ctx[0].is_graph)) {
				attr_dev(input2, "data-attr", input2_data_attr_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input2_checked_value !== (input2_checked_value = /*state*/ ctx[0].is_graph)) {
				prop_dev(input2, "checked", input2_checked_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input3_value_value !== (input3_value_value = /*state*/ ctx[0].ignore_error)) {
				prop_dev(input3, "value", input3_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input3_checked_value !== (input3_checked_value = /*state*/ ctx[0].ignore_error)) {
				prop_dev(input3, "checked", input3_checked_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input4_value_value !== (input4_value_value = /*state*/ ctx[0].ignore_formatting)) {
				prop_dev(input4, "value", input4_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input4_checked_value !== (input4_checked_value = /*state*/ ctx[0].ignore_formatting)) {
				prop_dev(input4, "checked", input4_checked_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input5_value_value !== (input5_value_value = /*state*/ ctx[0].ignore_reset_db)) {
				prop_dev(input5, "value", input5_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input5_checked_value !== (input5_checked_value = /*state*/ ctx[0].ignore_reset_db)) {
				prop_dev(input5, "checked", input5_checked_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input6_value_value !== (input6_value_value = /*state*/ ctx[0].is_pre_tag)) {
				prop_dev(input6, "value", input6_value_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && input6_checked_value !== (input6_checked_value = /*state*/ ctx[0].is_pre_tag)) {
				prop_dev(input6, "checked", input6_checked_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && select_value_value !== (select_value_value = /*state*/ ctx[0].testcase_sensitive)) {
				select_option(select, /*state*/ ctx[0].testcase_sensitive);
			}

			if (!current || dirty[0] & /*state*/ 1 && textarea4_class_value !== (textarea4_class_value = /*state*/ ctx[0].lang_type == "sql" || /*state*/ ctx[0].lang_type == "psql"
			? "form-control width-md1 d-inline-block mr-md h-imp"
			: "form-control width-md1 d-inline-block mr-md")) {
				attr_dev(textarea4, "class", textarea4_class_value);
			}

			if (!current || dirty[0] & /*state*/ 1 && textarea5_class_value !== (textarea5_class_value = 'form-control ' + (/*state*/ ctx[0].lang_type == "sql" || /*state*/ ctx[0].lang_type == "psql"
			? "span9"
			: "width-md1") + ' d-inline-block ml-md')) {
				attr_dev(textarea5, "class", textarea5_class_value);
			}

			const button6_changes = {};

			if (dirty[2] & /*$$scope*/ 1048576) {
				button6_changes.$$scope = { dirty, ctx };
			}

			button6.$set(button6_changes);
			const dialog1_changes = {};

			if (dirty[0] & /*state, message*/ 3 | dirty[2] & /*$$scope*/ 1048576) {
				dialog1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible_1 && dirty[0] & /*state*/ 1) {
				updating_visible_1 = true;
				dialog1_changes.visible = /*state*/ ctx[0].remediationToggle;
				add_flush_callback(() => updating_visible_1 = false);
			}

			dialog1.$set(dialog1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block3);
			transition_in(dialog0.$$.fragment, local);
			transition_in(button6.$$.fragment, local);
			transition_in(dialog1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block3);
			transition_out(dialog0.$$.fragment, local);
			transition_out(button6.$$.fragment, local);
			transition_out(dialog1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div39);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			destroy_component(dialog0);
			destroy_component(button6);
			destroy_component(dialog1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function toTitleCase(str) {
	return str.charAt(0).toUpperCase() + str.slice(1);
}

/**
 * Function to get the string between two string.
 * @param data : Any string data.
 * @param str_1 : First start string.
 * @param str_2 : Second end string.
 */
function stringBetween(data, str_1, str_2) {
	let regEx = new RegExp("<" + str_1 + ">([\\s\\S]*?)</" + str_1 + ">", "gm");

	if (str_2) {
		regEx = new RegExp(str_1 + "([\\s\\S]*?)" + str_2, "gm");
	}

	let matchedStr = regEx.exec(data);

	if (matchedStr) {
		return matchedStr[1];
	} else {
		return null;
	}
}

/**
 * Function to get the attribute value from xml.
 * @param XML : XML.
 * @param attr : Attribute name.
 * @param tag : Tag name.
 */
function findAttribute(XML, attr, tag = "") {
	let regEx = new RegExp("<" + tag + ".*?" + attr + "=\"(\\w+)\".*?>", "gm");
	let matchedStr = regEx.exec(XML);

	if (matchedStr) {
		return matchedStr[1];
	} else {
		return null;
	}
}

/**
 * Function to get the selection line.
 * @param lineNo : Line number of the error.
 * @param section : Pre, Post or Editor section.
 */
function getSectionLine(lineNo, section) {
	if (lineNo <= section.pre) ; else if (lineNo <= section.pre + section.editor) {
		lineNo = lineNo - section.pre; //No need here.
		console.warn({ section: 'editor', lineNo });
	} else if (lineNo <= section.pre + section.editor + section.post) {
		lineNo = lineNo - (section.pre + section.editor);
	}

	return lineNo;
}

/**
 * Function to check the case insensitive.
 */
function checkCaseInsensitive() {
	let caseInsensitive = [];
	let nodes = document.querySelectorAll(".case_insensitive");

	for (let points of nodes) {
		caseInsensitive.push(points.checked ? 1 : 0);
	}

	return caseInsensitive.join(",");
}

/**
 * Function to check the special characters.
 */
function checkSpecialChar() {
	let specialChar = [];
	let node = document.querySelectorAll(".ignore_special_char");

	for (let point of node) {
		specialChar.push(point.checked ? 1 : 0);
	}

	return specialChar.join(",");
}

/**
 * Function to check the partial match.
 */
function checkMatchPartial() {
	let matchPartial = [];
	let match_node = document.querySelectorAll(".partial_match");

	for (let child of match_node) {
		matchPartial.push(child.checked ? 1 : 0);
	}

	return matchPartial.join(",");
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Eval', slots, []);
	let { toggleMode } = $$props;
	let { xml } = $$props;

	let { getChildXml = () => {
		
	} } = $$props;

	let { setInlineEditor } = $$props;
	let { editorState } = $$props;
	let location_origin = location.origin.replace('localhost', 'localhost:3000');
	let evalpro_url = location_origin + '/layout/themes/bootstrap4/svelte_items/evalPro/index.php';

	let all_databases = {
		'mssql': ["MSSQL"],
		'sql': [
			"740DB",
			"C170PRE",
			"C995HSTK",
			"C995PRE",
			"DBFUND",
			"GSA1",
			"c995",
			"myDBs",
			"ucDB",
			"RECRUIT"
		],
		'psql': ["gsa1", "mydbs", "postgresdb", "ucdb", 'postgres_db', "ucdb_db", "sandbox"]
	};

	let lang_type = [
		"c",
		"c#",
		"c++",
		"java",
		"javascript",
		"mssql",
		"node.js",
		"php",
		"psql",
		"python",
		"r",
		"ruby",
		"sql"
	].sort();

	let message = '';
	let isPreview = "";
	let aXml = "";
	let language = "";
	let windowHtml = "";
	let showPre = parseInt(findAttribute(xml, "showpre", "SMXML"));
	let showPost = parseInt(findAttribute(xml, "showpost", "SMXML"));
	let showEditor = parseInt(findAttribute(xml, "showeditor", "SMXML"));
	let qxml = "";
	let xmlArr = [];
	let defaultStartXml = '<SMXML type="24" name="evalpro" language="php">';
	let currentDB = 'myDBs';
	let lastTestCaseHtml = false;
	let editor;
	let preEditor;
	let postEditor;
	let marker = [];
	let preData = "";
	let postData = "";
	let langArr = [];
	let state = {};
	window.QXML = xml;

	let hdd = writable({
		open: false,
		xml: '',
		uxml: '',
		module: '',
		toggle: false,
		toggleMode: false,
		snackback: false,
		lang_type: 'php',
		xmlArr: [],
		remediationToggle: false,
		qxml: '',
		titleData: "",
		stemData: "",
		remediationData: "",
		perspective: "Right",
		partial_match: "1,1,1",
		ignore_special_char: "0,0,0",
		case_insensitive: "0,0,0",
		preShow: showPre || 0,
		postShow: showPost || 0,
		editorShow: showEditor || 2,
		enableLines: 0,
		databases: [],
		output: "",
		database_modal_open: false,
		database: "myDBs",
		preBlockShow: 0,
		postBlockShow: 0,
		is_graph: 0,
		ignore_error: 0,
		ignore_formatting: 0,
		ignore_reset_db: 0,
		is_pre_tag: 0
	});

	/**
 * To unsubscribe the store.
 */
	const unsubscribe = hdd.subscribe(items => {
		$$invalidate(0, state = items);
	});

	/**
 * Function call before render. Do all the necessory configuration before rendering.
*/
	onMount(() => {
		let smxml = xml.match(/<smxml(.*?)>/gim);
		let type = smxml.toString().match(/type="(.*?)"|type='(.*?)'/gim);
		type = type[0].replace(/type=|"/gim, '');
		$$invalidate(0, state.module = type, state);
		AH.select(AH.prevElm("#authoringLoadComponent", "br"), 'remove');
		let caseSensitive = xml.match(/case_sensitive='(.*?)'/gm);
		let specialChar = xml.match(/special_char='(.*?)'/gm);
		let partialMatch = xml.match(/partial_match='(.*?)'/gm);

		if (caseSensitive && specialChar && partialMatch) {
			$$invalidate(0, state.ignore_special_char = specialChar[0].split("=")[1].replace(/["']/g, ""), state);
			$$invalidate(0, state.case_insensitive = caseSensitive[0].split("=")[1].replace(/["']/g, ""), state);
			$$invalidate(0, state.partial_match = partialMatch[0].split("=")[1].replace(/["']/g, ""), state);
		}

		langArr = xml.match(/<SMXML[\s\S]*?<\/SMXML>/gim);

		if (langArr.length == 1) {
			language = langArr.toString().match(/language="(.*?)"/gim);
			language = language.toString().replace(/language=|"/gi, '');
			xmlArr[language] = xml;
			$$invalidate(0, state.lang_type = language, state);
			$$invalidate(0, state.xmlArr = xmlArr, state);
		} else {
			for (let i = 0; i < langArr.length; i++) {
				language = langArr[i].match(/language="(.*?)"/gim);
				language = language.toString().replace(/language=|"/gi, '');
				xmlArr[language] = langArr[i];
			}

			$$invalidate(0, state.xmlArr = xmlArr, state);
		}

		getChildXml(xmlArr[state.lang_type]); //important
		AH.select('#preview', 'hide');
		$$invalidate(0, state.xml = xml, state);
		setDefaultXML(state.xml);
		setTestCase();

		if (typeof CodeMirror == "function") {
			renderCodeMirror();
		} else {
			AH.ajax({
				type: "GET",
				url: itemUrl + "src/libs/codemirror.js",
				dataType: "script"
			}).then(data => {
				AH.addScript(data, "", { target: "body" });
				setTimeout(renderCodeMirror, 500);
			});
		}

		let delBtns = AH.selectAll(".caseDelBtn");

		delBtns.forEach(event => {
			event.removeEventListener("click", deleteCase);
			event.addEventListener("click", deleteCase);
		});

		AH.listen(document, 'click', '#answerCheck', () => {
			remediationMode();
		});

		AH.bind("#enable-line", "keyup", () => {
			$$invalidate(0, state.xml = generateXml(), state);
			getChildXml(state.xml);
		});

		AH.selectAll(".MuiIconButton-label-122", 'css', { display: "inline !important" });
	});

	/**
 * Function call before update the dom. If anything change this will be called before render.
*/
	beforeUpdate(async () => {
		if (toggleMode != state.toggleMode) {
			$$invalidate(0, state.toggleMode = toggleMode, state);
			qxml = generateXml(true);
			AH.select("#output", 'html', "");

			if (state.toggleMode == true) {
				//Test mode on
				renderPlayer();

				AH.select('#headerTitle', 'html', l.preview);
				AH.enableBsAll('[data-bs-toggle="tooltip"]', 'Tooltip', { container: 'body' });
				$$invalidate(0, state.qxml = qxml, state);
				$$invalidate(0, state.titleData = AH.select('#title').innerHTML, state);
				$$invalidate(0, state.stemData = AH.select('#stem').innerHTML, state);
				$$invalidate(0, state.remediationData = AH.select('#remediation').innerHTML, state);
				await tick();
				AH.insert(AH.select(AH.empty('#title'), 'hide'), '<div id="tilteShow">' + state.titleData + '</div>', 'afterend');
				AH.insert(AH.select(AH.empty('#stem'), 'hide'), '<div id="stemShow">' + get_ucsyntax(state.stemData) + '</div>', 'afterend');
				AH.insert(AH.select(AH.empty('#remediation'), 'hide'), '<div id="remediationShow">' + get_ucsyntax(state.remediationData) + '</div>', 'afterend');
				AH.selectAll('#externalInputs,#addTestCase', 'hide');
				AH.selectAll(".action_block", 'removeClass', 'd-flex');
				AH.selectAll(".action_block, .language_select_button, .database_select_button, .pre-div", 'hide');
				AH.selectAll(".selected_language", 'removeClass', 'hidden');
				const editableContent = AH.selectAll('[contenteditable="true"]');
				editableContent?.forEach(ele => ele.setAttribute('contenteditable', 'false'));

				// hide the pre and post block in case of preview
				addPreBlock(0);

				addPostBlock(0);

				state.stemData.match(/<uc:syntax/gm) || state.remediationData.match(/<uc:syntax/gm)
				? prettyPrint()
				: '';

				$$invalidate(2, isPreview = 1);
				disableLine();
				showPre = parseInt(findAttribute(xml, "showpre", "SMXML"));
				showPost = parseInt(findAttribute(xml, "showpost", "SMXML"));
				showEditor = parseInt(findAttribute(xml, "showeditor", "SMXML"));

				if (showPre < 2) {
					preEditor.setOption("readOnly", true);
					AH.select(".pre-div .CodeMirror-scroll").className = "CodeMirror-scroll bg-light";
				} else {
					preEditor.setOption("readOnly", false);
					AH.select(".pre-div .CodeMirror-scroll").className = "CodeMirror-scroll";
				}

				if (showPost < 2) {
					postEditor.setOption("readOnly", true);
					AH.select(".pre-div .CodeMirror-scroll").className = "CodeMirror-scroll bg-light";
				} else {
					postEditor.setOption("readOnly", false); // $(".pre-div .CodeMirror-scroll")[1].className = "CodeMirror-scroll bg-light"
					AH.select(".pre-div .CodeMirror-scroll").className = "CodeMirror-scroll";
				} // $(".pre-div .CodeMirror-scroll")[1].className = "CodeMirror-scroll"

				if (showEditor < 2) {
					editor.setOption("readOnly", true);
					AH.select(".replEditor .CodeMirror-scroll").className = "CodeMirror-scroll bg-light";
				} else {
					editor.setOption("readOnly", false);
					AH.select(".replEditor .CodeMirror-scroll").className = "CodeMirror-scroll";
				}

				AH.select(".replEditor", 'css', {
					"minHeight": "125px",
					"height": "551px",
					"display": "block"
				});
			} else {
				//Authoring Mode.
				AH.select('#headerTitle', 'html', l.authoring);

				AH.find('#authoringArea', 'form', { action: 'remove' });
				AH.insert('#authoringArea', windowHtml, 'beforeend');
				AH.find(document, '#tilteShow, #stemShow, #remediationShow, smxml', { action: 'remove' });
				AH.select('#title', 'html', state.titleData);
				AH.select('#stem', 'html', state.stemData);
				AH.select('#remediation', 'html', state.remediationData);
				AH.selectAll('#title,#stem,#remediation,#externalInputs,#addTestCase', 'show');
				AH.selectAll(".action_block", 'addClass', 'd-flex');
				AH.selectAll('.action_block', 'show');
				AH.selectAll(".language_select_button,.database_select_button", 'show');
				AH.selectAll(".selected_language", 'addClass', 'hidden');
				unRenderPlayer();
				$$invalidate(2, isPreview = 0);

				state.module == "24"
				? AH.select('#selectLanguage', 'show')
				: '';

				if (editor) {
					//re-rendering codeMirror
					editor.toTextArea();

					preEditor.toTextArea();
					postEditor.toTextArea();
					let privXML = stringBetween(xml, "editor");
					renderCodeMirror();
					editor.setValue(privXML.trim());
				}

				const editableContent = AH.selectAll('[contenteditable="false"]');
				editableContent?.forEach(ele => ele.setAttribute('contenteditable', 'true'));
				setInlineEditor("#title");
				setInlineEditor("#stem");
				setInlineEditor("#remediation");
			}
		}

		showHideInputBlock(state.lang_type);

		if (state.toggleMode == false) {
			// Update the pre, editor, post block 
			adjustEditorBlockUI();
		}
	});

	/**
 * Function to toggle the DB. If the lang is other than sql, psql and mssql then it will hide the database option.
 * @param val : Boolean value to show and hide the database option.
 */
	function toggleDB(val) {
		$$invalidate(19, editorState.db_changed = val, editorState);
	}

	/**
 * Function to add the pre code block.
 * @param isPreBlockShow : Boolean value to show and hide the pre block.
 */
	function addPreBlock(isPreBlockShow) {
		$$invalidate(
			0,
			state.preBlockShow = isPreBlockShow > -1
			? isPreBlockShow
			: !state.preBlockShow,
			state
		);

		AH.selectAll(".pre-div", 'css', {
			"minHeight": "90px",
			"height": "100px",
			"display": "block"
		});

		// Refresh the code mirror in case of show the preEditor area
		if (!state.preBlockShow || isPreBlockShow) {
			preEditor.setSize('100%', '100%');

			var show = setInterval(
				function () {
					preEditor.refresh();
				},
				10
			);

			setTimeout(
				() => {
					clearInterval(show);
				},
				100
			);
		}
	}

	/**
 * Function to add the post code block.
 * @param isPostBlockShow : Boolean value to show and hide the post block.
 */
	function addPostBlock(isPostBlockShow) {
		$$invalidate(
			0,
			state.postBlockShow = isPostBlockShow > -1
			? isPostBlockShow
			: !state.postBlockShow,
			state
		);

		AH.selectAll(".post-div", 'css', {
			"minHeight": "90px",
			"height": "100px",
			"display": "block"
		});

		// Refresh the code mirror in case of show the preEditor area.
		if (!state.postBlockShow || isPostBlockShow) {
			postEditor.setSize('100%', '100%');

			var show = setInterval(
				function () {
					postEditor.refresh();
				},
				10
			);

			setTimeout(
				() => {
					clearInterval(show);
				},
				100
			);
		}
	}

	/**
 * Change to open the language dialog.
 */
	function handleLanguageModalOpen() {
		$$invalidate(0, state.open = !state.open, state);
	}

	/**
 * Function to show and hide the user input block.
 * @param lang : If the language is psql, sql or mssql then no need to show it.
 */
	function showHideInputBlock(lang) {
		if (lang == "sql" || lang == "psql" || lang == 'mssql') {
			AH.select(AH.parent("#input"), 'hide');
			AH.select("#output", 'css', { height: '551px' });
		} else {
			AH.select(AH.parent("#input"), 'show');
			AH.select("#output", 'css', { height: '425px' });
		}
	}

	/**
 * Change to language change
 * @param lang : Language from dropdown.
 */
	function handleLanguageSelection(lang) {
		$$invalidate(0, state.open = !state.open, state);
		$$invalidate(0, state.databases = all_databases[lang], state);

		//start @sneh:added because the symbole like ++ were executed not been treated as string.
		RegExp.escape = function (symbol) {
			return symbol.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
		};

		let term_lang = new RegExp(RegExp.escape(state.lang_type), "i");
		showHideInputBlock(lang);

		if (state.xmlArr[lang]) {
			$$invalidate(0, state.xml = state.xmlArr[lang], state);
			$$invalidate(0, state.lang_type = lang, state);
			editor.setOption("mode", "text/x-" + term_lang);
			windowHtml = state.xmlArr[lang].replace(/language="[\s\S]*?" +/g, 'language="' + lang + '"');
			getChildXml(windowHtml);
			parseXML(windowHtml);
			setDefaultXML();
			setTestCase();
			AH.select("#output", 'html', "");
		} else {
			let xml_group = Object.keys(state.xmlArr);
			let newXML = state.xmlArr[xml_group[xml_group.length - 1]].replace(/language="[\s\S]*?" +/i, 'language="' + lang + '" ');
			$$invalidate(0, state.xml = newXML, state);
			$$invalidate(0, state.lang_type = lang, state);
			editor.setOption("mode", "text/x-" + state.lang_type);
			preEditor.setOption("mode", "text/x-" + state.lang_type);
			postEditor.setOption("mode", "text/x-" + state.lang_type);
			parseXML(newXML);
			setDefaultXML();
			setTestCase();
			windowHtml = newXML;
			getChildXml(windowHtml);
		}
	}

	/**
 * Function to show and hide the database dialog box.
 */
	function handleDatabaseModalOpen() {
		$$invalidate(0, state.database_modal_open = !state.database_modal_open, state);
	}

	/**
 * Function to handle the database selection.
 * @param database : Database selected from dropdown.
 */
	function handleDatabaseItem(database) {
		$$invalidate(0, state.database_modal_open = !state.database_modal_open, state);
		$$invalidate(0, state.database = database, state);
		currentDB = database;
		setDefaultXML();
	}

	/**
 * Function to adjust the Editor Block.
 */
	function adjustEditorBlockUI() {
		let preBlockHeight = 0;
		let postBlockHeight = 0;

		if (preData && preData.trim().length) {
			preBlockHeight = 141;

			AH.selectAll(".pre-div", 'css', {
				"minHeight": "80px",
				"height": preBlockHeight + "px",
				"display": "block"
			});
		}

		if (postData && postData.trim().length) {
			postBlockHeight = 141;

			AH.selectAll(".post-div", 'css', {
				"minHeight": "80px",
				"height": postBlockHeight + "px",
				"display": "block"
			});
		}

		let editorBlockHeight = 427 - (preBlockHeight + postBlockHeight);

		AH.selectAll(".replEditor", 'css', {
			"minHeight": "60px",
			"height": editorBlockHeight + "px",
			"display": "block"
		});
	}

	/**
 * Function to show the output block.
 */
	function showOutputData() {
		let raw_btn_val = AH.select("#raw_btn").value;

		if (raw_btn_val == "raw") {
			AH.select('#output').innerHTML = '<textarea class="w-100 border-0" style="height:480px;">' + state.output + '</textarea>';
			return 1;
		}

		if (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql' || state.lang_type == 'c++') {
			AH.select('#output').innerHTML = '<pre>' + state.output + '</pre>';
		} else {
			AH.select('#output').innerHTML = state.output;
		}
	}

	/**
 * Function to handle the enable disable the line.
 */
	function disableLine() {
		let mode = {},
			previousCode,
			$usedLine,
			//lineEnableNo,
			language,
			disableline;

		try {
			previousCode = editor.getValue();
			$usedLine = editor.lineCount();

			//lineEnableNo = enableline;
			language = state.lang_type;

			disableline = AH.select("#enable-line").value;
		} catch(error) {
			console.log(error);
		}

		if (typeof mode.review == "undefined") {
			mode.review = 0;
		}

		if (( mode.review || 1) && parseInt(disableline)) {
			let $lineEnable = disableline;

			if ($lineEnable) {
				$lineEnable = $lineEnable.split(",");

				$lineEnable.sort(function (a, b) {
					return a - b;
				});

				let $line = [];

				for (let j = 0; j < $lineEnable.length; j++) {
					if (!$line[j]) {
						$line[j] = [];
					}

					if (j == 0) {
						$line[j][0] = j;
						$line[j][1] = $lineEnable[j];
					} else {
						$line[j][0] = $line[j - 1][1];
						$line[j][1] = $lineEnable[j];
					}
				}

				let $i = 0;

				for ($i = 0; $i < $lineEnable.length; $i++) {
					for (let $k = $line[$i][0]; $k <= $line[$i][1] - 2; $k++) {
						$k = parseInt($k);
						editor.addLineClass($k, 'wrap', 'bg-light');
					}

					marker.push(editor.markText({ line: $line[$i][0], ch: 0 }, { line: $line[$i][1] - 2 }, {
						inclusiveRight: true,
						inclusiveLeft: true,
						readOnly: true
					}));
				}

				for (let $l = $line[$i - 1][1]; $l < $usedLine; $l++) {
					$l = parseInt($l);
					editor.addLineClass($l, 'wrap', 'bg-light');
				}

				// hide all bottom codes after enable line
				if (language == 'python' || disableline == 1) {
					editor.markText({ line: $line[$i - 1][1], ch: 0 }, { line: $usedLine }, {
						inclusiveRight: true,
						inclusiveLeft: true,
						collapsed: true
					});

					editor.markText({ line: $line[$i - 1][1], ch: 0 }, { line: $line[$i - 1][1] + $usedLine }, {
						inclusiveRight: true,
						inclusiveLeft: true,
						readOnly: true
					});
				}

				if (language != 'python') {
					editor.markText({ line: parseInt($line[$i - 1][1]), ch: 0 }, { line: $usedLine }, {
						inclusiveRight: true,
						inclusiveLeft: true,
						collapsed: true
					});

					editor.markText({ line: $line[$i - 1][1], ch: 0 }, { line: $line[$i - 1][1] + $usedLine }, {
						inclusiveRight: true,
						inclusiveLeft: true,
						readOnly: true
					});
				}
			}
		}
	}

	/**
 * Function to render the code mirror.
 */
	function renderCodeMirror() {
		createEditor();
		setDefaultXML();
		getChildXml(generateXml());

		if (document.getElementById("aXml")) {
			let xmlEditor = CodeMirror.fromTextArea(document.getElementById("aXml"), {
				lineNumbers: false,
				mode: "application/xml",
				autoCloseBrackets: true,
				lineWrapping: true,
				matchBrackets: true
			});
		}

		editor.setOption("extraKeys", {
			//Changing Tabs into 4 spaces 
			Tab(command) {
				let spaces = Array(command.getOption("indentUnit") + 1).join(" ");
				command.replaceSelection(spaces);
			},
			F11(command) {
				command.setOption("fullScreen", !command.getOption("fullScreen"));
			},
			Esc(command) {
				if (command.getOption("fullScreen")) command.setOption("fullScreen", false);
			}
		});

		AH.bind(".CodeMirror-linenumber", 'click', function (event) {
			if (AH.prevElm(event.target, ".dot")) {
				AH.prevElm(event.target, ".dot").remove();
			} else {
				AH.insert(event.target, '<div class="dot" style="position:absolute; z-index: 9999;width: 7px; height: 7px; border-radius: 50%; top: 8px; background-color: red;"></div>', 'beforebegin');
			}
		});
	}

	/**
 * Function to reset the database when reset button clicked.
 */
	function resetDB() {
		AH.select("#evalProRunCode", 'attr', { disabled: "disabled" });
		AH.select("#output").innerHTML = '<div class="EvalbgBlue"><div class="Evalloader"><span>{</span><span>}</span></div></div>';

		AH.ajax({
			url: themeUrl + "svelte_items/evalPro/index.php",
			type: 'POST',
			data: {
				'ajax': 1,
				'in_editor': 0,
				'user_guid': window.user_guid,
				'db_name': currentDB,
				'language': findAttribute(xml, 'language'),
				'resetDB': state.lang_type == 'mssql' ? 2 : 1
			}
		}).then(data => {
			AH.select('#output', 'html', "Database reset complete!");
			AH.select("#evalProRunCode", 'removeAttr', "disabled");
		}).catch((rqst, err) => {
			AH.select("#output", 'html', "Database reset complete!");
			AH.select("#evalProRunCode", 'removeAttr', "disabled");
		});
	}

	/**
 * Function to create the editor.
 */
	function createEditor() {
		let params_config = {
			lineNumbers: true,
			mode: 'text/x-' + state.lang_type,
			styleActiveLine: true,
			autoCloseBrackets: true,
			lineWrapping: true,
			scrollbarStyle: "simple",
			matchBrackets: true,
			tabSize: 2,
			gutters: ["CodeMirror-linenumbers", "breakpoints"]
		};

		preEditor = CodeMirror.fromTextArea(document.getElementById("pre-editor"), params_config);
		editor = CodeMirror.fromTextArea(document.getElementById("repl-editor"), params_config);
		postEditor = CodeMirror.fromTextArea(document.getElementById("post-editor"), params_config);
		parseXML();

		editor.on("change", function (event, line) {
			if (!isPreview) {
				let xml = generateXml(true);
				getChildXml(xml);
			} else {
				saveEvalProAnswer();
			}

			checkLine();
		});

		preEditor.on("change", function () {
			if (!isPreview) {
				let xml = generateXml(true);
				getChildXml(xml);
			} else {
				saveEvalProAnswer();
			}
		});

		postEditor.on("change", function () {
			if (!isPreview) {
				let xml = generateXml(true);
				getChildXml(xml);
			} else {
				saveEvalProAnswer();
			}
		});
	}

	/**
 * Function to check the answer when check answer button clicked.
 */
	function remediationMode() {
		$$invalidate(0, state.remediationToggle = true, state);
		answerCheckEvalpro();
	}

	/**
 * Function to check the line for marker.
 * @param line : Line number.
 */
	function checkLine(line) {
		marker.forEach(marker => {
			marker.clear();
		});
	}

	/**
 * Function to check the evalpro answer when check answer button clicked.
 */
	function answerCheckEvalpro() {
		setDefaultXML('answer_check');
		let uxml = generateXml(true);

		AH.ajax({
			url: evalpro_url,
			data: {
				uxml,
				"ajax": 1,
				'in_editor': 1,
				'user_guid': window.user_guid
			}
		}).then(response => {
			response = JSON.parse(response);

			if (response['ajaxRes'] == 1) {
				AH.select('#remediationModel', 'html', response['html']);
				$$invalidate(1, message = "Passed");

				if (response['answer'] == "0") {
					$$invalidate(1, message = "Failed");
				}

				$$invalidate(0, state.snackback = true, state);
			}
		});
	}

	/**
 * Function to unRenderPlayer.
 */
	function unRenderPlayer() {
		AH.empty('#authoringDiv player');

		AH.find('#authoringDiv', 'player', {
			action: 'removeClass',
			actionData: 'hidecontent'
		});

		AH.selectAll('#editor img').forEach(_elm => {
			if (!_elm.getAttribute('header-logo') && !_elm.getAttribute('src').match(/\/\/s3.amazonaws.com\/jigyaasa_content_static/gm)) {
				_elm.setAttribute('src', _elm.getAttribute('src'));
			}
		});
	}

	/**
 * Function to render the player.
 */
	function renderPlayer() {
		AH.empty('#authoringDiv player');
		tag_player(AH.select('#authoringDiv'));

		AH.find('#authoringDiv', 'player', {
			action: 'addClass',
			actionData: 'hidecontent'
		});

		AH.selectAll('#editor img').forEach(_elm => {
			if (!_elm.getAttribute('header-logo') && !_elm.getAttribute('src').match(/\/\/s3.amazonaws.com\/jigyaasa_content_static/gm)) {
				_elm.setAttribute('src', '//s3.amazonaws.com/jigyaasa_content_static/' + _elm.getAttribute('src'));
			}
		});
	}

	/**
 * Function to check the output of the code when run button clicked.
 * @param event : Event
 * @param raw : Raw (not in use need to delete this)
 */
	function runCode(event, raw = false) {
		AH.select("#output", 'html', '<div class="EvalbgBlue"><div class="Evalloader"><span>{</span><span>}</span></div></div>');
		event.target.disabled = true;
		let code = preEditor.getValue();
		code += "\n" + editor.getValue();

		if (state.lang_type != 'sql' || state.lang_type != 'mssql' || state.lang_type != 'psql') {
			code += "\n";
			code += postEditor.getValue();
		}

		AH.ajax({
			type: "POST",
			url: evalpro_url,
			data: {
				code,
				repltype: state.lang_type,
				stdin: AH.select("#sampleInput").value,
				'run_code': 1,
				'user_guid': window.user_guid,
				'db_name': currentDB ? currentDB : "myDBs",
				'is_graph': state.is_graph,
				'ignore_error': state.ignore_error,
				'ignore_formatting': state.ignore_formatting,
				'ignore_reset_db': state.ignore_reset_db,
				'is_pre_tag': state.is_pre_tag
			},
			dataType: 'json'
		}).then(res => {
			res = typeof res != "object" ? JSON.parse(res) : res;

			AH.select('#output', 'css', {
				"color": "black",
				"background": "transparent"
			});

			event.target.disabled = false;

			if (res.status_message == "Successful") {
				if (res.output) {
					$$invalidate(0, state.output = res.output, state);
					let is_raw_data = AH.select("#raw_btn").value;

					if (is_raw_data == "raw") {
						let oup = res.output;
						AH.select('#output', 'html', '<textarea style="height: 480px;" class="w-100 border-0">' + oup + '</textarea>');
						return 1;
					}

					if (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql' || state.lang_type == 'c++' || state.is_pre_tag == 1) {
						let oup = res.output;
						AH.select('#output', 'html', '<pre>' + oup + '</pre>');
					} else {
						if (res.output.includes("image_data:")) {
							let image_url = res.output.split("image_data:");
							AH.select("#output", 'html', '<img src="data:image/jpg;base64, ' + image_url[1] + '" />');
						} else if (state.lang_type == "r" || state.is_graph) {
							AH.select("#output", 'html', "<pre>" + res.output + "</pre>");
						} else {
							AH.select('#output', 'html', res.output);
						}
					}

					if (isPreview && (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql')) {
						let lang_name = state.lang_type;
						let uXML = AH.select("#special_module_user_xml").value;
						let id_date = new Date();
						uXML = uXML.replace("</SMXML>", '<backup id="' + lang_name + id_date.getTime() + '">' + code.trim() + '</backup></SMXML>');

						if ((/\<output\>/g).test(uXML)) {
							uXML = uXML.replace(/\<output\>[\s\S]*?\<\/output\>/g, '<output>' + AH.select('#output').innerHTML + '</output>');
						} else {
							uXML = uXML.replace('</enableline>', '</enableline><output>' + AH.select('#output').innerHTML + '</output>');
						}

						AH.select("#special_module_user_xml").val(uXML);
					}
				} else {
					AH.select('#output', 'html', "Your code didn't print anything.");
				}
			} else {
				// We need to focus on this for error handling and formating the message
				AH.select('#output', 'html', "<pre class='compilerPre'>" + parseLineNumber(res.stderr) + "</pre>");

				AH.select('#output', 'css', {
					"color": "#EB3941",
					"background": "#FFF0F0"
				});
			}
		});
	}

	/**
 * Function to parse the line number.
 * @param errorMsg : Error msg get after code run.
 */
	function parseLineNumber(errorMsg = "") {
		let section = {
			pre: preEditor.getValue() != "" ? preEditor.lineCount() : 0,
			editor: editor.getValue() != "" ? editor.lineCount() : 0,
			post: postEditor.getValue() != "" ? postEditor.lineCount() : 0
		};

		let showpre = state.preShow;
		let showpost = state.postShow;
		let showeditor = state.editorShow;

		switch (state.lang_type) {
			case 'sql':
				let line = errorMsg.split('at line');
				if (line[1]) {
					let lineNo = line[1].trim().substring(0, 2);
					lineNo = lineNo.replace(":", "");

					if (!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && lineNo <= section.pre || showpost && lineNo >= section.pre + section.editor || showeditor && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && showeditor && showpost) {
						lineNo = getSectionLine(+lineNo, section);

						if (isNaN(lineNo)) {
							errorMsg = `${line[0]}${line[1].substr(2, line[1].length)}`;
						} else {
							errorMsg = `${line[0]}: ${lineNo} ${line[1].substr(2, line[1].length)}`;
						}
					} else {
						errorMsg = "Unable to execute test cases, there are issues with your code. Please fix.";
					}
				}
				break;
			case 'java':
				{
					let line = errorMsg.split('Solution.java:');

					if (line[1]) {
						let lineNo = line[1].substr(0, 2);
						lineNo = getSectionLine(lineNo, section);
						lineNo = isNaN(lineNo) ? lineNo.replace(":", "") : lineNo;

						if (!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && lineNo <= section.pre || showpost && lineNo >= section.pre + section.editor || showeditor && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && showeditor && showpost) {
							errorMsg = errorMsg.replace(/ Line \d*/, ` Line ${lineNo}`);
						} else {
							errorMsg = "Unable to execute test cases, there are issues with your code. Please fix.";
						}
					}
				}
				break;
			case 'python':
				{
					// In case of exception error <module> tag is coming so remove this from code
					let is_module = errorMsg.indexOf("<module>");

					let is_multiple_line = errorMsg.indexOf("line ", is_module);

					if (is_module > -1 && is_multiple_line > -1) {
						errorMsg = errorMsg.substring(is_module + ("<module>").length);
					}

					let line = errorMsg.split('line');

					if (line[1]) {
						line[1] = line[1].trim();
						let lineNo = line[1].substr(0, 2);
						lineNo = lineNo.replace(/,/g, '');

						if (!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && lineNo <= section.pre || showpost && lineNo >= section.pre + section.editor || showeditor && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && showeditor && showpost) {
							lineNo = getSectionLine(lineNo, section);
							errorMsg = errorMsg.replace(/ line \d*/, ` line ${lineNo}`);
						} else {
							errorMsg = "Unable to execute test cases, there are issues with your code. Please fix.";
						}
					}
				}
				break;
			case 'php':
				{
					let line = errorMsg.split('in /home/ucertify');

					if (line[1]) {
						let lineNo = line[1].split("line");
						lineNo = getSectionLine(+lineNo[1], section);

						if (errorMsg.indexOf("unexpected end of file") > -1) {
							errorMsg = errorMsg.split("on line");
							errorMsg = errorMsg[0];
						} else if (!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && lineNo <= section.pre || showpost && lineNo >= section.pre + section.editor || showeditor && lineNo > section.pre && lineNo <= section.pre + section.editor || showpre && showeditor && showpost) {
							errorMsg = line[0] + "on line " + lineNo;
						} else {
							errorMsg = "Unable to execute test cases, there are issues with your code. Please fix.";
						}
					}
				}
				break;
		}

		return errorMsg;
	}

	/**
 * Function to parse the XML.
 * @param xml : XML.
 */
	function parseXML(xml) {
		xml = xml ? xml : window.QXML;

		currentDB = findAttribute(xml, "db_name", "SMXML")
		? findAttribute(xml, "db_name", "SMXML")
		: "myDBs";

		$$invalidate(0, state.database = currentDB, state);

		if (findAttribute(xml, "language") == 'sql' || findAttribute(xml, "language") == 'mssql' || findAttribute(xml, "language") == 'psql') {
			window.onbeforeunload = function (event) {
				resetDB();
			};
		}

		let editorData = stringBetween(xml, "editor");
		editor.setValue(editorData ? editorData.trim() : "");
		preData = stringBetween(xml, "pre");
		preEditor.setValue(preData ? preData.trim() : "");
		postData = stringBetween(xml, "post");
		postEditor.setValue(postData ? postData.trim() : "");
		showPre = parseInt(findAttribute(xml, "showpre", "SMXML"));
		showPost = parseInt(findAttribute(xml, "showpost", "SMXML"));

		// Need to verify the content guid for the showeditor is not 2
		showEditor = 2; //parseInt(findAttribute(xml, "showeditor", "SMXML"));

		let is_graph = findAttribute(xml, "is_graph", "SMXML")
		? parseInt(findAttribute(xml, "is_graph", "SMXML"))
		: 0;

		let ignore_error = findAttribute(xml, "ignore_error", "SMXML")
		? parseInt(findAttribute(xml, "ignore_error", "SMXML"))
		: 0;

		let ignore_formatting = findAttribute(xml, "ignore_formatting", "SMXML")
		? parseInt(findAttribute(xml, "ignore_formatting", "SMXML"))
		: 0;

		let ignore_reset_db = findAttribute(xml, "ignore_reset_db", "SMXML")
		? parseInt(findAttribute(xml, "ignore_reset_db", "SMXML"))
		: 0;

		let is_pre_tag = findAttribute(xml, "is_pre_tag", "SMXML")
		? parseInt(findAttribute(xml, "is_pre_tag", "SMXML"))
		: 0;

		$$invalidate(0, state.preShow = showPre ? showPre : 0, state);
		$$invalidate(0, state.postShow = showPost ? showPost : 0, state);
		$$invalidate(0, state.editorShow = showEditor ? showEditor : 0, state);
		$$invalidate(0, state.is_graph = is_graph, state);
		$$invalidate(0, state.ignore_error = ignore_error, state);
		$$invalidate(0, state.ignore_formatting = ignore_formatting, state);
		$$invalidate(0, state.ignore_reset_db = ignore_reset_db, state);
		$$invalidate(0, state.is_pre_tag = is_pre_tag, state);
		$$invalidate(0, state.enableLines = stringBetween(xml, "enableline"), state);
		AH.select("#enable-line", 'value', state.enableLines || 0);

		if ((state.lang_type == "sql" || state.lang_type == "psql") && currentDB == "myDBs") {
			toggleDB(false);
		} else {
			toggleDB(true);
		}

		if (preData && preData.trim().length) {
			addPreBlock(1);
		}

		if (postData && postData.trim().length) {
			addPostBlock(1);
		}

		return editorData;
	}

	/**
 * Function to set Default XML.
 * @param type : from where this is being called.
 */
	function setDefaultXML(type) {
		let preAttr = ' showpre="' + state.preShow + '"';
		let postAttr = 'showpost="' + state.postShow + '"';
		let editorAttr = 'showeditor="' + state.editorShow + '"';
		let currDB = document.querySelector("#select_db");

		if (currDB && currDB.value != currentDB) {
			toggleDB(true);
			currentDB = currDB.value ? currDB.value : currentDB;
		}

		let showDb = '';

		if (state.lang_type == 'sql' || state.lang_type == 'psql' || state.lang_type == 'mssql') {
			showDb = 'db_name="' + currentDB + '"';
			$$invalidate(0, state.databases = all_databases[state.lang_type], state);
		}

		defaultStartXml = "<SMXML type=\"" + state.module + "\" name=\"evalpro\" case_sensitive=\'" + state.case_insensitive + "\' special_char=\'" + state.ignore_special_char + "\' partial_match=\'" + state.partial_match + "\' language=\"" + state.lang_type + "\"" + preAttr + " " + postAttr + " " + editorAttr + " " + showDb + " is_graph=\"" + state.is_graph + "\" ignore_error=\"" + state.ignore_error + "\" ignore_formatting=\"" + state.ignore_formatting + "\" ignore_reset_db=\"" + state.ignore_reset_db + "\" is_pre_tag=\"" + state.is_pre_tag + "\">";

		if (editor && type != "answer_check") {
			generateXml();
		}
	}

	/**
 * Function to generate the xml after any update.
 * @param isFormatted : Is formated or not.
 */
	function generateXml(isFormatted) {
		aXml = "";
		aXml = defaultStartXml + getCodeXml() + testCasesXml() + enableLineXml() + "</SMXML>";

		if (isFormatted) {
			return aXml;
		}

		getChildXml(aXml);
		return aXml;
	}

	/**
 * Function to save the evalpro answer.
 */
	function saveEvalProAnswer() {
		let uXml = generateXml(1);
		AH.select("#special_module_user_xml", 'value', uXml);
	}

	/**
 * Function to get the code xml.
 */
	function getCodeXml() {
		let codeXml = "";
		let pre_code = preEditor ? preEditor.getValue() : "";
		let post_code = postEditor ? postEditor.getValue() : "";

		if (editor) {
			codeXml = editor.getValue();
		}

		return "<pre>" + pre_code + "\n</pre><editor>" + codeXml + "</editor><post>\n" + post_code + "</post>";
	}

	/**
 * Function to set the testcases.
 */
	function setTestCase() {
		let testMatch = stringBetween(state.xml, "testcases");
		let testcaseString = testMatch.replace(/<\/case>(\n)*(\s)*<case>/g, ";").replace(/<\/case>|<case>/g, "");
		AH.select("#id1", 'value', testcaseString);
		let sample = stringBetween(state.xml, "case");

		if (sample) {
			sample = sample.replace(/\|.*/g, "");

			let inpValue = (/\{|\[|\(/g).test(sample)
			? sample.replace(/\|.+/g, "")
			: sample.replace(/\|.+/g, "").replace(/\,/g, "\n");

			if (inpValue.indexOf('__sep__')) {
				inpValue = inpValue.replace(/__sep__/g, "\n");
			}

			AH.select("#sampleInput", 'value', inpValue);
			let caseStacks = testcaseString.split(";");
			AH.select("#caseContainer", 'html', "");

			caseStacks.forEach((event, item) => {
				let caseArr = event.split("|");
				addMore(caseArr[0], caseArr[1], item);
			});
		}
	}

	/**
 * Function to cancel the testcase modal.
 */
	function cancelTestCase() {
		if (lastTestCaseHtml) {
			AH.select('#caseContainer', 'html', lastTestCaseHtml);
			bindBtns();
		}
	}

	/**
 * Function to open the testcase modal.
 */
	function onOpenTestCase() {
		lastTestCaseHtml = document.getElementById('caseContainer').innerHTML;
	}

	/**
 * Function to bind the buttons.
 */
	function bindBtns() {
		let delBtns = document.querySelectorAll(".caseDelBtn");

		delBtns.forEach(event => {
			event.removeEventListener("click", deleteCase);
			event.addEventListener("click", deleteCase);
		});

		let part_match = document.querySelectorAll(".partial_match .case_insensitive .ignore_special_char");

		part_match.forEach((event, index) => {
			event.removeEventListener("click", setDefaultXML);
			event.addEventListener("click", setDefaultXML);
		});
	}

	/**
 * Function to add more testcase when + button clicked from Add Testcase modal.
 * @param inp : Input.
 * @param oup : Output.
 * @param i : optional parameter.
 */
	function addMore(inp = "", oup = "", i) {
		let caseStack = document.createElement("div"),
			isSql = state.lang_type == "sql" || state.lang_type == "psql"
			? "h-imp"
			: "";

		caseStack.className = 'caseStack m-sm';
		inp = typeof inp == 'object' ? "" : inp;
		let index = AH.select("#caseContainer").children.length;
		let case_insensitive = state.case_insensitive;
		case_insensitive = case_insensitive.split(",");
		let case_insensitive_checked = case_insensitive[i] == 1 ? 'checked="checked"' : '';
		let ignore_special_char = state.ignore_special_char;
		ignore_special_char = ignore_special_char.split(",");
		let ignore_special_char_checked = ignore_special_char[i] == 1 ? 'checked="checked"' : '';
		let partial_match = state.partial_match;
		partial_match = partial_match.split(",");
		let partial_match_checked = partial_match[i] == 1 ? 'checked="checked"' : '';

		caseStack.innerHTML = `<div class="w-100 p-3 mt-2 mb-2" style="background: #f1f1f1"><div class="w-100"><h5 class="float-left p-1" style="width: 90%"><lable class="bage mr-4 test_case_label">${l.testcase + (index + 1)}</lable><label class="container_eval mr-4">${l.case_insensitive}<input class="case_insensitive" type="checkbox" value="${state.case_insensitive}" ${case_insensitive_checked}><span class="checkmark_eval"></span></label><label class="container_eval mr-4">${l.ignore_special_char}<input class="ignore_special_char" type="checkbox" value="${state.ignore_special_char}" ${ignore_special_char_checked}><span class="checkmark_eval"></span></label><label class="container_eval">${l.partial_match}<input class="partial_match" type="checkbox" value="${state.partial_match}" ${partial_match_checked}><span class="checkmark_eval"></span></label></h5><span tabIndex="0" class="float-right p-2 icomoon-new-24px-delete-1 s5 pointer caseDelBtn"></span></div><textarea class="form-control d-inline-block mr-md ${isSql}" style="width: 48%;height: 100px;" placeholder="${l.input_seperated_comma}">${inp}</textarea>
            <textarea class="form-control d-inline-block ml-md" style="height: 100px;width:${state.lang_type == "sql" || state.lang_type == "psql" || state.lang_type == "mssql"
		? "98%"
		: "48%"}" placeholder="${l.output}">${oup}</textarea></div>`;

		document.querySelector("#caseContainer").appendChild(caseStack);
		bindBtns();
	}

	/**
 * Function to get the value of is_graph, ignore_error, ignore_formatting, is_pre_tag
*/
	function getSettings() {
		let is_graph = AH.select('.is_graph').checked ? 1 : 0;
		let ignore_error = AH.select('.ignore_error').checked ? 1 : 0;
		let ignore_formatting = AH.select('.ignore_formatting').checked ? 1 : 0;
		let ignore_reset_db = AH.select('.ignore_reset_db').checked ? 1 : 0;
		let is_pre_tag = AH.select('.is_pre_tag').checked ? 1 : 0;

		return {
			is_graph,
			ignore_error,
			ignore_formatting,
			ignore_reset_db,
			is_pre_tag
		};
	}

	/**
 * Function to delete the testcases.
 * @param event : Event parameter.
 */
	function deleteCase(event) {
		if (AH.select("#caseContainer").children.length == 1) {
			AH.alert("you can not delete default node");
		} else {
			let getParent = event.target.parentElement;
			getParent = getParent.parentElement;
			getParent = getParent.parentElement;
			getParent.remove();
			let counter = 1;

			AH.selectAll(".test_case_label").forEach(_elm => {
				_elm.textContent = l.testcase + counter++;
			});
		}
	}

	/**
 * Function to add the testcases.
 */
	function addTestCase() {
		let tempXml = xml;
		let case_match_insensitive = checkCaseInsensitive();
		let casematch_specail_char = checkSpecialChar();
		let partialmatch = checkMatchPartial();
		let settings = getSettings();
		$$invalidate(0, state.case_insensitive = case_match_insensitive, state);
		$$invalidate(0, state.ignore_special_char = casematch_specail_char, state);
		$$invalidate(0, state.partial_match = partialmatch, state);
		$$invalidate(0, state.is_graph = settings.is_graph, state);
		$$invalidate(0, state.ignore_error = settings.ignore_error, state);
		$$invalidate(0, state.ignore_formatting = settings.ignore_formatting, state);
		$$invalidate(0, state.ignore_reset_db = settings.ignore_reset_db, state);
		$$invalidate(0, state.is_pre_tag = settings.is_pre_tag, state);
		tempXml = tempXml.replace(/case_sensitive='[\s\S]*?' +/g, "case_sensitive='" + case_match_insensitive + "' ");
		tempXml = tempXml.replace(/special_char='[\s\S]*?' +/g, "special_char='" + casematch_specail_char + "' ");
		tempXml = tempXml.replace(/partial_match='[\s\S]*?' +/g, "partial_match='" + partialmatch + "' ");
		tempXml = tempXml.replace(/is_graph="[\s\S]*?"/g, 'is_graph="' + settings.is_graph + '"');
		tempXml = tempXml.replace(/ignore_error="[\s\S]*?"/g, 'ignore_error="' + settings.ignore_error + '"');
		tempXml = tempXml.replace(/ignore_formatting="[\s\S]*?"/g, 'ignore_formatting="' + settings.ignore_formatting + '"');
		tempXml = tempXml.replace(/ignore_reset_db="[\s\S]*?"/g, 'ignore_reset_db="' + settings.ignore_reset_db + '"');
		tempXml = tempXml.replace(/is_pre_tag="[\s\S]*?"/g, 'is_pre_tag="' + settings.is_pre_tag + '"');
		let caseStacks = AH.selectAll(".caseStack");
		let caseArr = [];

		caseStacks.forEach(e => {
			let inp = e.children[0].children[1].value;
			let oup = e.children[0].children[2].value;
			caseArr.push(inp + "|" + oup + ";");
		});

		AH.select("#id1", 'value', caseArr.join("").replace(/;$/gm, ""));
		let testCasesValue = document.querySelector("#id1").value;
		testCasesValue = "<case>" + testCasesValue.replace(/;/g, "</case><case>") + "</case>";
		getChildXml(tempXml.replace(/<testcases>[\s\S]*?<\/testcases>/g, "<testcases>" + testCasesValue + "</testcases>"));
	}

	/**
 * Function to add the testcase in xml.
 */
	function testCasesXml() {
		let testCasesXml = stringBetween(xml, "testcases");

		return testCasesXml
		? "<testcases>" + testCasesXml + "</testcases>"
		: "";
	}

	/**
 * Function to add the enable line number in xml.
 */
	function enableLineXml() {
		let enabledLine = AH.select("#enable-line").value
		? AH.select("#enable-line").value
		: 0;

		return "<enableline>" + enabledLine + "</enableline>";
	}

	/**
 * Function to handle the shortcut.
 * @param event : Event parameter.
 */
	function onkeyTouch(event) {
		//Added for ADA
		if (event.ctrlKey && event.shiftKey && event.keyCode == 13) {
			AH.select(".evalProRunCode").focus();
			AH.select(".evalProRunCode").click();
		} else if (event.ctrlKey && event.shiftKey && event.keyCode == 32) {
			//ctrl+shift+space key
			AH.select("#editor-footer").focus();

			AH.select("#editor-footer").click();
		}
	}

	const writable_props = ['toggleMode', 'xml', 'getChildXml', 'setInlineEditor', 'editorState'];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Eval> was created with unknown prop '${key}'`);
	});

	const click_handler = () => addPreBlock(-1);
	const click_handler_1 = () => addPostBlock(-1);

	function dialog_visible_binding(value) {
		if ($$self.$$.not_equal(state.database_modal_open, value)) {
			state.database_modal_open = value;
			($$invalidate(0, state), $$invalidate(21, xml));
		}
	}

	function dialog0_visible_binding(value) {
		if ($$self.$$.not_equal(state.open, value)) {
			state.open = value;
			($$invalidate(0, state), $$invalidate(21, xml));
		}
	}

	const click_handler_2 = () => {
		$$invalidate(0, state.remediationToggle = false, state);
	};

	function snackbar_visible_binding(value) {
		if ($$self.$$.not_equal(state.snackback, value)) {
			state.snackback = value;
			($$invalidate(0, state), $$invalidate(21, xml));
		}
	}

	function dialog1_visible_binding(value) {
		if ($$self.$$.not_equal(state.remediationToggle, value)) {
			state.remediationToggle = value;
			($$invalidate(0, state), $$invalidate(21, xml));
		}
	}

	$$self.$$set = $$props => {
		if ('toggleMode' in $$props) $$invalidate(20, toggleMode = $$props.toggleMode);
		if ('xml' in $$props) $$invalidate(21, xml = $$props.xml);
		if ('getChildXml' in $$props) $$invalidate(22, getChildXml = $$props.getChildXml);
		if ('setInlineEditor' in $$props) $$invalidate(23, setInlineEditor = $$props.setInlineEditor);
		if ('editorState' in $$props) $$invalidate(19, editorState = $$props.editorState);
	};

	$$self.$capture_state = () => ({
		onMount,
		beforeUpdate,
		tick,
		Button,
		Dialog,
		Snackbar,
		tag_player,
		l,
		writable,
		AH,
		Loader,
		toggleMode,
		xml,
		getChildXml,
		setInlineEditor,
		editorState,
		location_origin,
		evalpro_url,
		all_databases,
		lang_type,
		message,
		isPreview,
		aXml,
		language,
		windowHtml,
		showPre,
		showPost,
		showEditor,
		qxml,
		xmlArr,
		defaultStartXml,
		currentDB,
		lastTestCaseHtml,
		editor,
		preEditor,
		postEditor,
		marker,
		preData,
		postData,
		langArr,
		state,
		hdd,
		unsubscribe,
		toggleDB,
		addPreBlock,
		addPostBlock,
		handleLanguageModalOpen,
		showHideInputBlock,
		handleLanguageSelection,
		handleDatabaseModalOpen,
		handleDatabaseItem,
		adjustEditorBlockUI,
		toTitleCase,
		showOutputData,
		disableLine,
		renderCodeMirror,
		resetDB,
		createEditor,
		remediationMode,
		checkLine,
		answerCheckEvalpro,
		stringBetween,
		findAttribute,
		unRenderPlayer,
		renderPlayer,
		runCode,
		parseLineNumber,
		getSectionLine,
		parseXML,
		setDefaultXML,
		generateXml,
		saveEvalProAnswer,
		getCodeXml,
		setTestCase,
		cancelTestCase,
		onOpenTestCase,
		bindBtns,
		addMore,
		checkCaseInsensitive,
		checkSpecialChar,
		checkMatchPartial,
		getSettings,
		deleteCase,
		addTestCase,
		testCasesXml,
		enableLineXml,
		onkeyTouch
	});

	$$self.$inject_state = $$props => {
		if ('toggleMode' in $$props) $$invalidate(20, toggleMode = $$props.toggleMode);
		if ('xml' in $$props) $$invalidate(21, xml = $$props.xml);
		if ('getChildXml' in $$props) $$invalidate(22, getChildXml = $$props.getChildXml);
		if ('setInlineEditor' in $$props) $$invalidate(23, setInlineEditor = $$props.setInlineEditor);
		if ('editorState' in $$props) $$invalidate(19, editorState = $$props.editorState);
		if ('location_origin' in $$props) location_origin = $$props.location_origin;
		if ('evalpro_url' in $$props) evalpro_url = $$props.evalpro_url;
		if ('all_databases' in $$props) all_databases = $$props.all_databases;
		if ('lang_type' in $$props) $$invalidate(3, lang_type = $$props.lang_type);
		if ('message' in $$props) $$invalidate(1, message = $$props.message);
		if ('isPreview' in $$props) $$invalidate(2, isPreview = $$props.isPreview);
		if ('aXml' in $$props) aXml = $$props.aXml;
		if ('language' in $$props) language = $$props.language;
		if ('windowHtml' in $$props) windowHtml = $$props.windowHtml;
		if ('showPre' in $$props) showPre = $$props.showPre;
		if ('showPost' in $$props) showPost = $$props.showPost;
		if ('showEditor' in $$props) showEditor = $$props.showEditor;
		if ('qxml' in $$props) qxml = $$props.qxml;
		if ('xmlArr' in $$props) xmlArr = $$props.xmlArr;
		if ('defaultStartXml' in $$props) defaultStartXml = $$props.defaultStartXml;
		if ('currentDB' in $$props) currentDB = $$props.currentDB;
		if ('lastTestCaseHtml' in $$props) lastTestCaseHtml = $$props.lastTestCaseHtml;
		if ('editor' in $$props) editor = $$props.editor;
		if ('preEditor' in $$props) preEditor = $$props.preEditor;
		if ('postEditor' in $$props) postEditor = $$props.postEditor;
		if ('marker' in $$props) marker = $$props.marker;
		if ('preData' in $$props) preData = $$props.preData;
		if ('postData' in $$props) postData = $$props.postData;
		if ('langArr' in $$props) langArr = $$props.langArr;
		if ('state' in $$props) $$invalidate(0, state = $$props.state);
		if ('hdd' in $$props) hdd = $$props.hdd;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	$$self.$$.update = () => {
		if ($$self.$$.dirty[0] & /*xml, state*/ 2097153) {
			 if (xml != state.xml) $$invalidate(0, state.xml = xml, state);
		}
	};

	return [
		state,
		message,
		isPreview,
		lang_type,
		addPreBlock,
		addPostBlock,
		handleLanguageModalOpen,
		handleLanguageSelection,
		handleDatabaseModalOpen,
		handleDatabaseItem,
		showOutputData,
		resetDB,
		runCode,
		setDefaultXML,
		cancelTestCase,
		onOpenTestCase,
		addMore,
		addTestCase,
		onkeyTouch,
		editorState,
		toggleMode,
		xml,
		getChildXml,
		setInlineEditor,
		click_handler,
		click_handler_1,
		dialog_visible_binding,
		dialog0_visible_binding,
		click_handler_2,
		snackbar_visible_binding,
		dialog1_visible_binding
	];
}

class Eval extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				toggleMode: 20,
				xml: 21,
				getChildXml: 22,
				setInlineEditor: 23,
				editorState: 19
			},
			null,
			[-1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Eval",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*toggleMode*/ ctx[20] === undefined && !('toggleMode' in props)) {
			console_1.warn("<Eval> was created without expected prop 'toggleMode'");
		}

		if (/*xml*/ ctx[21] === undefined && !('xml' in props)) {
			console_1.warn("<Eval> was created without expected prop 'xml'");
		}

		if (/*setInlineEditor*/ ctx[23] === undefined && !('setInlineEditor' in props)) {
			console_1.warn("<Eval> was created without expected prop 'setInlineEditor'");
		}

		if (/*editorState*/ ctx[19] === undefined && !('editorState' in props)) {
			console_1.warn("<Eval> was created without expected prop 'editorState'");
		}
	}

	get toggleMode() {
		throw new Error("<Eval>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set toggleMode(value) {
		throw new Error("<Eval>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xml() {
		throw new Error("<Eval>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<Eval>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getChildXml() {
		throw new Error("<Eval>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<Eval>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get setInlineEditor() {
		throw new Error("<Eval>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set setInlineEditor(value) {
		throw new Error("<Eval>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get editorState() {
		throw new Error("<Eval>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<Eval>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Eval;
//# sourceMappingURL=Eval-92549c16.js.map
