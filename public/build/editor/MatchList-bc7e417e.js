
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { a7 as Lang, S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, e as element, p as append_dev, V as Checkbox, C as validate_each_argument, O as Dialog, P as binding_callbacks, Q as bind, v as validate_slots, L as beforeUpdate, X as XMLToJSON, o as onMount, a9 as afterUpdate, w as writable, aa as Loader, A as AH$1, M as JSONToXML, U as Button, z as empty, n as insert_dev, x as detach_dev, f as space, c as create_component, h as text, j as attr_dev, k as add_location, m as mount_component, q as listen_dev, G as prop_dev, W as add_flush_callback, t as transition_in, a as transition_out, b as destroy_component, K as destroy_each, H as run_all, $ as null_to_empty, l as set_style, B as noop, F as set_data_dev } from './main-f041e104.js';
import { s as styleInject } from './style-inject.es-1c867377.js';

/**
 *  Filename    : ValidateItems.js
 *  @Author     : Saquib Ajaz <saquib.ajaz@ucertify.com>
 *  @Version    : 1.0
 *  Last update : 29 May 2020
 *  Last updated by: Dharmendra Mishra
 */

const smVal = {
    err: {
        q9: Lang.max_error,
        q27:
            "You have exceeded the module limit. You can only create 6 statement nodes and 4 option nodes.",
        q6_advance: Lang.max_row_col_error
    },

    processError: function(err, msg) {
        var smErr = {
        error: err,
        message: msg
        };
        return smErr;
    },
  //@TOOD:? @pradeep item-refactor
    validate: function(type, subtype, content_icon) {
        if (type == "q" || type == "u") {
        switch (subtype) {
            case 9:
            return this.validate9(content_icon);
            case 14:
            return this.validate14(content_icon);
            case 6:
            return this.validate6(content_icon);
            case 26:
            return this.validate26(content_icon);
            case 27:
            return this.validate27(content_icon);
        }
        }
    },

    validate9: function(icon) {
        var len = AH.selectAll("#fillmain [id^=elem]").length;
        if (len > 6) {
        return this.processError(true, this.err.q9);
        } else {
        return this.processError(false, "valid");
        }
    },

    validate6: function(icon) {
         //var len = jQuery("#choose").find("#sortable li").length;
    let len = AH.selectAll("#choose #sortable li").length;
    console.log("len =>"+len);
    if (len > 5) {
      return this.processError(true, this.err.q9);
    } else {
      return this.processError(false, "valid");
    }
    },

    validate26: function(icon) {
         //var len = jQuery("#mytable >tbody >tr").length;
        let len = AH.selectAll("#mytable >tbody >tr").length;
        //var len1 = jQuery("#mytable >thead >tr >th").length;
        let len1 = AH.selectAll("#mytable >thead >tr >th").length;
        if (len > 5 || len1 > 6) {
        return this.processError(true, this.err.q6_advance);
        } else {
        return this.processError(false, "valid");
        }
    },

    validate14: function(icon) {
        var len1 =AI.selectAll("#matchListArea [class*='textarea_1']").length;

        var len2 = AI.selectAll("#matchListArea [class*='textarea_2']").length;
        if (len1 > 6 || len2 > 6) {
        return this.processError(true, this.err.q9);
        } else {
        return this.processError(false, "valid");
        }
    },
    validate27: function(icon) {
        let len1 = AH.selectAll("#choicemain .testmode_table tbody tr").length;
        //var len2 = jQuery("#choicemain").find(".testmode_table thead tr th").length;
        let len2 = AH.selectAll("#choicemain .testmode_table thead tr th").length;
        if (len1 > 6 || len2 > 5) {
          return this.processError(true, this.err.q27);
        } else {
          return this.processError(false, "valid");
        }
    }
};

var css_248z = ".light-cyan-bg {\r\n    background-color: #d4e4ff; \r\n    color: #333;\r\n}\r\n.width10 {\r\n    width: 90%;\r\n}\r\n.width1 {\r\n    width: 8%;\r\n}\r\n.pointer {\r\n    cursor: pointer !important;\r\n}\r\n.clear-both {\r\n    clear: both;\t\r\n}";
styleInject(css_248z);

/* clsSMMatchList\MatchList.svelte generated by Svelte v3.29.0 */

const { document: document_1 } = globals;
const file = "clsSMMatchList\\MatchList.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-1kpz00h-style";
	style.textContent = ".colorgray.svelte-1kpz00h{width:56px;background-color:rgb(255, 206, 206)}.colorgray1.svelte-1kpz00h{width:74px;background:#E0E0E0}.font24.svelte-1kpz00h{font-size:22px !important;margin-right:5px}.add_button.svelte-1kpz00h{height:31px}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1.head, style);
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[62] = list[i];
	child_ctx[64] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[65] = list[i];
	child_ctx[67] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[59] = list[i];
	child_ctx[61] = i;
	return child_ctx;
}

// (714:36) <Checkbox                                          checked={state.drag_mode}                                          on:click = {(e)=>{changeSetting("2",e)}}                                          id="isDragDrop"                                          color="primary"                                         style="position:relative;right:10px;">
function create_default_slot_6(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Drag & Drop");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_6.name,
		type: "slot",
		source: "(714:36) <Checkbox                                          checked={state.drag_mode}                                          on:click = {(e)=>{changeSetting(\\\"2\\\",e)}}                                          id=\\\"isDragDrop\\\"                                          color=\\\"primary\\\"                                         style=\\\"position:relative;right:10px;\\\">",
		ctx
	});

	return block;
}

// (722:36) <Checkbox                                                                                    on:click = {(e)=>{changeSetting("3",e)}}                                          id="isSwap"                                          color="primary"                                      >
function create_default_slot_5(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Swap List");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_5.name,
		type: "slot",
		source: "(722:36) <Checkbox                                                                                    on:click = {(e)=>{changeSetting(\\\"3\\\",e)}}                                          id=\\\"isSwap\\\"                                          color=\\\"primary\\\"                                      >",
		ctx
	});

	return block;
}

// (732:36) <Checkbox                                           defaultChecked = {(state.isalgo == true ? true : false)}                                          on:click = {changeisalgo}                                           name = {"isalgo"}                                           id = {"isalgo"}                                          color="primary"                                      >
function create_default_slot_4(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Algorithmic");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_4.name,
		type: "slot",
		source: "(732:36) <Checkbox                                           defaultChecked = {(state.isalgo == true ? true : false)}                                          on:click = {changeisalgo}                                           name = {\\\"isalgo\\\"}                                           id = {\\\"isalgo\\\"}                                          color=\\\"primary\\\"                                      >",
		ctx
	});

	return block;
}

// (815:24) {:else}
function create_else_block(ctx) {
	let div8;
	let div6;
	let div2;
	let div0;
	let textarea0;
	let textarea0_style_value;
	let textarea0_class_value;
	let textarea0_value_value;
	let t0;
	let show_if_3 = /*data*/ ctx[59].value2.charAt(0) == "*";
	let div0_style_value;
	let t1;
	let div1;
	let show_if_2 = /*data*/ ctx[59].value2.charAt(0) == "*";
	let t2;
	let button0;
	let span0;
	let t3;
	let div5;
	let div3;
	let textarea1;
	let textarea1_style_value;
	let textarea1_class_value;
	let textarea1_value_value;
	let t4;
	let show_if_1 = /*data*/ ctx[59].value1.charAt(0) == "*";
	let div3_style_value;
	let t5;
	let div4;
	let show_if = /*data*/ ctx[59].value1.charAt(0) == "*";
	let t6;
	let button1;
	let span1;
	let t7;
	let div7;
	let a;
	let span2;
	let t8;
	let div8_key_value;
	let mounted;
	let dispose;

	function change_handler_2(...args) {
		return /*change_handler_2*/ ctx[32](/*data*/ ctx[59], /*i*/ ctx[61], ...args);
	}

	let if_block0 = show_if_3 && create_if_block_8(ctx);
	let if_block1 = show_if_2 && create_if_block_7(ctx);

	function click_handler_7(...args) {
		return /*click_handler_7*/ ctx[33](/*i*/ ctx[61], ...args);
	}

	function change_handler_3(...args) {
		return /*change_handler_3*/ ctx[34](/*data*/ ctx[59], /*i*/ ctx[61], ...args);
	}

	let if_block2 = show_if_1 && create_if_block_6(ctx);
	let if_block3 = show_if && create_if_block_5(ctx);

	function click_handler_8(...args) {
		return /*click_handler_8*/ ctx[35](/*i*/ ctx[61], ...args);
	}

	function click_handler_9(...args) {
		return /*click_handler_9*/ ctx[36](/*data*/ ctx[59], ...args);
	}

	const block = {
		c: function create() {
			div8 = element("div");
			div6 = element("div");
			div2 = element("div");
			div0 = element("div");
			textarea0 = element("textarea");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			button0 = element("button");
			span0 = element("span");
			t3 = space();
			div5 = element("div");
			div3 = element("div");
			textarea1 = element("textarea");
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			div4 = element("div");
			if (if_block3) if_block3.c();
			t6 = space();
			button1 = element("button");
			span1 = element("span");
			t7 = space();
			div7 = element("div");
			a = element("a");
			span2 = element("span");
			t8 = space();
			attr_dev(textarea0, "rows", "3");
			attr_dev(textarea0, "cols", "20");
			attr_dev(textarea0, "style", textarea0_style_value = "resize:none;");

			attr_dev(textarea0, "class", textarea0_class_value = "" + (null_to_empty(/*data*/ ctx[59].value2.charAt(0) == "*"
			? "h form-control textarea_2_" + /*i*/ ctx[61]
			: "form-control textarea_2_" + /*i*/ ctx[61]) + " svelte-1kpz00h"));

			attr_dev(textarea0, "id", "matchList2");
			textarea0.value = textarea0_value_value = /*data*/ ctx[59].value2;
			add_location(textarea0, file, 820, 48, 33024);
			attr_dev(div0, "class", "pull-left word_break width200 p-1 max_width_300");
			attr_dev(div0, "style", div0_style_value = "borderRadius:3px;");
			add_location(div0, file, 819, 44, 32885);
			attr_dev(span0, "class", "icomoon-images d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span0, "data-bs-toggle", "tooltip");
			attr_dev(span0, "data-bs-placement", "right");
			attr_dev(span0, "title", "Add Image");
			add_location(span0, file, 831, 52, 34412);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-outline-primary btn-sm edit_btn bg-white");
			add_location(button0, file, 830, 48, 34229);
			attr_dev(div1, "class", "pull-right mt");
			add_location(div1, file, 826, 44, 33834);
			attr_dev(div2, "class", "pull-left d-flex align-items-center");
			add_location(div2, file, 818, 40, 32790);
			attr_dev(textarea1, "rows", "3");
			attr_dev(textarea1, "cols", "20");
			attr_dev(textarea1, "style", textarea1_style_value = "resize:none;");

			attr_dev(textarea1, "class", textarea1_class_value = "" + (null_to_empty(/*data*/ ctx[59].value1.charAt(0) == "*"
			? "h form-control textarea_1_" + /*i*/ ctx[61]
			: "form-control textarea_1_" + /*i*/ ctx[61]) + " svelte-1kpz00h"));

			attr_dev(textarea1, "id", "matchList1");
			textarea1.value = textarea1_value_value = /*data*/ ctx[59].value1;
			add_location(textarea1, file, 838, 48, 35048);
			attr_dev(div3, "class", "pull-left word_break width200 p-1 max_width_300");
			attr_dev(div3, "style", div3_style_value = "" + ("border-radius:3px" + "}"));
			add_location(div3, file, 837, 44, 34908);
			attr_dev(span1, "class", "icomoon-images d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span1, "data-bs-toggle", "tooltip");
			attr_dev(span1, "data-bs-placement", "right");
			attr_dev(span1, "title", "Add Image");
			add_location(span1, file, 849, 52, 36373);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-outline-primary btn-sm edit_btn bg-white");
			add_location(button1, file, 848, 48, 36190);
			attr_dev(div4, "class", "pull-right mt");
			add_location(div4, file, 844, 44, 35796);
			attr_dev(div5, "class", "pull-right d-flex align-items-center");
			add_location(div5, file, 836, 40, 34812);
			attr_dev(div6, "class", "pointer d-inline-block clear-both light-cyan-bg mx-0 my-1 p-2 width10");
			add_location(div6, file, 817, 36, 32665);
			attr_dev(span2, "aria-hidden", "true");
			attr_dev(span2, "class", "icomoon icomoon-new-24px-delete-1 s3 delete_match_node py-1");
			attr_dev(span2, "tabindex", "0");
			attr_dev(span2, "data-bs-toggle", "tooltip");
			attr_dev(span2, "data-bs-placement", "right");
			attr_dev(span2, "title", "Delete");
			add_location(span2, file, 856, 44, 36944);
			add_location(a, file, 855, 40, 36833);
			attr_dev(div7, "class", "width1 float-right");
			add_location(div7, file, 854, 36, 36759);
			attr_dev(div8, "key", div8_key_value = /*i*/ ctx[61]);
			attr_dev(div8, "class", "d-flex align-items-center mb-2");
			add_location(div8, file, 816, 32, 32575);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, div6);
			append_dev(div6, div2);
			append_dev(div2, div0);
			append_dev(div0, textarea0);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div1, t2);
			append_dev(div1, button0);
			append_dev(button0, span0);
			append_dev(div6, t3);
			append_dev(div6, div5);
			append_dev(div5, div3);
			append_dev(div3, textarea1);
			append_dev(div3, t4);
			if (if_block2) if_block2.m(div3, null);
			append_dev(div5, t5);
			append_dev(div5, div4);
			if (if_block3) if_block3.m(div4, null);
			append_dev(div4, t6);
			append_dev(div4, button1);
			append_dev(button1, span1);
			append_dev(div8, t7);
			append_dev(div8, div7);
			append_dev(div7, a);
			append_dev(a, span2);
			append_dev(div8, t8);

			if (!mounted) {
				dispose = [
					listen_dev(textarea0, "change", change_handler_2, false, false, false),
					listen_dev(button0, "click", click_handler_7, false, false, false),
					listen_dev(textarea1, "change", change_handler_3, false, false, false),
					listen_dev(button1, "click", click_handler_8, false, false, false),
					listen_dev(a, "click", click_handler_9, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localCData*/ 4 && textarea0_class_value !== (textarea0_class_value = "" + (null_to_empty(/*data*/ ctx[59].value2.charAt(0) == "*"
			? "h form-control textarea_2_" + /*i*/ ctx[61]
			: "form-control textarea_2_" + /*i*/ ctx[61]) + " svelte-1kpz00h"))) {
				attr_dev(textarea0, "class", textarea0_class_value);
			}

			if (dirty[0] & /*localCData*/ 4 && textarea0_value_value !== (textarea0_value_value = /*data*/ ctx[59].value2)) {
				prop_dev(textarea0, "value", textarea0_value_value);
			}

			if (dirty[0] & /*localCData*/ 4) show_if_3 = /*data*/ ctx[59].value2.charAt(0) == "*";

			if (show_if_3) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_8(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*localCData*/ 4) show_if_2 = /*data*/ ctx[59].value2.charAt(0) == "*";

			if (show_if_2) {
				if (if_block1) ; else {
					if_block1 = create_if_block_7(ctx);
					if_block1.c();
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*localCData*/ 4 && textarea1_class_value !== (textarea1_class_value = "" + (null_to_empty(/*data*/ ctx[59].value1.charAt(0) == "*"
			? "h form-control textarea_1_" + /*i*/ ctx[61]
			: "form-control textarea_1_" + /*i*/ ctx[61]) + " svelte-1kpz00h"))) {
				attr_dev(textarea1, "class", textarea1_class_value);
			}

			if (dirty[0] & /*localCData*/ 4 && textarea1_value_value !== (textarea1_value_value = /*data*/ ctx[59].value1)) {
				prop_dev(textarea1, "value", textarea1_value_value);
			}

			if (dirty[0] & /*localCData*/ 4) show_if_1 = /*data*/ ctx[59].value1.charAt(0) == "*";

			if (show_if_1) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_6(ctx);
					if_block2.c();
					if_block2.m(div3, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*localCData*/ 4) show_if = /*data*/ ctx[59].value1.charAt(0) == "*";

			if (show_if) {
				if (if_block3) ; else {
					if_block3 = create_if_block_5(ctx);
					if_block3.c();
					if_block3.m(div4, t6);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(815:24) {:else}",
		ctx
	});

	return block;
}

// (748:24) {#if state.isalgo === true}
function create_if_block(ctx) {
	let div0;
	let t0_value = (/*tempdata1*/ ctx[0] = /*data*/ ctx[59].value1.split("%%")) + "";
	let t0;
	let t1;
	let t2_value = (/*tempdata2*/ ctx[1] = /*data*/ ctx[59].value2.split("%%")) + "";
	let t2;
	let t3;
	let div6;
	let div4;
	let div2;
	let t4;
	let div1;
	let button;
	let span0;
	let t6;
	let button_class_value;
	let t7;
	let div3;
	let t8;
	let div5;
	let a;
	let span1;
	let t9;
	let div6_key_value;
	let div6_dir_value;
	let mounted;
	let dispose;
	let each_value_2 = /*tempdata2*/ ctx[1];
	validate_each_argument(each_value_2);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks_1[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	let each_value_1 = /*tempdata1*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	function click_handler_6(...args) {
		return /*click_handler_6*/ ctx[31](/*data*/ ctx[59], ...args);
	}

	const block = {
		c: function create() {
			div0 = element("div");
			t0 = text(t0_value);
			t1 = space();
			t2 = text(t2_value);
			t3 = space();
			div6 = element("div");
			div4 = element("div");
			div2 = element("div");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t4 = space();
			div1 = element("div");
			button = element("button");
			span0 = element("span");
			span0.textContent = "+";
			t6 = text("Add item");
			t7 = space();
			div3 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t8 = space();
			div5 = element("div");
			a = element("a");
			span1 = element("span");
			t9 = space();
			attr_dev(div0, "class", "h-imp");
			add_location(div0, file, 749, 7, 25249);
			attr_dev(span0, "class", "font24 svelte-1kpz00h");
			add_location(span0, file, 782, 52, 28863);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", button_class_value = "" + (null_to_empty("add_button px-1 btn btn-outline-primary btn-sm bg-white d-flex align-items-center pr-2 " + "listitem" + /*i*/ ctx[61]) + " svelte-1kpz00h"));
			add_location(button, file, 781, 13, 28640);
			attr_dev(div1, "class", "float-left ms-1");
			add_location(div1, file, 780, 48, 28596);
			attr_dev(div2, "class", "float-left clear-both");
			add_location(div2, file, 757, 44, 25690);
			attr_dev(div3, "class", "pull-right");
			add_location(div3, file, 785, 44, 29067);
			attr_dev(div4, "class", "d-inline-block clear-both pointer light-cyan-bg mx-0 my-1 p-2 width10");
			add_location(div4, file, 756, 40, 25561);
			attr_dev(span1, "aria-hidden", "true");
			attr_dev(span1, "class", "delete_match_node_auth icomoon icomoon-new-24px-delete-1 s3 py-1");
			attr_dev(span1, "tabindex", "0");
			attr_dev(span1, "data-bs-toggle", "tooltip");
			attr_dev(span1, "data-bs-placement", "right");
			attr_dev(span1, "title", "Delete");
			add_location(span1, file, 810, 48, 32152);
			add_location(a, file, 809, 44, 32037);
			attr_dev(div5, "class", "width1 float-right");
			add_location(div5, file, 808, 40, 31959);
			attr_dev(div6, "key", div6_key_value = /*i*/ ctx[61]);
			attr_dev(div6, "class", "d-flex align-items-center mb-2");
			attr_dev(div6, "dir", div6_dir_value = /*state*/ ctx[3].dir);
			add_location(div6, file, 755, 36, 25451);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, div6, anchor);
			append_dev(div6, div4);
			append_dev(div4, div2);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(div2, null);
			}

			append_dev(div2, t4);
			append_dev(div2, div1);
			append_dev(div1, button);
			append_dev(button, span0);
			append_dev(button, t6);
			append_dev(div4, t7);
			append_dev(div4, div3);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append_dev(div6, t8);
			append_dev(div6, div5);
			append_dev(div5, a);
			append_dev(a, span1);
			append_dev(div6, t9);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", /*addListItem*/ ctx[17].bind(this, /*i*/ ctx[61]), false, false, false),
					listen_dev(a, "click", click_handler_6, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
			if (dirty[0] & /*tempdata1, localCData*/ 5 && t0_value !== (t0_value = (/*tempdata1*/ ctx[0] = /*data*/ ctx[59].value1.split("%%")) + "")) set_data_dev(t0, t0_value);
			if (dirty[0] & /*tempdata2, localCData*/ 6 && t2_value !== (t2_value = (/*tempdata2*/ ctx[1] = /*data*/ ctx[59].value2.split("%%")) + "")) set_data_dev(t2, t2_value);

			if (dirty[0] & /*state, removetextbox, openImageDialogAlgo, tempdata2, editalgoCData*/ 69898) {
				each_value_2 = /*tempdata2*/ ctx[1];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_2(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(div2, t4);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_2.length;
			}

			if (dirty[0] & /*state, removetextbox, openImageDialogAlgo, tempdata1, editalgoCData*/ 69897) {
				each_value_1 = /*tempdata1*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}

			if (dirty[0] & /*state*/ 8 && div6_dir_value !== (div6_dir_value = /*state*/ ctx[3].dir)) {
				attr_dev(div6, "dir", div6_dir_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(div6);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(748:24) {#if state.isalgo === true}",
		ctx
	});

	return block;
}

// (823:48) {#if data.value2.charAt(0) == "*"}
function create_if_block_8(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "authoringImage");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[59].value2.substr(1).split("##")[0].split("%%")[0])) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[59].value2.split("##")[1]
			? /*data*/ ctx[59].value2.split("##")[1]
			: null);

			add_location(img, file, 823, 52, 33463);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localCData*/ 4 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[59].value2.substr(1).split("##")[0].split("%%")[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*localCData*/ 4 && img_alt_value !== (img_alt_value = /*data*/ ctx[59].value2.split("##")[1]
			? /*data*/ ctx[59].value2.split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(823:48) {#if data.value2.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (828:48) {#if data.value2.charAt(0) == "*"}
function create_if_block_7(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icomoon-close-2 s4 image_delete");
			attr_dev(div, "data-bs-toggle", "tooltip");
			attr_dev(div, "data-bs-placement", "right");
			attr_dev(div, "title", "Delete Image");
			add_location(div, file, 828, 52, 34000);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(828:48) {#if data.value2.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (841:48) {#if data.value1.charAt(0) == "*"}
function create_if_block_6(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "authoringImage");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[59].value1.substr(1).split("##")[0].split("%%")[0])) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[59].value1.split("##")[1]
			? /*data*/ ctx[59].value1.split("##")[1]
			: null);

			add_location(img, file, 841, 52, 35439);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localCData*/ 4 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*data*/ ctx[59].value1.substr(1).split("##")[0].split("%%")[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*localCData*/ 4 && img_alt_value !== (img_alt_value = /*data*/ ctx[59].value1.split("##")[1]
			? /*data*/ ctx[59].value1.split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(841:48) {#if data.value1.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (846:48) {#if data.value1.charAt(0) == "*"}
function create_if_block_5(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icomoon-close-2 s4 image_delete");
			attr_dev(div, "data-bs-toggle", "tooltip");
			attr_dev(div, "data-bs-placement", "right");
			attr_dev(div, "title", "Delete Image");
			add_location(div, file, 846, 52, 35961);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(846:48) {#if data.value1.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (765:64) {#if temp.charAt(0) == "*"}
function create_if_block_4(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "authoringImage");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*temp*/ ctx[65].substr(1).split("##")[0])) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*temp*/ ctx[65].split("##")[1]
			? /*temp*/ ctx[65].split("##")[1]
			: null);

			add_location(img, file, 765, 68, 26540);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*tempdata2*/ 2 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*temp*/ ctx[65].substr(1).split("##")[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*tempdata2*/ 2 && img_alt_value !== (img_alt_value = /*temp*/ ctx[65].split("##")[1]
			? /*temp*/ ctx[65].split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(765:64) {#if temp.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (771:64) {#if temp.charAt(0) == "*"}
function create_if_block_3(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icomoon-close-2 s4 image_delete");
			attr_dev(div, "data-bs-toggle", "tooltip");
			attr_dev(div, "data-bs-placement", "right");
			attr_dev(div, "title", "Delete Image");
			add_location(div, file, 771, 68, 27176);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(771:64) {#if temp.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (760:48) {#each tempdata2 as temp, j}
function create_each_block_2(ctx) {
	let div2;
	let div0;
	let textarea;
	let textarea_style_value;
	let textarea_class_value;
	let textarea_value_value;
	let t0;
	let show_if_1 = /*temp*/ ctx[65].charAt(0) == "*";
	let div0_style_value;
	let t1;
	let div1;
	let show_if = /*temp*/ ctx[65].charAt(0) == "*";
	let t2;
	let button0;
	let span0;
	let t3;
	let button1;
	let span1;
	let button1_style_value;
	let mounted;
	let dispose;

	function change_handler(...args) {
		return /*change_handler*/ ctx[25](/*temp*/ ctx[65], /*i*/ ctx[61], /*j*/ ctx[67], ...args);
	}

	let if_block0 = show_if_1 && create_if_block_4(ctx);
	let if_block1 = show_if && create_if_block_3(ctx);

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[26](/*i*/ ctx[61], /*j*/ ctx[67], ...args);
	}

	function click_handler_3(...args) {
		return /*click_handler_3*/ ctx[27](/*i*/ ctx[61], /*j*/ ctx[67], ...args);
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			textarea = element("textarea");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			button0 = element("button");
			span0 = element("span");
			t3 = space();
			button1 = element("button");
			span1 = element("span");
			attr_dev(textarea, "rows", "3");
			attr_dev(textarea, "cols", "20");
			attr_dev(textarea, "style", textarea_style_value = "resize:none;");

			attr_dev(textarea, "class", textarea_class_value = "" + (null_to_empty(/*temp*/ ctx[65].charAt(0) == "*"
			? "h form-control textarea_2_" + /*i*/ ctx[61] + "_" + /*j*/ ctx[67]
			: "form-control textarea_2_" + /*i*/ ctx[61] + "_" + /*j*/ ctx[67]) + " svelte-1kpz00h"));

			attr_dev(textarea, "id", "matchList2");
			textarea.value = textarea_value_value = /*temp*/ ctx[65];
			add_location(textarea, file, 763, 64, 26134);
			attr_dev(div0, "class", "pull-left word_break width200 p-1 max_width_300");
			attr_dev(div0, "style", div0_style_value = "border-radius:3px;");
			add_location(div0, file, 762, 60, 25978);
			attr_dev(span0, "class", "icomoon-images d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span0, "data-bs-toggle", "tooltip");
			attr_dev(span0, "data-bs-placement", "right");
			attr_dev(span0, "title", "Add Image");
			add_location(span0, file, 774, 242, 27680);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "d-block btn btn-outline-primary btn-sm edit_btn bg-white mb-1");
			add_location(button0, file, 774, 64, 27502);
			attr_dev(span1, "class", "icomoon-24px-delete-1 d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span1, "data-bs-toggle", "tooltip");
			attr_dev(span1, "data-bs-placement", "right");
			attr_dev(span1, "title", "Delete");
			add_location(span1, file, 775, 296, 28145);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-outline-primary btn-sm edit_btn textdel bg-white");

			attr_dev(button1, "style", button1_style_value = /*state*/ ctx[3].isalgo
			? { display: "block" }
			: { display: "none" });

			add_location(button1, file, 775, 64, 27913);
			attr_dev(div1, "class", "pull-right");
			add_location(div1, file, 769, 60, 26988);
			attr_dev(div2, "class", "d-flex align-items-center");
			add_location(div2, file, 761, 56, 25877);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, textarea);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div1, t2);
			append_dev(div1, button0);
			append_dev(button0, span0);
			append_dev(div1, t3);
			append_dev(div1, button1);
			append_dev(button1, span1);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "change", change_handler, false, false, false),
					listen_dev(button0, "click", click_handler_2, false, false, false),
					listen_dev(button1, "click", click_handler_3, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*tempdata2*/ 2 && textarea_class_value !== (textarea_class_value = "" + (null_to_empty(/*temp*/ ctx[65].charAt(0) == "*"
			? "h form-control textarea_2_" + /*i*/ ctx[61] + "_" + /*j*/ ctx[67]
			: "form-control textarea_2_" + /*i*/ ctx[61] + "_" + /*j*/ ctx[67]) + " svelte-1kpz00h"))) {
				attr_dev(textarea, "class", textarea_class_value);
			}

			if (dirty[0] & /*tempdata2*/ 2 && textarea_value_value !== (textarea_value_value = /*temp*/ ctx[65])) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*tempdata2*/ 2) show_if_1 = /*temp*/ ctx[65].charAt(0) == "*";

			if (show_if_1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*tempdata2*/ 2) show_if = /*temp*/ ctx[65].charAt(0) == "*";

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_3(ctx);
					if_block1.c();
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*state*/ 8 && button1_style_value !== (button1_style_value = /*state*/ ctx[3].isalgo
			? { display: "block" }
			: { display: "none" })) {
				attr_dev(button1, "style", button1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(760:48) {#each tempdata2 as temp, j}",
		ctx
	});

	return block;
}

// (793:64) {#if temp1.charAt(0) == "*"}
function create_if_block_2(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	const block = {
		c: function create() {
			img = element("img");
			attr_dev(img, "class", "authoringImage");
			if (img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*temp1*/ ctx[62].substr(1).split("##")[0])) attr_dev(img, "src", img_src_value);

			attr_dev(img, "alt", img_alt_value = /*temp1*/ ctx[62].split("##")[1]
			? /*temp1*/ ctx[62].split("##")[1]
			: null);

			add_location(img, file, 793, 68, 29957);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*tempdata1*/ 1 && img.src !== (img_src_value = "//s3.amazonaws.com/jigyaasa_content_static/" + /*temp1*/ ctx[62].substr(1).split("##")[0])) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*tempdata1*/ 1 && img_alt_value !== (img_alt_value = /*temp1*/ ctx[62].split("##")[1]
			? /*temp1*/ ctx[62].split("##")[1]
			: null)) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(793:64) {#if temp1.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (799:64) {#if temp1.charAt(0) == "*"}
function create_if_block_1(ctx) {
	let div;

	const block = {
		c: function create() {
			div = element("div");
			attr_dev(div, "class", "icomoon-close-2 s4 image_delete");
			attr_dev(div, "data-bs-toggle", "tooltip");
			attr_dev(div, "data-bs-placement", "right");
			attr_dev(div, "title", "Delete Image");
			add_location(div, file, 799, 68, 30583);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(799:64) {#if temp1.charAt(0) == \\\"*\\\"}",
		ctx
	});

	return block;
}

// (788:48) {#each tempdata1 as temp1, k}
function create_each_block_1(ctx) {
	let div2;
	let div0;
	let textarea;
	let textarea_style_value;
	let textarea_class_value;
	let textarea_value_value;
	let t0;
	let show_if_1 = /*temp1*/ ctx[62].charAt(0) == "*";
	let div0_style_value;
	let t1;
	let div1;
	let show_if = /*temp1*/ ctx[62].charAt(0) == "*";
	let t2;
	let button0;
	let span0;
	let t3;
	let button1;
	let span1;
	let button1_style_value;
	let t4;
	let mounted;
	let dispose;

	function change_handler_1(...args) {
		return /*change_handler_1*/ ctx[28](/*temp1*/ ctx[62], /*i*/ ctx[61], /*k*/ ctx[64], ...args);
	}

	let if_block0 = show_if_1 && create_if_block_2(ctx);
	let if_block1 = show_if && create_if_block_1(ctx);

	function click_handler_4(...args) {
		return /*click_handler_4*/ ctx[29](/*i*/ ctx[61], /*k*/ ctx[64], ...args);
	}

	function click_handler_5(...args) {
		return /*click_handler_5*/ ctx[30](/*i*/ ctx[61], /*k*/ ctx[64], ...args);
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			textarea = element("textarea");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			div1 = element("div");
			if (if_block1) if_block1.c();
			t2 = space();
			button0 = element("button");
			span0 = element("span");
			t3 = space();
			button1 = element("button");
			span1 = element("span");
			t4 = space();
			attr_dev(textarea, "rows", "3");
			attr_dev(textarea, "cols", "20");
			attr_dev(textarea, "style", textarea_style_value = "resize:none;");

			attr_dev(textarea, "class", textarea_class_value = "" + (null_to_empty(/*temp1*/ ctx[62].charAt(0) == "*"
			? "h form-control textarea_1_" + /*i*/ ctx[61] + "_" + /*k*/ ctx[64]
			: "form-control textarea_1_" + /*i*/ ctx[61] + "_" + /*k*/ ctx[64]) + " svelte-1kpz00h"));

			attr_dev(textarea, "id", "matchList1");
			textarea.value = textarea_value_value = /*temp1*/ ctx[62];
			add_location(textarea, file, 791, 64, 29549);
			attr_dev(div0, "class", "pull-left word_break width200 p-1 max_width_300");
			attr_dev(div0, "style", div0_style_value = "border-radius:3px;");
			add_location(div0, file, 790, 60, 29393);
			attr_dev(span0, "class", "icomoon-images d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span0, "data-bs-toggle", "tooltip");
			attr_dev(span0, "data-bs-placement", "right");
			attr_dev(span0, "title", "Add Image");
			add_location(span0, file, 801, 242, 31021);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "d-block btn btn-outline-primary btn-sm edit_btn bg-white mb-1");
			add_location(button0, file, 801, 64, 30843);
			attr_dev(span1, "class", "icomoon-24px-delete-1 d-flex align-items-center pt-sm1 pb-sm1");
			attr_dev(span1, "data-bs-toggle", "tooltip");
			attr_dev(span1, "data-bs-placement", "right");
			attr_dev(span1, "title", "Delete");
			add_location(span1, file, 802, 292, 31469);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-outline-primary btn-sm edit_btn textdel bg-white");

			attr_dev(button1, "style", button1_style_value = /*state*/ ctx[3].isalgo
			? "display:block;"
			: "display : none");

			add_location(button1, file, 802, 64, 31241);
			attr_dev(div1, "class", "pull-right");
			add_location(div1, file, 797, 60, 30395);
			attr_dev(div2, "class", "d-flex align-items-center");
			add_location(div2, file, 789, 56, 29292);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			append_dev(div0, textarea);
			append_dev(div0, t0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(div2, t1);
			append_dev(div2, div1);
			if (if_block1) if_block1.m(div1, null);
			append_dev(div1, t2);
			append_dev(div1, button0);
			append_dev(button0, span0);
			append_dev(div1, t3);
			append_dev(div1, button1);
			append_dev(button1, span1);
			append_dev(div2, t4);

			if (!mounted) {
				dispose = [
					listen_dev(textarea, "change", change_handler_1, false, false, false),
					listen_dev(button0, "click", click_handler_4, false, false, false),
					listen_dev(button1, "click", click_handler_5, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*tempdata1*/ 1 && textarea_class_value !== (textarea_class_value = "" + (null_to_empty(/*temp1*/ ctx[62].charAt(0) == "*"
			? "h form-control textarea_1_" + /*i*/ ctx[61] + "_" + /*k*/ ctx[64]
			: "form-control textarea_1_" + /*i*/ ctx[61] + "_" + /*k*/ ctx[64]) + " svelte-1kpz00h"))) {
				attr_dev(textarea, "class", textarea_class_value);
			}

			if (dirty[0] & /*tempdata1*/ 1 && textarea_value_value !== (textarea_value_value = /*temp1*/ ctx[62])) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*tempdata1*/ 1) show_if_1 = /*temp1*/ ctx[62].charAt(0) == "*";

			if (show_if_1) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_2(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*tempdata1*/ 1) show_if = /*temp1*/ ctx[62].charAt(0) == "*";

			if (show_if) {
				if (if_block1) ; else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					if_block1.m(div1, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*state*/ 8 && button1_style_value !== (button1_style_value = /*state*/ ctx[3].isalgo
			? "display:block;"
			: "display : none")) {
				attr_dev(button1, "style", button1_style_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(788:48) {#each tempdata1 as temp1, k}",
		ctx
	});

	return block;
}

// (746:16) {#each localCData as data, i}
function create_each_block(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[3].isalgo === true) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		d: function destroy(detaching) {
			if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(746:16) {#each localCData as data, i}",
		ctx
	});

	return block;
}

// (905:7) <Button variant="contained" id="cdata" on:click={insertImage} class="text-white bg-primary">
function create_default_slot_3(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Done");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_3.name,
		type: "slot",
		source: "(905:7) <Button variant=\\\"contained\\\" id=\\\"cdata\\\" on:click={insertImage} class=\\\"text-white bg-primary\\\">",
		ctx
	});

	return block;
}

// (903:6) <div slot="footer" class="svelteFooter">
function create_footer_slot_1(ctx) {
	let div;
	let input;
	let input_value_value;
	let t;
	let button;
	let current;
	let mounted;
	let dispose;

	button = new Button({
			props: {
				variant: "contained",
				id: "cdata",
				class: "text-white bg-primary",
				$$slots: { default: [create_default_slot_3] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*insertImage*/ ctx[14]);

	const block = {
		c: function create() {
			div = element("div");
			input = element("input");
			t = space();
			create_component(button.$$.fragment);
			attr_dev(input, "type", "button");
			attr_dev(input, "class", "cancel_btn_pop btn btn-light colorgray1 svelte-1kpz00h");
			attr_dev(input, "variant", "contained");
			input.value = input_value_value = Lang.cancel;
			add_location(input, file, 903, 7, 39105);
			attr_dev(div, "slot", "footer");
			attr_dev(div, "class", "svelteFooter");
			add_location(div, file, 902, 6, 39056);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, input);
			append_dev(div, t);
			mount_component(button, div, null);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "click", /*closeImageDialog*/ ctx[13], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty[2] & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot_1.name,
		type: "slot",
		source: "(903:6) <div slot=\\\"footer\\\" class=\\\"svelteFooter\\\">",
		ctx
	});

	return block;
}

// (878:1) <Dialog bind:visible={state.openImageDialog} disableEnforceFocus={true} style={'width:600px;'}>
function create_default_slot_2(ctx) {
	let div1;
	let div0;
	let t1;
	let div9;
	let div8;
	let div7;
	let div3;
	let div2;
	let label0;
	let t3;
	let input0;
	let t4;
	let div5;
	let div4;
	let label1;
	let t6;
	let input1;
	let t7;
	let div6;
	let button;
	let t9;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			div0.textContent = "Add Image";
			t1 = space();
			div9 = element("div");
			div8 = element("div");
			div7 = element("div");
			div3 = element("div");
			div2 = element("div");
			label0 = element("label");
			label0.textContent = "Background Image";
			t3 = space();
			input0 = element("input");
			t4 = space();
			div5 = element("div");
			div4 = element("div");
			label1 = element("label");
			label1.textContent = "Background Alt";
			t6 = space();
			input1 = element("input");
			t7 = space();
			div6 = element("div");
			button = element("button");
			button.textContent = "Upload Image";
			t9 = space();
			add_location(div0, file, 879, 5, 38019);
			set_style(div1, "text-align", "left");
			set_style(div1, "font-weight", "bold");
			attr_dev(div1, "class", "mb-5");
			add_location(div1, file, 878, 4, 37951);
			attr_dev(label0, "class", "control-label font-weight-normal mb-0");
			attr_dev(label0, "for", "MatchlistImg");
			add_location(label0, file, 886, 10, 38235);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "form-control form-control-md");
			attr_dev(input0, "id", "MatchlistImg");
			attr_dev(input0, "placeholder", "Image url");
			add_location(input0, file, 887, 10, 38343);
			attr_dev(div2, "class", "form-group");
			add_location(div2, file, 885, 9, 38199);
			attr_dev(div3, "class", "col-md-6 px-1");
			add_location(div3, file, 884, 14, 38161);
			attr_dev(label1, "class", "control-label font-weight-normal mb-0");
			attr_dev(label1, "for", "MatchlistAlt");
			add_location(label1, file, 892, 10, 38572);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "form-control form-control-md");
			attr_dev(input1, "id", "MatchlistAlt");
			attr_dev(input1, "placeholder", "Background alt text");
			add_location(input1, file, 893, 10, 38678);
			attr_dev(div4, "class", "form-group");
			add_location(div4, file, 891, 9, 38536);
			attr_dev(div5, "class", "col-md-6 px-1");
			add_location(div5, file, 890, 14, 38498);
			attr_dev(button, "class", "btn btn-outline-primary");
			add_location(button, file, 897, 12, 38884);
			attr_dev(div6, "class", "col-md-6 px-1");
			add_location(div6, file, 896, 14, 38843);
			attr_dev(div7, "class", "row mx-0");
			add_location(div7, file, 883, 13, 38123);
			attr_dev(div8, "class", "imageDialog");
			add_location(div8, file, 882, 12, 38083);
			add_location(div9, file, 881, 11, 38064);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			insert_dev(target, t1, anchor);
			insert_dev(target, div9, anchor);
			append_dev(div9, div8);
			append_dev(div8, div7);
			append_dev(div7, div3);
			append_dev(div3, div2);
			append_dev(div2, label0);
			append_dev(div2, t3);
			append_dev(div2, input0);
			append_dev(div7, t4);
			append_dev(div7, div5);
			append_dev(div5, div4);
			append_dev(div4, label1);
			append_dev(div4, t6);
			append_dev(div4, input1);
			append_dev(div7, t7);
			append_dev(div7, div6);
			append_dev(div6, button);
			insert_dev(target, t9, anchor);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*openMediaDialog*/ ctx[6], false, false, false);
				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div9);
			if (detaching) detach_dev(t9);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(878:1) <Dialog bind:visible={state.openImageDialog} disableEnforceFocus={true} style={'width:600px;'}>",
		ctx
	});

	return block;
}

// (924:6) <Button variant="contained" on:click={removeRow}         class="bg-primary text-white">
function create_default_slot_1(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text("Yes");
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(924:6) <Button variant=\\\"contained\\\" on:click={removeRow}         class=\\\"bg-primary text-white\\\">",
		ctx
	});

	return block;
}

// (923:5) <div slot="footer" class="svelteFooter">
function create_footer_slot(ctx) {
	let div;
	let button;
	let t;
	let input;
	let current;
	let mounted;
	let dispose;

	button = new Button({
			props: {
				variant: "contained",
				class: "bg-primary text-white",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("click", /*removeRow*/ ctx[18]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			t = space();
			input = element("input");
			attr_dev(input, "type", "button");
			attr_dev(input, "variant", "contained");
			attr_dev(input, "class", "btn btn-light colorgray svelte-1kpz00h");
			input.value = "No";
			add_location(input, file, 925, 6, 39902);
			attr_dev(div, "slot", "footer");
			attr_dev(div, "class", "svelteFooter");
			add_location(div, file, 922, 5, 39745);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			append_dev(div, t);
			append_dev(div, input);
			current = true;

			if (!mounted) {
				dispose = listen_dev(input, "click", /*click_handler_10*/ ctx[38], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty[2] & /*$$scope*/ 64) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(923:5) <div slot=\\\"footer\\\" class=\\\"svelteFooter\\\">",
		ctx
	});

	return block;
}

// (911:4) <Dialog       bind:visible={state.openDeleteDialog}       style={'width:500px;'}      >
function create_default_slot(ctx) {
	let div0;
	let t1;
	let div2;
	let div1;
	let span;
	let span_style_value;
	let t3;

	const block = {
		c: function create() {
			div0 = element("div");
			div0.textContent = `${Lang.save_header}`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			span = element("span");
			span.textContent = `${Lang.del_confirmation}`;
			t3 = space();
			set_style(div0, "font-weight", "bold");
			add_location(div0, file, 914, 5, 39509);
			attr_dev(span, "class", "col-md-12");
			attr_dev(span, "style", span_style_value = "margin-top:40px;margin-bottom:40px;");
			add_location(span, file, 917, 6, 39606);
			attr_dev(div1, "class", "row");
			add_location(div1, file, 916, 6, 39581);
			add_location(div2, file, 915, 5, 39568);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			insert_dev(target, t1, anchor);
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, span);
			insert_dev(target, t3, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(div2);
			if (detaching) detach_dev(t3);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(911:4) <Dialog       bind:visible={state.openDeleteDialog}       style={'width:500px;'}      >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let main;
	let center;
	let div12;
	let div9;
	let div8;
	let div2;
	let div0;
	let label0;
	let t1;
	let input0;
	let input0_value_value;
	let t2;
	let div1;
	let label1;
	let t4;
	let input1;
	let input1_value_value;
	let t5;
	let div4;
	let div3;
	let label2;
	let t7;
	let input2;
	let input2_value_value;
	let t8;
	let div7;
	let div5;
	let checkbox0;
	let t9;
	let checkbox1;
	let t10;
	let div6;
	let checkbox2;
	let t11;
	let div10;
	let t12;
	let div11;
	let button;
	let span;
	let t14;
	let t15;
	let dialog0;
	let updating_visible;
	let t16;
	let dialog1;
	let updating_visible_1;
	let current;
	let mounted;
	let dispose;

	checkbox0 = new Checkbox({
			props: {
				checked: /*state*/ ctx[3].drag_mode,
				id: "isDragDrop",
				color: "primary",
				style: "position:relative;right:10px;",
				$$slots: { default: [create_default_slot_6] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	checkbox0.$on("click", /*click_handler*/ ctx[23]);

	checkbox1 = new Checkbox({
			props: {
				id: "isSwap",
				color: "primary",
				$$slots: { default: [create_default_slot_5] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	checkbox1.$on("click", /*click_handler_1*/ ctx[24]);

	checkbox2 = new Checkbox({
			props: {
				defaultChecked: /*state*/ ctx[3].isalgo == true ? true : false,
				name: "isalgo",
				id: "isalgo",
				color: "primary",
				$$slots: { default: [create_default_slot_4] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	checkbox2.$on("click", /*changeisalgo*/ ctx[15]);
	let each_value = /*localCData*/ ctx[2];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	function dialog0_visible_binding(value) {
		/*dialog0_visible_binding*/ ctx[37].call(null, value);
	}

	let dialog0_props = {
		disableEnforceFocus: true,
		style: "width:600px;",
		$$slots: {
			default: [create_default_slot_2],
			footer: [create_footer_slot_1]
		},
		$$scope: { ctx }
	};

	if (/*state*/ ctx[3].openImageDialog !== void 0) {
		dialog0_props.visible = /*state*/ ctx[3].openImageDialog;
	}

	dialog0 = new Dialog({ props: dialog0_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog0, "visible", dialog0_visible_binding));

	function dialog1_visible_binding(value) {
		/*dialog1_visible_binding*/ ctx[39].call(null, value);
	}

	let dialog1_props = {
		style: "width:500px;",
		$$slots: {
			default: [create_default_slot],
			footer: [create_footer_slot]
		},
		$$scope: { ctx }
	};

	if (/*state*/ ctx[3].openDeleteDialog !== void 0) {
		dialog1_props.visible = /*state*/ ctx[3].openDeleteDialog;
	}

	dialog1 = new Dialog({ props: dialog1_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog1, "visible", dialog1_visible_binding));

	const block = {
		c: function create() {
			main = element("main");
			center = element("center");
			div12 = element("div");
			div9 = element("div");
			div8 = element("div");
			div2 = element("div");
			div0 = element("div");
			label0 = element("label");
			label0.textContent = `${Lang.matchlist_heading1}`;
			t1 = space();
			input0 = element("input");
			t2 = space();
			div1 = element("div");
			label1 = element("label");
			label1.textContent = `${Lang.matchlist_heading2}`;
			t4 = space();
			input1 = element("input");
			t5 = space();
			div4 = element("div");
			div3 = element("div");
			label2 = element("label");
			label2.textContent = "Maxnode:";
			t7 = space();
			input2 = element("input");
			t8 = space();
			div7 = element("div");
			div5 = element("div");
			create_component(checkbox0.$$.fragment);
			t9 = space();
			create_component(checkbox1.$$.fragment);
			t10 = space();
			div6 = element("div");
			create_component(checkbox2.$$.fragment);
			t11 = space();
			div10 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t12 = space();
			div11 = element("div");
			button = element("button");
			span = element("span");
			span.textContent = "+";
			t14 = text("Add node");
			t15 = space();
			create_component(dialog0.$$.fragment);
			t16 = space();
			create_component(dialog1.$$.fragment);
			attr_dev(label0, "for", "listheading1");
			attr_dev(label0, "class", "mb-0 float-left");
			add_location(label0, file, 696, 28, 22335);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "id", "listheading1");
			attr_dev(input0, "class", "form-control");
			input0.value = input0_value_value = /*state*/ ctx[3].listheading1;
			add_location(input0, file, 697, 28, 22445);
			attr_dev(div0, "class", "col-md-6 pr-1");
			add_location(div0, file, 695, 24, 22278);
			attr_dev(label1, "for", "listheading2");
			attr_dev(label1, "class", "mb-0 float-left");
			add_location(label1, file, 700, 28, 22669);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "id", "listheading2");
			attr_dev(input1, "class", "form-control");
			input1.value = input1_value_value = /*state*/ ctx[3].listheading2;
			add_location(input1, file, 701, 28, 22779);
			attr_dev(div1, "class", "col-md-6 pl-1");
			add_location(div1, file, 699, 24, 22612);
			attr_dev(div2, "class", "d-flex row");
			add_location(div2, file, 694, 20, 22228);
			attr_dev(label2, "for", "maxnode");
			attr_dev(label2, "class", "mb-0 float-left");
			add_location(label2, file, 706, 28, 23100);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "id", "maxnode");
			attr_dev(input2, "class", "form-control");
			attr_dev(input2, "placeholder", "Enter number only 1 to 6");
			input2.value = input2_value_value = /*state*/ ctx[3].maxnode;
			add_location(input2, file, 707, 28, 23191);
			attr_dev(div3, "class", "h float-left w-sm mr-2");
			add_location(div3, file, 705, 24, 23034);
			attr_dev(div4, "class", "d-flex width1 float-left");
			add_location(div4, file, 704, 20, 22970);
			attr_dev(div5, "class", "mt-2 d-flex");
			add_location(div5, file, 711, 24, 23481);
			attr_dev(div6, "class", "mt-2");
			add_location(div6, file, 729, 24, 24404);
			attr_dev(div7, "class", "d-flex justify-content-between");
			add_location(div7, file, 710, 20, 23411);
			attr_dev(div8, "class", "border-bottom w-100 d-inline-block pb-0 px-3 pt-3");
			add_location(div8, file, 693, 16, 22143);
			attr_dev(div9, "class", "mb-1");
			add_location(div9, file, 692, 12, 22107);
			attr_dev(div10, "id", "matchListArea");
			attr_dev(div10, "class", "row-fluid p-2 clear-both");
			add_location(div10, file, 743, 12, 25050);
			attr_dev(span, "class", "font24 svelte-1kpz00h");
			add_location(span, file, 872, 20, 37731);
			attr_dev(button, "id", "add_node");
			attr_dev(button, "aria-label", "Add node");
			attr_dev(button, "class", "btn btn-outline-primary btn-sm d-flex align-items-center pr-md add_button svelte-1kpz00h");
			add_location(button, file, 867, 16, 37468);
			attr_dev(div11, "class", "text-left ml-2 pb-3");
			add_location(div11, file, 866, 12, 37417);
			attr_dev(div12, "id", "fixedMatchList");
			attr_dev(div12, "class", "border h-auto fwidth");
			add_location(div12, file, 691, 8, 22039);
			add_location(center, file, 690, 4, 22021);
			add_location(main, file, 689, 0, 22009);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, main, anchor);
			append_dev(main, center);
			append_dev(center, div12);
			append_dev(div12, div9);
			append_dev(div9, div8);
			append_dev(div8, div2);
			append_dev(div2, div0);
			append_dev(div0, label0);
			append_dev(div0, t1);
			append_dev(div0, input0);
			append_dev(div2, t2);
			append_dev(div2, div1);
			append_dev(div1, label1);
			append_dev(div1, t4);
			append_dev(div1, input1);
			append_dev(div8, t5);
			append_dev(div8, div4);
			append_dev(div4, div3);
			append_dev(div3, label2);
			append_dev(div3, t7);
			append_dev(div3, input2);
			append_dev(div8, t8);
			append_dev(div8, div7);
			append_dev(div7, div5);
			mount_component(checkbox0, div5, null);
			append_dev(div5, t9);
			mount_component(checkbox1, div5, null);
			append_dev(div7, t10);
			append_dev(div7, div6);
			mount_component(checkbox2, div6, null);
			append_dev(div12, t11);
			append_dev(div12, div10);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div10, null);
			}

			append_dev(div12, t12);
			append_dev(div12, div11);
			append_dev(div11, button);
			append_dev(button, span);
			append_dev(button, t14);
			append_dev(main, t15);
			mount_component(dialog0, main, null);
			append_dev(main, t16);
			mount_component(dialog1, main, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*updateXml*/ ctx[4], false, false, false),
					listen_dev(input1, "change", /*updateXml*/ ctx[4], false, false, false),
					listen_dev(input2, "change", /*updateXml*/ ctx[4], false, false, false),
					listen_dev(button, "click", /*updateCData*/ ctx[5], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (!current || dirty[0] & /*state*/ 8 && input0_value_value !== (input0_value_value = /*state*/ ctx[3].listheading1) && input0.value !== input0_value_value) {
				prop_dev(input0, "value", input0_value_value);
			}

			if (!current || dirty[0] & /*state*/ 8 && input1_value_value !== (input1_value_value = /*state*/ ctx[3].listheading2) && input1.value !== input1_value_value) {
				prop_dev(input1, "value", input1_value_value);
			}

			if (!current || dirty[0] & /*state*/ 8 && input2_value_value !== (input2_value_value = /*state*/ ctx[3].maxnode) && input2.value !== input2_value_value) {
				prop_dev(input2, "value", input2_value_value);
			}

			const checkbox0_changes = {};
			if (dirty[0] & /*state*/ 8) checkbox0_changes.checked = /*state*/ ctx[3].drag_mode;

			if (dirty[2] & /*$$scope*/ 64) {
				checkbox0_changes.$$scope = { dirty, ctx };
			}

			checkbox0.$set(checkbox0_changes);
			const checkbox1_changes = {};

			if (dirty[2] & /*$$scope*/ 64) {
				checkbox1_changes.$$scope = { dirty, ctx };
			}

			checkbox1.$set(checkbox1_changes);
			const checkbox2_changes = {};
			if (dirty[0] & /*state*/ 8) checkbox2_changes.defaultChecked = /*state*/ ctx[3].isalgo == true ? true : false;

			if (dirty[2] & /*$$scope*/ 64) {
				checkbox2_changes.$$scope = { dirty, ctx };
			}

			checkbox2.$set(checkbox2_changes);

			if (dirty[0] & /*state, removeCData, localCData, tempdata1, removetextbox, openImageDialogAlgo, editalgoCData, addListItem, tempdata2, openImageDialog, editCData*/ 203663) {
				each_value = /*localCData*/ ctx[2];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div10, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			const dialog0_changes = {};

			if (dirty[2] & /*$$scope*/ 64) {
				dialog0_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible && dirty[0] & /*state*/ 8) {
				updating_visible = true;
				dialog0_changes.visible = /*state*/ ctx[3].openImageDialog;
				add_flush_callback(() => updating_visible = false);
			}

			dialog0.$set(dialog0_changes);
			const dialog1_changes = {};

			if (dirty[0] & /*state*/ 8 | dirty[2] & /*$$scope*/ 64) {
				dialog1_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible_1 && dirty[0] & /*state*/ 8) {
				updating_visible_1 = true;
				dialog1_changes.visible = /*state*/ ctx[3].openDeleteDialog;
				add_flush_callback(() => updating_visible_1 = false);
			}

			dialog1.$set(dialog1_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(checkbox0.$$.fragment, local);
			transition_in(checkbox1.$$.fragment, local);
			transition_in(checkbox2.$$.fragment, local);
			transition_in(dialog0.$$.fragment, local);
			transition_in(dialog1.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(checkbox0.$$.fragment, local);
			transition_out(checkbox1.$$.fragment, local);
			transition_out(checkbox2.$$.fragment, local);
			transition_out(dialog0.$$.fragment, local);
			transition_out(dialog1.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(main);
			destroy_component(checkbox0);
			destroy_component(checkbox1);
			destroy_component(checkbox2);
			destroy_each(each_blocks, detaching);
			destroy_component(dialog0);
			destroy_component(dialog1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function loadLibs() {
} //AH.createLink(itemUrl + 'clsSMMatchList/css/matchlistAuth.css', config);

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("MatchList", slots, []);
	let { editorState } = $$props;
	let { xml } = $$props;
	let { getChildXml } = $$props;
	let { smValidate } = $$props;

	// variables declration
	let timer = {};

	let tempdata1 = [];
	let tempdata2 = [];
	let listheading1 = "";
	let listheading2 = "";
	let multimatch = "";
	let list1 = [];
	let list2 = [];
	let localCData = [];
	let cdata = "";
	let editFlag = false;
	let editValue = "";
	let clsname = "";
	let columnid = "";
	let columnname = "";
	let index;
	let row = 0;
	let state = {};

	////// Holding states in writable form /////
	let stateData = writable({
		snackback: false,
		xml: "",
		listheading1: "",
		listheading2: "",
		multimatch: "",
		openResponseDialog: false,
		setting: 1,
		openImageDialog: false,
		imageClass: "",
		maxnode: 0,
		clname: "",
		anchorEl: null,
		drag_mode: false,
		openDeleteDialog: false,
		row_id: "",
		dir: false
	});

	const unsubscribe = stateData.subscribe(items => {
		$$invalidate(3, state = items);
	});

	beforeUpdate(() => {
		if (state.xml != xml) {
			$$invalidate(3, state.xml = xml, state);
			$$invalidate(0, tempdata1 = []);
			$$invalidate(1, tempdata2 = []);
			var newXml = XMLToJSON(state.xml);
			parseXMLAuthoring(newXml);
		}
	});

	onMount(() => {
		//loadLibs();
		// preventing the enter key in the textarea
		AI.listen(document, "keydown", "textarea", function (event) {
			if (event.keyCode == 13) {
				event.preventDefault();
			}
		});

		// jQuery(document).off("keydown","textarea").on("keydown", "textarea", function(event) {
		// 	if (event.keyCode == 13) {
		// 		event.preventDefault();
		// 	}
		// });
		// for deleting the image
		AI.listen(document, "click", ".image_delete", _ele => {
			let oldImage = AI.find(_ele.parentElement.parentElement, "textarea").value;
			let newValue = state.xml.replace(oldImage, "insert value");
			getChildXml(newValue);
		});

		// jQuery('#matchListArea').tooltip({
		// 	selector: '[data-toggle="tooltip"]'
		// });
		AI.listen(document, "mouseup", ".ui-droppable", function () {
			setTimeout(function () {
				document.querySelectorAll(".matchlist-delete").forEach(_elm => {
					_elm.classList.add("tts_nospeak");
				});
			});
		});

		//jQuery('.algo_div span').css('color','#333');
		let algo_div_len = document.querySelectorAll(".algo_div span");

		for (let i = 0; i < algo_div_len.length; i++) {
			algo_div_len[i].style.color = "#333";
		}

		// jQuery(document).on('keydown', '.delete_match_node, .delete_match_node_auth', function(event) {
		// 	if ((event.keyCode == 13 || event.which == 13)) {
		// 	// click the element which currently get the focus and enter key is down
		// 	jQuery(this).trigger('click');
		// 	event.preventDefault();
		// 	}
		// });
		AI.listen(document, "keydown", ".delete_match_node, .delete_match_node_auth", function (data, event) {
			if (event.keyCode == 13 || event.which == 13) {
				// Need ti fix one more line here....
				event.preventDefault();
			}
		});
	});

	// this function is responsible for parsing the xml
	function parseXMLAuthoring(QXML) {
		list1 = [];
		list2 = [];
		$$invalidate(2, localCData = []);

		// setting the state with the value in the xml
		$$invalidate(3, state.listheading1 = QXML.smxml.matchlist._listheading1, state);

		$$invalidate(3, state.listheading2 = QXML.smxml.matchlist._listheading2, state);
		$$invalidate(3, state.multimatch = QXML.smxml.matchlist._multimatch, state);
		$$invalidate(3, state.drag_mode = QXML.smxml.matchlist._multimatch == 2 ? true : false, state);

		// storing the values in multimatch and cdata
		multimatch = QXML.smxml.matchlist._multimatch;

		cdata = QXML.smxml.matchlist.__cdata;

		// checking for if is_algo is defined in xml or not
		if (QXML.smxml.matchlist._is_algo) {
			// if is_algo is true then put the value in isalgo as true else false
			$$invalidate(3, state.isalgo = QXML.smxml.matchlist._is_algo == "true" ? true : false, state);
		} else {
			// if is_algo is not defined means its value will be false
			$$invalidate(3, state.isalgo = false, state);
		}

		// for the maximum no of node i.e, max_node
		if (QXML.smxml.matchlist._max_node) {
			var num = Number(QXML.smxml.matchlist._max_node);
			$$invalidate(3, state.maxnode = num > 0 ? num : 0, state);
		} else {
			$$invalidate(3, state.maxnode = "", state);
		}

		// splitting the cdata with new line
		cdata = cdata.split("\n");

		// traversing through the cdata
		// jQuery(cdata).each( function (i) {
		cdata.forEach(function (data, i) {
			if (cdata[i].trim() != "") {
				// Finding the opening and closing brackets in cdata
				if (cdata[i].indexOf("[") >= 0 && cdata[i].indexOf("]") >= 0) {
					// extracting value 1 by replcing the content start with [ and end with ]
					let value1 = cdata[i].replace(cdata[i].match(/\[(.*?)\]/g), "").replace(/^\s+/g, "");

					let value2 = cdata[i].match(/\[(.*?)\]/g)[0];

					// finding the value 2 by finding the text start with [ and end with ] and the removing these brackets
					value2 = value2.replace("[", "").replace("]", "");

					// store the value in the localCData
					// localCData.push({
					// 	value1: value1,
					// 	value2: value2,
					// 	id:i
					// });
					$$invalidate(2, localCData = [...localCData, { value1, value2, id: i }]);

					list2[i] = cdata[i].replace(cdata[i].match(/\[(.*?)\]/g), "").replace(/^\s+/g, ""); // value 1
					list1[i] = cdata[i].match(/\[(.*?)\]/g)[0];
					list1[i] = list1[i].replace("[", "").replace("]", ""); // value 2
				} else {
					errMessage = "Bracket is Missing in line no. " + i;
					$$invalidate(3, state.snackback = true, state);
				}
			}
		});
	} //forceUpdate();

	// this function calls & updated the xml whenever there is change in list heading textbox & maxnode textbox
	function updateXml(e) {
		// updating the xml to json by XMLToJSON function
		var newXml = XMLToJSON(state.xml);

		// if there is change in listheading 1
		if (e.target.id == "listheading1") {
			$$invalidate(3, state.listheading1 = e.target.value, state);
		} else if (e.target.id == "listheading2") {
			// if there is change in listheading 2
			$$invalidate(3, state.listheading2 = e.target.value, state);
		} else if (e.target.id == "maxnode") {
			// if there is change in maxnode
			if (isNaN(e.target.value)) {
				AI.showmsg("Error Message", "Please enter numeric value", "error");
			} else if (e.target.value > 6) {
				AI.showmsg("Please insert value between 1 to 6");
			} else {
				$$invalidate(3, state.maxnode = e.target.value, state);
			}
		}

		timer["updateXMl1"] = setTimeout(
			function () {
				// updating the attribute values
				newXml.smxml.matchlist._listheading1 = state.listheading1;

				newXml.smxml.matchlist._listheading2 = state.listheading2;

				if (state.maxnode) {
					newXml.smxml.matchlist._max_node = state.maxnode;
				} else {
					// deleting max_node if it is not in use
					delete newXml.smxml.matchlist._max_node;
				}

				// update and store the xml 
				getChildXml(JSONToXML(newXml));

				clearTimeout(timer["updateXMl1"]);
			},
			200
		);
	}

	// whenever add button is clicked
	function updateCData() {
		//var rowInFirstColumn = jQuery("#matchListArea [class*='textarea_1']").length;
		var rowInFirstColumn = AI.selectAll("#matchListArea [class*='textarea_1']").length;

		//var rowInSeconfColumn = jQuery("#matchListArea [class*='textarea_2']").length;
		var rowInSeconfColumn = AI.selectAll("#matchListArea [class*='textarea_2']").length;

		if (rowInFirstColumn > 19 || rowInSeconfColumn > 19) {
			AI && AI.showmsg("Maximum possible options are 20");
		} else {
			row++;

			// converting the xml in json using the function XMLToJSON 
			let xml = XMLToJSON(state.xml);

			// updating the cdata
			xml.smxml.matchlist.__cdata = xml.smxml.matchlist.__cdata + `\nOption 2 Value of row ${row}[Option 1 value of row ${row}]\n`;

			// update and store the xml 
			getChildXml(JSONToXML(xml));

			setTimeout(
				function () {
					var err = smVal.validate(editorState.content_type, editorState.item, editorState.content_icon);
					smValidate(err);
				},
				200
			);
		}
	}

	function openMediaDialog() {
		//jQuery("#modal-media-upload").modal("show");
		AH$1.getBS("#modal-media-upload", "Modal").show();
	}

	// function calls onchange of the textarea in which option value is given if isalgo is off
	function editCData(val1, val2, i, e) {
		if (!e.target.value) return;

		if (e.target.id == "matchList1") {
			$$invalidate(2, localCData[i].value1 = e.target.value.replace(/\n/gm, ""), localCData);
		} else if (e.target.id == "matchList2") {
			$$invalidate(2, localCData[i].value2 = e.target.value.replace(/\n/gm, ""), localCData); //forceUpdate();
		} //forceUpdate();

		// converting the xml to json 
		let xml = XMLToJSON(state.xml);

		timer["editCdata"] = setTimeout(
			function () {
				let newCData = "\n";

				// jQuery(localCData).each(function(i) { // Replaced
				localCData.forEach(function (data, i) {
					newCData += localCData[i].value1 + "[" + localCData[i].value2 + "]\n";
				});

				// updating the cdata
				xml.smxml.matchlist.__cdata = newCData;

				// updating the xml
				getChildXml(JSONToXML(xml));

				clearTimeout(timer["editCdata"]);
			},
			500
		);
	}

	// function calls onchange of the textarea in which option value is given if isalgo is on
	function editalgoCData(val1, i, placeIndex, e) {
		if (!e.target.value) return;

		if (e.target.id == "matchList1") {
			let placeindex2 = placeIndex.split("_")[1];

			for (var j = 0; j < localCData.length; j++) {
				if (j + 1 == i + 1) {
					let str = localCData[i].value1;
					var strarr = str.split("%%");

					for (var k = 0; k < strarr.length; k++) {
						if (k == placeindex2) {
							strarr[k] = e.target.value;
							break;
						}
					}

					break;
				}
			}

			strarr = strarr.join("%%");
			$$invalidate(2, localCData[i].value1 = strarr, localCData);
		} else if (e.target.id == "matchList2") {
			let placeindex2 = placeIndex.split("_")[1]; //forceUpdate();

			for (var j = 0; j < localCData.length; j++) {
				if (j + 1 == i + 1) {
					let str = localCData[i].value2;
					var strarr = str.split("%%");

					for (var k = 0; k < strarr.length; k++) {
						if (k == placeindex2) {
							strarr[k] = e.target.value;
							break;
						}
					}

					break;
				}
			}

			strarr = strarr.join("%%");
			$$invalidate(2, localCData[i].value2 = strarr, localCData);
		} //forceUpdate();

		let xml = XMLToJSON(state.xml);

		timer["algo"] = setTimeout(
			function () {
				let newCData = "\n";

				// jQuery(localCData).each(function(i) { // Replaced
				localCData.forEach(function (data, i) {
					newCData += localCData[i].value1 + "[" + localCData[i].value2 + "]\n";
				});

				xml.smxml.matchlist.__cdata = newCData;
				getChildXml(JSONToXML(xml));
				clearTimeout(timer["algo"]);
			},
			500
		);
	}

	// for deleting the current option
	function removeCData(list1Val, list2Val, id) {
		//AH.alert("checking")
		$$invalidate(3, state.openDeleteDialog = true, state);

		$$invalidate(3, state.row_id = id, state);
	}

	// this function calls when the setting btn option is clicked
	function changeSetting(value) {
		let xml = XMLToJSON(state.xml);

		// if Normal options is selected
		if (value == 2) {
			if (state.drag_mode) {
				xml.smxml.matchlist._multimatch = 0;
			} else {
				xml.smxml.matchlist._multimatch = 2;
			}
		} else if (value == 3) {
			// for swap list
			let tempArr = xml.smxml.matchlist.__cdata.split("\n");

			let swapedCdata = "";

			tempArr.map((items, i) => {
				let tempList = items.split(/\[(.*?)\]/);

				if (tempList.length > 1) {
					swapedCdata += `${tempList[1]}[${tempList[0].trim()}]\n`;
				}
			});

			xml.smxml.matchlist.__cdata = swapedCdata;
		}

		// updating and storing the xml
		getChildXml(JSONToXML(xml));

		handleMenuClose();
	}

	// whenever the image icon is clicked this function calls
	function openImageDialog(class_name) {
		$$invalidate(3, state.openImageDialog = true, state);
		$$invalidate(3, state.imageClass = class_name, state);

		// extrcting image details
		let image = {};

		if (AH$1.select("." + class_name + " + img").nodeName) {
			image.name = AH$1.select("." + class_name + " + img").getAttribute("src").split("/").pop();
			image.alt = AH$1.select("." + class_name + " + img").getAttribute("alt");
		} else {
			image.name = "";
			image.alt = "";
		}

		// show value in the opened dailog
		timer["image"] = setTimeout(
			function () {
				AH$1.select("#MatchlistImg").value = image.name;
				AH$1.select("#MatchlistAlt").value = image.alt;
				clearTimeout(timer["image"]);
			},
			200
		);
	}

	// calls when image icon is clicked and is_algo is true 
	function openImageDialogAlgo(class_name, ids, i, clname) {
		$$invalidate(3, state.openImageDialog = true, state);
		clsname = class_name;
		index = ids;
		columnid = i;
		columnname = clname;
		$$invalidate(3, state.imageClass = class_name, state);
		$$invalidate(3, state.clname = clname, state);

		// extrcting image details
		let image = {};

		//image.name = (jQuery('.'+class_name+' + img').attr("src")) ? jQuery('.'+class_name+' + img').attr("src").split('/').pop() : "";
		if (AH$1.select("." + class_name, " + img").getAttribute("src") != null) {
			image.name = AH$1.select("." + class_name + " + img").getAttribute("src").split("/").pop();
			image.alt = AH$1.select("." + class_name + " + img").getAttribute("alt");
		} else {
			image.name = "";
			image.alt = "";
		}

		//image.alt = (jQuery('.'+class_name+' + img').attr("alt")) ? jQuery('.'+class_name+' + img').attr("alt"): "";
		// show value in the opened dailog
		timer["algoImage"] = setTimeout(
			function () {
				//jQuery('#MatchlistImg').val(image.name);
				AH$1.select("#MatchlistImg").value = image.name;

				//jQuery('#MatchlistAlt').val(image.alt);
				AH$1.select("#MatchlistAlt").value = image.alt;

				clearTimeout(timer["algoImage"]);
			},
			500
		);
	}

	// on click of cancel btn of image dialog this function called
	function closeImageDialog() {
		$$invalidate(3, state.openImageDialog = false, state);
	}

	// on click of done btn of image dialog this function called
	function insertImage() {
		if (state.isalgo == true) {
			// @pradeep sir : in both condition same code is written can we make it in one
			if (state.clname == "matchlist2" || state.clname == "matchlist1") {
				let image = {};

				// getting the image information
				image.name = AH$1.select("#MatchlistImg").value;

				image.alt = AH$1.select("#MatchlistAlt").value;
				image.oldValue = AH$1.select("." + state.imageClass).value;
				$$invalidate(3, state.openImageDialog = false, state);

				// replace with new value in the xml
				image.newValue = state.xml.replace(image.oldValue, "*" + image.name + "##" + image.alt);

				// updates the xml
				getChildXml(image.newValue);
			}
		} else {
			// finding the cdata
			let cdataArr = (/\<\!\[CDATA\[([\s\S]*?)\]\]\>/gi).exec(state.xml);

			let cdata = "";
			let keyIndex = parseInt(state.imageClass.match(/\d+$/g));
			let image = {};

			// getting image information
			//image.name = jQuery('#MatchlistImg').val();
			image.name = AH$1.select("#MatchlistImg").value;

			//image.alt = jQuery('#MatchlistAlt').val();
			image.alt = AH$1.select("#MatchlistAlt").value;

			//image.oldValue = jQuery('.'+state.imageClass).val();
			image.oldValue = AH$1.select("." + state.imageClass).value;

			$$invalidate(3, state.openImageDialog = false, state);

			if (cdataArr) {
				cdata = cdataArr[1];

				// replacing two newlines with singline newline and spliting it with newline
				cdata = cdata.replace("\n\n", "\n").trim();

				cdataArr = cdata.split("\n");

				// adding new image details
				cdataArr[keyIndex] = cdataArr[keyIndex].replace(image.oldValue, "*" + image.name + "##" + image.alt);

				// join cdataArr with neeline
				cdata = cdataArr.join("\n");

				// replace the cdata with new value
				image.newValue = xml.replace(/\<\!\[CDATA\[[\s\S]*?\]\]\>/gi, "<![CDATA[\n" + cdata + "\n]]>");
			} else {
				// adding new image details
				image.newValue = xml.replace(image.oldValue, "*" + image.name + "##" + image.alt);
			}

			// update the xml
			getChildXml(image.newValue);
		}
	}

	// called when algorithmic checkbox state is changed (on click)
	function changeisalgo(e) {
		// convert xml to json
		let xml = XMLToJSON(state.xml);

		$$invalidate(3, state.isalgo = e.target.checked, state);

		// if checkbox is checked 
		// if (e.target.checked) {
		// 	xml.smxml.matchlist._is_algo = true; 
		// } else {
		// 	xml.smxml.matchlist._is_algo = false;
		// }
		xml.smxml.matchlist._is_algo = e.target.checked;

		// updates the xml
		getChildXml(JSONToXML(xml));
	}

	// on click of delete icon which is adjusent to the option btn this function is called
	function removetextbox(ids, placeIndex, test, i, e) {
		if (test == "matchlist1") {
			var strarr;
			let placeindex2 = placeIndex.split("_")[1];

			for (var j = 0; j < localCData.length; j++) {
				if (j + 1 == i + 1) {
					let str = localCData[i].value1;
					strarr = str.split("%%");

					for (var k = 0; k < strarr.length; k++) {
						if (k == placeindex2) {
							strarr.splice(k, 1);
							break;
						}
					}

					break;
				}
			}

			strarr = strarr.join("%%");
			$$invalidate(2, localCData[i].value1 = strarr, localCData);

			if (localCData[i].value1 == "" || localCData[i].value1 == "undefined") {
				$$invalidate(2, localCData[i].value1 = "insert value", localCData);
			}
		}

		if (test == "matchlist2") {
			var strarr;
			let placeindex2 = placeIndex.split("_")[1];

			for (var j = 0; j < localCData.length; j++) {
				if (j + 1 == i + 1) {
					let str = localCData[i].value2;
					strarr = str.split("%%");

					for (var k = 0; k < strarr.length; k++) {
						if (k == placeindex2) {
							strarr.splice(k, 1);
							break;
						}
					}

					break;
				}
			}

			strarr = strarr.join("%%");
			$$invalidate(2, localCData[i].value2 = strarr, localCData);

			if (localCData[i].value2 == "" || localCData[i].value2 == "undefined") {
				$$invalidate(2, localCData[i].value2 = "insert value", localCData);
			}
		}

		let xml = XMLToJSON(state.xml);

		var timer = setTimeout(
			function () {
				let newCData = "\n";

				//jQuery(localCData).each(function(i) { // Replaced
				localCData.forEach(function (data, i) {
					newCData += localCData[i].value1 + "[" + localCData[i].value2 + "]\n";
				});

				xml.smxml.matchlist.__cdata = newCData;
				getChildXml(JSONToXML(xml));
				clearTimeout(timer);
			},
			500
		);

		$$invalidate(3, state.dir = !state.dir, state);
	}

	function addListItem(index) {
		// convert xml to json 
		let xml = XMLToJSON(state.xml);

		// splitting cdata with newline and storring it in variable newArr
		let newArr = xml.smxml.matchlist.__cdata.split("\n");

		if (newArr[newArr.length - 1] == "") {
			newArr.pop();
			newArr.unshift("");
		}

		if (newArr[0] == "" && newArr[1] == "") {
			newArr.shift();
		}

		// gettng the index of the option 
		let str = newArr[parseInt(index + 1)];

		// extracting value 1
		let value1 = str.replace(str.match(/\[(.*?)\]/g), "").replace(/^\s+/g, "");

		let value2 = str.match(/\[(.*?)\]/g)[0];
		value2 = value2.substring(1, value2.length - 1);

		// extracting value 2
		value2 = "[" + value2 + "]";

		// adding new option value
		value1 = value1 + "%%Option 2 Value";

		// store the final string at that index
		let fStr = value1 + value2;

		newArr[parseInt(index + 1)] = fStr;

		// join the array
		newArr = newArr.join("\n");

		// update the cdata
		xml.smxml.matchlist.__cdata = newArr;

		// stores and update the xml using the function getChildXml
		getChildXml(JSONToXML(xml));
	}

	// called when dropdown is open 
	function handleMenuOpen(event) {
		$$invalidate(3, state.anchorEl = event.currentTarget, state);
	}

	// called when dropdown is close 
	function handleMenuClose() {
		$$invalidate(3, state.anchorEl = null, state);
	}

	function removeRow() {
		$$invalidate(3, state.openDeleteDialog = false, state);
		let not_matched_data = "";

		// storing the values of the option in a except the deleted one
		// jQuery(localCData).each(function(index_no) { // Replaced
		localCData.forEach(function (data, index_no) {
			// check min no of options
			if (localCData.length > 1) {
				if (localCData[index_no].id != state.row_id) {
					not_matched_data += localCData[index_no].value1 + "[" + localCData[index_no].value2 + "]\n";
				}
			} else {
				AI.showmsg("At least one field required.");
				not_matched_data += localCData[index_no].value1 + "[" + localCData[index_no].value2 + "]\n";
			}
		});

		// convert xml to json
		let xml = XMLToJSON(state.xml);

		// updating cdata
		xml.smxml.matchlist.__cdata = "\n" + not_matched_data;

		// updating the xml
		getChildXml(JSONToXML(xml));
	}

	const writable_props = ["editorState", "xml", "getChildXml", "smValidate"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<MatchList> was created with unknown prop '${key}'`);
	});

	const click_handler = e => {
		changeSetting("2");
	};

	const click_handler_1 = e => {
		changeSetting("3");
	};

	const change_handler = (temp, i, j, e) => {
		editalgoCData(temp, i, i + "_" + j, e);
	};

	const click_handler_2 = (i, j, e) => {
		openImageDialogAlgo("textarea_2_" + i + "_" + j, i + "_" + j, i, "matchlist2");
	};

	const click_handler_3 = (i, j, e) => {
		removetextbox("textarea_2_" + i + "_" + j, i + "_" + j, "matchlist2", i);
	};

	const change_handler_1 = (temp1, i, k, e) => {
		editalgoCData(temp1, i, i + "_" + k, e);
	};

	const click_handler_4 = (i, k, e) => {
		openImageDialogAlgo("textarea_1_" + i + "_" + k, i + "_" + k, i, "matchlist1");
	};

	const click_handler_5 = (i, k, e) => {
		removetextbox("textarea_2_" + i + "_" + k, i + "_" + k, "matchlist1", i);
	};

	const click_handler_6 = data => {
		removeCData(data.value1, data.value2, data.id);
	};

	const change_handler_2 = (data, i, e) => {
		editCData(data.value2, data.value2, i, e);
	};

	const click_handler_7 = i => {
		openImageDialog("textarea_2_" + i);
	};

	const change_handler_3 = (data, i, e) => {
		editCData(data.value1, data.value2, i, e);
	};

	const click_handler_8 = i => {
		openImageDialog("textarea_1_" + i);
	};

	const click_handler_9 = data => {
		removeCData(data.value1, data.value2, data.id);
	};

	function dialog0_visible_binding(value) {
		state.openImageDialog = value;
		$$invalidate(3, state);
	}

	const click_handler_10 = () => {
		$$invalidate(3, state.openDeleteDialog = false, state);
	};

	function dialog1_visible_binding(value) {
		state.openDeleteDialog = value;
		$$invalidate(3, state);
	}

	$$self.$$set = $$props => {
		if ("editorState" in $$props) $$invalidate(19, editorState = $$props.editorState);
		if ("xml" in $$props) $$invalidate(20, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(21, getChildXml = $$props.getChildXml);
		if ("smValidate" in $$props) $$invalidate(22, smValidate = $$props.smValidate);
	};

	$$self.$capture_state = () => ({
		onMount,
		afterUpdate,
		beforeUpdate,
		writable,
		Loader,
		AH: AH$1,
		XMLToJSON,
		JSONToXML,
		smVal,
		l: Lang,
		Button,
		Dialog,
		Checkbox,
		editorState,
		xml,
		getChildXml,
		smValidate,
		timer,
		tempdata1,
		tempdata2,
		listheading1,
		listheading2,
		multimatch,
		list1,
		list2,
		localCData,
		cdata,
		editFlag,
		editValue,
		clsname,
		columnid,
		columnname,
		index,
		row,
		state,
		stateData,
		unsubscribe,
		loadLibs,
		parseXMLAuthoring,
		updateXml,
		updateCData,
		openMediaDialog,
		editCData,
		editalgoCData,
		removeCData,
		changeSetting,
		openImageDialog,
		openImageDialogAlgo,
		closeImageDialog,
		insertImage,
		changeisalgo,
		removetextbox,
		addListItem,
		handleMenuOpen,
		handleMenuClose,
		removeRow
	});

	$$self.$inject_state = $$props => {
		if ("editorState" in $$props) $$invalidate(19, editorState = $$props.editorState);
		if ("xml" in $$props) $$invalidate(20, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(21, getChildXml = $$props.getChildXml);
		if ("smValidate" in $$props) $$invalidate(22, smValidate = $$props.smValidate);
		if ("timer" in $$props) timer = $$props.timer;
		if ("tempdata1" in $$props) $$invalidate(0, tempdata1 = $$props.tempdata1);
		if ("tempdata2" in $$props) $$invalidate(1, tempdata2 = $$props.tempdata2);
		if ("listheading1" in $$props) listheading1 = $$props.listheading1;
		if ("listheading2" in $$props) listheading2 = $$props.listheading2;
		if ("multimatch" in $$props) multimatch = $$props.multimatch;
		if ("list1" in $$props) list1 = $$props.list1;
		if ("list2" in $$props) list2 = $$props.list2;
		if ("localCData" in $$props) $$invalidate(2, localCData = $$props.localCData);
		if ("cdata" in $$props) cdata = $$props.cdata;
		if ("editFlag" in $$props) editFlag = $$props.editFlag;
		if ("editValue" in $$props) editValue = $$props.editValue;
		if ("clsname" in $$props) clsname = $$props.clsname;
		if ("columnid" in $$props) columnid = $$props.columnid;
		if ("columnname" in $$props) columnname = $$props.columnname;
		if ("index" in $$props) index = $$props.index;
		if ("row" in $$props) row = $$props.row;
		if ("state" in $$props) $$invalidate(3, state = $$props.state);
		if ("stateData" in $$props) stateData = $$props.stateData;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		tempdata1,
		tempdata2,
		localCData,
		state,
		updateXml,
		updateCData,
		openMediaDialog,
		editCData,
		editalgoCData,
		removeCData,
		changeSetting,
		openImageDialog,
		openImageDialogAlgo,
		closeImageDialog,
		insertImage,
		changeisalgo,
		removetextbox,
		addListItem,
		removeRow,
		editorState,
		xml,
		getChildXml,
		smValidate,
		click_handler,
		click_handler_1,
		change_handler,
		click_handler_2,
		click_handler_3,
		change_handler_1,
		click_handler_4,
		click_handler_5,
		click_handler_6,
		change_handler_2,
		click_handler_7,
		change_handler_3,
		click_handler_8,
		click_handler_9,
		dialog0_visible_binding,
		click_handler_10,
		dialog1_visible_binding
	];
}

class MatchList extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-1kpz00h-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				editorState: 19,
				xml: 20,
				getChildXml: 21,
				smValidate: 22
			},
			[-1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "MatchList",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*editorState*/ ctx[19] === undefined && !("editorState" in props)) {
			console.warn("<MatchList> was created without expected prop 'editorState'");
		}

		if (/*xml*/ ctx[20] === undefined && !("xml" in props)) {
			console.warn("<MatchList> was created without expected prop 'xml'");
		}

		if (/*getChildXml*/ ctx[21] === undefined && !("getChildXml" in props)) {
			console.warn("<MatchList> was created without expected prop 'getChildXml'");
		}

		if (/*smValidate*/ ctx[22] === undefined && !("smValidate" in props)) {
			console.warn("<MatchList> was created without expected prop 'smValidate'");
		}
	}

	get editorState() {
		throw new Error("<MatchList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<MatchList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get xml() {
		throw new Error("<MatchList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<MatchList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getChildXml() {
		throw new Error("<MatchList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<MatchList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get smValidate() {
		throw new Error("<MatchList>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set smValidate(value) {
		throw new Error("<MatchList>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default MatchList;
//# sourceMappingURL=MatchList-bc7e417e.js.map
