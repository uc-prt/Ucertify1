{"version":3,"file":"HotspotToken-d408d369.js","sources":["../../../clsSMHotspot/HotspotToken.svelte"],"sourcesContent":["<script>\r\n    import { beforeUpdate, onMount } from \"svelte\";\r\n    import { writable } from \"svelte/store\";\r\n    import { AH, JSONToXML, XMLToJSON } from \"../helper/HelperAI.svelte\";\r\n    import l from '../src/libs/editorLib/language';\r\n    export let xml;\r\n    export let isReview;\r\n    export let editorState;\r\n    export let getChildXml;\r\n\r\n    let state = {};\r\n    let hdd = writable({\r\n        xml: \"\",\r\n        cdata: \"\",\r\n        viewToken: \"\",\r\n        viewTemplate: \"\",\r\n        correctAns: [],\r\n        itemLayout: [],\r\n        activeToken: \"\",\r\n        confirmDialog: false\r\n    });\r\n    const unsub = hdd.subscribe((items)=> {\r\n        state = items;\r\n    })\r\n    // calls whenever there is change in state or props \r\n    beforeUpdate(()=> {\r\n        // check if there is change in xml\r\n        if (xml != state.xml) {\r\n            state.xml = xml;\r\n            // for refreshing the module with new xml\r\n            loadModule(xml);\r\n        }\r\n    })\r\n\r\n    // called just after rendering\r\n    onMount(()=> {\r\n        // check the conditions if it is IE\r\n        // if (isIE) {\r\n        //     AH.listen(document, \"keyup\", \".hotspot-token .token\", (_this, event)=> {\r\n        //         // binding the enter key in case of ada\r\n        //         if (event.which == 13) {\r\n        //             AH.trigger(_this, 'click');\r\n        //         }\r\n        //     });\r\n        // }\r\n        \r\n        // storing and updating the xml\r\n        getChildXml(xml+\" \");\r\n        // for showing the Enter text tab by default \r\n        toggleTemplateToken(\"none\", \"block\");\r\n\r\n        // for showing the text into the editable area of the Enter text\r\n        AH.selectAll('.text_area', 'value', state.cdata.trim().replace(/[ ]+/gm, ' '));\r\n\r\n        // function for showing warning for the unneccessary space\r\n        AH.bind(\".text_area\", \"keydown\", (event)=> {\r\n            let key_pressed = event;\r\n            var element_name = document.querySelector('.text_area');\r\n            // getting start pos\r\n            var startPos = element_name.selectionStart;\r\n            // getting end pos\r\n            var endPos = element_name.selectionEnd;\r\n            if (endPos == startPos) {\r\n                // if space key is pressed\r\n                if (key_pressed.which == 32) {\r\n                    if ((AH.select('.text_area').value.charAt(startPos - 1) == \" \") || (AH.select('.text_area').value.charAt(startPos) == \" \")) {\r\n                        AH.alert(l.space_warning);\r\n                        key_pressed.preventDefault();\r\n                    }\r\n                }\r\n            }\r\n        });\r\n    });\r\n\r\n    // parse the xml and load the module accordingly\r\n    function loadModule(loadXml) {\r\n        // Here xml is converted into the json and pass into the parseXMLAuthoring for xml parsing\r\n        loadXml = XMLToJSON(loadXml);\r\n        parseXMLAuthoring(loadXml);\r\n    }\r\n\r\n    // parsing the xml for authoring\r\n    async function parseXMLAuthoring(MYXML) {\r\n        // getting the correct ans sepereted by , in array format\r\n        state.correctAns = (MYXML.smxml.div._correctAns.trim()) ? MYXML.smxml.div._correctAns.split(\",\") : [];\r\n        state.cdata = MYXML.smxml.div.__cdata;\r\n        state.activeToken = MYXML.smxml.div._type;\r\n        // switching the module on the basis of the type used\r\n        switch(MYXML.smxml.div._type) {\r\n            case \"w\" :\r\n                // in case of word\r\n                parseWord(state.cdata);\r\n                break;\r\n            case \"s\" :\r\n                // in case of sentence\r\n                parseSentance(state.cdata);\r\n                break;\r\n            case \"p\" :\r\n                // in case of paragraph\r\n                parseParagraph(state.cdata);\r\n                break;\r\n            default :\r\n                console.warn(\"No type found to parse\");\r\n            break;\r\n        }\r\n    }\r\n\r\n    // parsing the word\r\n    function parseWord(str) {\r\n        // replace the newline with \" #newline# \"\r\n        str = str.replace(/\\n/g, \" #newline# \");\r\n        //Split the string with space and remove array which contain null value\r\n        let word = str.split(\" \").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let tempWord = [];\r\n\r\n        /* split punctuation mark in word and store in the tempWord array */\r\n        word.map((data, i)=> {\r\n            let special_symbol = data.match(/[.,]/g);\r\n            if (special_symbol) {\r\n                let splitText = data.split(special_symbol[0]);\r\n                tempWord.push(splitText[0]);\r\n                tempWord.push(special_symbol[0]);\r\n                if (splitText[1].trim()) {\r\n                    tempWord.push(splitText[1]);\r\n                }\r\n            } else {\r\n                tempWord.push(data)\r\n            }\r\n        });\r\n        /*end*/\r\n        let wordArray = [];\r\n        // store id, value and selected in wordArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        tempWord.map((data, i)=> {\r\n            wordArray.push({\r\n                id: \"ID\"+i,\r\n                value: data,\r\n                selected: getSelected(i)\r\n            });\r\n        });\r\n        \r\n        state.itemLayout = wordArray;\r\n    }\r\n\r\n    // parsing the sentence\r\n    function parseSentance(str) {\r\n        //Split the string with fullstop and remove array which contain null value\r\n        let sentance = str.split(\".\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let sentanceArray = [];\r\n\r\n        // store id, value and selected in sentanceArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        sentance.map((data, i)=> {\r\n            sentanceArray.push({\r\n                id: \"ID\"+i,\r\n                value: data+\".\",\r\n                selected: getSelected(i)\r\n            });\r\n        });\r\n        state.itemLayout = sentanceArray;\r\n    }\r\n\r\n    // parsing the paragraph\r\n    function parseParagraph(str) {\r\n        //Split the string with paragraph and remove array which contain null value\r\n        let paragraph = str.split(\"\\n\").map( (item)=> { return item.trim() } ).filter( (arr)=> { return arr != \"\" });\r\n        let paragraphArray = [];\r\n\r\n        // store id, value and selected in paragraphArray\r\n        // Here id is unique id of that element , value stores the element value and selected stores wether it is selected or not\r\n        paragraph.map((data, i)=> {\r\n            paragraphArray.push({\r\n                id: \"ID\"+i,\r\n                value: data,\r\n                selected: getSelected(i)\r\n            });\r\n        });\r\n        state.itemLayout = paragraphArray;\r\n    }\r\n\r\n    // update the cdata whenever there is chamge in textarea\r\n    function updateCdata(e) {\r\n        // convert the XML into JSON using XMLToJSON func and stored in xml\r\n        let xml = XMLToJSON(state.xml);\r\n        // clear the correctAns \r\n        xml.smxml.div._correctAns = \"\";\r\n        // updtae the cdata\r\n        xml.smxml.div.__cdata = e.target.value;\r\n        // stores and update the xml \r\n        getChildXml(JSONToXML(xml));\r\n    }\r\n\r\n    // calls whenever tab is changed\r\n    function toggleTemplateToken(viewToken, viewTemplate) {\r\n        state.viewToken = viewToken;\r\n        state.viewTemplate = viewTemplate;\r\n    }\r\n\r\n    // return true if that particular position was selected\r\n    function getSelected(pos) {\r\n        return (AH.findInArray(\"ID\" + pos, state.correctAns) ? true: false);\r\n    }\r\n\r\n    // for changing the mode word, sentence, paragraph\r\n    function setTemplateType(type) {\r\n        // convert the XML into JSON using XMLToJSON func and stored in xml\r\n        let xml = XMLToJSON(state.xml);\r\n        // update the type w,p,s \r\n        xml.smxml.div._type = type;\r\n        // clear the correctAns \r\n        xml.smxml.div._correctAns = \"\";\r\n        // stores and update the xml \r\n        getChildXml(JSONToXML(xml));\r\n    }\r\n\r\n    // for setting the correct answer which is selected\r\n    function setSelected(pos) {\r\n        state.itemLayout[pos].selected = !state.itemLayout[pos].selected;\r\n        setCorrectAnswer(pos,state.itemLayout[pos].selected);\r\n    }\r\n\r\n    // set the correct answer\r\n    function setCorrectAnswer(id, selected) {\r\n        if (selected == true) {\r\n            // if token is selected then push it in correctAns\r\n            state.correctAns.push(\"ID\"+id);\r\n        } else if (selected == false) {\r\n            let deleteValue = state.correctAns.indexOf(\"ID\"+id);\r\n            if (deleteValue > -1) {\r\n                // if token is deselected then delete that element from the correctAns\r\n                state.correctAns.splice(deleteValue,1);\r\n            } \r\n        }\r\n        // join the correctAns with , sepereted and stored in crt\r\n        let crt = state.correctAns.filter( function(arr) { return arr != \"\" }).join();\r\n        // update the correctAns attribute in the xml\r\n        updateCorrect(crt);\r\n    }\r\n\r\n    // update correct answer\r\n    function updateCorrect(correct) {\r\n        // convert the XML into JSON using XMLToJSON func and stored in xml\r\n        let xml = XMLToJSON(state.xml);\r\n        // updating the correctAns\r\n        xml.smxml.div._correctAns = correct;\r\n        // stores and update the xml \r\n        getChildXml(JSONToXML(xml));\r\n    }\r\n\r\n    // whenever clear button is clicked\r\n    function clearToken() {\r\n        // convert the XML into JSON using XMLToJSON func and stored in xml\r\n        let xml = XMLToJSON(state.xml);\r\n        // updating the correctAns\r\n        xml.smxml.div._correctAns = \"\";\r\n        // stores and update the xml \r\n        getChildXml(JSONToXML(xml));\r\n    }\r\n</script>\r\n\r\n<div class=\"hotspot-token p-2 border\">\r\n    <div class=\"row ml-sm2\">\r\n        <div class=\"btn-group amazonpaybutton mb-2 mr-4\" role=\"group\">\r\n            <button \r\n                type=\"button\"\r\n                class={(state.viewTemplate == \"block\")? \"btn btn-light active\" : \"btn btn-light \"} \r\n                on:click={toggleTemplateToken.bind(this, \"none\", \"block\")}\r\n            >\r\n                {l.edit_template}\r\n            </button>\r\n            <button \r\n                type=\"button\"\r\n                class={(state.viewToken == \"block\")?\"btn btn-light active\":\"btn btn-light\"}  \r\n                on:click={toggleTemplateToken.bind(this, \"block\", \"none\")}\r\n            >\r\n                {l.edit_token}\r\n            </button>\r\n        </div>\r\n        <div style=\"display: {state.viewToken}\">\r\n            <div class=\"btn-group border-0 bg-none\">\r\n                <button \r\n                    type=\"button\" \r\n                    class={(state.activeToken == \"w\") ? \"btn btn-light active\" : \"btn btn-light\"} \r\n                    on:click={setTemplateType.bind(this, \"w\")}\r\n                >\r\n                    {l.word}\r\n                </button>\r\n                <button \r\n                    type=\"button\" \r\n                    class={(state.activeToken == \"s\") ? \"btn btn-light active\" : \"btn btn-light\"} \r\n                    on:click={setTemplateType.bind(this, \"s\")}\r\n                >\r\n                    {l.sentance}\r\n                </button>\r\n                <button \r\n                    type=\"button\"\r\n                    class={(state.activeToken == \"p\") ? \"btn btn-light active\" : \"btn btn-light\"} \r\n                    on:click={setTemplateType.bind(this, \"p\")}\r\n                >\r\n                    {l.paragraph}\r\n                </button>\r\n            </div>\r\n            <button type=\"button\" class=\"btn btn-outline-primary ml-2\" on:click={clearToken.bind(this)}>{l.clear}</button>\r\n        </div>\r\n    </div>\r\n    <textarea \r\n        style=\"display: {state.viewTemplate}\" \r\n        on:change={updateCdata.bind(this)} \r\n        rows=\"10\" \r\n        cols=\"65\"\r\n        class=\"text_area p-2 mt-3 fwidth\"\r\n    ></textarea>\r\n    <div style=\"display: {state.viewToken}\" class=\"mt-3 light-cyan-bg border\">\r\n        <div class=\"d-inline-block px-1 py-2 word_break\">\r\n        {#if state.itemLayout}\r\n            {#each state.itemLayout as data, i }\r\n                {#if data.value == \",\" || data.value == \".\"}\r\n                    <div class=\"float-start position-relative done_percent_bar\" style=\"width: 2px\">\r\n                        <span \r\n                            class=\"position-absolute float-start top5\"\r\n                            style=\"left: -3px\"\r\n                        >\r\n                            {data.value}\r\n                        </span>\r\n                    </div>\r\n                {:else if data.value == \"#newline#\" }\r\n                    <br/>\r\n                {:else}\r\n                    <div\r\n                        data-id={\"ID\"+i}\r\n                        on:click={setSelected.bind(this, i)}\r\n                        data-selected={data.selected}\r\n                        tabIndex=\"0\"\r\n                        class=\"token float-start mx-1 mb-1 p-1 border border-secondary pointer text-left {data.selected ? 'token_selected' : 'token bg-white'}\"\r\n                        style=\"user-select: none;border-radius: 3px; font: 14px;\"\r\n                    >\r\n                        {data.value}\r\n                    </div>\r\n                {/if}\r\n            {/each}\r\n        {/if}\r\n        </div>\r\n    </div>\r\n    <div style=\"display: {state.viewToken}\">\r\n        <div class=\"pl-2 pt-2 font-weight-bold\">{state.correctAns.length} {l.no_of_token}</div>\r\n    </div>\r\n    <div class=\"text-danger pl-2 pt-2\" style=\"font: 13px;\">\r\n        <span class=\"font-weight-bolder\">* {l.note_label}</span>\r\n        <span>{l.token_message}</span>\r\n    </div>\r\n</div>\r\n<style>\r\n    .token_selected {\r\n        background-color: #64bb63;\r\n        color: #fff;\r\n    }\r\n</style>"],"names":["ctx","itemLayout","length","value","selected","insert","bind","this","append","l","edit_template","edit_token","word","sentance","paragraph","correctAns","no_of_token","clear","note_label","token_message","viewTemplate","viewToken","activeToken","xml","isReview","editorState","getChildXml","state","writable","cdata","confirmDialog","subscribe","items","toggleTemplateToken","getSelected","pos","AH","findInArray","beforeUpdate","MYXML","smxml","div","_correctAns","trim","split","__cdata","_type","str","replace","map","item","filter","arr","tempWord","data","i","special_symbol","match","splitText","push","wordArray","id","parseWord","sentanceArray","parseSentance","paragraphArray","parseParagraph","console","warn","parseXMLAuthoring","XMLToJSON","onMount","selectAll","event","key_pressed","element_name","document","querySelector","startPos","selectionStart","selectionEnd","which","select","charAt","alert","space_warning","preventDefault","e","target","JSONToXML","type","deleteValue","indexOf","splice","correct","updateCorrect","join","setCorrectAnswer"],"mappings":"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"}