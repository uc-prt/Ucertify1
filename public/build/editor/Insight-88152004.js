
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35730/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, e as element, p as append_dev, v as validate_slots, L as beforeUpdate, o as onMount, A as AH, a7 as afterUpdate, X as XMLToJSON, a6 as swal, M as JSONToXML, w as writable, a5 as Lang, aa as Loader, f as space, c as create_component, j as attr_dev, k as add_location, ab as add_render_callback, l as set_style, n as insert_dev, Y as select_option, m as mount_component, q as listen_dev, G as prop_dev, t as transition_in, a as transition_out, x as detach_dev, b as destroy_component, H as run_all, a1 as toggle_class, r as group_outros, u as check_outros, ac as select_value, ad as to_number, C as validate_each_argument, z as empty, K as destroy_each, h as text, ae as set_input_value, F as set_data_dev, B as noop } from './main-d98b8a5f.js';
import { S as Sortable } from './sortable.esm-f1d1616d.js';

/* clsSMInsight/Insight.svelte generated by Svelte v3.29.0 */

const { Object: Object_1, console: console_1, document: document_1 } = globals;
const file = "clsSMInsight/Insight.svelte";

function add_css() {
	var style = element("style");
	style.id = "svelte-1aeqnok-style";
	style.textContent = ".scene_image.svelte-1aeqnok{width:32%;margin:5px 0;padding:5px}.choiceimage.svelte-1aeqnok{height:225px}.image_view.svelte-1aeqnok{height:70%;min-height:100px}.choose_btn.svelte-1aeqnok{padding:2px 20px}.stmnt_img.svelte-1aeqnok{height:228px;border:1px solid;margin:0 auto}.commu_textarea.svelte-1aeqnok{padding:10px;height:261px;max-height:261px;overflow-y:scroll;font-size:14px !important}.min_height_300.svelte-1aeqnok{min-height:300px}.icon_setup.svelte-1aeqnok{top:3px;right:10px}.tabbutton.svelte-1aeqnok:hover{box-shadow:0 0 0 .2rem rgba(135,135,135,.5)!important}\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */";
	append_dev(document_1.head, style);
}

function get_each_context_16(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[171] = list[i];
	child_ctx[173] = i;
	return child_ctx;
}

function get_each_context_15(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	child_ctx[189] = list;
	child_ctx[169] = i;
	return child_ctx;
}

function get_each_context_8(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[179] = i;
	return child_ctx;
}

function get_each_context_10(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[180] = list[i];
	child_ctx[182] = i;
	return child_ctx;
}

function get_each_context_9(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[180] = list[i];
	child_ctx[182] = i;
	return child_ctx;
}

function get_each_context_7(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[176] = list[i];
	child_ctx[177] = list;
	child_ctx[173] = i;
	return child_ctx;
}

function get_each_context_11(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[171] = list[i];
	child_ctx[173] = i;
	return child_ctx;
}

function get_each_context_12(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[24] = list[i];
	child_ctx[186] = i;
	return child_ctx;
}

function get_each_context_14(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[180] = list[i];
	child_ctx[186] = i;
	return child_ctx;
}

function get_each_context_13(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[180] = list[i];
	child_ctx[186] = i;
	return child_ctx;
}

function get_each_context_6(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	child_ctx[175] = list;
	child_ctx[169] = i;
	return child_ctx;
}

function get_each_context_5(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	child_ctx[174] = list;
	child_ctx[169] = i;
	return child_ctx;
}

function get_each_context_4(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[171] = list[i];
	child_ctx[173] = i;
	return child_ctx;
}

function get_each_context_3(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	child_ctx[170] = list;
	child_ctx[169] = i;
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	child_ctx[168] = list;
	child_ctx[169] = i;
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[163] = list[i];
	return child_ctx;
}

// (1136:4) {#if state.tabvalue == 6}
function create_if_block_35(ctx) {
	let div12;
	let div11;
	let div10;
	let div8;
	let div2;
	let div1;
	let div0;
	let label;
	let t1;
	let select;
	let option0;
	let option1;
	let option2;
	let option3;
	let t6;
	let div7;
	let input0;
	let input0_value_value;
	let t7;
	let div3;
	let input1;
	let input1_placeholder_value;
	let t8;
	let div6;
	let table;
	let thead;
	let tr;
	let th0;
	let t10;
	let th1;
	let t12;
	let th2;
	let t14;
	let tbody;
	let t15;
	let div4;
	let t17;
	let div5;
	let t19;
	let center;
	let loader;
	let t20;
	let div9;
	let button0;
	let t22;
	let button1;
	let current;
	let mounted;
	let dispose;

	loader = new Loader({
			props: { size: 60, msg: "Please Wait" },
			$$inline: true
		});

	const block = {
		c: function create() {
			div12 = element("div");
			div11 = element("div");
			div10 = element("div");
			div8 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			label = element("label");
			label.textContent = `${Lang.module}`;
			t1 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.simulation_txt}`;
			option1 = element("option");
			option1.textContent = `${Lang.playground}`;
			option2 = element("option");
			option2.textContent = `${Lang.terminal_txt}`;
			option3 = element("option");
			option3.textContent = `${Lang.livelab}`;
			t6 = space();
			div7 = element("div");
			input0 = element("input");
			t7 = space();
			div3 = element("div");
			input1 = element("input");
			t8 = space();
			div6 = element("div");
			table = element("table");
			thead = element("thead");
			tr = element("tr");
			th0 = element("th");
			th0.textContent = `${Lang.item_id}`;
			t10 = space();
			th1 = element("th");
			th1.textContent = `${Lang.title}`;
			t12 = space();
			th2 = element("th");
			th2.textContent = `${Lang.type}`;
			t14 = space();
			tbody = element("tbody");
			t15 = space();
			div4 = element("div");
			div4.textContent = `${Lang.select_instruction}`;
			t17 = space();
			div5 = element("div");
			div5.textContent = `${Lang.no_record}`;
			t19 = space();
			center = element("center");
			create_component(loader.$$.fragment);
			t20 = space();
			div9 = element("div");
			button0 = element("button");
			button0.textContent = `${Lang.cancel}`;
			t22 = space();
			button1 = element("button");
			button1.textContent = `${Lang.list_content}`;
			attr_dev(label, "class", "input-group-text");
			attr_dev(label, "for", "module_type");
			add_location(label, file, 1143, 36, 50503);
			option0.__value = "simulation";
			option0.value = option0.__value;
			add_location(option0, file, 1146, 40, 50819);
			option1.__value = "playground";
			option1.value = option1.__value;
			add_location(option1, file, 1147, 40, 50914);
			option2.__value = "terminal";
			option2.value = option2.__value;
			add_location(option2, file, 1148, 40, 51005);
			option3.__value = "lablink";
			option3.value = option3.__value;
			add_location(option3, file, 1149, 40, 51096);
			attr_dev(select, "id", "module_type");
			attr_dev(select, "class", "form-select");
			if (/*state*/ ctx[12].type === void 0) add_render_callback(() => /*select_change_handler*/ ctx[30].call(select));
			add_location(select, file, 1145, 36, 50684);
			attr_dev(div0, "class", "input-group");
			add_location(div0, file, 1142, 32, 50441);
			attr_dev(div1, "class", "col-6");
			add_location(div1, file, 1141, 28, 50389);
			attr_dev(div2, "class", "row");
			add_location(div2, file, 1140, 24, 50343);
			attr_dev(input0, "type", "hidden");
			attr_dev(input0, "name", "currentItem");
			attr_dev(input0, "id", "currentItem");
			input0.value = input0_value_value = /*state*/ ctx[12].currentItem;
			add_location(input0, file, 1155, 28, 51350);
			attr_dev(input1, "class", "form-control search");
			attr_dev(input1, "id", "search");
			attr_dev(input1, "name", "search");
			attr_dev(input1, "type", "text");
			attr_dev(input1, "placeholder", input1_placeholder_value = Lang.search_item_txt);
			add_location(input1, file, 1157, 32, 51545);
			attr_dev(div3, "class", "col-12 mb-0 mt-3 px-0 search_list h");
			add_location(div3, file, 1156, 28, 51463);
			attr_dev(th0, "class", "text-dark border");
			add_location(th0, file, 1163, 44, 52066);
			attr_dev(th1, "class", "text-dark border");
			add_location(th1, file, 1164, 44, 52156);
			attr_dev(th2, "class", "text-dark border");
			add_location(th2, file, 1165, 44, 52244);
			add_location(tr, file, 1162, 40, 52017);
			attr_dev(thead, "class", "always_show");
			add_location(thead, file, 1161, 36, 51949);
			attr_dev(tbody, "id", "table_list");
			add_location(tbody, file, 1168, 36, 52414);
			attr_dev(table, "id", "list_content_tbl");
			attr_dev(table, "class", "h list_content table table-hover table_list table_search w-100");
			add_location(table, file, 1160, 32, 51812);
			attr_dev(div4, "class", "alert alert-info col-12 float-start mb-0 mt-4");
			attr_dev(div4, "id", "info_data");
			add_location(div4, file, 1170, 32, 52519);
			attr_dev(div5, "class", "alert alert-danger mt-2 col-12 float-start h");
			attr_dev(div5, "id", "not_found");
			add_location(div5, file, 1171, 32, 52654);
			attr_dev(center, "id", "list_process");
			attr_dev(center, "class", "mt-4 pt-1 h");
			add_location(center, file, 1172, 32, 52779);
			attr_dev(div6, "class", "col-12 px-0 float-start");
			set_style(div6, "max-height", "300px");
			add_location(div6, file, 1159, 28, 51715);
			add_location(div7, file, 1154, 24, 51316);
			attr_dev(div8, "class", "modal-body overflow-y");
			add_location(div8, file, 1139, 20, 50283);
			attr_dev(button0, "type", "button");
			attr_dev(button0, "class", "btn btn-light");
			attr_dev(button0, "data-bs-dismiss", "modal");
			add_location(button0, file, 1179, 24, 53109);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "btn btn-secondary");
			add_location(button1, file, 1180, 24, 53221);
			attr_dev(div9, "class", "modal-footer");
			add_location(div9, file, 1178, 20, 53058);
			attr_dev(div10, "class", "modal-content");
			add_location(div10, file, 1138, 16, 50235);
			attr_dev(div11, "class", "modal-dialog modal-dialog-centered");
			add_location(div11, file, 1137, 12, 50170);
			attr_dev(div12, "id", "player_modal");
			attr_dev(div12, "class", "modal player_dialog fade");
			attr_dev(div12, "tabindex", "-1");
			add_location(div12, file, 1136, 8, 50087);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div12, anchor);
			append_dev(div12, div11);
			append_dev(div11, div10);
			append_dev(div10, div8);
			append_dev(div8, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, label);
			append_dev(div0, t1);
			append_dev(div0, select);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			append_dev(select, option3);
			select_option(select, /*state*/ ctx[12].type);
			append_dev(div8, t6);
			append_dev(div8, div7);
			append_dev(div7, input0);
			append_dev(div7, t7);
			append_dev(div7, div3);
			append_dev(div3, input1);
			append_dev(div7, t8);
			append_dev(div7, div6);
			append_dev(div6, table);
			append_dev(table, thead);
			append_dev(thead, tr);
			append_dev(tr, th0);
			append_dev(tr, t10);
			append_dev(tr, th1);
			append_dev(tr, t12);
			append_dev(tr, th2);
			append_dev(table, t14);
			append_dev(table, tbody);
			append_dev(div6, t15);
			append_dev(div6, div4);
			append_dev(div6, t17);
			append_dev(div6, div5);
			append_dev(div6, t19);
			append_dev(div6, center);
			mount_component(loader, center, null);
			append_dev(div10, t20);
			append_dev(div10, div9);
			append_dev(div9, button0);
			append_dev(div9, t22);
			append_dev(div9, button1);
			current = true;

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", /*handlePlayer*/ ctx[20], false, false, false),
					listen_dev(select, "change", /*select_change_handler*/ ctx[30]),
					listen_dev(button1, "click", /*getSnippet*/ ctx[19], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4096) {
				select_option(select, /*state*/ ctx[12].type);
			}

			if (!current || dirty[0] & /*state*/ 4096 && input0_value_value !== (input0_value_value = /*state*/ ctx[12].currentItem)) {
				prop_dev(input0, "value", input0_value_value);
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div12);
			destroy_component(loader);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_35.name,
		type: "if",
		source: "(1136:4) {#if state.tabvalue == 6}",
		ctx
	});

	return block;
}

// (1188:4) {#if show_dom}
function create_if_block(ctx) {
	let div2;
	let div1;
	let div0;
	let button0;
	let t1;
	let button1;
	let t3;
	let button2;
	let t5;
	let button3;
	let t7;
	let button4;
	let t9;
	let button5;
	let t11;
	let button6;
	let t13;
	let button7;
	let t15;
	let button8;
	let t17;

	function select_block_type(ctx, dirty) {
		if (/*state*/ ctx[12].tabvalue == 0) return create_if_block_1;
		if (/*state*/ ctx[12].tabvalue == 1) return create_if_block_6;
		if (/*state*/ ctx[12].tabvalue == 2) return create_if_block_7;
		if (/*state*/ ctx[12].tabvalue == 3) return create_if_block_9;
		if (/*state*/ ctx[12].tabvalue == 5) return create_if_block_10;
		if (/*state*/ ctx[12].tabvalue == 6) return create_if_block_12;
		if (/*state*/ ctx[12].tabvalue == 7) return create_if_block_32;
		if (/*state*/ ctx[12].tabvalue == 8) return create_if_block_34;
	}

	let current_block_type = select_block_type(ctx);
	let if_block = current_block_type && current_block_type(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			button0 = element("button");
			button0.textContent = `${Lang.scene}`;
			t1 = space();
			button1 = element("button");
			button1.textContent = `${Lang.intro}`;
			t3 = space();
			button2 = element("button");
			button2.textContent = `${Lang.characters}`;
			t5 = space();
			button3 = element("button");
			button3.textContent = `${Lang.assets}`;
			t7 = space();
			button4 = element("button");
			button4.textContent = `${Lang.chat_windows}`;
			t9 = space();
			button5 = element("button");
			button5.textContent = `${Lang.mission}`;
			t11 = space();
			button6 = element("button");
			button6.textContent = `${Lang.communication}`;
			t13 = space();
			button7 = element("button");
			button7.textContent = `${Lang.animation}`;
			t15 = space();
			button8 = element("button");
			button8.textContent = `${Lang.result}`;
			t17 = space();
			if (if_block) if_block.c();
			attr_dev(button0, "type", "button");
			attr_dev(button0, "data-tab", "0");
			attr_dev(button0, "class", "btn btn-outline-secondary tabbutton insightTab1 svelte-1aeqnok");
			toggle_class(button0, "active", /*state*/ ctx[12].tabvalue == 0);
			add_location(button0, file, 1191, 20, 53682);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "data-tab", "1");
			attr_dev(button1, "class", "btn btn-outline-secondary tabbutton insightTab2 svelte-1aeqnok");
			toggle_class(button1, "active", /*state*/ ctx[12].tabvalue == 1);
			add_location(button1, file, 1192, 20, 53849);
			attr_dev(button2, "type", "button");
			attr_dev(button2, "data-tab", "2");
			attr_dev(button2, "class", "btn btn-outline-secondary tabbutton insightTab3 svelte-1aeqnok");
			toggle_class(button2, "active", /*state*/ ctx[12].tabvalue == 2);
			add_location(button2, file, 1193, 20, 54016);
			attr_dev(button3, "type", "button");
			attr_dev(button3, "data-tab", "3");
			attr_dev(button3, "class", "btn btn-outline-secondary tabbutton insightTab4 h svelte-1aeqnok");
			toggle_class(button3, "active", /*state*/ ctx[12].tabvalue == 3);
			add_location(button3, file, 1194, 20, 54188);
			attr_dev(button4, "type", "button");
			attr_dev(button4, "data-tab", "4");
			attr_dev(button4, "class", "btn btn-outline-secondary tabbutton insightTab5 h svelte-1aeqnok");
			toggle_class(button4, "active", /*state*/ ctx[12].tabvalue == 4);
			add_location(button4, file, 1195, 20, 54358);
			attr_dev(button5, "type", "button");
			attr_dev(button5, "data-tab", "5");
			attr_dev(button5, "class", "btn btn-outline-secondary tabbutton insightTab6 svelte-1aeqnok");
			toggle_class(button5, "active", /*state*/ ctx[12].tabvalue == 5);
			add_location(button5, file, 1196, 20, 54534);
			attr_dev(button6, "type", "button");
			attr_dev(button6, "data-tab", "6");
			attr_dev(button6, "class", "btn btn-outline-secondary tabbutton insightTab7 svelte-1aeqnok");
			toggle_class(button6, "active", /*state*/ ctx[12].tabvalue == 6);
			add_location(button6, file, 1197, 20, 54703);
			attr_dev(button7, "type", "button");
			attr_dev(button7, "data-tab", "7");
			attr_dev(button7, "class", "btn btn-outline-secondary tabbutton insightTab8 h svelte-1aeqnok");
			toggle_class(button7, "active", /*state*/ ctx[12].tabvalue == 7);
			add_location(button7, file, 1198, 20, 54878);
			attr_dev(button8, "type", "button");
			attr_dev(button8, "data-tab", "8");
			attr_dev(button8, "class", "btn btn-outline-secondary tabbutton insightTab9 svelte-1aeqnok");
			toggle_class(button8, "active", /*state*/ ctx[12].tabvalue == 8);
			add_location(button8, file, 1199, 20, 55051);
			attr_dev(div0, "class", "btn-group col-12 flex-wrap px-0");
			attr_dev(div0, "role", "group");
			attr_dev(div0, "aria-label", "Insight Tabs");
			add_location(div0, file, 1190, 16, 53577);
			attr_dev(div1, "class", "btn-toolbar justify-content-between");
			attr_dev(div1, "role", "toolbar");
			attr_dev(div1, "aria-label", "Tabs");
			add_location(div1, file, 1189, 12, 53478);
			attr_dev(div2, "class", "insight_tabs");
			add_location(div2, file, 1188, 8, 53439);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, button0);
			append_dev(div0, t1);
			append_dev(div0, button1);
			append_dev(div0, t3);
			append_dev(div0, button2);
			append_dev(div0, t5);
			append_dev(div0, button3);
			append_dev(div0, t7);
			append_dev(div0, button4);
			append_dev(div0, t9);
			append_dev(div0, button5);
			append_dev(div0, t11);
			append_dev(div0, button6);
			append_dev(div0, t13);
			append_dev(div0, button7);
			append_dev(div0, t15);
			append_dev(div0, button8);
			append_dev(div2, t17);
			if (if_block) if_block.m(div2, null);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button0, "active", /*state*/ ctx[12].tabvalue == 0);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button1, "active", /*state*/ ctx[12].tabvalue == 1);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button2, "active", /*state*/ ctx[12].tabvalue == 2);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button3, "active", /*state*/ ctx[12].tabvalue == 3);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button4, "active", /*state*/ ctx[12].tabvalue == 4);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button5, "active", /*state*/ ctx[12].tabvalue == 5);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button6, "active", /*state*/ ctx[12].tabvalue == 6);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button7, "active", /*state*/ ctx[12].tabvalue == 7);
			}

			if (dirty[0] & /*state*/ 4096) {
				toggle_class(button8, "active", /*state*/ ctx[12].tabvalue == 8);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div2, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);

			if (if_block) {
				if_block.d();
			}
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(1188:4) {#if show_dom}",
		ctx
	});

	return block;
}

// (2163:42) 
function create_if_block_34(ctx) {
	let div7;
	let div1;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div3;
	let div2;
	let input0;
	let input0_id_value;
	let t1;
	let input1;
	let t2;
	let button;
	let t3_value = Lang.result_bg + "";
	let t3;
	let button_title_value;
	let t4;
	let small0;
	let t6;
	let div6;
	let div5;
	let div4;
	let label;
	let t7_value = Lang.result_title + "";
	let t7;
	let label_title_value;
	let t8;
	let input2;
	let input2_placeholder_value;
	let t9;
	let small1;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div7 = element("div");
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div3 = element("div");
			div2 = element("div");
			input0 = element("input");
			t1 = space();
			input1 = element("input");
			t2 = space();
			button = element("button");
			t3 = text(t3_value);
			t4 = space();
			small0 = element("small");
			small0.textContent = `${Lang.result_info}`;
			t6 = space();
			div6 = element("div");
			div5 = element("div");
			div4 = element("div");
			label = element("label");
			t7 = text(t7_value);
			t8 = space();
			input2 = element("input");
			t9 = space();
			small1 = element("small");
			small1.textContent = `${Lang.result_btn_info}`;
			attr_dev(img, "alt", /*sceneName*/ ctx[8]);
			attr_dev(img, "id", "bgResult");

			if (img.src !== (img_src_value = /*BGsrc*/ ctx[10] && /*BGsrc*/ ctx[10].trim() != ""
			? /*BGsrc*/ ctx[10]
			: /*curDomain*/ ctx[17] + "labs/insight/Images/bl.jpg")) attr_dev(img, "src", img_src_value);

			attr_dev(img, "class", "img-thumbnail w-100");
			add_location(img, file, 2166, 28, 143990);
			attr_dev(div0, "class", "col-6 m-auto");
			add_location(div0, file, 2165, 24, 143935);
			attr_dev(div1, "class", "row");
			add_location(div1, file, 2164, 20, 143893);
			attr_dev(input0, "class", "h");
			attr_dev(input0, "accept", "image/png");
			attr_dev(input0, "type", "file");
			attr_dev(input0, "id", input0_id_value = "choiceimg" + /*sceneTemp*/ ctx[16]);
			add_location(input0, file, 2176, 28, 144506);
			attr_dev(input1, "type", "hidden");
			attr_dev(input1, "id", "result_img");
			attr_dev(input1, "class", "choice_image_upld");
			attr_dev(input1, "placeholder", "Image Link");
			attr_dev(input1, "aria-describedby", "result_screen_img");
			add_location(input1, file, 2177, 28, 144667);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-dark w-100");
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.image_size_txt);
			add_location(button, file, 2186, 28, 145170);
			attr_dev(small0, "id", "result_screen_img");
			attr_dev(small0, "class", "form-text text-center text-muted");
			add_location(small0, file, 2193, 28, 145591);
			attr_dev(div2, "class", "col-4 col-lg-4 col-sm-6 m-auto");
			add_location(div2, file, 2175, 24, 144433);
			attr_dev(div3, "class", "row mt-2");
			add_location(div3, file, 2174, 20, 144386);
			attr_dev(label, "class", "input-group-text");
			attr_dev(label, "for", "result_title");
			attr_dev(label, "data-bs-toggle", "tooltip");
			attr_dev(label, "title", label_title_value = Lang.enter_result_title);
			add_location(label, file, 2201, 32, 145986);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "class", "form-control");
			attr_dev(input2, "placeholder", input2_placeholder_value = Lang.title);
			attr_dev(input2, "id", "result_title");
			add_location(input2, file, 2202, 32, 146148);
			attr_dev(div4, "class", "input-group");
			add_location(div4, file, 2200, 28, 145928);
			attr_dev(small1, "id", "result_screen_img");
			attr_dev(small1, "class", "form-text text-muted text-center font14");
			add_location(small1, file, 2211, 28, 146649);
			attr_dev(div5, "class", "col-6 m-auto");
			add_location(div5, file, 2199, 24, 145873);
			attr_dev(div6, "class", "row mt-2");
			add_location(div6, file, 2198, 20, 145826);
			attr_dev(div7, "class", "mx-auto pt-2 row");
			add_location(div7, file, 2163, 16, 143842);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div7, anchor);
			append_dev(div7, div1);
			append_dev(div1, div0);
			append_dev(div0, img);
			append_dev(div7, t0);
			append_dev(div7, div3);
			append_dev(div3, div2);
			append_dev(div2, input0);
			append_dev(div2, t1);
			append_dev(div2, input1);
			set_input_value(input1, /*BGsrc*/ ctx[10]);
			append_dev(div2, t2);
			append_dev(div2, button);
			append_dev(button, t3);
			append_dev(div2, t4);
			append_dev(div2, small0);
			append_dev(div7, t6);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, div4);
			append_dev(div4, label);
			append_dev(label, t7);
			append_dev(div4, t8);
			append_dev(div4, input2);
			set_input_value(input2, /*resultTitle*/ ctx[9]);
			append_dev(div5, t9);
			append_dev(div5, small1);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", /*change_handler_41*/ ctx[130], false, false, false),
					listen_dev(input1, "input", /*input1_input_handler_8*/ ctx[131]),
					listen_dev(input1, "click", /*click_handler_18*/ ctx[132], false, false, false),
					listen_dev(button, "click", /*click_handler_19*/ ctx[133], false, false, false),
					listen_dev(input2, "input", /*input2_input_handler_3*/ ctx[134]),
					listen_dev(input2, "change", /*change_handler_42*/ ctx[135], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneName*/ 256) {
				attr_dev(img, "alt", /*sceneName*/ ctx[8]);
			}

			if (dirty[0] & /*BGsrc*/ 1024 && img.src !== (img_src_value = /*BGsrc*/ ctx[10] && /*BGsrc*/ ctx[10].trim() != ""
			? /*BGsrc*/ ctx[10]
			: /*curDomain*/ ctx[17] + "labs/insight/Images/bl.jpg")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*BGsrc*/ 1024) {
				set_input_value(input1, /*BGsrc*/ ctx[10]);
			}

			if (dirty[0] & /*resultTitle*/ 512 && input2.value !== /*resultTitle*/ ctx[9]) {
				set_input_value(input2, /*resultTitle*/ ctx[9]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_34.name,
		type: "if",
		source: "(2163:42) ",
		ctx
	});

	return block;
}

// (2074:42) 
function create_if_block_32(ctx) {
	let div3;
	let div1;
	let div0;
	let button;
	let b;
	let t1;
	let span;
	let t2;
	let div2;
	let table;
	let mounted;
	let dispose;
	let if_block = /*localtabData*/ ctx[4].length > 0 && create_if_block_33(ctx);

	const block = {
		c: function create() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			button = element("button");
			b = element("b");
			b.textContent = `${Lang.add_anim}`;
			t1 = space();
			span = element("span");
			t2 = space();
			div2 = element("div");
			table = element("table");
			if (if_block) if_block.c();
			add_location(b, file, 2078, 32, 137346);
			attr_dev(span, "class", "icomoon-plus-circle-2 s4 relative ms-1 float-end");
			add_location(span, file, 2079, 32, 137398);
			attr_dev(button, "class", "btn bg-white rounded-pill img-shadow mb-2 border shadow-sm");
			add_location(button, file, 2077, 28, 137167);
			attr_dev(div0, "class", "relative text-center mt-2");
			add_location(div0, file, 2076, 24, 137099);
			attr_dev(div1, "class", "row");
			add_location(div1, file, 2075, 20, 137057);
			attr_dev(table, "class", "table w-100");
			add_location(table, file, 2084, 24, 137640);
			attr_dev(div2, "class", "table-responsive");
			add_location(div2, file, 2083, 20, 137585);
			attr_dev(div3, "class", "mx-auto py-2 row");
			add_location(div3, file, 2074, 16, 137006);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div1);
			append_dev(div1, div0);
			append_dev(div0, button);
			append_dev(button, b);
			append_dev(button, t1);
			append_dev(button, span);
			append_dev(div3, t2);
			append_dev(div3, div2);
			append_dev(div2, table);
			if (if_block) if_block.m(table, null);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_16*/ ctx[120], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*localtabData*/ ctx[4].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_33(ctx);
					if_block.c();
					if_block.m(table, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_32.name,
		type: "if",
		source: "(2074:42) ",
		ctx
	});

	return block;
}

// (1529:42) 
function create_if_block_12(ctx) {
	let div2;
	let div0;
	let t0;
	let div1;
	let button;
	let b;
	let t2;
	let span;
	let button_title_value;
	let mounted;
	let dispose;
	let if_block = /*localstepData*/ ctx[2].length > 0 && create_if_block_13(ctx);

	const block = {
		c: function create() {
			div2 = element("div");
			div0 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div1 = element("div");
			button = element("button");
			b = element("b");
			b.textContent = "Add Step";
			t2 = space();
			span = element("span");
			attr_dev(div0, "id", "sortable");
			add_location(div0, file, 1530, 20, 80542);
			add_location(b, file, 2068, 28, 136747);
			attr_dev(span, "class", "icomoon-plus-circle-2 s4 relative ms-1 float-end");
			add_location(span, file, 2069, 28, 136791);
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.new_step);
			attr_dev(button, "class", "btn  rounded-pill img-shadow border shadow-sm");
			add_location(button, file, 2067, 24, 136530);
			attr_dev(div1, "class", "add_step text-center mt-3");
			add_location(div1, file, 2066, 20, 136466);
			add_location(div2, file, 1529, 16, 80516);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div0);
			if (if_block) if_block.m(div0, null);
			append_dev(div2, t0);
			append_dev(div2, div1);
			append_dev(div1, button);
			append_dev(button, b);
			append_dev(button, t2);
			append_dev(button, span);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_15*/ ctx[119], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*localstepData*/ ctx[2].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_13(ctx);
					if_block.c();
					if_block.m(div0, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(1529:42) ",
		ctx
	});

	return block;
}

// (1481:42) 
function create_if_block_10(ctx) {
	let div3;
	let t0;
	let div2;
	let div1;
	let div0;
	let button;
	let b;
	let t2;
	let span;
	let button_title_value;
	let mounted;
	let dispose;
	let if_block = /*localscoreCategoryData*/ ctx[3].length > 0 && create_if_block_11(ctx);

	const block = {
		c: function create() {
			div3 = element("div");
			if (if_block) if_block.c();
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			button = element("button");
			b = element("b");
			b.textContent = `${Lang.add_mission}`;
			t2 = space();
			span = element("span");
			add_location(b, file, 1521, 36, 80168);
			attr_dev(span, "class", "icomoon-plus-circle-2 s4 relative ms-1 float-end");
			add_location(span, file, 1522, 36, 80227);
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.new_mission);
			attr_dev(button, "class", "btn rounded-pill img-shadow border shadow-sm");
			add_location(button, file, 1520, 32, 80023);
			attr_dev(div0, "class", "add_step float-end mt-2");
			add_location(div0, file, 1519, 28, 79858);
			attr_dev(div1, "class", "col-12");
			add_location(div1, file, 1518, 24, 79809);
			attr_dev(div2, "class", "row");
			add_location(div2, file, 1517, 20, 79767);
			attr_dev(div3, "class", "table_container col-md-10 mx-auto offset-2 mt-4");
			add_location(div3, file, 1481, 16, 76888);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			if (if_block) if_block.m(div3, null);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, button);
			append_dev(button, b);
			append_dev(button, t2);
			append_dev(button, span);

			if (!mounted) {
				dispose = listen_dev(div0, "click", /*click_handler_7*/ ctx[60], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*localscoreCategoryData*/ ctx[3].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_11(ctx);
					if_block.c();
					if_block.m(div3, t0);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			if (if_block) if_block.d();
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(1481:42) ",
		ctx
	});

	return block;
}

// (1410:42) 
function create_if_block_9(ctx) {
	let div;
	let table;
	let tbody;
	let each_value_3 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].assets;
	validate_each_argument(each_value_3);
	let each_blocks = [];

	for (let i = 0; i < each_value_3.length; i += 1) {
		each_blocks[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			table = element("table");
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(tbody, file, 1412, 24, 71205);
			attr_dev(table, "class", "w-100");
			add_location(table, file, 1411, 20, 71159);
			attr_dev(div, "class", "col-md-10 mx-auto offset-3 mt-5");
			add_location(div, file, 1410, 16, 71093);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, table);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localstepData, localassetsData, state, defaultScene, updateXmlValue, curDomain, sceneName*/ 4329924) {
				each_value_3 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].assets;
				validate_each_argument(each_value_3);
				let i;

				for (i = 0; i < each_value_3.length; i += 1) {
					const child_ctx = get_each_context_3(ctx, each_value_3, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_3(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_3.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(1410:42) ",
		ctx
	});

	return block;
}

// (1337:42) 
function create_if_block_7(ctx) {
	let div;
	let table;
	let tbody;
	let each_value_2 = /*localcharacterData*/ ctx[0];
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			div = element("div");
			table = element("table");
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(tbody, file, 1339, 24, 64957);
			attr_dev(table, "class", "w-100");
			add_location(table, file, 1338, 20, 64911);
			attr_dev(div, "class", "col-md-10 mx-auto offset-3 mt-5");
			add_location(div, file, 1337, 16, 64845);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, table);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localcharacterData, state, defaultScene, updateXmlValue, curDomain, sceneName*/ 4329857) {
				each_value_2 = /*localcharacterData*/ ctx[0];
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(1337:42) ",
		ctx
	});

	return block;
}

// (1287:42) 
function create_if_block_6(ctx) {
	let div9;
	let div8;
	let div1;
	let div0;
	let img;
	let img_src_value;
	let t0;
	let div7;
	let div3;
	let div2;
	let label0;
	let t1;
	let label0_title_value;
	let t2;
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let t5;
	let div6;
	let div4;
	let label1;
	let t6_value = Lang.name_text + "";
	let t6;
	let label1_title_value;
	let t7;
	let input;
	let input_placeholder_value;
	let t8;
	let div5;
	let small;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			div9 = element("div");
			div8 = element("div");
			div1 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div7 = element("div");
			div3 = element("div");
			div2 = element("div");
			label0 = element("label");
			t1 = text("Mode");
			t2 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.test}`;
			option1 = element("option");
			option1.textContent = `${Lang.learn}`;
			t5 = space();
			div6 = element("div");
			div4 = element("div");
			label1 = element("label");
			t6 = text(t6_value);
			t7 = space();
			input = element("input");
			t8 = space();
			div5 = element("div");
			small = element("small");
			small.textContent = `${Lang.button_text}`;
			attr_dev(img, "alt", /*sceneName*/ ctx[8]);
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/scene.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "min_height_300 w-100 svelte-1aeqnok");
			add_location(img, file, 1291, 32, 61943);
			attr_dev(div0, "class", "card card-body intro_image_view shadow-sm p-2 min_height_300 svelte-1aeqnok");
			add_location(div0, file, 1290, 28, 61836);
			attr_dev(div1, "class", "col-sm-7");
			add_location(div1, file, 1289, 24, 61785);
			attr_dev(label0, "for", "select_Mode");
			attr_dev(label0, "class", "input-group-text");
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "title", label0_title_value = Lang.select_game_mode);
			attr_dev(label0, "htmlfor", "select_Mode");
			add_location(label0, file, 1301, 36, 62508);
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1310, 40, 63264);
			option1.__value = option1_value_value = 1;
			option1.value = option1.__value;
			add_location(option1, file, 1311, 40, 63340);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", "select_Mode");
			if (/*localmodeData*/ ctx[5] === void 0) add_render_callback(() => /*select_change_handler_1*/ ctx[37].call(select));
			add_location(select, file, 1304, 36, 62876);
			attr_dev(div2, "class", "input-group mb-3");
			add_location(div2, file, 1300, 32, 62441);
			attr_dev(div3, "class", "form-group row mb-0");
			add_location(div3, file, 1299, 28, 62375);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "for", "begin_Button");
			attr_dev(label1, "data-bs-toggle", "tooltip");
			attr_dev(label1, "title", label1_title_value = Lang.start_button);
			add_location(label1, file, 1317, 36, 63658);
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "form-control");
			attr_dev(input, "placeholder", input_placeholder_value = Lang.placeholder_text);
			attr_dev(input, "id", "begin_Button");
			attr_dev(input, "aria-describedby", "buttonHelpBlock");
			add_location(input, file, 1318, 36, 63815);
			attr_dev(div4, "class", "input-group mb-3");
			add_location(div4, file, 1316, 32, 63591);
			attr_dev(small, "id", "buttonHelpBlock");
			attr_dev(small, "class", "form-text text-muted font14 buttonHelpBlock mb-2");
			add_location(small, file, 1329, 36, 64485);
			attr_dev(div5, "class", "col-md-12");
			add_location(div5, file, 1328, 32, 64425);
			attr_dev(div6, "class", "form-group row mb-0");
			add_location(div6, file, 1315, 28, 63525);
			attr_dev(div7, "class", "col-sm-5 mt-3 mt-sm-0");
			add_location(div7, file, 1298, 24, 62307);
			attr_dev(div8, "class", "row col-md-10 mx-auto my-5");
			add_location(div8, file, 1288, 20, 61720);
			add_location(div9, file, 1287, 16, 61694);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div9, anchor);
			append_dev(div9, div8);
			append_dev(div8, div1);
			append_dev(div1, div0);
			append_dev(div0, img);
			append_dev(div8, t0);
			append_dev(div8, div7);
			append_dev(div7, div3);
			append_dev(div3, div2);
			append_dev(div2, label0);
			append_dev(label0, t1);
			append_dev(div2, t2);
			append_dev(div2, select);
			append_dev(select, option0);
			append_dev(select, option1);
			select_option(select, /*localmodeData*/ ctx[5]);
			append_dev(div7, t5);
			append_dev(div7, div6);
			append_dev(div6, div4);
			append_dev(div4, label1);
			append_dev(label1, t6);
			append_dev(div4, t7);
			append_dev(div4, input);
			set_input_value(input, /*began*/ ctx[11]);
			append_dev(div6, t8);
			append_dev(div6, div5);
			append_dev(div5, small);

			if (!mounted) {
				dispose = [
					listen_dev(label0, "click", /*click_handler_5*/ ctx[36], false, false, false),
					listen_dev(select, "change", /*select_change_handler_1*/ ctx[37]),
					listen_dev(select, "change", /*change_handler*/ ctx[38], false, false, false),
					listen_dev(input, "input", /*input_input_handler*/ ctx[39]),
					listen_dev(input, "change", /*change_handler_1*/ ctx[40], false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneName*/ 256) {
				attr_dev(img, "alt", /*sceneName*/ ctx[8]);
			}

			if (dirty[0] & /*sceneName*/ 256 && img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/scene.png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*localmodeData*/ 32) {
				select_option(select, /*localmodeData*/ ctx[5]);
			}

			if (dirty[0] & /*began*/ 2048 && input.value !== /*began*/ ctx[11]) {
				set_input_value(input, /*began*/ ctx[11]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div9);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(1287:42) ",
		ctx
	});

	return block;
}

// (1204:12) {#if state.tabvalue == 0}
function create_if_block_1(ctx) {
	let center;
	let div0;
	let t;
	let div2;
	let div1;
	let if_block0 = /*sceneArr*/ ctx[14].length > 0 && create_if_block_3(ctx);
	let if_block1 = /*menuLayout*/ ctx[13].length > 0 && create_if_block_2(ctx);

	const block = {
		c: function create() {
			center = element("center");
			div0 = element("div");
			if (if_block0) if_block0.c();
			t = space();
			div2 = element("div");
			div1 = element("div");
			if (if_block1) if_block1.c();
			attr_dev(div0, "class", "img_gridView row col-12");
			add_location(div0, file, 1205, 20, 55325);
			attr_dev(div1, "class", "col-12 px-0");
			add_location(div1, file, 1275, 24, 60884);
			attr_dev(div2, "class", "col-12 float-start pb-3 px-0 row");
			add_location(div2, file, 1274, 20, 60813);
			add_location(center, file, 1204, 16, 55296);
		},
		m: function mount(target, anchor) {
			insert_dev(target, center, anchor);
			append_dev(center, div0);
			if (if_block0) if_block0.m(div0, null);
			append_dev(center, t);
			append_dev(center, div2);
			append_dev(div2, div1);
			if (if_block1) if_block1.m(div1, null);
		},
		p: function update(ctx, dirty) {
			if (/*sceneArr*/ ctx[14].length > 0) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div0, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*menuLayout*/ ctx[13].length > 0) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_2(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(center);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(1204:12) {#if state.tabvalue == 0}",
		ctx
	});

	return block;
}

// (2086:28) {#if localtabData.length > 0}
function create_if_block_33(ctx) {
	let each_1_anchor;
	let each_value_15 = /*localtabData*/ ctx[4];
	validate_each_argument(each_value_15);
	let each_blocks = [];

	for (let i = 0; i < each_value_15.length; i += 1) {
		each_blocks[i] = create_each_block_15(get_each_context_15(ctx, each_value_15, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*updateXmlValue, localstepData, localtabData, state, defaultScene*/ 4198548) {
				each_value_15 = /*localtabData*/ ctx[4];
				validate_each_argument(each_value_15);
				let i;

				for (i = 0; i < each_value_15.length; i += 1) {
					const child_ctx = get_each_context_15(ctx, each_value_15, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_15(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_15.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_33.name,
		type: "if",
		source: "(2086:28) {#if localtabData.length > 0}",
		ctx
	});

	return block;
}

// (2116:56) {#each state.sceneData.scene[defaultScene].anim as animation, key}
function create_each_block_16(ctx) {
	let option;
	let t_value = /*animation*/ ctx[171].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[173];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*key*/ ctx[173]);
			add_location(option, file, 2116, 60, 140313);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, defaultScene*/ 4224 && t_value !== (t_value = /*animation*/ ctx[171].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_16.name,
		type: "each",
		source: "(2116:56) {#each state.sceneData.scene[defaultScene].anim as animation, key}",
		ctx
	});

	return block;
}

// (2087:32) {#each localtabData as data, index}
function create_each_block_15(ctx) {
	let tr;
	let td0;
	let div0;
	let t0;
	let t1_value = /*index*/ ctx[169] + 1 + "";
	let t1;
	let t2;
	let t3;
	let td1;
	let div2;
	let div1;
	let label0;
	let t4_value = Lang.btn_name + "";
	let t4;
	let label0_for_value;
	let label0_title_value;
	let label0_htmlfor_value;
	let t5;
	let input0;
	let input0_placeholder_value;
	let input0_id_value;
	let t6;
	let div4;
	let div3;
	let label1;
	let t7_value = Lang.animation_play + "";
	let t7;
	let label1_for_value;
	let label1_title_value;
	let label1_htmlfor_value;
	let t8;
	let select;
	let select_id_value;
	let t9;
	let td2;
	let div6;
	let div5;
	let label2;
	let t10_value = Lang.dialog + "";
	let t10;
	let label2_for_value;
	let label2_title_value;
	let label2_htmlfor_value;
	let t11;
	let input1;
	let input1_placeholder_value;
	let input1_id_value;
	let t12;
	let div8;
	let div7;
	let label3;
	let t13_value = Lang.step_index + "";
	let t13;
	let label3_for_value;
	let label3_title_value;
	let label3_htmlfor_value;
	let t14;
	let input2;
	let input2_id_value;
	let input2_max_value;
	let t15;
	let td3;
	let button;
	let span;
	let button_title_value;
	let t16;
	let tr_key_value;
	let mounted;
	let dispose;

	function input0_input_handler_5() {
		/*input0_input_handler_5*/ ctx[121].call(input0, /*each_value_15*/ ctx[189], /*index*/ ctx[169]);
	}

	function change_handler_37(...args) {
		return /*change_handler_37*/ ctx[122](/*index*/ ctx[169], ...args);
	}

	let each_value_16 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
	validate_each_argument(each_value_16);
	let each_blocks = [];

	for (let i = 0; i < each_value_16.length; i += 1) {
		each_blocks[i] = create_each_block_16(get_each_context_16(ctx, each_value_16, i));
	}

	function select_change_handler_16() {
		/*select_change_handler_16*/ ctx[123].call(select, /*each_value_15*/ ctx[189], /*index*/ ctx[169]);
	}

	function change_handler_38(...args) {
		return /*change_handler_38*/ ctx[124](/*index*/ ctx[169], ...args);
	}

	function input1_input_handler_7() {
		/*input1_input_handler_7*/ ctx[125].call(input1, /*each_value_15*/ ctx[189], /*index*/ ctx[169]);
	}

	function change_handler_39(...args) {
		return /*change_handler_39*/ ctx[126](/*index*/ ctx[169], ...args);
	}

	function input2_input_handler_2() {
		/*input2_input_handler_2*/ ctx[127].call(input2, /*each_value_15*/ ctx[189], /*index*/ ctx[169]);
	}

	function change_handler_40(...args) {
		return /*change_handler_40*/ ctx[128](/*index*/ ctx[169], ...args);
	}

	function click_handler_17(...args) {
		return /*click_handler_17*/ ctx[129](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			div0 = element("div");
			t0 = text("(");
			t1 = text(t1_value);
			t2 = text(")");
			t3 = space();
			td1 = element("td");
			div2 = element("div");
			div1 = element("div");
			label0 = element("label");
			t4 = text(t4_value);
			t5 = space();
			input0 = element("input");
			t6 = space();
			div4 = element("div");
			div3 = element("div");
			label1 = element("label");
			t7 = text(t7_value);
			t8 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t9 = space();
			td2 = element("td");
			div6 = element("div");
			div5 = element("div");
			label2 = element("label");
			t10 = text(t10_value);
			t11 = space();
			input1 = element("input");
			t12 = space();
			div8 = element("div");
			div7 = element("div");
			label3 = element("label");
			t13 = text(t13_value);
			t14 = space();
			input2 = element("input");
			t15 = space();
			td3 = element("td");
			button = element("button");
			span = element("span");
			t16 = space();
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 2089, 44, 137936);
			add_location(td0, file, 2088, 40, 137887);
			attr_dev(label0, "for", label0_for_value = "anim_btnName" + /*index*/ ctx[169]);
			attr_dev(label0, "class", "input-group-text");
			attr_dev(label0, "title", label0_title_value = Lang.btn_name);
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "htmlfor", label0_htmlfor_value = "anim_btnName" + /*index*/ ctx[169]);
			add_location(label0, file, 2094, 52, 138276);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "placeholder", input0_placeholder_value = Lang.enter_btn_name);
			attr_dev(input0, "id", input0_id_value = "anim_btnName" + /*index*/ ctx[169]);
			add_location(input0, file, 2095, 52, 138489);
			attr_dev(div1, "class", "input-group");
			add_location(div1, file, 2093, 48, 138198);
			attr_dev(div2, "class", "form-group row mb-2");
			add_location(div2, file, 2092, 44, 138116);
			attr_dev(label1, "for", label1_for_value = "anim_play" + /*index*/ ctx[169]);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "data-bs-toggle", "tooltip");
			attr_dev(label1, "title", label1_title_value = Lang.animation_play);
			attr_dev(label1, "htmlfor", label1_htmlfor_value = "anim_play" + /*index*/ ctx[169]);
			add_location(label1, file, 2107, 52, 139391);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "anim_play" + /*index*/ ctx[169]);
			if (/*data*/ ctx[163].name === void 0) add_render_callback(select_change_handler_16);
			add_location(select, file, 2109, 52, 139702);
			attr_dev(div3, "class", "input-group");
			add_location(div3, file, 2106, 48, 139313);
			attr_dev(div4, "class", "form-group row mb-2");
			add_location(div4, file, 2105, 44, 139231);
			add_location(td1, file, 2091, 40, 138067);
			attr_dev(label2, "for", label2_for_value = "anim_dilog" + /*index*/ ctx[169]);
			attr_dev(label2, "class", "input-group-text");
			attr_dev(label2, "data-bs-toggle", "tooltip");
			attr_dev(label2, "title", label2_title_value = Lang.dialog);
			attr_dev(label2, "htmlfor", label2_htmlfor_value = "anim_dilog" + /*index*/ ctx[169]);
			add_location(label2, file, 2125, 52, 140896);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "form-control");
			attr_dev(input1, "placeholder", input1_placeholder_value = Lang.dialog);
			attr_dev(input1, "id", input1_id_value = "anim_dilog" + /*index*/ ctx[169]);
			add_location(input1, file, 2126, 52, 141101);
			attr_dev(div5, "class", "input-group");
			add_location(div5, file, 2124, 48, 140818);
			attr_dev(div6, "class", "form-group row mb-2");
			add_location(div6, file, 2123, 44, 140736);
			attr_dev(label3, "for", label3_for_value = "anim_stepindex" + /*index*/ ctx[169]);
			attr_dev(label3, "class", "input-group-text");
			attr_dev(label3, "data-bs-toggle", "tooltip");
			attr_dev(label3, "title", label3_title_value = Lang.step_index);
			attr_dev(label3, "htmlfor", label3_htmlfor_value = "anim_stepindex" + /*index*/ ctx[169]);
			add_location(label3, file, 2138, 52, 141996);
			attr_dev(input2, "type", "number");
			attr_dev(input2, "class", "form-control");
			attr_dev(input2, "id", input2_id_value = "anim_stepindex" + /*index*/ ctx[169]);
			attr_dev(input2, "min", "1");
			attr_dev(input2, "max", input2_max_value = /*localstepData*/ ctx[2].length);
			add_location(input2, file, 2139, 52, 142217);
			attr_dev(div7, "class", "input-group");
			add_location(div7, file, 2137, 48, 141918);
			attr_dev(div8, "class", "form-group row mb-2");
			add_location(div8, file, 2136, 44, 141836);
			add_location(td2, file, 2122, 40, 140687);
			attr_dev(span, "class", "icomoon-remove-2 s4 pointer text-dark");
			add_location(span, file, 2153, 48, 143423);
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.delete);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "bg-white delete_button ms-auto text-white border-0 mt-1");
			attr_dev(button, "tabindex", "0");
			attr_dev(button, "role", "button");
			attr_dev(button, "aria-pressed", "false");
			add_location(button, file, 2152, 44, 143128);
			attr_dev(td3, "align", "center");
			add_location(td3, file, 2151, 40, 143064);
			attr_dev(tr, "key", tr_key_value = /*index*/ ctx[169]);
			add_location(tr, file, 2087, 36, 137830);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, div0);
			append_dev(div0, t0);
			append_dev(div0, t1);
			append_dev(div0, t2);
			append_dev(tr, t3);
			append_dev(tr, td1);
			append_dev(td1, div2);
			append_dev(div2, div1);
			append_dev(div1, label0);
			append_dev(label0, t4);
			append_dev(div1, t5);
			append_dev(div1, input0);
			set_input_value(input0, /*data*/ ctx[163].title);
			append_dev(td1, t6);
			append_dev(td1, div4);
			append_dev(div4, div3);
			append_dev(div3, label1);
			append_dev(label1, t7);
			append_dev(div3, t8);
			append_dev(div3, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*data*/ ctx[163].name);
			append_dev(tr, t9);
			append_dev(tr, td2);
			append_dev(td2, div6);
			append_dev(div6, div5);
			append_dev(div5, label2);
			append_dev(label2, t10);
			append_dev(div5, t11);
			append_dev(div5, input1);
			set_input_value(input1, /*data*/ ctx[163].dialog);
			append_dev(td2, t12);
			append_dev(td2, div8);
			append_dev(div8, div7);
			append_dev(div7, label3);
			append_dev(label3, t13);
			append_dev(div7, t14);
			append_dev(div7, input2);
			set_input_value(input2, /*data*/ ctx[163].guid);
			append_dev(tr, t15);
			append_dev(tr, td3);
			append_dev(td3, button);
			append_dev(button, span);
			append_dev(tr, t16);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input0_input_handler_5),
					listen_dev(input0, "change", change_handler_37, false, false, false),
					listen_dev(select, "change", select_change_handler_16),
					listen_dev(select, "change", change_handler_38, false, false, false),
					listen_dev(input1, "input", input1_input_handler_7),
					listen_dev(input1, "change", change_handler_39, false, false, false),
					listen_dev(input2, "input", input2_input_handler_2),
					listen_dev(input2, "change", change_handler_40, false, false, false),
					listen_dev(button, "click", click_handler_17, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localtabData*/ 16 && input0.value !== /*data*/ ctx[163].title) {
				set_input_value(input0, /*data*/ ctx[163].title);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				each_value_16 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
				validate_each_argument(each_value_16);
				let i;

				for (i = 0; i < each_value_16.length; i += 1) {
					const child_ctx = get_each_context_16(ctx, each_value_16, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_16(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_16.length;
			}

			if (dirty[0] & /*localtabData*/ 16) {
				select_option(select, /*data*/ ctx[163].name);
			}

			if (dirty[0] & /*localtabData*/ 16 && input1.value !== /*data*/ ctx[163].dialog) {
				set_input_value(input1, /*data*/ ctx[163].dialog);
			}

			if (dirty[0] & /*localstepData*/ 4 && input2_max_value !== (input2_max_value = /*localstepData*/ ctx[2].length)) {
				attr_dev(input2, "max", input2_max_value);
			}

			if (dirty[0] & /*localtabData*/ 16 && to_number(input2.value) !== /*data*/ ctx[163].guid) {
				set_input_value(input2, /*data*/ ctx[163].guid);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_15.name,
		type: "each",
		source: "(2087:32) {#each localtabData as data, index}",
		ctx
	});

	return block;
}

// (1532:24) {#if localstepData.length > 0}
function create_if_block_13(ctx) {
	let each_1_anchor;
	let each_value_6 = /*localstepData*/ ctx[2];
	validate_each_argument(each_value_6);
	let each_blocks = [];

	for (let i = 0; i < each_value_6.length; i += 1) {
		each_blocks[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localstepData, updateXmlValue, localscoreCategoryData, localcharacterChoice, state, defaultScene, onChoiceImageSelect, curDomain, triggerDelete, localcharacterData, sceneName*/ 12980623) {
				each_value_6 = /*localstepData*/ ctx[2];
				validate_each_argument(each_value_6);
				let i;

				for (i = 0; i < each_value_6.length; i += 1) {
					const child_ctx = get_each_context_6(ctx, each_value_6, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_6(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_6.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(1532:24) {#if localstepData.length > 0}",
		ctx
	});

	return block;
}

// (1548:52) {#if data.allowChoices != 7}
function create_if_block_27(ctx) {
	let div4;
	let div0;
	let label;
	let label_for_value;
	let label_htmlfor_value;
	let t1;
	let div2;
	let div1;
	let t2;
	let div3;

	function select_block_type_3(ctx, dirty) {
		if (/*localcharacterData*/ ctx[0][/*data*/ ctx[163].name].visible == 0) return create_if_block_31;
		return create_else_block_5;
	}

	let current_block_type = select_block_type_3(ctx);
	let if_block0 = current_block_type(ctx);

	function select_block_type_4(ctx, dirty) {
		if (/*localcharacterData*/ ctx[0][/*data*/ ctx[163].name].visible == 0) return create_if_block_28;
		return create_else_block_4;
	}

	let current_block_type_1 = select_block_type_4(ctx);
	let if_block1 = current_block_type_1(ctx);

	const block = {
		c: function create() {
			div4 = element("div");
			div0 = element("div");
			label = element("label");
			label.textContent = `${Lang.choose_character}`;
			t1 = space();
			div2 = element("div");
			div1 = element("div");
			if_block0.c();
			t2 = space();
			div3 = element("div");
			if_block1.c();
			attr_dev(label, "for", label_for_value = "select-character" + /*index*/ ctx[169]);
			attr_dev(label, "class", "d-inline font18 px-0 text-truncate");
			attr_dev(label, "htmlfor", label_htmlfor_value = "select-character" + /*index*/ ctx[169]);
			add_location(label, file, 1550, 64, 82446);
			attr_dev(div0, "class", "row mb-2 mx-0");
			add_location(div0, file, 1549, 60, 82354);
			attr_dev(div1, "class", "stmnt_img w-100 px-0 svelte-1aeqnok");
			add_location(div1, file, 1553, 64, 82809);
			attr_dev(div2, "class", "row mx-0");
			add_location(div2, file, 1552, 60, 82722);
			attr_dev(div3, "class", "row mx-0");
			add_location(div3, file, 1561, 60, 83769);
			attr_dev(div4, "class", "col-3 pt-1");
			add_location(div4, file, 1548, 56, 82269);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div4, anchor);
			append_dev(div4, div0);
			append_dev(div0, label);
			append_dev(div4, t1);
			append_dev(div4, div2);
			append_dev(div2, div1);
			if_block0.m(div1, null);
			append_dev(div4, t2);
			append_dev(div4, div3);
			if_block1.m(div3, null);
		},
		p: function update(ctx, dirty) {
			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div1, null);
				}
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_4(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div3, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div4);
			if_block0.d();
			if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_27.name,
		type: "if",
		source: "(1548:52) {#if data.allowChoices != 7}",
		ctx
	});

	return block;
}

// (1557:68) {:else}
function create_else_block_5(ctx) {
	let img;
	let img_alt_value;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			set_style(img, "width", "100%");
			set_style(img, "height", "100%");
			attr_dev(img, "alt", img_alt_value = "Character " + (/*data*/ ctx[163].name + 1));
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/character.png")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 1557, 72, 83366);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localstepData*/ 4 && img_alt_value !== (img_alt_value = "Character " + (/*data*/ ctx[163].name + 1))) {
				attr_dev(img, "alt", img_alt_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_5.name,
		type: "else",
		source: "(1557:68) {:else}",
		ctx
	});

	return block;
}

// (1555:68) {#if localcharacterData[data.name].visible == 0}
function create_if_block_31(ctx) {
	let img;
	let img_alt_value;
	let img_src_value;

	const block = {
		c: function create() {
			img = element("img");
			set_style(img, "width", "100%");
			set_style(img, "height", "100%");
			attr_dev(img, "alt", img_alt_value = "Character " + (/*data*/ ctx[163].name + 1) + "" + /*index*/ ctx[169]);
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/chracter" + (/*data*/ ctx[163].name + 1) + ".png")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 1555, 72, 83033);
		},
		m: function mount(target, anchor) {
			insert_dev(target, img, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localstepData*/ 4 && img_alt_value !== (img_alt_value = "Character " + (/*data*/ ctx[163].name + 1) + "" + /*index*/ ctx[169])) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*sceneName, localstepData*/ 260 && img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/chracter" + (/*data*/ ctx[163].name + 1) + ".png")) {
				attr_dev(img, "src", img_src_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(img);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_31.name,
		type: "if",
		source: "(1555:68) {#if localcharacterData[data.name].visible == 0}",
		ctx
	});

	return block;
}

// (1579:64) {:else}
function create_else_block_4(ctx) {
	let div;
	let select;
	let option;
	let t_value = Lang.not_visible + "";
	let t;
	let option_value_value;
	let option_k_value;
	let select_id_value;
	let mounted;
	let dispose;
	let each_value_14 = /*localcharacterData*/ ctx[0];
	validate_each_argument(each_value_14);
	let each_blocks = [];

	for (let i = 0; i < each_value_14.length; i += 1) {
		each_blocks[i] = create_each_block_14(get_each_context_14(ctx, each_value_14, i));
	}

	function select_change_handler_6() {
		/*select_change_handler_6*/ ctx[64].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_12(...args) {
		return /*change_handler_12*/ ctx[65](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*data*/ ctx[163].name;
			option.value = option.__value;
			attr_dev(option, "k", option_k_value = /*data*/ ctx[163].name);
			add_location(option, file, 1592, 76, 87000);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "select-character" + /*index*/ ctx[169]);
			if (/*data*/ ctx[163].name === void 0) add_render_callback(select_change_handler_6);
			add_location(select, file, 1581, 72, 85832);
			attr_dev(div, "class", "input-group input-group-sm mt-1 px-0");
			add_location(div, file, 1579, 68, 85597);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			append_dev(select, option);
			append_dev(option, t);
			select_option(select, /*data*/ ctx[163].name);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_6),
					listen_dev(select, "change", change_handler_12, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterData*/ 1) {
				each_value_14 = /*localcharacterData*/ ctx[0];
				validate_each_argument(each_value_14);
				let i;

				for (i = 0; i < each_value_14.length; i += 1) {
					const child_ctx = get_each_context_14(ctx, each_value_14, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_14(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, option);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_14.length;
			}

			if (dirty[0] & /*localstepData*/ 4 && option_value_value !== (option_value_value = /*data*/ ctx[163].name)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}

			if (dirty[0] & /*localstepData*/ 4 && option_k_value !== (option_k_value = /*data*/ ctx[163].name)) {
				attr_dev(option, "k", option_k_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].name);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_4.name,
		type: "else",
		source: "(1579:64) {:else}",
		ctx
	});

	return block;
}

// (1563:64) {#if localcharacterData[data.name].visible == 0}
function create_if_block_28(ctx) {
	let div;
	let select;
	let select_id_value;
	let mounted;
	let dispose;
	let each_value_13 = /*localcharacterData*/ ctx[0];
	validate_each_argument(each_value_13);
	let each_blocks = [];

	for (let i = 0; i < each_value_13.length; i += 1) {
		each_blocks[i] = create_each_block_13(get_each_context_13(ctx, each_value_13, i));
	}

	function select_change_handler_5() {
		/*select_change_handler_5*/ ctx[62].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_11(...args) {
		return /*change_handler_11*/ ctx[63](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "select-character" + /*index*/ ctx[169]);
			if (/*data*/ ctx[163].name === void 0) add_render_callback(select_change_handler_5);
			add_location(select, file, 1565, 72, 84208);
			attr_dev(div, "class", "input-group input-group-sm mt-1 px-0");
			add_location(div, file, 1563, 68, 83973);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*data*/ ctx[163].name);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_5),
					listen_dev(select, "change", change_handler_11, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterData*/ 1) {
				each_value_13 = /*localcharacterData*/ ctx[0];
				validate_each_argument(each_value_13);
				let i;

				for (i = 0; i < each_value_13.length; i += 1) {
					const child_ctx = get_each_context_13(ctx, each_value_13, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_13(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_13.length;
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].name);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_28.name,
		type: "if",
		source: "(1563:64) {#if localcharacterData[data.name].visible == 0}",
		ctx
	});

	return block;
}

// (1589:80) {#if localcharacterData[keys].visible == 0}
function create_if_block_30(ctx) {
	let option;
	let t_value = /*character*/ ctx[180].name + "";
	let t;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*keys*/ ctx[186];
			option.value = option.__value;
			add_location(option, file, 1589, 84, 86707);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localcharacterData*/ 1 && t_value !== (t_value = /*character*/ ctx[180].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_30.name,
		type: "if",
		source: "(1589:80) {#if localcharacterData[keys].visible == 0}",
		ctx
	});

	return block;
}

// (1588:76) {#each localcharacterData as character, keys}
function create_each_block_14(ctx) {
	let if_block_anchor;
	let if_block = /*localcharacterData*/ ctx[0][/*keys*/ ctx[186]].visible == 0 && create_if_block_30(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*localcharacterData*/ ctx[0][/*keys*/ ctx[186]].visible == 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_30(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_14.name,
		type: "each",
		source: "(1588:76) {#each localcharacterData as character, keys}",
		ctx
	});

	return block;
}

// (1573:80) {#if localcharacterData[keys].visible == 0}
function create_if_block_29(ctx) {
	let option;
	let t_value = /*character*/ ctx[180].name + "";
	let t;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*keys*/ ctx[186];
			option.value = option.__value;
			add_location(option, file, 1573, 84, 85083);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localcharacterData*/ 1 && t_value !== (t_value = /*character*/ ctx[180].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_29.name,
		type: "if",
		source: "(1573:80) {#if localcharacterData[keys].visible == 0}",
		ctx
	});

	return block;
}

// (1572:76) {#each localcharacterData as character, keys}
function create_each_block_13(ctx) {
	let if_block_anchor;
	let if_block = /*localcharacterData*/ ctx[0][/*keys*/ ctx[186]].visible == 0 && create_if_block_29(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*localcharacterData*/ ctx[0][/*keys*/ ctx[186]].visible == 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_29(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_13.name,
		type: "each",
		source: "(1572:76) {#each localcharacterData as character, keys}",
		ctx
	});

	return block;
}

// (1602:60) {#if data.allowChoices == 7}
function create_if_block_26(ctx) {
	let div2;
	let div1;
	let div0;
	let label;
	let t0_value = Lang.voice + "";
	let t0;
	let label_title_value;
	let t1;
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let mounted;
	let dispose;

	function select_change_handler_7() {
		/*select_change_handler_7*/ ctx[66].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_13(...args) {
		return /*change_handler_13*/ ctx[67](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			label = element("label");
			t0 = text(t0_value);
			t1 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.female}`;
			option1 = element("option");
			option1.textContent = `${Lang.male}`;
			attr_dev(label, "for", "selectVoice");
			attr_dev(label, "data-bs-toggle", "tooltip");
			attr_dev(label, "title", label_title_value = Lang.narrater_voice);
			attr_dev(label, "class", "input-group-text");
			add_location(label, file, 1605, 76, 88163);
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1613, 80, 89100);
			option1.__value = option1_value_value = 1;
			option1.value = option1.__value;
			add_location(option1, file, 1614, 80, 89218);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", "selectVoice");
			if (/*data*/ ctx[163].voice === void 0) add_render_callback(select_change_handler_7);
			add_location(select, file, 1607, 76, 88473);
			attr_dev(div0, "class", "input-group input-group-sm");
			add_location(div0, file, 1604, 72, 88046);
			attr_dev(div1, "class", "float-start w-100");
			add_location(div1, file, 1603, 68, 87942);
			attr_dev(div2, "class", "col-lg-2 col-3 form-group pl-0");
			add_location(div2, file, 1602, 64, 87829);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div2, anchor);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, label);
			append_dev(label, t0);
			append_dev(div0, t1);
			append_dev(div0, select);
			append_dev(select, option0);
			append_dev(select, option1);
			select_option(select, /*data*/ ctx[163].voice);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_7),
					listen_dev(select, "change", change_handler_13, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].voice);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div2);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_26.name,
		type: "if",
		source: "(1602:60) {#if data.allowChoices == 7}",
		ctx
	});

	return block;
}

// (1640:60) {#if data.allowChoices <= 0}
function create_if_block_25(ctx) {
	let div1;
	let div0;
	let input;
	let input_title_value;
	let input_id_value;
	let input_checked_value;
	let t0;
	let label;
	let t1_value = Lang.autocomplete + "";
	let t1;
	let label_title_value;
	let label_for_value;
	let mounted;
	let dispose;

	function change_handler_15(...args) {
		return /*change_handler_15*/ ctx[70](/*index*/ ctx[169], ...args);
	}

	function input_change_handler() {
		/*input_change_handler*/ ctx[71].call(input, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			attr_dev(input, "class", "form-check-input");
			attr_dev(input, "tabindex", "0");
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "data-bs-toggle", "tooltip");
			attr_dev(input, "title", input_title_value = Lang.autocomplete_txt);
			attr_dev(input, "id", input_id_value = "selectAuto" + /*index*/ ctx[169]);
			input.checked = input_checked_value = /*data*/ ctx[163].auto == 0 ? false : true;
			add_location(input, file, 1642, 72, 91965);
			attr_dev(label, "class", "text-truncate form-check-label mt-small");
			attr_dev(label, "data-bs-toggle", "tooltip");
			attr_dev(label, "title", label_title_value = Lang.autocomplete_txt);
			attr_dev(label, "for", label_for_value = "selectAuto" + /*index*/ ctx[169]);
			add_location(label, file, 1643, 72, 92319);
			attr_dev(div0, "class", "form-check form-switch mt-1");
			add_location(div0, file, 1641, 68, 91851);
			attr_dev(div1, "class", "col-4 col-lg-3 col-md-4 pr-0");
			add_location(div1, file, 1640, 64, 91740);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, input);
			set_input_value(input, /*data*/ ctx[163].auto);
			append_dev(div0, t0);
			append_dev(div0, label);
			append_dev(label, t1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", change_handler_15, false, false, false),
					listen_dev(input, "change", input_change_handler)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && input_checked_value !== (input_checked_value = /*data*/ ctx[163].auto == 0 ? false : true)) {
				prop_dev(input, "checked", input_checked_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				set_input_value(input, /*data*/ ctx[163].auto);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_25.name,
		type: "if",
		source: "(1640:60) {#if data.allowChoices <= 0}",
		ctx
	});

	return block;
}

// (1656:60) {#if data.allowChoices == 1 || data.allowChoices == 3}
function create_if_block_24(ctx) {
	let div;
	let img;
	let img_id_value;
	let img_src_value;
	let t0;
	let button;
	let t1_value = Lang.file_elem + "";
	let t1;
	let button_title_value;
	let t2;
	let input0;
	let input0_id_value;
	let t3;
	let input1;
	let input1_id_value;
	let input1_placeholder_value;
	let mounted;
	let dispose;

	function click_handler_10(...args) {
		return /*click_handler_10*/ ctx[73](/*index*/ ctx[169], ...args);
	}

	function change_handler_16(...args) {
		return /*change_handler_16*/ ctx[74](/*index*/ ctx[169], ...args);
	}

	function input1_input_handler_2() {
		/*input1_input_handler_2*/ ctx[75].call(input1, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function click_handler_11(...args) {
		return /*click_handler_11*/ ctx[76](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			img = element("img");
			t0 = space();
			button = element("button");
			t1 = text(t1_value);
			t2 = space();
			input0 = element("input");
			t3 = space();
			input1 = element("input");
			attr_dev(img, "id", img_id_value = "samplechoice_image" + /*index*/ ctx[169]);
			attr_dev(img, "alt", "Choice Question Image");

			if (img.src !== (img_src_value = /*data*/ ctx[163].image == "" || /*data*/ ctx[163].image == null || /*data*/ ctx[163].image == "undefined"
			? /*curDomain*/ ctx[17] + "labs/insight/Images/bl.jpg"
			: /*data*/ ctx[163].image)) attr_dev(img, "src", img_src_value);

			attr_dev(img, "class", "img-thumbnail choiceimage rounded-0 w-100 svelte-1aeqnok");
			add_location(img, file, 1658, 68, 94063);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-dark rounded-0 w-100 text-truncate");
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.image_size_txt);
			add_location(button, file, 1664, 68, 94747);
			attr_dev(div, "class", "col-4 px-0");
			add_location(div, file, 1656, 64, 93856);
			attr_dev(input0, "class", "h");
			attr_dev(input0, "accept", "image/png");
			attr_dev(input0, "type", "file");
			attr_dev(input0, "id", input0_id_value = "choiceimg" + /*index*/ ctx[169]);
			add_location(input0, file, 1672, 64, 95537);
			attr_dev(input1, "type", "hidden");
			attr_dev(input1, "id", input1_id_value = "choice_question_image" + /*index*/ ctx[169]);
			attr_dev(input1, "class", "form-control w-50 choice_image_upld");
			attr_dev(input1, "placeholder", input1_placeholder_value = Lang.image_link);
			add_location(input1, file, 1673, 64, 95734);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, img);
			append_dev(div, t0);
			append_dev(div, button);
			append_dev(button, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, input0, anchor);
			insert_dev(target, t3, anchor);
			insert_dev(target, input1, anchor);
			set_input_value(input1, /*data*/ ctx[163].image);

			if (!mounted) {
				dispose = [
					listen_dev(button, "click", click_handler_10, false, false, false),
					listen_dev(input0, "change", change_handler_16, false, false, false),
					listen_dev(input1, "input", input1_input_handler_2),
					listen_dev(input1, "click", click_handler_11, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && img.src !== (img_src_value = /*data*/ ctx[163].image == "" || /*data*/ ctx[163].image == null || /*data*/ ctx[163].image == "undefined"
			? /*curDomain*/ ctx[17] + "labs/insight/Images/bl.jpg"
			: /*data*/ ctx[163].image)) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				set_input_value(input1, /*data*/ ctx[163].image);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(input0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(input1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_24.name,
		type: "if",
		source: "(1656:60) {#if data.allowChoices == 1 || data.allowChoices == 3}",
		ctx
	});

	return block;
}

// (1699:48) {#if (data.allowChoices == 2 || data.allowChoices == 4 || data.allowChoices == 5) }
function create_if_block_23(ctx) {
	let div8;
	let div7;
	let div2;
	let div1;
	let label0;

	let t0_value = (/*data*/ ctx[163].allowChoices == 5 || /*data*/ ctx[163].allowChoices == 4
	? "Value"
	: "Item Id") + "";

	let t0;
	let label0_for_value;
	let label0_title_value;
	let t1;
	let input0;
	let input0_id_value;
	let t2;
	let div0;
	let span;
	let t3;
	let div4;
	let div3;
	let label1;
	let t4_value = Lang.mission + "";
	let t4;
	let label1_for_value;
	let label1_title_value;
	let t5;
	let select;
	let select_id_value;
	let t6;
	let div6;
	let div5;
	let label2;
	let t7_value = Lang.score + "";
	let t7;
	let label2_for_value;
	let label2_title_value;
	let t8;
	let input1;
	let input1_id_value;
	let mounted;
	let dispose;

	function input0_input_handler_2() {
		/*input0_input_handler_2*/ ctx[78].call(input0, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_18(...args) {
		return /*change_handler_18*/ ctx[79](/*index*/ ctx[169], ...args);
	}

	function click_handler_12(...args) {
		return /*click_handler_12*/ ctx[80](/*index*/ ctx[169], ...args);
	}

	let each_value_12 = /*localscoreCategoryData*/ ctx[3];
	validate_each_argument(each_value_12);
	let each_blocks = [];

	for (let i = 0; i < each_value_12.length; i += 1) {
		each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_12, i));
	}

	function select_change_handler_9() {
		/*select_change_handler_9*/ ctx[81].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_19(...args) {
		return /*change_handler_19*/ ctx[82](/*index*/ ctx[169], ...args);
	}

	function input1_input_handler_3() {
		/*input1_input_handler_3*/ ctx[83].call(input1, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_20(...args) {
		return /*change_handler_20*/ ctx[84](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div8 = element("div");
			div7 = element("div");
			div2 = element("div");
			div1 = element("div");
			label0 = element("label");
			t0 = text(t0_value);
			t1 = space();
			input0 = element("input");
			t2 = space();
			div0 = element("div");
			span = element("span");
			t3 = space();
			div4 = element("div");
			div3 = element("div");
			label1 = element("label");
			t4 = text(t4_value);
			t5 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t6 = space();
			div6 = element("div");
			div5 = element("div");
			label2 = element("label");
			t7 = text(t7_value);
			t8 = space();
			input1 = element("input");
			attr_dev(label0, "for", label0_for_value = "itemTxt" + /*index*/ ctx[169]);
			attr_dev(label0, "class", "input-group-text");
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "title", label0_title_value = Lang.guid_value);
			add_location(label0, file, 1703, 68, 98506);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "placeholder", "Enter Value");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "id", input0_id_value = "itemTxt" + /*index*/ ctx[169]);
			add_location(input0, file, 1711, 68, 99258);
			attr_dev(span, "class", "align-middle text-dark pointer icomoon-new-24px-add-circle-1 s4");
			add_location(span, file, 1724, 72, 100500);
			attr_dev(div0, "class", "add_item_button border btn p-1");
			attr_dev(div0, "tabindex", "0");
			add_location(div0, file, 1719, 68, 100015);
			attr_dev(div1, "class", "input-group");
			add_location(div1, file, 1702, 64, 98412);
			attr_dev(div2, "class", "col-3");
			add_location(div2, file, 1701, 60, 98328);
			attr_dev(label1, "for", label1_for_value = "selectMission" + /*index*/ ctx[169]);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "data-bs-toggle", "tooltip");
			attr_dev(label1, "title", label1_title_value = Lang.mission_name);
			add_location(label1, file, 1731, 68, 101038);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "selectMission" + /*index*/ ctx[169]);
			if (/*data*/ ctx[163].choicesCategory === void 0) add_render_callback(select_change_handler_9);
			add_location(select, file, 1740, 68, 101843);
			attr_dev(div3, "class", "input-group");
			add_location(div3, file, 1730, 64, 100944);
			attr_dev(div4, "class", "col-3");
			add_location(div4, file, 1729, 60, 100860);
			attr_dev(label2, "for", label2_for_value = "selectScore" + /*index*/ ctx[169]);
			attr_dev(label2, "class", "input-group-text");
			attr_dev(label2, "data-bs-toggle", "tooltip");
			attr_dev(label2, "title", label2_title_value = Lang.score_value);
			add_location(label2, file, 1754, 68, 103154);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "min", "0");
			attr_dev(input1, "max", "100");
			attr_dev(input1, "id", input1_id_value = "selectScore" + /*index*/ ctx[169]);
			attr_dev(input1, "class", "form-control");
			add_location(input1, file, 1762, 68, 103846);
			attr_dev(div5, "class", "input-group");
			add_location(div5, file, 1753, 64, 103060);
			attr_dev(div6, "class", "col-3");
			add_location(div6, file, 1752, 60, 102976);
			attr_dev(div7, "class", "row");
			add_location(div7, file, 1700, 56, 98250);
			attr_dev(div8, "class", "col-12 mt-2 px-0");
			add_location(div8, file, 1699, 52, 98163);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div8, anchor);
			append_dev(div8, div7);
			append_dev(div7, div2);
			append_dev(div2, div1);
			append_dev(div1, label0);
			append_dev(label0, t0);
			append_dev(div1, t1);
			append_dev(div1, input0);
			set_input_value(input0, /*data*/ ctx[163].guids);
			append_dev(div1, t2);
			append_dev(div1, div0);
			append_dev(div0, span);
			append_dev(div7, t3);
			append_dev(div7, div4);
			append_dev(div4, div3);
			append_dev(div3, label1);
			append_dev(label1, t4);
			append_dev(div3, t5);
			append_dev(div3, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*data*/ ctx[163].choicesCategory);
			append_dev(div7, t6);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, label2);
			append_dev(label2, t7);
			append_dev(div5, t8);
			append_dev(div5, input1);
			set_input_value(input1, /*data*/ ctx[163].choicesScore);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input0_input_handler_2),
					listen_dev(input0, "change", change_handler_18, false, false, false),
					listen_dev(div0, "click", click_handler_12, false, false, false),
					listen_dev(select, "change", select_change_handler_9),
					listen_dev(select, "change", change_handler_19, false, false, false),
					listen_dev(input1, "input", input1_input_handler_3),
					listen_dev(input1, "change", change_handler_20, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && t0_value !== (t0_value = (/*data*/ ctx[163].allowChoices == 5 || /*data*/ ctx[163].allowChoices == 4
			? "Value"
			: "Item Id") + "")) set_data_dev(t0, t0_value);

			if (dirty[0] & /*localstepData*/ 4 && input0.value !== /*data*/ ctx[163].guids) {
				set_input_value(input0, /*data*/ ctx[163].guids);
			}

			if (dirty[0] & /*localscoreCategoryData*/ 8) {
				each_value_12 = /*localscoreCategoryData*/ ctx[3];
				validate_each_argument(each_value_12);
				let i;

				for (i = 0; i < each_value_12.length; i += 1) {
					const child_ctx = get_each_context_12(ctx, each_value_12, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_12(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_12.length;
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].choicesCategory);
			}

			if (dirty[0] & /*localstepData*/ 4 && to_number(input1.value) !== /*data*/ ctx[163].choicesScore) {
				set_input_value(input1, /*data*/ ctx[163].choicesScore);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div8);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_23.name,
		type: "if",
		source: "(1699:48) {#if (data.allowChoices == 2 || data.allowChoices == 4 || data.allowChoices == 5) }",
		ctx
	});

	return block;
}

// (1747:72) {#each localscoreCategoryData as category, keys}
function create_each_block_12(ctx) {
	let option;
	let t_value = /*category*/ ctx[24].name + "";
	let t;
	let option_value_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*keys*/ ctx[186];
			option.value = option.__value;
			add_location(option, file, 1747, 80, 102574);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localscoreCategoryData*/ 8 && t_value !== (t_value = /*category*/ ctx[24].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_12.name,
		type: "each",
		source: "(1747:72) {#each localscoreCategoryData as category, keys}",
		ctx
	});

	return block;
}

// (1779:48) {#if data.allowChoices <= 0}
function create_if_block_22(ctx) {
	let div3;
	let div2;
	let div1;
	let div0;
	let input;
	let input_title_value;
	let input_id_value;
	let input_checked_value;
	let t0;
	let label;
	let t1_value = Lang.speech + "";
	let t1;
	let label_title_value;
	let label_for_value;
	let mounted;
	let dispose;

	function change_handler_21(...args) {
		return /*change_handler_21*/ ctx[85](/*index*/ ctx[169], ...args);
	}

	function input_change_handler_1() {
		/*input_change_handler_1*/ ctx[86].call(input, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	const block = {
		c: function create() {
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			t1 = text(t1_value);
			attr_dev(input, "class", "form-check-input");
			attr_dev(input, "tabindex", "0");
			attr_dev(input, "data-bs-toggle", "tooltip");
			attr_dev(input, "title", input_title_value = Lang.speech_input);
			attr_dev(input, "type", "checkbox");
			attr_dev(input, "id", input_id_value = "selectSpeech" + /*index*/ ctx[169]);
			input.checked = input_checked_value = /*data*/ ctx[163].speech == 0 ? false : true;
			add_location(input, file, 1783, 68, 105504);
			attr_dev(label, "class", "form-check-label mt-small");
			attr_dev(label, "data-bs-toggle", "tooltip");
			attr_dev(label, "title", label_title_value = Lang.speech_txt);
			attr_dev(label, "for", label_for_value = "selectSpeech" + /*index*/ ctx[169]);
			add_location(label, file, 1784, 68, 105862);
			attr_dev(div0, "class", "form-check form-switch ms-3 mt-2");
			add_location(div0, file, 1782, 64, 105389);
			attr_dev(div1, "class", "col-3");
			add_location(div1, file, 1781, 60, 105305);
			attr_dev(div2, "class", "row");
			add_location(div2, file, 1780, 56, 105227);
			attr_dev(div3, "class", "col-12 mt-2 px-0");
			add_location(div3, file, 1779, 52, 105140);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, input);
			set_input_value(input, /*data*/ ctx[163].speech);
			append_dev(div0, t0);
			append_dev(div0, label);
			append_dev(label, t1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "change", change_handler_21, false, false, false),
					listen_dev(input, "change", input_change_handler_1)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && input_checked_value !== (input_checked_value = /*data*/ ctx[163].speech == 0 ? false : true)) {
				prop_dev(input, "checked", input_checked_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				set_input_value(input, /*data*/ ctx[163].speech);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div3);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_22.name,
		type: "if",
		source: "(1779:48) {#if data.allowChoices <= 0}",
		ctx
	});

	return block;
}

// (1793:48) {#if data.allowChoices > 4 && data.allowChoices != 7 && data.allowChoices != 8}
function create_if_block_21(ctx) {
	let div1;
	let div0;
	let input;
	let t0;
	let label;
	let mounted;
	let dispose;

	function input_input_handler_1() {
		/*input_input_handler_1*/ ctx[87].call(input, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_22(...args) {
		return /*change_handler_22*/ ctx[88](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label = element("label");
			label.textContent = `${Lang.branch_condition}`;
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "form-control");
			attr_dev(input, "id", "branching_condition");
			attr_dev(input, "placeholder", "Enter conditions here");
			add_location(input, file, 1795, 60, 106747);
			attr_dev(label, "for", "branching_condition");
			add_location(label, file, 1796, 60, 107018);
			attr_dev(div0, "class", "form-floating");
			add_location(div0, file, 1794, 56, 106659);
			attr_dev(div1, "class", "col-12 mt-2 px-0");
			add_location(div1, file, 1793, 52, 106572);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, input);
			set_input_value(input, /*data*/ ctx[163].condition);
			append_dev(div0, t0);
			append_dev(div0, label);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", input_input_handler_1),
					listen_dev(input, "change", change_handler_22, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && input.value !== /*data*/ ctx[163].condition) {
				set_input_value(input, /*data*/ ctx[163].condition);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_21.name,
		type: "if",
		source: "(1793:48) {#if data.allowChoices > 4 && data.allowChoices != 7 && data.allowChoices != 8}",
		ctx
	});

	return block;
}

// (1803:48) {#if data.allowChoices == 8}
function create_if_block_20(ctx) {
	let div5;
	let div4;
	let div1;
	let div0;
	let input;
	let input_placeholder_value;
	let t0;
	let label0;
	let t2;
	let div3;
	let div2;
	let select;
	let select_title_value;
	let t3;
	let label1;
	let mounted;
	let dispose;

	function input_input_handler_2() {
		/*input_input_handler_2*/ ctx[89].call(input, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_23(...args) {
		return /*change_handler_23*/ ctx[90](/*index*/ ctx[169], ...args);
	}

	let each_value_11 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
	validate_each_argument(each_value_11);
	let each_blocks = [];

	for (let i = 0; i < each_value_11.length; i += 1) {
		each_blocks[i] = create_each_block_11(get_each_context_11(ctx, each_value_11, i));
	}

	let each_1_else = null;

	if (!each_value_11.length) {
		each_1_else = create_else_block_3(ctx);
	}

	function select_change_handler_10() {
		/*select_change_handler_10*/ ctx[91].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_24(...args) {
		return /*change_handler_24*/ ctx[92](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div5 = element("div");
			div4 = element("div");
			div1 = element("div");
			div0 = element("div");
			input = element("input");
			t0 = space();
			label0 = element("label");
			label0.textContent = `${Lang.btn_name}`;
			t2 = space();
			div3 = element("div");
			div2 = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			if (each_1_else) {
				each_1_else.c();
			}

			t3 = space();
			label1 = element("label");
			label1.textContent = `${Lang.animation}`;
			attr_dev(input, "type", "text");
			attr_dev(input, "class", "form-control");
			attr_dev(input, "id", "button_name");
			attr_dev(input, "placeholder", input_placeholder_value = Lang.enter_btn_name);
			add_location(input, file, 1807, 68, 107812);
			attr_dev(label0, "for", "button_name");
			add_location(label0, file, 1808, 68, 108066);
			attr_dev(div0, "class", "form-floating");
			add_location(div0, file, 1806, 64, 107716);
			attr_dev(div1, "class", "col-6");
			add_location(div1, file, 1805, 60, 107632);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", "animation");
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", select_title_value = Lang.animation);
			if (/*data*/ ctx[163].anim === void 0) add_render_callback(select_change_handler_10);
			add_location(select, file, 1814, 68, 108598);
			attr_dev(label1, "for", "animation");
			add_location(label1, file, 1828, 68, 110016);
			attr_dev(div2, "class", "form-floating");
			add_location(div2, file, 1812, 64, 108394);
			attr_dev(div3, "class", "col-6");
			add_location(div3, file, 1811, 60, 108310);
			attr_dev(div4, "class", "row");
			add_location(div4, file, 1804, 56, 107554);
			attr_dev(div5, "class", "col-12 mt-2 px-0");
			add_location(div5, file, 1803, 52, 107467);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, div1);
			append_dev(div1, div0);
			append_dev(div0, input);
			set_input_value(input, /*data*/ ctx[163].btn);
			append_dev(div0, t0);
			append_dev(div0, label0);
			append_dev(div4, t2);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div2, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			if (each_1_else) {
				each_1_else.m(select, null);
			}

			select_option(select, /*data*/ ctx[163].anim);
			append_dev(div2, t3);
			append_dev(div2, label1);

			if (!mounted) {
				dispose = [
					listen_dev(input, "input", input_input_handler_2),
					listen_dev(input, "change", change_handler_23, false, false, false),
					listen_dev(select, "change", select_change_handler_10),
					listen_dev(select, "change", change_handler_24, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && input.value !== /*data*/ ctx[163].btn) {
				set_input_value(input, /*data*/ ctx[163].btn);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				each_value_11 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
				validate_each_argument(each_value_11);
				let i;

				for (i = 0; i < each_value_11.length; i += 1) {
					const child_ctx = get_each_context_11(ctx, each_value_11, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_11(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_11.length;

				if (!each_value_11.length && each_1_else) {
					each_1_else.p(ctx, dirty);
				} else if (!each_value_11.length) {
					each_1_else = create_else_block_3(ctx);
					each_1_else.c();
					each_1_else.m(select, null);
				} else if (each_1_else) {
					each_1_else.d(1);
					each_1_else = null;
				}
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].anim);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div5);
			destroy_each(each_blocks, detaching);
			if (each_1_else) each_1_else.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_20.name,
		type: "if",
		source: "(1803:48) {#if data.allowChoices == 8}",
		ctx
	});

	return block;
}

// (1825:72) {:else}
function create_else_block_3(ctx) {
	let option;

	const block = {
		c: function create() {
			option = element("option");
			option.textContent = `${Lang.no_anim_avail}`;
			option.__value = "";
			option.value = option.__value;
			attr_dev(option, "key", "0");
			option.selected = true;
			option.disabled = true;
			add_location(option, file, 1825, 76, 109720);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_3.name,
		type: "else",
		source: "(1825:72) {:else}",
		ctx
	});

	return block;
}

// (1823:72) {#each state.sceneData.scene[defaultScene].anim as animation , key}
function create_each_block_11(ctx) {
	let option;
	let t_value = /*animation*/ ctx[171].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[173];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*key*/ ctx[173]);
			add_location(option, file, 1823, 76, 109508);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, defaultScene*/ 4224 && t_value !== (t_value = /*animation*/ ctx[171].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_11.name,
		type: "each",
		source: "(1823:72) {#each state.sceneData.scene[defaultScene].anim as animation , key}",
		ctx
	});

	return block;
}

// (1837:48) {#if (data.allowChoices == 1 || data.allowChoices == 3 || data.allowChoices == 6)}
function create_if_block_14(ctx) {
	let t0;
	let div3;
	let div2;
	let div1;
	let div0;
	let button;
	let b;
	let t2;
	let span;
	let button_title_value;
	let mounted;
	let dispose;
	let each_value_7 = /*data*/ ctx[163].choices;
	validate_each_argument(each_value_7);
	let each_blocks = [];

	for (let i = 0; i < each_value_7.length; i += 1) {
		each_blocks[i] = create_each_block_7(get_each_context_7(ctx, each_value_7, i));
	}

	function click_handler_14(...args) {
		return /*click_handler_14*/ ctx[114](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t0 = space();
			div3 = element("div");
			div2 = element("div");
			div1 = element("div");
			div0 = element("div");
			button = element("button");
			b = element("b");
			b.textContent = `${Lang.add_choice}`;
			t2 = space();
			span = element("span");
			add_location(b, file, 2032, 72, 133847);
			attr_dev(span, "class", "icomoon-plus-circle-2 s4 relative ms-1 float-end");
			add_location(span, file, 2033, 72, 133941);
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.new_mission);
			attr_dev(button, "class", "btn rounded-pill img-shadow border shadow-sm");
			add_location(button, file, 2031, 68, 133666);
			attr_dev(div0, "class", "add_choices float-start");
			add_location(div0, file, 2030, 64, 133491);
			attr_dev(div1, "class", "col-12 px-0 mt-2");
			add_location(div1, file, 2029, 60, 133396);
			attr_dev(div2, "class", "row");
			add_location(div2, file, 2028, 56, 133318);
			attr_dev(div3, "class", "col-12");
			add_location(div3, file, 2027, 52, 133241);
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, t0, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, div0);
			append_dev(div0, button);
			append_dev(button, b);
			append_dev(button, t2);
			append_dev(button, span);

			if (!mounted) {
				dispose = listen_dev(div0, "click", click_handler_14, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData, updateXmlValue, localscoreCategoryData, localcharacterChoice*/ 4194318) {
				each_value_7 = /*data*/ ctx[163].choices;
				validate_each_argument(each_value_7);
				let i;

				for (i = 0; i < each_value_7.length; i += 1) {
					const child_ctx = get_each_context_7(ctx, each_value_7, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_7(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(t0.parentNode, t0);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_7.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div3);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(1837:48) {#if (data.allowChoices == 1 || data.allowChoices == 3 || data.allowChoices == 6)}",
		ctx
	});

	return block;
}

// (1885:88) {:else}
function create_else_block_2(ctx) {
	let select;
	let option;
	let t_value = Lang.not_visible + "";
	let t;
	let option_value_value;
	let option_k_value;
	let select_id_value;
	let select_title_value;
	let mounted;
	let dispose;
	let each_value_10 = /*localcharacterChoice*/ ctx[1];
	validate_each_argument(each_value_10);
	let each_blocks = [];

	for (let i = 0; i < each_value_10.length; i += 1) {
		each_blocks[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
	}

	function select_change_handler_12() {
		/*select_change_handler_12*/ ctx[99].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_28(...args) {
		return /*change_handler_28*/ ctx[100](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*data*/ ctx[163].name;
			option.value = option.__value;
			attr_dev(option, "k", option_k_value = /*data*/ ctx[163].name);
			add_location(option, file, 1899, 96, 118438);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "feedback_character" + /*index*/ ctx[169]);
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", select_title_value = Lang.fb_char_name);
			if (/*data*/ ctx[163].name === void 0) add_render_callback(select_change_handler_12);
			add_location(select, file, 1886, 92, 116773);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			append_dev(select, option);
			append_dev(option, t);
			select_option(select, /*data*/ ctx[163].name);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_12),
					listen_dev(select, "change", change_handler_28, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterChoice*/ 2) {
				each_value_10 = /*localcharacterChoice*/ ctx[1];
				validate_each_argument(each_value_10);
				let i;

				for (i = 0; i < each_value_10.length; i += 1) {
					const child_ctx = get_each_context_10(ctx, each_value_10, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_10(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, option);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_10.length;
			}

			if (dirty[0] & /*localstepData*/ 4 && option_value_value !== (option_value_value = /*data*/ ctx[163].name)) {
				prop_dev(option, "__value", option_value_value);
				option.value = option.__value;
			}

			if (dirty[0] & /*localstepData*/ 4 && option_k_value !== (option_k_value = /*data*/ ctx[163].name)) {
				attr_dev(option, "k", option_k_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].name);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_2.name,
		type: "else",
		source: "(1885:88) {:else}",
		ctx
	});

	return block;
}

// (1869:88) {#if (localcharacterChoice[data.name].visible == 0)}
function create_if_block_17(ctx) {
	let select;
	let select_id_value;
	let select_title_value;
	let mounted;
	let dispose;
	let each_value_9 = /*localcharacterChoice*/ ctx[1];
	validate_each_argument(each_value_9);
	let each_blocks = [];

	for (let i = 0; i < each_value_9.length; i += 1) {
		each_blocks[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
	}

	function select_change_handler_11() {
		/*select_change_handler_11*/ ctx[97].call(select, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_27(...args) {
		return /*change_handler_27*/ ctx[98](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "feedback_character" + /*index*/ ctx[169]);
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", select_title_value = Lang.fb_char_name);
			if (/*choices*/ ctx[176].feedback_charact === void 0) add_render_callback(select_change_handler_11);
			add_location(select, file, 1870, 92, 114767);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*choices*/ ctx[176].feedback_charact);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_11),
					listen_dev(select, "change", change_handler_27, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterChoice*/ 2) {
				each_value_9 = /*localcharacterChoice*/ ctx[1];
				validate_each_argument(each_value_9);
				let i;

				for (i = 0; i < each_value_9.length; i += 1) {
					const child_ctx = get_each_context_9(ctx, each_value_9, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_9(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_9.length;
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*choices*/ ctx[176].feedback_charact);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_17.name,
		type: "if",
		source: "(1869:88) {#if (localcharacterChoice[data.name].visible == 0)}",
		ctx
	});

	return block;
}

// (1896:100) {#if character.visible == 0}
function create_if_block_19(ctx) {
	let option;
	let t_value = /*character*/ ctx[180].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*character_key*/ ctx[182];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*character_key*/ ctx[182]);
			add_location(option, file, 1896, 104, 118056);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localcharacterChoice*/ 2 && t_value !== (t_value = /*character*/ ctx[180].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_19.name,
		type: "if",
		source: "(1896:100) {#if character.visible == 0}",
		ctx
	});

	return block;
}

// (1895:96) {#each localcharacterChoice as character , character_key}
function create_each_block_10(ctx) {
	let if_block_anchor;
	let if_block = /*character*/ ctx[180].visible == 0 && create_if_block_19(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*character*/ ctx[180].visible == 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_19(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_10.name,
		type: "each",
		source: "(1895:96) {#each localcharacterChoice as character , character_key}",
		ctx
	});

	return block;
}

// (1880:100) {#if character.visible == 0}
function create_if_block_18(ctx) {
	let option;
	let t_value = /*character*/ ctx[180].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*character_key*/ ctx[182];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*character_key*/ ctx[182]);
			add_location(option, file, 1880, 104, 116065);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localcharacterChoice*/ 2 && t_value !== (t_value = /*character*/ ctx[180].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_18.name,
		type: "if",
		source: "(1880:100) {#if character.visible == 0}",
		ctx
	});

	return block;
}

// (1879:96) {#each localcharacterChoice as character , character_key}
function create_each_block_9(ctx) {
	let if_block_anchor;
	let if_block = /*character*/ ctx[180].visible == 0 && create_if_block_18(ctx);

	const block = {
		c: function create() {
			if (if_block) if_block.c();
			if_block_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*character*/ ctx[180].visible == 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_18(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_9.name,
		type: "each",
		source: "(1879:96) {#each localcharacterChoice as character , character_key}",
		ctx
	});

	return block;
}

// (1917:92) {#each localscoreCategoryData as category , category_key}
function create_each_block_8(ctx) {
	let option;
	let t_value = /*category*/ ctx[24].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*category_key*/ ctx[179];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*category_key*/ ctx[179]);
			add_location(option, file, 1917, 96, 120569);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*localscoreCategoryData*/ 8 && t_value !== (t_value = /*category*/ ctx[24].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_8.name,
		type: "each",
		source: "(1917:92) {#each localscoreCategoryData as category , category_key}",
		ctx
	});

	return block;
}

// (1963:113) 
function create_if_block_16(ctx) {
	let div1;
	let div0;
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let select_id_value;
	let select_defaultvalue_value;
	let t2;
	let label0;
	let label0_for_value;
	let t4;
	let div3;
	let div2;
	let input0;
	let input0_id_value;
	let input0_placeholder_value;
	let input0_title_value;
	let t5;
	let label1;
	let label1_for_value;
	let t7;
	let div5;
	let div4;
	let input1;
	let input1_id_value;
	let input1_max_value;
	let input1_title_value;
	let t8;
	let label2;
	let label2_for_value;
	let mounted;
	let dispose;

	function select_change_handler_15() {
		/*select_change_handler_15*/ ctx[107].call(select, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_32(...args) {
		return /*change_handler_32*/ ctx[108](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function input0_input_handler_4() {
		/*input0_input_handler_4*/ ctx[109].call(input0, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_33(...args) {
		return /*change_handler_33*/ ctx[110](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function input1_input_handler_5() {
		/*input1_input_handler_5*/ ctx[111].call(input1, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_34(...args) {
		return /*change_handler_34*/ ctx[112](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.false}`;
			option1 = element("option");
			option1.textContent = `${Lang.true}`;
			t2 = space();
			label0 = element("label");
			label0.textContent = `${Lang.correct}`;
			t4 = space();
			div3 = element("div");
			div2 = element("div");
			input0 = element("input");
			t5 = space();
			label1 = element("label");
			label1.textContent = `${Lang.score}`;
			t7 = space();
			div5 = element("div");
			div4 = element("div");
			input1 = element("input");
			t8 = space();
			label2 = element("label");
			label2.textContent = `${Lang.step_index}`;
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1975, 96, 127405);
			option1.__value = option1_value_value = 1;
			option1.value = option1.__value;
			add_location(option1, file, 1976, 96, 127538);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "selectCorrect" + /*key*/ ctx[173]);
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", "Select true or false to indicate if the choice correct or not.");
			attr_dev(select, "defaultvalue", select_defaultvalue_value = /*choices*/ ctx[176].correct);
			if (/*choices*/ ctx[176].correct === void 0) add_render_callback(select_change_handler_15);
			add_location(select, file, 1966, 92, 126244);
			attr_dev(label0, "for", label0_for_value = "selectCorrect" + /*key*/ ctx[173]);
			add_location(label0, file, 1978, 92, 127768);
			attr_dev(div0, "class", "form-floating");
			add_location(div0, file, 1964, 88, 125992);
			attr_dev(div1, "class", "col-3");
			add_location(div1, file, 1963, 84, 125884);
			attr_dev(input0, "type", "number");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "id", input0_id_value = "selectScoreChoice" + /*key*/ ctx[173]);
			attr_dev(input0, "min", "0");
			attr_dev(input0, "max", "100");
			attr_dev(input0, "placeholder", input0_placeholder_value = Lang.score_value);
			attr_dev(input0, "data-bs-toggle", "tooltip");
			attr_dev(input0, "title", input0_title_value = Lang.score_value);
			add_location(input0, file, 1983, 92, 128321);
			attr_dev(label1, "for", label1_for_value = "selectScoreChoice" + /*key*/ ctx[173]);
			add_location(label1, file, 1994, 92, 129667);
			attr_dev(div2, "class", "form-floating");
			add_location(div2, file, 1982, 88, 128201);
			attr_dev(div3, "class", "col-3");
			add_location(div3, file, 1981, 84, 128093);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "class", "form-control");
			attr_dev(input1, "id", input1_id_value = "selectChoicestepIndex" + /*key*/ ctx[173]);
			attr_dev(input1, "min", "1");
			attr_dev(input1, "max", input1_max_value = /*localstepData*/ ctx[2].length);
			attr_dev(input1, "data-bs-toggle", "tooltip");
			attr_dev(input1, "title", input1_title_value = Lang.step_index_txt);
			add_location(input1, file, 1999, 92, 130222);
			attr_dev(label2, "for", label2_for_value = "selectChoicestepIndex" + /*key*/ ctx[173]);
			add_location(label2, file, 2009, 92, 131458);
			attr_dev(div4, "class", "form-floating");
			add_location(div4, file, 1998, 88, 130102);
			attr_dev(div5, "class", "col-3");
			add_location(div5, file, 1997, 84, 129994);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, select);
			append_dev(select, option0);
			append_dev(select, option1);
			select_option(select, /*choices*/ ctx[176].correct);
			append_dev(div0, t2);
			append_dev(div0, label0);
			insert_dev(target, t4, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, input0);
			set_input_value(input0, /*choices*/ ctx[176].choicesScore);
			append_dev(div2, t5);
			append_dev(div2, label1);
			insert_dev(target, t7, anchor);
			insert_dev(target, div5, anchor);
			append_dev(div5, div4);
			append_dev(div4, input1);
			set_input_value(input1, /*choices*/ ctx[176].stepIndex);
			append_dev(div4, t8);
			append_dev(div4, label2);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_15),
					listen_dev(select, "change", change_handler_32, false, false, false),
					listen_dev(input0, "input", input0_input_handler_4),
					listen_dev(input0, "change", change_handler_33, false, false, false),
					listen_dev(input1, "input", input1_input_handler_5),
					listen_dev(input1, "change", change_handler_34, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && select_defaultvalue_value !== (select_defaultvalue_value = /*choices*/ ctx[176].correct)) {
				attr_dev(select, "defaultvalue", select_defaultvalue_value);
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*choices*/ ctx[176].correct);
			}

			if (dirty[0] & /*localstepData*/ 4 && to_number(input0.value) !== /*choices*/ ctx[176].choicesScore) {
				set_input_value(input0, /*choices*/ ctx[176].choicesScore);
			}

			if (dirty[0] & /*localstepData*/ 4 && input1_max_value !== (input1_max_value = /*localstepData*/ ctx[2].length)) {
				attr_dev(input1, "max", input1_max_value);
			}

			if (dirty[0] & /*localstepData*/ 4 && to_number(input1.value) !== /*choices*/ ctx[176].stepIndex) {
				set_input_value(input1, /*choices*/ ctx[176].stepIndex);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(div3);
			if (detaching) detach_dev(t7);
			if (detaching) detach_dev(div5);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(1963:113) ",
		ctx
	});

	return block;
}

// (1928:80) {#if data.allowChoices == 3}
function create_if_block_15(ctx) {
	let div1;
	let div0;
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let option2;
	let option2_value_value;
	let select_id_value;
	let select_title_value;
	let t3;
	let label0;
	let label0_for_value;
	let t5;
	let div3;
	let div2;
	let input;
	let input_id_value;
	let input_placeholder_value;
	let input_title_value;
	let t6;
	let label1;
	let label1_for_value;
	let mounted;
	let dispose;

	function select_change_handler_14() {
		/*select_change_handler_14*/ ctx[103].call(select, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_30(...args) {
		return /*change_handler_30*/ ctx[104](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function input_input_handler_3() {
		/*input_input_handler_3*/ ctx[105].call(input, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_31(...args) {
		return /*change_handler_31*/ ctx[106](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div1 = element("div");
			div0 = element("div");
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.false}`;
			option1 = element("option");
			option1.textContent = `${Lang.true}`;
			option2 = element("option");
			option2.textContent = `${Lang.none}`;
			t3 = space();
			label0 = element("label");
			label0.textContent = `${Lang.correct}`;
			t5 = space();
			div3 = element("div");
			div2 = element("div");
			input = element("input");
			t6 = space();
			label1 = element("label");
			label1.textContent = "Score";
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1939, 96, 123053);
			option1.__value = option1_value_value = 1;
			option1.value = option1.__value;
			add_location(option1, file, 1940, 96, 123186);
			option2.__value = option2_value_value = 2;
			option2.value = option2.__value;
			add_location(option2, file, 1941, 96, 123318);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "selectCorrect" + /*key*/ ctx[173]);
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", select_title_value = Lang.select_choics);
			if (/*choices*/ ctx[176].correct === void 0) add_render_callback(select_change_handler_14);
			add_location(select, file, 1931, 92, 122067);
			attr_dev(label0, "for", label0_for_value = "selectCorrect" + /*key*/ ctx[173]);
			add_location(label0, file, 1943, 92, 123548);
			attr_dev(div0, "class", "form-floating");
			add_location(div0, file, 1929, 88, 121815);
			attr_dev(div1, "class", "col-3");
			add_location(div1, file, 1928, 84, 121707);
			attr_dev(input, "type", "number");
			attr_dev(input, "class", "form-control");
			attr_dev(input, "id", input_id_value = "selectScoreChoice" + /*key*/ ctx[173]);
			attr_dev(input, "min", "0");
			attr_dev(input, "max", "100");
			attr_dev(input, "placeholder", input_placeholder_value = Lang.score_value);
			attr_dev(input, "data-bs-toggle", "tooltip");
			attr_dev(input, "title", input_title_value = Lang.score_value);
			add_location(input, file, 1948, 92, 124101);
			attr_dev(label1, "for", label1_for_value = "selectScoreChoice" + /*key*/ ctx[173]);
			add_location(label1, file, 1959, 92, 125447);
			attr_dev(div2, "class", "form-floating");
			add_location(div2, file, 1947, 88, 123981);
			attr_dev(div3, "class", "col-3");
			add_location(div3, file, 1946, 84, 123873);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, div0);
			append_dev(div0, select);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			select_option(select, /*choices*/ ctx[176].correct);
			append_dev(div0, t3);
			append_dev(div0, label0);
			insert_dev(target, t5, anchor);
			insert_dev(target, div3, anchor);
			append_dev(div3, div2);
			append_dev(div2, input);
			set_input_value(input, /*choices*/ ctx[176].choicesScore);
			append_dev(div2, t6);
			append_dev(div2, label1);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_14),
					listen_dev(select, "change", change_handler_30, false, false, false),
					listen_dev(input, "input", input_input_handler_3),
					listen_dev(input, "change", change_handler_31, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*choices*/ ctx[176].correct);
			}

			if (dirty[0] & /*localstepData*/ 4 && to_number(input.value) !== /*choices*/ ctx[176].choicesScore) {
				set_input_value(input, /*choices*/ ctx[176].choicesScore);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t5);
			if (detaching) detach_dev(div3);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(1928:80) {#if data.allowChoices == 3}",
		ctx
	});

	return block;
}

// (1838:52) {#each data.choices as choices, key}
function create_each_block_7(ctx) {
	let div19;
	let div18;
	let div0;
	let button0;
	let t0_value = "Choice " + (/*key*/ ctx[173] + 1) + "";
	let t0;
	let button0_data_bs_target_value;
	let button0_aria_controls_value;
	let div0_id_value;
	let t1;
	let div17;
	let div16;
	let div6;
	let div5;
	let div2;
	let div1;
	let input0;
	let input0_placeholder_value;
	let input0_title_value;
	let t2;
	let label0;
	let t4;
	let div4;
	let div3;
	let input1;
	let input1_id_value;
	let input1_placeholder_value;
	let input1_title_value;
	let t5;
	let label1;
	let label1_for_value;
	let t7;
	let div12;
	let div11;
	let div8;
	let div7;
	let t8;
	let label2;
	let label2_for_value;
	let t10;
	let div10;
	let div9;
	let select;
	let select_id_value;
	let t11;
	let label3;
	let label3_for_value;
	let t13;
	let div15;
	let div14;
	let t14;
	let div13;
	let button1;
	let span;
	let button1_title_value;
	let div13_class_value;
	let div17_id_value;
	let div17_aria_labelledby_value;
	let div17_data_bs_parent_value;
	let t15;
	let div19_id_value;
	let mounted;
	let dispose;

	function input0_input_handler_3() {
		/*input0_input_handler_3*/ ctx[93].call(input0, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_25(...args) {
		return /*change_handler_25*/ ctx[94](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function input1_input_handler_4() {
		/*input1_input_handler_4*/ ctx[95].call(input1, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_26(...args) {
		return /*change_handler_26*/ ctx[96](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function select_block_type_5(ctx, dirty) {
		if (/*localcharacterChoice*/ ctx[1][/*data*/ ctx[163].name].visible == 0) return create_if_block_17;
		return create_else_block_2;
	}

	let current_block_type = select_block_type_5(ctx);
	let if_block0 = current_block_type(ctx);
	let each_value_8 = /*localscoreCategoryData*/ ctx[3];
	validate_each_argument(each_value_8);
	let each_blocks = [];

	for (let i = 0; i < each_value_8.length; i += 1) {
		each_blocks[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
	}

	function select_change_handler_13() {
		/*select_change_handler_13*/ ctx[101].call(select, /*each_value_7*/ ctx[177], /*key*/ ctx[173]);
	}

	function change_handler_29(...args) {
		return /*change_handler_29*/ ctx[102](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	function select_block_type_6(ctx, dirty) {
		if (/*data*/ ctx[163].allowChoices == 3) return create_if_block_15;
		if (/*data*/ ctx[163].allowChoices == 1) return create_if_block_16;
	}

	let current_block_type_1 = select_block_type_6(ctx);
	let if_block1 = current_block_type_1 && current_block_type_1(ctx);

	function click_handler_13(...args) {
		return /*click_handler_13*/ ctx[113](/*key*/ ctx[173], /*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div19 = element("div");
			div18 = element("div");
			div0 = element("div");
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			div17 = element("div");
			div16 = element("div");
			div6 = element("div");
			div5 = element("div");
			div2 = element("div");
			div1 = element("div");
			input0 = element("input");
			t2 = space();
			label0 = element("label");
			label0.textContent = `${Lang.text}`;
			t4 = space();
			div4 = element("div");
			div3 = element("div");
			input1 = element("input");
			t5 = space();
			label1 = element("label");
			label1.textContent = "Feedback";
			t7 = space();
			div12 = element("div");
			div11 = element("div");
			div8 = element("div");
			div7 = element("div");
			if_block0.c();
			t8 = space();
			label2 = element("label");
			label2.textContent = `${Lang.fb_char}`;
			t10 = space();
			div10 = element("div");
			div9 = element("div");
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t11 = space();
			label3 = element("label");
			label3.textContent = `${Lang.mission}`;
			t13 = space();
			div15 = element("div");
			div14 = element("div");
			if (if_block1) if_block1.c();
			t14 = space();
			div13 = element("div");
			button1 = element("button");
			span = element("span");
			t15 = space();
			attr_dev(button0, "class", "accordion-button");
			attr_dev(button0, "type", "button");
			attr_dev(button0, "data-bs-toggle", "collapse");
			attr_dev(button0, "data-bs-target", button0_data_bs_target_value = "#" + ("choices_collapse" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]));
			attr_dev(button0, "aria-expanded", "false");
			attr_dev(button0, "aria-controls", button0_aria_controls_value = "choices_collapse" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			add_location(button0, file, 1841, 68, 111094);
			attr_dev(div0, "class", "accordion-header");
			attr_dev(div0, "id", div0_id_value = "choices_heading" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			add_location(div0, file, 1840, 64, 110952);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "id", "textUpdate");
			attr_dev(input0, "data-bs-toggle", "tooltip");
			attr_dev(input0, "placeholder", input0_placeholder_value = Lang.enter_choice_text);
			attr_dev(input0, "title", input0_title_value = Lang.choice_text);
			add_location(input0, file, 1851, 88, 112394);
			attr_dev(label0, "for", "textUpdate");
			add_location(label0, file, 1852, 88, 112725);
			attr_dev(div1, "class", "form-floating");
			add_location(div1, file, 1850, 84, 112278);
			attr_dev(div2, "class", "col-6");
			add_location(div2, file, 1849, 80, 112174);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "form-control");
			attr_dev(input1, "id", input1_id_value = "updatefeedback" + /*index*/ ctx[169]);
			attr_dev(input1, "placeholder", input1_placeholder_value = Lang.enter_choice_feedback);
			attr_dev(input1, "data-bs-toggle", "tooltip");
			attr_dev(input1, "title", input1_title_value = Lang.feedback_text);
			add_location(input1, file, 1857, 88, 113244);
			attr_dev(label1, "for", label1_for_value = "updatefeedback" + /*index*/ ctx[169]);
			add_location(label1, file, 1858, 88, 113603);
			attr_dev(div3, "class", "form-floating");
			add_location(div3, file, 1856, 84, 113128);
			attr_dev(div4, "class", "col-6");
			add_location(div4, file, 1855, 80, 113024);
			attr_dev(div5, "class", "row p-2");
			add_location(div5, file, 1848, 76, 112072);
			attr_dev(div6, "class", "col-12");
			add_location(div6, file, 1847, 72, 111975);
			attr_dev(label2, "for", label2_for_value = "feedback_character" + /*index*/ ctx[169]);
			add_location(label2, file, 1902, 88, 118787);
			attr_dev(div7, "class", "form-floating");
			add_location(div7, file, 1866, 84, 114373);
			attr_dev(div8, "class", "col-6");
			add_location(div8, file, 1865, 80, 114269);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "selectMission" + /*key*/ ctx[173]);
			attr_dev(select, "data-bs-toggle", "tooltip");
			attr_dev(select, "title", "Mission Name");
			if (/*choices*/ ctx[176].choicesCategory === void 0) add_render_callback(select_change_handler_13);
			add_location(select, file, 1908, 88, 119455);
			attr_dev(label3, "for", label3_for_value = "selectMission" + /*key*/ ctx[173]);
			add_location(label3, file, 1920, 88, 120928);
			attr_dev(div9, "class", "form-floating");
			add_location(div9, file, 1906, 84, 119211);
			attr_dev(div10, "class", "col-6");
			add_location(div10, file, 1905, 80, 119107);
			attr_dev(div11, "class", "row p-2");
			add_location(div11, file, 1864, 76, 114167);
			attr_dev(div12, "class", "col-12");
			add_location(div12, file, 1863, 72, 114070);
			attr_dev(span, "class", "icomoon-remove-2 s4 pointer text-dark");
			add_location(span, file, 2015, 88, 132370);
			attr_dev(button1, "data-bs-toggle", "tooltip");
			attr_dev(button1, "title", button1_title_value = Lang.delete);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "float-end bg-white delete_button ms-auto text-white border-0 mt-1");
			attr_dev(button1, "tabindex", "0");
			attr_dev(button1, "role", "button");
			attr_dev(button1, "aria-pressed", "false");
			add_location(button1, file, 2014, 84, 132021);
			attr_dev(div13, "class", div13_class_value = /*data*/ ctx[163].allowChoices == 1 ? "col-3" : "col-6");
			add_location(div13, file, 2013, 80, 131876);
			attr_dev(div14, "class", "row p-2");
			add_location(div14, file, 1926, 76, 121492);
			attr_dev(div15, "class", "col-12");
			add_location(div15, file, 1925, 72, 121395);
			attr_dev(div16, "class", "row");
			add_location(div16, file, 1846, 68, 111885);
			attr_dev(div17, "id", div17_id_value = "choices_collapse" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			attr_dev(div17, "class", "accordion-collapse collapse");
			attr_dev(div17, "aria-labelledby", div17_aria_labelledby_value = "choices_heading" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			attr_dev(div17, "data-bs-parent", div17_data_bs_parent_value = "#choices_accordian" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			add_location(div17, file, 1845, 64, 111615);
			attr_dev(div18, "class", "accordion-item");
			add_location(div18, file, 1839, 60, 110859);
			attr_dev(div19, "class", "accordion py-2");
			attr_dev(div19, "id", div19_id_value = "choices_accordian" + /*index*/ ctx[169] + "_" + /*key*/ ctx[173]);
			add_location(div19, file, 1838, 56, 110724);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div19, anchor);
			append_dev(div19, div18);
			append_dev(div18, div0);
			append_dev(div0, button0);
			append_dev(button0, t0);
			append_dev(div18, t1);
			append_dev(div18, div17);
			append_dev(div17, div16);
			append_dev(div16, div6);
			append_dev(div6, div5);
			append_dev(div5, div2);
			append_dev(div2, div1);
			append_dev(div1, input0);
			set_input_value(input0, /*choices*/ ctx[176].text);
			append_dev(div1, t2);
			append_dev(div1, label0);
			append_dev(div5, t4);
			append_dev(div5, div4);
			append_dev(div4, div3);
			append_dev(div3, input1);
			set_input_value(input1, /*choices*/ ctx[176].feedback);
			append_dev(div3, t5);
			append_dev(div3, label1);
			append_dev(div16, t7);
			append_dev(div16, div12);
			append_dev(div12, div11);
			append_dev(div11, div8);
			append_dev(div8, div7);
			if_block0.m(div7, null);
			append_dev(div7, t8);
			append_dev(div7, label2);
			append_dev(div11, t10);
			append_dev(div11, div10);
			append_dev(div10, div9);
			append_dev(div9, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*choices*/ ctx[176].choicesCategory);
			append_dev(div9, t11);
			append_dev(div9, label3);
			append_dev(div16, t13);
			append_dev(div16, div15);
			append_dev(div15, div14);
			if (if_block1) if_block1.m(div14, null);
			append_dev(div14, t14);
			append_dev(div14, div13);
			append_dev(div13, button1);
			append_dev(button1, span);
			append_dev(div19, t15);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input0_input_handler_3),
					listen_dev(input0, "change", change_handler_25, false, false, false),
					listen_dev(input1, "input", input1_input_handler_4),
					listen_dev(input1, "change", change_handler_26, false, false, false),
					listen_dev(select, "change", select_change_handler_13),
					listen_dev(select, "change", change_handler_29, false, false, false),
					listen_dev(button1, "click", click_handler_13, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localstepData*/ 4 && input0.value !== /*choices*/ ctx[176].text) {
				set_input_value(input0, /*choices*/ ctx[176].text);
			}

			if (dirty[0] & /*localstepData*/ 4 && input1.value !== /*choices*/ ctx[176].feedback) {
				set_input_value(input1, /*choices*/ ctx[176].feedback);
			}

			if (current_block_type === (current_block_type = select_block_type_5(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div7, t8);
				}
			}

			if (dirty[0] & /*localscoreCategoryData*/ 8) {
				each_value_8 = /*localscoreCategoryData*/ ctx[3];
				validate_each_argument(each_value_8);
				let i;

				for (i = 0; i < each_value_8.length; i += 1) {
					const child_ctx = get_each_context_8(ctx, each_value_8, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_8(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_8.length;
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*choices*/ ctx[176].choicesCategory);
			}

			if (current_block_type_1 === (current_block_type_1 = select_block_type_6(ctx)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if (if_block1) if_block1.d(1);
				if_block1 = current_block_type_1 && current_block_type_1(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(div14, t14);
				}
			}

			if (dirty[0] & /*localstepData*/ 4 && div13_class_value !== (div13_class_value = /*data*/ ctx[163].allowChoices == 1 ? "col-3" : "col-6")) {
				attr_dev(div13, "class", div13_class_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div19);
			if_block0.d();
			destroy_each(each_blocks, detaching);

			if (if_block1) {
				if_block1.d();
			}

			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_7.name,
		type: "each",
		source: "(1838:52) {#each data.choices as choices, key}",
		ctx
	});

	return block;
}

// (1533:28) {#each localstepData as data, index}
function create_each_block_6(ctx) {
	let div19;
	let div18;
	let div0;
	let button0;
	let span1;
	let span0;
	let t0;
	let t1_value = "Step " + (/*index*/ ctx[169] + 1) + "";
	let t1;
	let button0_data_bs_target_value;
	let button0_aria_controls_value;
	let div0_id_value;
	let t2;
	let div17;
	let div16;
	let div9;
	let input0;
	let t3;
	let t4;
	let div8;
	let div4;
	let t5;
	let div2;
	let div1;
	let label0;
	let t6_value = Lang.conversion_type + "";
	let t6;
	let label0_for_value;
	let label0_title_value;
	let t7;
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let option2;
	let option2_value_value;
	let option3;
	let option3_value_value;
	let option4;
	let option4_value_value;
	let select_id_value;
	let t13;
	let t14;
	let div3;
	let button1;
	let span2;
	let button1_title_value;
	let div3_class_value;
	let t15;
	let div7;
	let t16;
	let div6;
	let div5;
	let textarea;
	let textarea_value_value;
	let textarea_id_value;
	let div5_class_value;
	let div6_class_value;
	let div8_class_value;
	let t17;
	let t18;
	let t19;
	let t20;
	let t21;
	let t22;
	let div15;
	let div14;
	let div11;
	let div10;
	let label1;
	let label1_for_value;
	let t24;
	let input1;
	let input1_id_value;
	let input1_placeholder_value;
	let t25;
	let div13;
	let div12;
	let label2;
	let label2_for_value;
	let t27;
	let input2;
	let input2_id_value;
	let input2_placeholder_value;
	let div17_id_value;
	let div17_aria_labelledby_value;
	let div17_data_bs_parent_value;
	let t28;
	let div19_id_value;
	let mounted;
	let dispose;

	function click_handler_8(...args) {
		return /*click_handler_8*/ ctx[61](/*index*/ ctx[169], ...args);
	}

	let if_block0 = /*data*/ ctx[163].allowChoices != 7 && create_if_block_27(ctx);
	let if_block1 = /*data*/ ctx[163].allowChoices == 7 && create_if_block_26(ctx);

	function select_change_handler_8() {
		/*select_change_handler_8*/ ctx[68].call(select, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_14(...args) {
		return /*change_handler_14*/ ctx[69](/*index*/ ctx[169], ...args);
	}

	let if_block2 = /*data*/ ctx[163].allowChoices <= 0 && create_if_block_25(ctx);

	function click_handler_9(...args) {
		return /*click_handler_9*/ ctx[72](/*index*/ ctx[169], ...args);
	}

	let if_block3 = (/*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3) && create_if_block_24(ctx);

	function change_handler_17(...args) {
		return /*change_handler_17*/ ctx[77](/*index*/ ctx[169], ...args);
	}

	let if_block4 = (/*data*/ ctx[163].allowChoices == 2 || /*data*/ ctx[163].allowChoices == 4 || /*data*/ ctx[163].allowChoices == 5) && create_if_block_23(ctx);
	let if_block5 = /*data*/ ctx[163].allowChoices <= 0 && create_if_block_22(ctx);
	let if_block6 = /*data*/ ctx[163].allowChoices > 4 && /*data*/ ctx[163].allowChoices != 7 && /*data*/ ctx[163].allowChoices != 8 && create_if_block_21(ctx);
	let if_block7 = /*data*/ ctx[163].allowChoices == 8 && create_if_block_20(ctx);
	let if_block8 = (/*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3 || /*data*/ ctx[163].allowChoices == 6) && create_if_block_14(ctx);

	function input1_input_handler_6() {
		/*input1_input_handler_6*/ ctx[115].call(input1, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_35(...args) {
		return /*change_handler_35*/ ctx[116](/*index*/ ctx[169], ...args);
	}

	function input2_input_handler_1() {
		/*input2_input_handler_1*/ ctx[117].call(input2, /*each_value_6*/ ctx[175], /*index*/ ctx[169]);
	}

	function change_handler_36(...args) {
		return /*change_handler_36*/ ctx[118](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			div19 = element("div");
			div18 = element("div");
			div0 = element("div");
			button0 = element("button");
			span1 = element("span");
			span0 = element("span");
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			div17 = element("div");
			div16 = element("div");
			div9 = element("div");
			input0 = element("input");
			t3 = space();
			if (if_block0) if_block0.c();
			t4 = space();
			div8 = element("div");
			div4 = element("div");
			if (if_block1) if_block1.c();
			t5 = space();
			div2 = element("div");
			div1 = element("div");
			label0 = element("label");
			t6 = text(t6_value);
			t7 = space();
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.statement}`;
			option1 = element("option");
			option1.textContent = `${Lang.choice}`;
			option2 = element("option");
			option2.textContent = `${Lang.item}`;
			option3 = element("option");
			option3.textContent = `${Lang.multichoice}`;
			option4 = element("option");
			option4.textContent = `${Lang.alert}`;
			t13 = space();
			if (if_block2) if_block2.c();
			t14 = space();
			div3 = element("div");
			button1 = element("button");
			span2 = element("span");
			t15 = space();
			div7 = element("div");
			if (if_block3) if_block3.c();
			t16 = space();
			div6 = element("div");
			div5 = element("div");
			textarea = element("textarea");
			t17 = space();
			if (if_block4) if_block4.c();
			t18 = space();
			if (if_block5) if_block5.c();
			t19 = space();
			if (if_block6) if_block6.c();
			t20 = space();
			if (if_block7) if_block7.c();
			t21 = space();
			if (if_block8) if_block8.c();
			t22 = space();
			div15 = element("div");
			div14 = element("div");
			div11 = element("div");
			div10 = element("div");
			label1 = element("label");
			label1.textContent = `${Lang.level_text}`;
			t24 = space();
			input1 = element("input");
			t25 = space();
			div13 = element("div");
			div12 = element("div");
			label2 = element("label");
			label2.textContent = `${Lang.insert_note}`;
			t27 = space();
			input2 = element("input");
			t28 = space();
			attr_dev(span0, "class", "icomoon-new-24px-arrow-right-2 position-relative icon_setup s4 svelte-1aeqnok");
			add_location(span0, file, 1538, 52, 81311);
			add_location(span1, file, 1537, 48, 81252);
			attr_dev(button0, "class", "accordion-button");
			attr_dev(button0, "type", "button");
			attr_dev(button0, "data-bs-toggle", "collapse");
			attr_dev(button0, "data-bs-target", button0_data_bs_target_value = "#" + ("steps_collapse" + /*index*/ ctx[169]));
			attr_dev(button0, "aria-expanded", "false");
			attr_dev(button0, "aria-controls", button0_aria_controls_value = "steps_collapse" + /*index*/ ctx[169]);
			add_location(button0, file, 1536, 44, 81020);
			attr_dev(div0, "class", "accordion-header allowDraggable");
			set_style(div0, "cursor", "move");
			attr_dev(div0, "id", div0_id_value = "steps_heading" + /*index*/ ctx[169]);
			add_location(div0, file, 1535, 40, 80879);
			attr_dev(input0, "type", "hidden");
			attr_dev(input0, "class", "step_swap");
			add_location(input0, file, 1546, 52, 82020);
			attr_dev(label0, "for", label0_for_value = "select-type" + /*index*/ ctx[169]);
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "title", label0_title_value = Lang.type_of_step);
			attr_dev(label0, "class", "d-md-block d-none input-group-text");
			add_location(label0, file, 1623, 68, 89958);
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1631, 72, 90888);
			option1.__value = option1_value_value = 1;
			option1.value = option1.__value;
			add_location(option1, file, 1632, 72, 91001);
			option2.__value = option2_value_value = 2;
			option2.value = option2.__value;
			add_location(option2, file, 1633, 72, 91111);
			option3.__value = option3_value_value = 3;
			option3.value = option3.__value;
			add_location(option3, file, 1634, 72, 91219);
			option4.__value = option4_value_value = 7;
			option4.value = option4.__value;
			add_location(option4, file, 1635, 72, 91334);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "select-type" + /*index*/ ctx[169]);
			if (/*data*/ ctx[163].allowChoices === void 0) add_render_callback(select_change_handler_8);
			add_location(select, file, 1625, 68, 90290);
			attr_dev(div1, "class", "input-group input-group-sm");
			add_location(div1, file, 1622, 64, 89849);
			attr_dev(div2, "class", "col-lg-4 col-6 form-group pl-0");
			add_location(div2, file, 1621, 60, 89740);
			attr_dev(span2, "class", "icomoon-remove-2 s4 pointer text-dark");
			add_location(span2, file, 1649, 68, 93230);
			attr_dev(button1, "data-bs-toggle", "tooltip");
			attr_dev(button1, "title", button1_title_value = Lang.delete);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "bg-white delete_button mx-auto border-0 px-0");
			attr_dev(button1, "tabindex", "0");
			attr_dev(button1, "role", "button");
			attr_dev(button1, "aria-pressed", "false");
			add_location(button1, file, 1648, 64, 92926);

			attr_dev(div3, "class", div3_class_value = /*data*/ ctx[163].allowChoices > 0
			? "col-1 ml-auto text-right px-0"
			: "col-lg-5 col-2 px-0 text-right");

			add_location(div3, file, 1647, 60, 92752);
			attr_dev(div4, "class", "row mx-0");
			add_location(div4, file, 1600, 56, 87652);
			attr_dev(textarea, "class", "commu_textarea w-100 svelte-1aeqnok");
			textarea.value = textarea_value_value = removeTags(/*data*/ ctx[163].message);
			attr_dev(textarea, "id", textarea_id_value = "statementTxt" + /*index*/ ctx[169]);
			attr_dev(textarea, "placeholder", "Conversation text");
			add_location(textarea, file, 1684, 68, 96930);
			attr_dev(div5, "class", div5_class_value = /*data*/ ctx[163].allowChoices == 7 ? "border-dark" : "");
			add_location(div5, file, 1683, 64, 96801);

			attr_dev(div6, "class", div6_class_value = /*data*/ ctx[163].allowChoices == 7
			? "float-start col px-0"
			: "border-dark float-start ml-0 pl-2 px-0");

			toggle_class(div6, "col-8", /*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3);
			add_location(div6, file, 1682, 60, 96566);
			attr_dev(div7, "class", "row mx-0");
			add_location(div7, file, 1653, 56, 93550);

			attr_dev(div8, "class", div8_class_value = /*data*/ ctx[163].allowChoices != 7
			? "col-9 pl-0"
			: "col-12");

			add_location(div8, file, 1599, 52, 87532);
			attr_dev(div9, "class", "row");
			add_location(div9, file, 1545, 48, 81950);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "for", label1_for_value = "level_text" + /*index*/ ctx[169]);
			add_location(label1, file, 2046, 64, 134857);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "form-control");
			attr_dev(input1, "id", input1_id_value = "level_text" + /*index*/ ctx[169]);
			attr_dev(input1, "placeholder", input1_placeholder_value = Lang.level_placeholder);
			add_location(input1, file, 2047, 64, 135003);
			attr_dev(div10, "class", "input-group");
			add_location(div10, file, 2045, 60, 134767);
			attr_dev(div11, "class", "col-6");
			add_location(div11, file, 2044, 56, 134687);
			attr_dev(label2, "class", "input-group-text");
			attr_dev(label2, "for", label2_for_value = "important_note" + /*index*/ ctx[169]);
			add_location(label2, file, 2052, 64, 135565);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "class", "form-control");
			attr_dev(input2, "id", input2_id_value = "important_note" + /*index*/ ctx[169]);
			attr_dev(input2, "placeholder", input2_placeholder_value = Lang.note_placeholder);
			add_location(input2, file, 2053, 64, 135716);
			attr_dev(div12, "class", "input-group");
			add_location(div12, file, 2051, 60, 135475);
			attr_dev(div13, "class", "col-6");
			add_location(div13, file, 2050, 56, 135395);
			attr_dev(div14, "class", "row");
			add_location(div14, file, 2043, 52, 134613);
			attr_dev(div15, "class", "col-12 mt-3 px-0");
			add_location(div15, file, 2042, 48, 134530);
			attr_dev(div16, "class", "accordion-body");
			add_location(div16, file, 1544, 44, 81873);
			attr_dev(div17, "id", div17_id_value = "steps_collapse" + /*index*/ ctx[169]);
			attr_dev(div17, "class", "accordion-collapse collapse");
			attr_dev(div17, "aria-labelledby", div17_aria_labelledby_value = "steps_heading" + /*index*/ ctx[169]);
			attr_dev(div17, "data-bs-parent", div17_data_bs_parent_value = "#steps_accordian" + /*index*/ ctx[169]);
			add_location(div17, file, 1543, 40, 81669);
			attr_dev(div18, "class", "accordion-item");
			add_location(div18, file, 1534, 36, 80810);
			attr_dev(div19, "class", "accordion p-2");
			attr_dev(div19, "id", div19_id_value = "steps_accordian" + /*index*/ ctx[169]);
			add_location(div19, file, 1533, 32, 80714);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div19, anchor);
			append_dev(div19, div18);
			append_dev(div18, div0);
			append_dev(div0, button0);
			append_dev(button0, span1);
			append_dev(span1, span0);
			append_dev(span1, t0);
			append_dev(span1, t1);
			append_dev(div18, t2);
			append_dev(div18, div17);
			append_dev(div17, div16);
			append_dev(div16, div9);
			append_dev(div9, input0);
			append_dev(div9, t3);
			if (if_block0) if_block0.m(div9, null);
			append_dev(div9, t4);
			append_dev(div9, div8);
			append_dev(div8, div4);
			if (if_block1) if_block1.m(div4, null);
			append_dev(div4, t5);
			append_dev(div4, div2);
			append_dev(div2, div1);
			append_dev(div1, label0);
			append_dev(label0, t6);
			append_dev(div1, t7);
			append_dev(div1, select);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			append_dev(select, option3);
			append_dev(select, option4);
			select_option(select, /*data*/ ctx[163].allowChoices);
			append_dev(div4, t13);
			if (if_block2) if_block2.m(div4, null);
			append_dev(div4, t14);
			append_dev(div4, div3);
			append_dev(div3, button1);
			append_dev(button1, span2);
			append_dev(div8, t15);
			append_dev(div8, div7);
			if (if_block3) if_block3.m(div7, null);
			append_dev(div7, t16);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, textarea);
			append_dev(div16, t17);
			if (if_block4) if_block4.m(div16, null);
			append_dev(div16, t18);
			if (if_block5) if_block5.m(div16, null);
			append_dev(div16, t19);
			if (if_block6) if_block6.m(div16, null);
			append_dev(div16, t20);
			if (if_block7) if_block7.m(div16, null);
			append_dev(div16, t21);
			if (if_block8) if_block8.m(div16, null);
			append_dev(div16, t22);
			append_dev(div16, div15);
			append_dev(div15, div14);
			append_dev(div14, div11);
			append_dev(div11, div10);
			append_dev(div10, label1);
			append_dev(div10, t24);
			append_dev(div10, input1);
			set_input_value(input1, /*data*/ ctx[163].level_text);
			append_dev(div14, t25);
			append_dev(div14, div13);
			append_dev(div13, div12);
			append_dev(div12, label2);
			append_dev(div12, t27);
			append_dev(div12, input2);
			set_input_value(input2, /*data*/ ctx[163].important_node);
			append_dev(div19, t28);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "click", click_handler_8, false, false, false),
					listen_dev(select, "change", select_change_handler_8),
					listen_dev(select, "change", change_handler_14, false, false, false),
					listen_dev(button1, "click", click_handler_9, false, false, false),
					listen_dev(textarea, "change", change_handler_17, false, false, false),
					listen_dev(input1, "input", input1_input_handler_6),
					listen_dev(input1, "change", change_handler_35, false, false, false),
					listen_dev(input2, "input", input2_input_handler_1),
					listen_dev(input2, "change", change_handler_36, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (/*data*/ ctx[163].allowChoices != 7) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_27(ctx);
					if_block0.c();
					if_block0.m(div9, t4);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*data*/ ctx[163].allowChoices == 7) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_26(ctx);
					if_block1.c();
					if_block1.m(div4, t5);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*localstepData*/ 4) {
				select_option(select, /*data*/ ctx[163].allowChoices);
			}

			if (/*data*/ ctx[163].allowChoices <= 0) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_25(ctx);
					if_block2.c();
					if_block2.m(div4, t14);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty[0] & /*localstepData*/ 4 && div3_class_value !== (div3_class_value = /*data*/ ctx[163].allowChoices > 0
			? "col-1 ml-auto text-right px-0"
			: "col-lg-5 col-2 px-0 text-right")) {
				attr_dev(div3, "class", div3_class_value);
			}

			if (/*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_24(ctx);
					if_block3.c();
					if_block3.m(div7, t16);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty[0] & /*localstepData*/ 4 && textarea_value_value !== (textarea_value_value = removeTags(/*data*/ ctx[163].message))) {
				prop_dev(textarea, "value", textarea_value_value);
			}

			if (dirty[0] & /*localstepData*/ 4 && div5_class_value !== (div5_class_value = /*data*/ ctx[163].allowChoices == 7 ? "border-dark" : "")) {
				attr_dev(div5, "class", div5_class_value);
			}

			if (dirty[0] & /*localstepData*/ 4 && div6_class_value !== (div6_class_value = /*data*/ ctx[163].allowChoices == 7
			? "float-start col px-0"
			: "border-dark float-start ml-0 pl-2 px-0")) {
				attr_dev(div6, "class", div6_class_value);
			}

			if (dirty[0] & /*localstepData, localstepData*/ 4) {
				toggle_class(div6, "col-8", /*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3);
			}

			if (dirty[0] & /*localstepData*/ 4 && div8_class_value !== (div8_class_value = /*data*/ ctx[163].allowChoices != 7
			? "col-9 pl-0"
			: "col-12")) {
				attr_dev(div8, "class", div8_class_value);
			}

			if (/*data*/ ctx[163].allowChoices == 2 || /*data*/ ctx[163].allowChoices == 4 || /*data*/ ctx[163].allowChoices == 5) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_23(ctx);
					if_block4.c();
					if_block4.m(div16, t18);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*data*/ ctx[163].allowChoices <= 0) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_22(ctx);
					if_block5.c();
					if_block5.m(div16, t19);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*data*/ ctx[163].allowChoices > 4 && /*data*/ ctx[163].allowChoices != 7 && /*data*/ ctx[163].allowChoices != 8) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block_21(ctx);
					if_block6.c();
					if_block6.m(div16, t20);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}

			if (/*data*/ ctx[163].allowChoices == 8) {
				if (if_block7) {
					if_block7.p(ctx, dirty);
				} else {
					if_block7 = create_if_block_20(ctx);
					if_block7.c();
					if_block7.m(div16, t21);
				}
			} else if (if_block7) {
				if_block7.d(1);
				if_block7 = null;
			}

			if (/*data*/ ctx[163].allowChoices == 1 || /*data*/ ctx[163].allowChoices == 3 || /*data*/ ctx[163].allowChoices == 6) {
				if (if_block8) {
					if_block8.p(ctx, dirty);
				} else {
					if_block8 = create_if_block_14(ctx);
					if_block8.c();
					if_block8.m(div16, t22);
				}
			} else if (if_block8) {
				if_block8.d(1);
				if_block8 = null;
			}

			if (dirty[0] & /*localstepData*/ 4 && input1.value !== /*data*/ ctx[163].level_text) {
				set_input_value(input1, /*data*/ ctx[163].level_text);
			}

			if (dirty[0] & /*localstepData*/ 4 && input2.value !== /*data*/ ctx[163].important_node) {
				set_input_value(input2, /*data*/ ctx[163].important_node);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div19);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			if (if_block5) if_block5.d();
			if (if_block6) if_block6.d();
			if (if_block7) if_block7.d();
			if (if_block8) if_block8.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_6.name,
		type: "each",
		source: "(1533:28) {#each localstepData as data, index}",
		ctx
	});

	return block;
}

// (1483:20) {#if localscoreCategoryData.length > 0}
function create_if_block_11(ctx) {
	let table;
	let tbody;
	let each_value_5 = /*localscoreCategoryData*/ ctx[3];
	validate_each_argument(each_value_5);
	let each_blocks = [];

	for (let i = 0; i < each_value_5.length; i += 1) {
		each_blocks[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
	}

	const block = {
		c: function create() {
			table = element("table");
			tbody = element("tbody");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			add_location(tbody, file, 1484, 28, 77140);
			attr_dev(table, "class", "w-100 table mb-2");
			set_style(table, "border", "1px solid #dee2e6", 1);
			add_location(table, file, 1483, 24, 77034);
		},
		m: function mount(target, anchor) {
			insert_dev(target, table, anchor);
			append_dev(table, tbody);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(tbody, null);
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*triggerDelete, localscoreCategoryData, updateXmlValue*/ 12582920) {
				each_value_5 = /*localscoreCategoryData*/ ctx[3];
				validate_each_argument(each_value_5);
				let i;

				for (i = 0; i < each_value_5.length; i += 1) {
					const child_ctx = get_each_context_5(ctx, each_value_5, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_5(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(tbody, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_5.length;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(table);
			destroy_each(each_blocks, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(1483:20) {#if localscoreCategoryData.length > 0}",
		ctx
	});

	return block;
}

// (1486:32) {#each localscoreCategoryData as data, index}
function create_each_block_5(ctx) {
	let tr;
	let td0;
	let div3;
	let div0;
	let input0;
	let input0_id_value;
	let input0_placeholder_value;
	let t0;
	let div2;
	let div1;
	let label;
	let t1_value = Lang.points + "";
	let t1;
	let label_title_value;
	let t2;
	let input1;
	let input1_disabled_value;
	let t3;
	let td1;
	let button;
	let span;
	let span_title_value;
	let t4;
	let tr_key_value;
	let mounted;
	let dispose;

	function input0_input_handler_1() {
		/*input0_input_handler_1*/ ctx[56].call(input0, /*each_value_5*/ ctx[174], /*index*/ ctx[169]);
	}

	function change_handler_10(...args) {
		return /*change_handler_10*/ ctx[57](/*index*/ ctx[169], ...args);
	}

	function input1_input_handler_1() {
		/*input1_input_handler_1*/ ctx[58].call(input1, /*each_value_5*/ ctx[174], /*index*/ ctx[169]);
	}

	function click_handler_6(...args) {
		return /*click_handler_6*/ ctx[59](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			div3 = element("div");
			div0 = element("div");
			input0 = element("input");
			t0 = space();
			div2 = element("div");
			div1 = element("div");
			label = element("label");
			t1 = text(t1_value);
			t2 = space();
			input1 = element("input");
			t3 = space();
			td1 = element("td");
			button = element("button");
			span = element("span");
			t4 = space();
			attr_dev(input0, "type", "text");
			attr_dev(input0, "class", "form-control");
			attr_dev(input0, "id", input0_id_value = "main_mission" + /*index*/ ctx[169]);
			attr_dev(input0, "placeholder", input0_placeholder_value = "Mission #" + (/*index*/ ctx[169] + 1) + " title");
			add_location(input0, file, 1490, 52, 77568);
			attr_dev(div0, "class", "col-5 col-lg-9 col-sm-7");
			add_location(div0, file, 1489, 48, 77478);
			attr_dev(label, "for", "inputPassword");
			attr_dev(label, "data-bs-toggle", "tooltip");
			attr_dev(label, "title", label_title_value = Lang.points_text);
			attr_dev(label, "class", "input-group-text");
			add_location(label, file, 1501, 56, 78452);
			attr_dev(input1, "type", "number");
			attr_dev(input1, "min", "0");
			attr_dev(input1, "max", "100");
			attr_dev(input1, "class", "cursor_not_allowed form-control px-0 text-center");
			input1.disabled = input1_disabled_value = true;
			add_location(input1, file, 1502, 56, 78627);
			attr_dev(div1, "class", "input-group");
			add_location(div1, file, 1500, 52, 78370);
			attr_dev(div2, "class", "col-7 col-sm-3 px-0");
			add_location(div2, file, 1499, 48, 78284);
			attr_dev(div3, "class", "row");
			add_location(div3, file, 1488, 44, 77412);
			attr_dev(td0, "align", "center");
			attr_dev(td0, "class", "tabcol border-0 ps-3");
			add_location(td0, file, 1487, 40, 77319);
			attr_dev(span, "data-bs-toggle", "tooltip");
			attr_dev(span, "title", span_title_value = Lang.delete);
			attr_dev(span, "class", "icomoon-remove-2 s4 pointer text-dark");
			add_location(span, file, 1509, 48, 79360);
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "bg-white delete_button ms-auto text-white border-0 mt-1");
			attr_dev(button, "tabindex", "0");
			attr_dev(button, "role", "button");
			attr_dev(button, "aria-pressed", "false");
			add_location(button, file, 1508, 44, 79106);
			attr_dev(td1, "align", "center");
			attr_dev(td1, "class", "border-0 float-end");
			add_location(td1, file, 1507, 40, 79015);
			attr_dev(tr, "key", tr_key_value = /*index*/ ctx[169]);
			add_location(tr, file, 1486, 36, 77262);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, div3);
			append_dev(div3, div0);
			append_dev(div0, input0);
			set_input_value(input0, /*data*/ ctx[163].name);
			append_dev(div3, t0);
			append_dev(div3, div2);
			append_dev(div2, div1);
			append_dev(div1, label);
			append_dev(label, t1);
			append_dev(div1, t2);
			append_dev(div1, input1);
			set_input_value(input1, /*data*/ ctx[163].value);
			append_dev(tr, t3);
			append_dev(tr, td1);
			append_dev(td1, button);
			append_dev(button, span);
			append_dev(tr, t4);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input0_input_handler_1),
					listen_dev(input0, "change", change_handler_10, false, false, false),
					listen_dev(input1, "input", input1_input_handler_1),
					listen_dev(button, "click", click_handler_6, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localscoreCategoryData*/ 8 && input0.value !== /*data*/ ctx[163].name) {
				set_input_value(input0, /*data*/ ctx[163].name);
			}

			if (dirty[0] & /*localscoreCategoryData*/ 8 && to_number(input1.value) !== /*data*/ ctx[163].value) {
				set_input_value(input1, /*data*/ ctx[163].value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_5.name,
		type: "each",
		source: "(1486:32) {#each localscoreCategoryData as data, index}",
		ctx
	});

	return block;
}

// (1440:52) {#each state.sceneData.scene[defaultScene].anim as animation, key}
function create_each_block_4(ctx) {
	let option;
	let t_value = /*animation*/ ctx[171].name + "";
	let t;
	let option_value_value;
	let option_key_value;

	const block = {
		c: function create() {
			option = element("option");
			t = text(t_value);
			option.__value = option_value_value = /*key*/ ctx[173];
			option.value = option.__value;
			attr_dev(option, "key", option_key_value = /*key*/ ctx[173]);
			add_location(option, file, 1440, 56, 73912);
		},
		m: function mount(target, anchor) {
			insert_dev(target, option, anchor);
			append_dev(option, t);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*state, defaultScene*/ 4224 && t_value !== (t_value = /*animation*/ ctx[171].name + "")) set_data_dev(t, t_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(option);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_4.name,
		type: "each",
		source: "(1440:52) {#each state.sceneData.scene[defaultScene].anim as animation, key}",
		ctx
	});

	return block;
}

// (1414:28) {#each state.sceneData.scene[defaultScene].assets as data, index}
function create_each_block_3(ctx) {
	let tr;
	let td0;
	let div0;
	let img;
	let img_alt_value;
	let img_src_value;
	let t0;
	let div1;
	let input0;
	let t1;
	let td1;
	let div2;
	let input1;
	let input1_id_value;
	let input1_value_value;
	let input1_checked_value;
	let t2;
	let label0;
	let t3_value = Lang.visibility + "";
	let t3;
	let label0_title_value;
	let label0_for_value;
	let t4;
	let div4;
	let div3;
	let label1;
	let t5_value = Lang.animation + "";
	let t5;
	let label1_for_value;
	let label1_title_value;
	let label1_htmlfor_value;
	let t6;
	let select;
	let select_id_value;
	let select_disabled_value;
	let t7;
	let div6;
	let div5;
	let label2;
	let t8_value = Lang.tooltip + "";
	let t8;
	let label2_for_value;
	let label2_title_value;
	let label2_htmlfor_value;
	let t9;
	let input2;
	let input2_id_value;
	let input2_disabled_value;
	let t10;
	let div8;
	let div7;
	let label3;
	let t11_value = Lang.onclick_step + "";
	let t11;
	let label3_for_value;
	let label3_title_value;
	let label3_htmlfor_value;
	let t12;
	let input3;
	let input3_id_value;
	let input3_max_value;
	let input3_disabled_value;
	let t13;
	let tr_key_value;
	let mounted;
	let dispose;

	function input0_input_handler() {
		/*input0_input_handler*/ ctx[48].call(input0, /*each_value_3*/ ctx[170], /*index*/ ctx[169]);
	}

	function change_handler_6(...args) {
		return /*change_handler_6*/ ctx[49](/*index*/ ctx[169], ...args);
	}

	let each_value_4 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
	validate_each_argument(each_value_4);
	let each_blocks = [];

	for (let i = 0; i < each_value_4.length; i += 1) {
		each_blocks[i] = create_each_block_4(get_each_context_4(ctx, each_value_4, i));
	}

	function select_change_handler_4() {
		/*select_change_handler_4*/ ctx[50].call(select, /*each_value_3*/ ctx[170], /*index*/ ctx[169]);
	}

	function change_handler_7(...args) {
		return /*change_handler_7*/ ctx[51](/*index*/ ctx[169], ...args);
	}

	function input2_input_handler() {
		/*input2_input_handler*/ ctx[52].call(input2, /*each_value_3*/ ctx[170], /*index*/ ctx[169]);
	}

	function change_handler_8(...args) {
		return /*change_handler_8*/ ctx[53](/*index*/ ctx[169], ...args);
	}

	function input3_input_handler() {
		/*input3_input_handler*/ ctx[54].call(input3, /*each_value_3*/ ctx[170], /*index*/ ctx[169]);
	}

	function change_handler_9(...args) {
		return /*change_handler_9*/ ctx[55](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div1 = element("div");
			input0 = element("input");
			t1 = space();
			td1 = element("td");
			div2 = element("div");
			input1 = element("input");
			t2 = space();
			label0 = element("label");
			t3 = text(t3_value);
			t4 = space();
			div4 = element("div");
			div3 = element("div");
			label1 = element("label");
			t5 = text(t5_value);
			t6 = space();
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t7 = space();
			div6 = element("div");
			div5 = element("div");
			label2 = element("label");
			t8 = text(t8_value);
			t9 = space();
			input2 = element("input");
			t10 = space();
			div8 = element("div");
			div7 = element("div");
			label3 = element("label");
			t11 = text(t11_value);
			t12 = space();
			input3 = element("input");
			t13 = space();
			attr_dev(img, "class", "img-thumbnail");
			attr_dev(img, "width", "145px");
			attr_dev(img, "height", "145px");
			attr_dev(img, "alt", img_alt_value = "Assets " + (/*index*/ ctx[169] + 1));
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/assets" + (/*index*/ ctx[169] + 1) + ".png")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 1417, 44, 71535);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 1416, 40, 71465);
			attr_dev(input0, "type", "text");
			input0.disabled = "disabled";
			attr_dev(input0, "class", "form-control");
			add_location(input0, file, 1420, 44, 71867);
			attr_dev(div1, "class", "text-center mt-2");
			add_location(div1, file, 1419, 40, 71792);
			attr_dev(td0, "align", "center");
			attr_dev(td0, "class", "w-25");
			add_location(td0, file, 1415, 36, 71392);
			attr_dev(input1, "class", "form-check-input");
			attr_dev(input1, "tabindex", "0");
			attr_dev(input1, "type", "checkbox");
			attr_dev(input1, "id", input1_id_value = "asset_visible" + /*index*/ ctx[169]);
			input1.value = input1_value_value = /*data*/ ctx[163].visible;

			input1.checked = input1_checked_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? false
			: true;

			add_location(input1, file, 1425, 44, 72222);
			attr_dev(label0, "class", "form-check-label mt-small");
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "title", label0_title_value = Lang.asset_visibility);
			attr_dev(label0, "for", label0_for_value = "asset_visible" + /*index*/ ctx[169]);
			add_location(label0, file, 1426, 44, 72523);
			attr_dev(div2, "class", "form-check form-switch ms-3");
			add_location(div2, file, 1424, 40, 72136);
			attr_dev(label1, "for", label1_for_value = "asset_anim" + /*index*/ ctx[169]);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "data-bs-toggle", "tooltip");
			attr_dev(label1, "title", label1_title_value = Lang.asset_animation);
			attr_dev(label1, "htmlfor", label1_htmlfor_value = "asset_anim" + /*index*/ ctx[169]);
			add_location(label1, file, 1430, 48, 72910);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "asset_anim" + /*index*/ ctx[169]);

			select.disabled = select_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false;

			if (/*data*/ ctx[163].anim === void 0) add_render_callback(select_change_handler_4);
			add_location(select, file, 1432, 48, 73211);
			attr_dev(div3, "class", "input-group");
			add_location(div3, file, 1429, 44, 72836);
			attr_dev(div4, "class", "form-group row mb-2");
			add_location(div4, file, 1428, 40, 72758);
			attr_dev(label2, "for", label2_for_value = "asset_label" + /*index*/ ctx[169]);
			attr_dev(label2, "class", "input-group-text");
			attr_dev(label2, "data-bs-toggle", "tooltip");
			attr_dev(label2, "title", label2_title_value = Lang.tooltip_txt);
			attr_dev(label2, "htmlfor", label2_htmlfor_value = "asset_label" + /*index*/ ctx[169]);
			add_location(label2, file, 1447, 48, 74376);
			attr_dev(input2, "type", "text");
			attr_dev(input2, "class", "form-control");
			attr_dev(input2, "placeholder", "Tooltip Name");
			attr_dev(input2, "id", input2_id_value = "asset_label" + /*index*/ ctx[169]);

			input2.disabled = input2_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false;

			add_location(input2, file, 1448, 48, 74585);
			attr_dev(div5, "class", "input-group");
			add_location(div5, file, 1446, 44, 74302);
			attr_dev(div6, "class", "form-group row mb-2");
			add_location(div6, file, 1445, 40, 74224);
			attr_dev(label3, "for", label3_for_value = "asset_stepindex" + /*index*/ ctx[169]);
			attr_dev(label3, "class", "input-group-text");
			attr_dev(label3, "data-bs-toggle", "tooltip");
			attr_dev(label3, "title", label3_title_value = Lang.tooltip_txt);
			attr_dev(label3, "htmlfor", label3_htmlfor_value = "asset_stepindex" + /*index*/ ctx[169]);
			add_location(label3, file, 1461, 48, 75554);
			attr_dev(input3, "type", "number");
			attr_dev(input3, "class", "form-control");
			attr_dev(input3, "id", input3_id_value = "asset_stepindex" + /*index*/ ctx[169]);
			attr_dev(input3, "min", "1");
			attr_dev(input3, "max", input3_max_value = /*localstepData*/ ctx[2].length);

			input3.disabled = input3_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false;

			add_location(input3, file, 1462, 48, 75776);
			attr_dev(div7, "class", "input-group");
			add_location(div7, file, 1460, 44, 75480);
			attr_dev(div8, "class", "form-group row mb-2");
			add_location(div8, file, 1459, 40, 75402);
			attr_dev(td1, "class", "p-3");
			add_location(td1, file, 1423, 36, 72079);
			attr_dev(tr, "key", tr_key_value = /*index*/ ctx[169]);
			add_location(tr, file, 1414, 32, 71339);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, div0);
			append_dev(div0, img);
			append_dev(td0, t0);
			append_dev(td0, div1);
			append_dev(div1, input0);
			set_input_value(input0, /*data*/ ctx[163].asset);
			append_dev(tr, t1);
			append_dev(tr, td1);
			append_dev(td1, div2);
			append_dev(div2, input1);
			append_dev(div2, t2);
			append_dev(div2, label0);
			append_dev(label0, t3);
			append_dev(td1, t4);
			append_dev(td1, div4);
			append_dev(div4, div3);
			append_dev(div3, label1);
			append_dev(label1, t5);
			append_dev(div3, t6);
			append_dev(div3, select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*data*/ ctx[163].anim);
			append_dev(td1, t7);
			append_dev(td1, div6);
			append_dev(div6, div5);
			append_dev(div5, label2);
			append_dev(label2, t8);
			append_dev(div5, t9);
			append_dev(div5, input2);
			set_input_value(input2, /*data*/ ctx[163].tooltip);
			append_dev(td1, t10);
			append_dev(td1, div8);
			append_dev(div8, div7);
			append_dev(div7, label3);
			append_dev(label3, t11);
			append_dev(div7, t12);
			append_dev(div7, input3);
			set_input_value(input3, /*data*/ ctx[163].assets_click);
			append_dev(tr, t13);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", input0_input_handler),
					listen_dev(input1, "change", change_handler_6, false, false, false),
					listen_dev(select, "change", select_change_handler_4),
					listen_dev(select, "change", change_handler_7, false, false, false),
					listen_dev(input2, "input", input2_input_handler),
					listen_dev(input2, "change", change_handler_8, false, false, false),
					listen_dev(input3, "input", input3_input_handler),
					listen_dev(input3, "change", change_handler_9, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*sceneName*/ 256 && img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/assets" + (/*index*/ ctx[169] + 1) + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224 && input0.value !== /*data*/ ctx[163].asset) {
				set_input_value(input0, /*data*/ ctx[163].asset);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224 && input1_value_value !== (input1_value_value = /*data*/ ctx[163].visible)) {
				prop_dev(input1, "value", input1_value_value);
			}

			if (dirty[0] & /*localassetsData*/ 64 && input1_checked_value !== (input1_checked_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? false
			: true)) {
				prop_dev(input1, "checked", input1_checked_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				each_value_4 = /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].anim;
				validate_each_argument(each_value_4);
				let i;

				for (i = 0; i < each_value_4.length; i += 1) {
					const child_ctx = get_each_context_4(ctx, each_value_4, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_4(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_4.length;
			}

			if (dirty[0] & /*localassetsData*/ 64 && select_disabled_value !== (select_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false)) {
				prop_dev(select, "disabled", select_disabled_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				select_option(select, /*data*/ ctx[163].anim);
			}

			if (dirty[0] & /*localassetsData*/ 64 && input2_disabled_value !== (input2_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false)) {
				prop_dev(input2, "disabled", input2_disabled_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224 && input2.value !== /*data*/ ctx[163].tooltip) {
				set_input_value(input2, /*data*/ ctx[163].tooltip);
			}

			if (dirty[0] & /*localstepData*/ 4 && input3_max_value !== (input3_max_value = /*localstepData*/ ctx[2].length)) {
				attr_dev(input3, "max", input3_max_value);
			}

			if (dirty[0] & /*localassetsData*/ 64 && input3_disabled_value !== (input3_disabled_value = /*localassetsData*/ ctx[6][/*index*/ ctx[169]].visible == 0
			? true
			: false)) {
				prop_dev(input3, "disabled", input3_disabled_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224 && to_number(input3.value) !== /*data*/ ctx[163].assets_click) {
				set_input_value(input3, /*data*/ ctx[163].assets_click);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_3.name,
		type: "each",
		source: "(1414:28) {#each state.sceneData.scene[defaultScene].assets as data, index}",
		ctx
	});

	return block;
}

// (1385:48) {:else}
function create_else_block_1(ctx) {
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let option2;
	let option2_value_value;
	let option3;
	let option3_value_value;
	let option4;
	let option4_value_value;
	let option5;
	let option5_value_value;
	let select_id_value;
	let select_disabled_value;
	let mounted;
	let dispose;

	function select_change_handler_3() {
		/*select_change_handler_3*/ ctx[46].call(select, /*index*/ ctx[169]);
	}

	function change_handler_5(...args) {
		return /*change_handler_5*/ ctx[47](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.female_one}`;
			option1 = element("option");
			option1.textContent = `${Lang.female_two}`;
			option2 = element("option");
			option2.textContent = `${Lang.female_three}`;
			option3 = element("option");
			option3.textContent = `${Lang.female_four}`;
			option4 = element("option");
			option4.textContent = `${Lang.female_five}`;
			option5 = element("option");
			option5.textContent = `${Lang.female_six}`;
			option0.__value = option0_value_value = 0;
			option0.value = option0.__value;
			add_location(option0, file, 1393, 56, 70081);
			option1.__value = option1_value_value = 2;
			option1.value = option1.__value;
			add_location(option1, file, 1394, 56, 70179);
			option2.__value = option2_value_value = 4;
			option2.value = option2.__value;
			add_location(option2, file, 1395, 56, 70277);
			option3.__value = option3_value_value = 6;
			option3.value = option3.__value;
			add_location(option3, file, 1396, 56, 70377);
			option4.__value = option4_value_value = 8;
			option4.value = option4.__value;
			add_location(option4, file, 1397, 56, 70476);
			option5.__value = option5_value_value = 10;
			option5.value = option5.__value;
			add_location(option5, file, 1398, 56, 70575);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "char_voice" + /*index*/ ctx[169]);
			select.disabled = select_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true;
			if (/*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice === void 0) add_render_callback(select_change_handler_3);
			add_location(select, file, 1386, 52, 69442);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			append_dev(select, option3);
			append_dev(select, option4);
			append_dev(select, option5);
			select_option(select, /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_3),
					listen_dev(select, "change", change_handler_5, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterData*/ 1 && select_disabled_value !== (select_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true)) {
				prop_dev(select, "disabled", select_disabled_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				select_option(select, /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block_1.name,
		type: "else",
		source: "(1385:48) {:else}",
		ctx
	});

	return block;
}

// (1371:48) {#if (state.sceneData.scene[defaultScene].characters[index].voice == 1 || state.sceneData.scene[defaultScene].characters[index].voice == 3 || state.sceneData.scene[defaultScene].characters[index].voice == 7 || state.sceneData.scene[defaultScene].characters[index].voice == 9)}
function create_if_block_8(ctx) {
	let select;
	let option0;
	let option0_value_value;
	let option1;
	let option1_value_value;
	let option2;
	let option2_value_value;
	let option3;
	let option3_value_value;
	let select_id_value;
	let select_disabled_value;
	let mounted;
	let dispose;

	function select_change_handler_2() {
		/*select_change_handler_2*/ ctx[44].call(select, /*index*/ ctx[169]);
	}

	function change_handler_4(...args) {
		return /*change_handler_4*/ ctx[45](/*index*/ ctx[169], ...args);
	}

	const block = {
		c: function create() {
			select = element("select");
			option0 = element("option");
			option0.textContent = `${Lang.male_one}`;
			option1 = element("option");
			option1.textContent = `${Lang.male_two}`;
			option2 = element("option");
			option2.textContent = `${Lang.male_three}`;
			option3 = element("option");
			option3.textContent = `${Lang.male_four}`;
			option0.__value = option0_value_value = 1;
			option0.value = option0.__value;
			add_location(option0, file, 1379, 56, 68849);
			option1.__value = option1_value_value = 3;
			option1.value = option1.__value;
			add_location(option1, file, 1380, 56, 68945);
			option2.__value = option2_value_value = 7;
			option2.value = option2.__value;
			add_location(option2, file, 1381, 56, 69041);
			option3.__value = option3_value_value = 9;
			option3.value = option3.__value;
			add_location(option3, file, 1382, 56, 69139);
			attr_dev(select, "class", "form-select");
			attr_dev(select, "id", select_id_value = "char_voice" + /*index*/ ctx[169]);
			select.disabled = select_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true;
			if (/*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice === void 0) add_render_callback(select_change_handler_2);
			add_location(select, file, 1372, 52, 68210);
		},
		m: function mount(target, anchor) {
			insert_dev(target, select, anchor);
			append_dev(select, option0);
			append_dev(select, option1);
			append_dev(select, option2);
			append_dev(select, option3);
			select_option(select, /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice);

			if (!mounted) {
				dispose = [
					listen_dev(select, "change", select_change_handler_2),
					listen_dev(select, "change", change_handler_4, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*localcharacterData*/ 1 && select_disabled_value !== (select_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true)) {
				prop_dev(select, "disabled", select_disabled_value);
			}

			if (dirty[0] & /*state, defaultScene*/ 4224) {
				select_option(select, /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(select);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(1371:48) {#if (state.sceneData.scene[defaultScene].characters[index].voice == 1 || state.sceneData.scene[defaultScene].characters[index].voice == 3 || state.sceneData.scene[defaultScene].characters[index].voice == 7 || state.sceneData.scene[defaultScene].characters[index].voice == 9)}",
		ctx
	});

	return block;
}

// (1341:28) {#each localcharacterData as data, index}
function create_each_block_2(ctx) {
	let tr;
	let td0;
	let div0;
	let img;
	let img_alt_value;
	let img_src_value;
	let t0;
	let td1;
	let div1;
	let input0;
	let input0_id_value;
	let input0_value_value;
	let input0_checked_value;
	let t1;
	let label0;
	let t2;
	let label0_title_value;
	let label0_for_value;
	let t3;
	let div3;
	let div2;
	let label1;
	let t4;
	let label1_for_value;
	let label1_title_value;
	let label1_htmlfor_value;
	let t5;
	let input1;
	let input1_id_value;
	let input1_disabled_value;
	let t6;
	let div5;
	let div4;
	let label2;
	let t7_value = Lang.character_voice + "";
	let t7;
	let label2_for_value;
	let label2_title_value;
	let label2_htmlfor_value;
	let t8;
	let t9;
	let tr_key_value;
	let mounted;
	let dispose;

	function change_handler_2(...args) {
		return /*change_handler_2*/ ctx[41](/*index*/ ctx[169], ...args);
	}

	function input1_input_handler() {
		/*input1_input_handler*/ ctx[42].call(input1, /*each_value_2*/ ctx[168], /*index*/ ctx[169]);
	}

	function change_handler_3(...args) {
		return /*change_handler_3*/ ctx[43](/*index*/ ctx[169], ...args);
	}

	function select_block_type_2(ctx, dirty) {
		if (/*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice == 1 || /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice == 3 || /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice == 7 || /*state*/ ctx[12].sceneData.scene[/*defaultScene*/ ctx[7]].characters[/*index*/ ctx[169]].voice == 9) return create_if_block_8;
		return create_else_block_1;
	}

	let current_block_type = select_block_type_2(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			tr = element("tr");
			td0 = element("td");
			div0 = element("div");
			img = element("img");
			t0 = space();
			td1 = element("td");
			div1 = element("div");
			input0 = element("input");
			t1 = space();
			label0 = element("label");
			t2 = text("Visibility");
			t3 = space();
			div3 = element("div");
			div2 = element("div");
			label1 = element("label");
			t4 = text("Character Name");
			t5 = space();
			input1 = element("input");
			t6 = space();
			div5 = element("div");
			div4 = element("div");
			label2 = element("label");
			t7 = text(t7_value);
			t8 = space();
			if_block.c();
			t9 = space();
			attr_dev(img, "width", "145px");
			attr_dev(img, "height", "145px");
			attr_dev(img, "alt", img_alt_value = "Character " + (/*index*/ ctx[169] + 1));
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/chracter" + (/*index*/ ctx[169] + 1) + ".png")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 1344, 44, 65269);
			attr_dev(div0, "class", "text-center");
			add_location(div0, file, 1343, 40, 65199);
			attr_dev(td0, "align", "center");
			attr_dev(td0, "class", "char_image");
			add_location(td0, file, 1342, 36, 65120);
			attr_dev(input0, "class", "form-check-input");
			attr_dev(input0, "tabindex", "0");
			attr_dev(input0, "type", "checkbox");
			attr_dev(input0, "id", input0_id_value = "char_visibl" + /*index*/ ctx[169]);
			input0.value = input0_value_value = /*data*/ ctx[163].visible;
			input0.checked = input0_checked_value = /*data*/ ctx[163].visible == 0 ? true : false;
			add_location(input0, file, 1349, 44, 65690);
			attr_dev(label0, "class", "form-check-label mt-small");
			attr_dev(label0, "data-bs-toggle", "tooltip");
			attr_dev(label0, "title", label0_title_value = Lang.set_chr_visiblity);
			attr_dev(label0, "for", label0_for_value = "char_visibl" + /*index*/ ctx[169]);
			add_location(label0, file, 1350, 44, 65975);
			attr_dev(div1, "class", "form-check form-switch ms-3");
			add_location(div1, file, 1348, 40, 65604);
			attr_dev(label1, "for", label1_for_value = "character_name" + /*index*/ ctx[169]);
			attr_dev(label1, "class", "input-group-text");
			attr_dev(label1, "data-bs-toggle", "tooltip");
			attr_dev(label1, "title", label1_title_value = Lang.add_chr_nm);
			attr_dev(label1, "htmlfor", label1_htmlfor_value = "character_name" + /*index*/ ctx[169]);
			add_location(label1, file, 1354, 48, 66357);
			attr_dev(input1, "type", "text");
			attr_dev(input1, "class", "form-control");
			attr_dev(input1, "placeholder", "Character Name");
			attr_dev(input1, "id", input1_id_value = "character_name" + /*index*/ ctx[169]);
			input1.disabled = input1_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true;
			add_location(input1, file, 1356, 48, 66623);
			attr_dev(div2, "class", "input-group");
			add_location(div2, file, 1353, 44, 66283);
			attr_dev(div3, "class", "form-group row mb-2");
			add_location(div3, file, 1352, 40, 66205);
			attr_dev(label2, "for", label2_for_value = "char_voice" + /*index*/ ctx[169]);
			attr_dev(label2, "class", "input-group-text");
			attr_dev(label2, "data-bs-toggle", "tooltip");
			attr_dev(label2, "title", label2_title_value = Lang.chr_voice);
			attr_dev(label2, "htmlfor", label2_htmlfor_value = "char_voice" + /*index*/ ctx[169]);
			add_location(label2, file, 1369, 48, 67576);
			attr_dev(div4, "class", "input-group");
			add_location(div4, file, 1368, 44, 67502);
			attr_dev(div5, "class", "form-group row mb-2");
			add_location(div5, file, 1367, 40, 67424);
			attr_dev(td1, "class", "p-3");
			add_location(td1, file, 1347, 36, 65547);
			attr_dev(tr, "key", tr_key_value = /*index*/ ctx[169]);
			add_location(tr, file, 1341, 32, 65067);
		},
		m: function mount(target, anchor) {
			insert_dev(target, tr, anchor);
			append_dev(tr, td0);
			append_dev(td0, div0);
			append_dev(div0, img);
			append_dev(tr, t0);
			append_dev(tr, td1);
			append_dev(td1, div1);
			append_dev(div1, input0);
			append_dev(div1, t1);
			append_dev(div1, label0);
			append_dev(label0, t2);
			append_dev(td1, t3);
			append_dev(td1, div3);
			append_dev(div3, div2);
			append_dev(div2, label1);
			append_dev(label1, t4);
			append_dev(div2, t5);
			append_dev(div2, input1);
			set_input_value(input1, /*data*/ ctx[163].name);
			append_dev(td1, t6);
			append_dev(td1, div5);
			append_dev(div5, div4);
			append_dev(div4, label2);
			append_dev(label2, t7);
			append_dev(div4, t8);
			if_block.m(div4, null);
			append_dev(tr, t9);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "change", change_handler_2, false, false, false),
					listen_dev(input1, "input", input1_input_handler),
					listen_dev(input1, "change", change_handler_3, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*sceneName*/ 256 && img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*sceneName*/ ctx[8] + "/chracter" + (/*index*/ ctx[169] + 1) + ".png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*localcharacterData*/ 1 && input0_value_value !== (input0_value_value = /*data*/ ctx[163].visible)) {
				prop_dev(input0, "value", input0_value_value);
			}

			if (dirty[0] & /*localcharacterData*/ 1 && input0_checked_value !== (input0_checked_value = /*data*/ ctx[163].visible == 0 ? true : false)) {
				prop_dev(input0, "checked", input0_checked_value);
			}

			if (dirty[0] & /*localcharacterData*/ 1 && input1_disabled_value !== (input1_disabled_value = /*data*/ ctx[163].visible == 0 ? false : true)) {
				prop_dev(input1, "disabled", input1_disabled_value);
			}

			if (dirty[0] & /*localcharacterData*/ 1 && input1.value !== /*data*/ ctx[163].name) {
				set_input_value(input1, /*data*/ ctx[163].name);
			}

			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div4, null);
				}
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(tr);
			if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(1341:28) {#each localcharacterData as data, index}",
		ctx
	});

	return block;
}

// (1207:24) {#if sceneArr.length > 0}
function create_if_block_3(ctx) {
	let each_1_anchor;
	let each_value_1 = /*sceneArr*/ ctx[14];
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneArr, updateXmlValue, curDomain*/ 4341760) {
				each_value_1 = /*sceneArr*/ ctx[14];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(1207:24) {#if sceneArr.length > 0}",
		ctx
	});

	return block;
}

// (1254:52) {:else}
function create_else_block(ctx) {
	let button;
	let t_value = Lang.select + "";
	let t;
	let button_value_value;
	let button_id_value;
	let button_title_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			attr_dev(button, "type", "button");
			button.value = button_value_value = /*data*/ ctx[163].key;
			attr_dev(button, "class", "btn choose_btn float-end btn-light text-dark px-1 px-sm-3 svelte-1aeqnok");
			attr_dev(button, "id", button_id_value = "choose_btn" + /*data*/ ctx[163].key);
			attr_dev(button, "data-bs-toggle", "tooltip");
			attr_dev(button, "title", button_title_value = Lang.click_to_select + /*data*/ ctx[163].alt.toLowerCase() + ".");
			add_location(button, file, 1254, 56, 59501);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler_3*/ ctx[34], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneArr*/ 16384 && button_value_value !== (button_value_value = /*data*/ ctx[163].key)) {
				prop_dev(button, "value", button_value_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && button_id_value !== (button_id_value = "choose_btn" + /*data*/ ctx[163].key)) {
				attr_dev(button, "id", button_id_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && button_title_value !== (button_title_value = Lang.click_to_select + /*data*/ ctx[163].alt.toLowerCase() + ".")) {
				attr_dev(button, "title", button_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(1254:52) {:else}",
		ctx
	});

	return block;
}

// (1239:77) 
function create_if_block_5(ctx) {
	let button0;
	let t0_value = Lang.select + "";
	let t0;
	let button0_value_value;
	let button0_id_value;
	let button0_title_value;
	let t1;
	let button1;
	let span;
	let mounted;
	let dispose;

	function click_handler_2(...args) {
		return /*click_handler_2*/ ctx[33](/*data*/ ctx[163], ...args);
	}

	const block = {
		c: function create() {
			button0 = element("button");
			t0 = text(t0_value);
			t1 = space();
			button1 = element("button");
			span = element("span");
			attr_dev(button0, "type", "button");
			button0.value = button0_value_value = /*data*/ ctx[163].key;
			attr_dev(button0, "class", "btn choose_btn btn-light float-end text-dark svelte-1aeqnok");
			attr_dev(button0, "id", button0_id_value = "choose_btn" + /*data*/ ctx[163].key);
			attr_dev(button0, "data-bs-toggle", "tooltip");
			attr_dev(button0, "title", button0_title_value = Lang.click_to_select + /*data*/ ctx[163].alt.toLowerCase() + ".");
			add_location(button0, file, 1239, 56, 58005);
			attr_dev(span, "class", "icomoon-remove-2 s4");
			set_style(span, "color", "#000");
			set_style(span, "cursor", "pointer");
			add_location(span, file, 1251, 60, 59240);
			attr_dev(button1, "type", "button");
			attr_dev(button1, "class", "delete_button ml-auto");
			attr_dev(button1, "tabindex", "0");
			attr_dev(button1, "role", "button");
			attr_dev(button1, "aria-pressed", "false");
			set_style(button1, "border", "none");
			set_style(button1, "background", "white");
			add_location(button1, file, 1250, 56, 58956);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button0, anchor);
			append_dev(button0, t0);
			insert_dev(target, t1, anchor);
			insert_dev(target, button1, anchor);
			append_dev(button1, span);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", /*click_handler_1*/ ctx[32], false, false, false),
					listen_dev(button1, "click", click_handler_2, false, false, false)
				];

				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*sceneArr*/ 16384 && button0_value_value !== (button0_value_value = /*data*/ ctx[163].key)) {
				prop_dev(button0, "value", button0_value_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && button0_id_value !== (button0_id_value = "choose_btn" + /*data*/ ctx[163].key)) {
				attr_dev(button0, "id", button0_id_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && button0_title_value !== (button0_title_value = Lang.click_to_select + /*data*/ ctx[163].alt.toLowerCase() + ".")) {
				attr_dev(button0, "title", button0_title_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button0);
			if (detaching) detach_dev(t1);
			if (detaching) detach_dev(button1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(1239:77) ",
		ctx
	});

	return block;
}

// (1228:52) {#if data.type == 0}
function create_if_block_4(ctx) {
	let button;
	let t_value = Lang.no_of_token + "";
	let t;
	let button_value_value;
	let button_id_value;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			button = element("button");
			t = text(t_value);
			attr_dev(button, "type", "button");
			button.value = button_value_value = /*data*/ ctx[163].key;
			attr_dev(button, "class", "btn choose_btn btn-secondary float-end px-1 px-sm-3 svelte-1aeqnok");
			attr_dev(button, "id", button_id_value = "choose_btn" + /*data*/ ctx[163].key);
			add_location(button, file, 1228, 56, 57107);
		},
		m: function mount(target, anchor) {
			insert_dev(target, button, anchor);
			append_dev(button, t);

			if (!mounted) {
				dispose = listen_dev(button, "click", /*click_handler*/ ctx[31], false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneArr*/ 16384 && button_value_value !== (button_value_value = /*data*/ ctx[163].key)) {
				prop_dev(button, "value", button_value_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && button_id_value !== (button_id_value = "choose_btn" + /*data*/ ctx[163].key)) {
				attr_dev(button, "id", button_id_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(button);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(1228:52) {#if data.type == 0}",
		ctx
	});

	return block;
}

// (1208:28) {#each sceneArr as data}
function create_each_block_1(ctx) {
	let div7;
	let div6;
	let div0;
	let img;
	let img_alt_value;
	let img_src_value;
	let t0;
	let div5;
	let div2;
	let div1;
	let span;
	let t1_value = /*data*/ ctx[163].alt + "";
	let t1;
	let span_htmlfor_value;
	let div1_title_value;
	let t2;
	let div4;
	let div3;
	let t3;
	let div7_key_value;

	function select_block_type_1(ctx, dirty) {
		if (/*data*/ ctx[163].type == 0) return create_if_block_4;
		if (/*data*/ ctx[163].type == 1) return create_if_block_5;
		return create_else_block;
	}

	let current_block_type = select_block_type_1(ctx);
	let if_block = current_block_type(ctx);

	const block = {
		c: function create() {
			div7 = element("div");
			div6 = element("div");
			div0 = element("div");
			img = element("img");
			t0 = space();
			div5 = element("div");
			div2 = element("div");
			div1 = element("div");
			span = element("span");
			t1 = text(t1_value);
			t2 = space();
			div4 = element("div");
			div3 = element("div");
			if_block.c();
			t3 = space();
			attr_dev(img, "alt", img_alt_value = /*data*/ ctx[163].alt);
			attr_dev(img, "width", "200");
			attr_dev(img, "height", "200");
			if (img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*data*/ ctx[163].alt + "/scene.png")) attr_dev(img, "src", img_src_value);
			attr_dev(img, "class", "w-100 border rounded");
			add_location(img, file, 1211, 44, 55827);
			attr_dev(div0, "class", "image_view w-100 bg-light d-flex svelte-1aeqnok");
			add_location(div0, file, 1210, 40, 55736);
			attr_dev(span, "htmlfor", span_htmlfor_value = "choose_btn" + /*data*/ ctx[163].key);
			add_location(span, file, 1222, 52, 56668);
			attr_dev(div1, "class", "image_dec font18 overflow-hidden w-100 h-100 pt-2 text-center text-truncate");
			attr_dev(div1, "data-bs-toggle", "tooltip");
			attr_dev(div1, "title", div1_title_value = /*data*/ ctx[163].alt);
			add_location(div1, file, 1221, 48, 56482);
			attr_dev(div2, "class", "col-sm-12");
			add_location(div2, file, 1220, 44, 56410);
			attr_dev(div3, "class", "grid_btn pt-2");
			add_location(div3, file, 1226, 48, 56950);
			attr_dev(div4, "class", "col-sm-12");
			add_location(div4, file, 1225, 44, 56878);
			attr_dev(div5, "class", "row pt-2");
			add_location(div5, file, 1219, 40, 56343);
			attr_dev(div6, "class", "card card-body shadow-sm  p-2 h-100");
			add_location(div6, file, 1209, 36, 55646);
			attr_dev(div7, "key", div7_key_value = /*data*/ ctx[163].key);
			attr_dev(div7, "class", "col-lg-3 col-sm-4 col scene_image float-start p-2 svelte-1aeqnok");
			toggle_class(div7, "bg-light", /*data*/ ctx[163].type == 0);
			add_location(div7, file, 1208, 32, 55499);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div7, anchor);
			append_dev(div7, div6);
			append_dev(div6, div0);
			append_dev(div0, img);
			append_dev(div6, t0);
			append_dev(div6, div5);
			append_dev(div5, div2);
			append_dev(div2, div1);
			append_dev(div1, span);
			append_dev(span, t1);
			append_dev(div5, t2);
			append_dev(div5, div4);
			append_dev(div4, div3);
			if_block.m(div3, null);
			append_dev(div7, t3);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*sceneArr*/ 16384 && img_alt_value !== (img_alt_value = /*data*/ ctx[163].alt)) {
				attr_dev(img, "alt", img_alt_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && img.src !== (img_src_value = /*curDomain*/ ctx[17] + "labs/insight/Images/" + /*data*/ ctx[163].alt + "/scene.png")) {
				attr_dev(img, "src", img_src_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && t1_value !== (t1_value = /*data*/ ctx[163].alt + "")) set_data_dev(t1, t1_value);

			if (dirty[0] & /*sceneArr*/ 16384 && span_htmlfor_value !== (span_htmlfor_value = "choose_btn" + /*data*/ ctx[163].key)) {
				attr_dev(span, "htmlfor", span_htmlfor_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384 && div1_title_value !== (div1_title_value = /*data*/ ctx[163].alt)) {
				attr_dev(div1, "title", div1_title_value);
			}

			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div3, null);
				}
			}

			if (dirty[0] & /*sceneArr*/ 16384 && div7_key_value !== (div7_key_value = /*data*/ ctx[163].key)) {
				attr_dev(div7, "key", div7_key_value);
			}

			if (dirty[0] & /*sceneArr*/ 16384) {
				toggle_class(div7, "bg-light", /*data*/ ctx[163].type == 0);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div7);
			if_block.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(1208:28) {#each sceneArr as data}",
		ctx
	});

	return block;
}

// (1277:28) {#if menuLayout.length > 0}
function create_if_block_2(ctx) {
	let each_1_anchor;
	let each_value = /*menuLayout*/ ctx[13];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty[0] & /*menuLayout, loadScene*/ 2105344) {
				each_value = /*menuLayout*/ ctx[13];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(1277:28) {#if menuLayout.length > 0}",
		ctx
	});

	return block;
}

// (1278:32) {#each menuLayout as data}
function create_each_block(ctx) {
	let div;
	let button;
	let t0_value = Lang.load_more + "";
	let t0;
	let button_id_value;
	let button_value_value;
	let button_key_value;
	let t1;
	let mounted;
	let dispose;

	function click_handler_4(...args) {
		return /*click_handler_4*/ ctx[35](/*data*/ ctx[163], ...args);
	}

	const block = {
		c: function create() {
			div = element("div");
			button = element("button");
			t0 = text(t0_value);
			t1 = space();
			attr_dev(button, "tabindex", "0");
			attr_dev(button, "type", "button");
			attr_dev(button, "class", "btn btn-outline-dark page-item form-control pagination_btn active col-6 col-sm-3");
			attr_dev(button, "id", button_id_value = "pagination_btn" + /*data*/ ctx[163].data_active);
			button.value = button_value_value = /*data*/ ctx[163].data_active;
			attr_dev(button, "key", button_key_value = /*data*/ ctx[163].data_active);
			add_location(button, file, 1279, 40, 61157);
			attr_dev(div, "class", "pagination m-sm-1 justify-content-center");
			add_location(div, file, 1278, 36, 61062);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, button);
			append_dev(button, t0);
			append_dev(div, t1);

			if (!mounted) {
				dispose = listen_dev(button, "click", click_handler_4, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty[0] & /*menuLayout*/ 8192 && button_id_value !== (button_id_value = "pagination_btn" + /*data*/ ctx[163].data_active)) {
				attr_dev(button, "id", button_id_value);
			}

			if (dirty[0] & /*menuLayout*/ 8192 && button_value_value !== (button_value_value = /*data*/ ctx[163].data_active)) {
				prop_dev(button, "value", button_value_value);
			}

			if (dirty[0] & /*menuLayout*/ 8192 && button_key_value !== (button_key_value = /*data*/ ctx[163].data_active)) {
				attr_dev(button, "key", button_key_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(1278:32) {#each menuLayout as data}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let center;
	let div0;
	let iframe;
	let t0;
	let t1;
	let current;
	let if_block0 = /*state*/ ctx[12].tabvalue == 6 && create_if_block_35(ctx);
	let if_block1 = /*show_dom*/ ctx[15] && create_if_block(ctx);

	const block = {
		c: function create() {
			div1 = element("div");
			center = element("center");
			div0 = element("div");
			iframe = element("iframe");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			attr_dev(iframe, "id", "authoringFrame");
			attr_dev(iframe, "title", "insight_frame");
			attr_dev(iframe, "name", "authoringFrame");
			attr_dev(iframe, "height", "580");
			attr_dev(iframe, "width", "94%");
			add_location(iframe, file, 1131, 12, 49907);
			attr_dev(div0, "id", "frame");
			add_location(div0, file, 1130, 8, 49878);
			add_location(center, file, 1129, 4, 49861);
			attr_dev(div1, "id", "authoringArea");
			add_location(div1, file, 1128, 0, 49832);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, center);
			append_dev(center, div0);
			append_dev(div0, iframe);
			append_dev(div1, t0);
			if (if_block0) if_block0.m(div1, null);
			append_dev(div1, t1);
			if (if_block1) if_block1.m(div1, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			if (/*state*/ ctx[12].tabvalue == 6) {
				if (if_block0) {
					if_block0.p(ctx, dirty);

					if (dirty[0] & /*state*/ 4096) {
						transition_in(if_block0, 1);
					}
				} else {
					if_block0 = create_if_block_35(ctx);
					if_block0.c();
					transition_in(if_block0, 1);
					if_block0.m(div1, t1);
				}
			} else if (if_block0) {
				group_outros();

				transition_out(if_block0, 1, 1, () => {
					if_block0 = null;
				});

				check_outros();
			}

			if (/*show_dom*/ ctx[15]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div1, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o: function outro(local) {
			transition_out(if_block0);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (if_block0) if_block0.d();
			if (if_block1) if_block1.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function removeTags(text) {
	let strippedText = text.replace(/(<([^>]+)>)/ig, "").replace(/\n/g, " ");
	return strippedText;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Insight", slots, []);
	let { xml } = $$props;
	let { getChildXml } = $$props;
	let { user } = $$props;
	let { editorState } = $$props;
	let { itemIcons } = $$props;

	const category = {
		"quiz": "knowledge_check",
		"terminal": "lab",
		"simulation": "lab",
		"insight": "lab",
		"lablink": "lab",
		"playground": "lab",
		"video": "media",
		"audio": "media",
		"exhibit": "link",
		"pdf": "link",
		"weblink": "link",
		"download": "link",
		"object3d": "objects"
	};

	let itemArray = [
			"quiz",
			"link",
			"terminal",
			"object3d",
			"exhibit",
			"insight",
			"lablink",
			"playground",
			"simulation"
		],
		sceneTemp = "",
		characterData = "",
		localcharacterData = [],
		localcharacterChoice = [],
		insightData = [],
		stepData = "",
		isSmartChat = "",
		localstepData = [],
		scoreCategoryData = "",
		localscoreCategoryData = [],
		assetData = "",
		localassetData = [],
		tabData = "",
		localtabData = [],
		modeData = "",
		localmodeData = [],
		assetsData = "",
		localassetsData = [],
		defaultScene = 0,
		sceneName = "",
		sceneJson = "",
		qxml = "",
		resultTitle = "",
		BGsrc = "",
		began = "",
		updateAnimation = [],
		sceneData = {},
		localpage_value = 0,
		data_active = 1,
		state = {},
		menuLayout = [],
		sceneArr = [],
		is_scene_load = false,
		show_dom = false;

	// it need to change by baseUrl
	let check_domain = window.location.origin.search("localhost") > 0 || window.location.origin.search("demo-a.ucertify.com") > 0;

	let curDomain = check_domain ? "https://www.jigyaasa.info/" : baseUrl;

	// creating the authoring writable store
	let auth_store = writable({
		xml: "",
		activeTab: 1,
		category: "knowledge_check",
		type: "simulation",
		content_type: "q,u",
		content_subtype: "16",
		currentItem: "",
		msg: "",
		sceneData: "",
		tabvalue: 0,
		layout: 0,
		toggleMode: "",
		end: 12
	});

	// subscribing to the store
	const unsubscribe = auth_store.subscribe(item => {
		$$invalidate(12, state = item);
	});

	// calling beforeUpdate which calls before every time there is update
	beforeUpdate(async () => {
		if (is_scene_load) {
			// checking for authoring and preview mode
			if (editorState.toggleMode != state.toggleMode) {
				if (editorState.toggleMode) {
					qxml = state.xml;

					auth_store.update(item => {
						item.xml = qxml;
						return item;
					});

					getChildXml(qxml);

					if (AH.selectAll("#authoringArea form").length) {
						AH.select("#authoringArea form").remove();
					}

					let formaction = baseUrl + "sim/smartsim/index.php?insight=1&in_editor=1&insight_navigation=1";
					let testHtml = "<form method=\"post\" target=\"authoringFrame\" action=\"" + formaction + "\"><input type=\"hidden\" name=\"no_header\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + qxml + "</textarea><input type=\"hidden\" name=\"uxml\" value=\"\"/><input type=\"hidden\" name=\"content_guid\" value=\"0\" /></form>";
					AH.insert("#authoringArea", testHtml, "beforeend");
					let element = AH.selectAll("#title, #stem,.insight_tabs, #remediation, .editor_placeholder");

					for (let index = 0; index < element.length; index++) {
						AH.setCss(element[index], { display: "none" });
					}

					AH.insert("#title", "<div id=\"tilteShow\">" + AH.select("#title").innerHTML + "</div>", "afterend");
					AH.insert("#stem", "<div id=\"stemShow\">" + AH.select("#stem").innerHTML + "</div>", "afterend");
					AH.insert("#remediation", "<div id=\"remediationShow\">" + AH.select("#remediation").innerHTML + "</div>", "afterend");
					$$invalidate(25, editorState.activator = true, editorState);
					AH.select("form[target=\"authoringFrame\"]").submit();
					AH.select("#authoringFrame").style.display = "block";
				} else {
					AH.selectAll("#tilteShow, #stemShow, #remediationShow", "remove");
					let element = AH.selectAll("#title, #stem, #remediation, #externalInputs, .insight_tabs, .editor_placeholder");

					for (let index = 0; index < element.length; index++) {
						AH.setCss(element[index], { display: "block" });
					}

					try {
						AH.select("#authoringFrame").contentWindow.responsiveVoice.cancel();
					} catch(e) {
						console.log(e);
					}

					AH.select("#authoringFrame").style.display = "none";
				}

				auth_store.update(item => {
					item.toggleMode = editorState.toggleMode;
					return item;
				});
			}

			// checking for change in xml
			if (state.xml != xml) {
				loadModule(xml);

				auth_store.update(item => {
					item.xml = xml;
					return item;
				});

				loadScene(state.end);
			}

			// setting visibles tabs according to the selected scene
			if (state.sceneData) {
				for (let index = 0; index < state.sceneData.scene.length; index++) {
					if (sceneName == state.sceneData.scene[index].title) {
						$$invalidate(7, defaultScene = index);

						if (AH.select(".insightTab8").nodeName && AH.select(".insightTab5").nodeName && AH.select(".insightTab4").nodeName) {
							if (state.sceneData.scene[defaultScene].anim.length < 1) {
								AH.select(".insightTab8").style.display = "none";
							} else {
								AH.select(".insightTab8").style.display = "block";
							}

							if (state.sceneData.scene[defaultScene].assets.length < 2) {
								AH.select(".insightTab4").style.display = "none";
								AH.select(".insightTab5").style.display = "none";
							} else {
								AH.select(".insightTab4").style.display = "block";
							}
						}
					}
				}
			}
		} else {
			// removing editor activator after scene fetch
			$$invalidate(25, editorState.activator = true, editorState);
		}
	});

	// binding up neccessary events 
	onMount(async () => {
		// for getting the insight data
		getDataFromApi();

		AH.listen("body", "keyup", "#stem .ebook_item_text", function () {
			updateXmlValue();
		});

		AH.listen("body", "keyup", "#search", function (current, event) {
			searchTable(event);
		});

		AH.listen("body", "click", ".pagination_btn", function (current, event) {
			data_active = event.target.value;
			AH.selectAll(".pagination_btn", "removeClass", "active");
			current.classList.add("active");
			$$invalidate(13, menuLayout = []);
			createPagination();
			$$invalidate(12, state.end = 24, state);
		});

		AH.listen("body", "click", "#table_list tr", function (current, event) {
			let guid = AH.find(current, "td").innerText;
			let index = AH.select("#currentItem").value;
			$$invalidate(2, localstepData[index].guids = guid, localstepData);
			updateXmlValue(event, index, "", "", guid);
			AH.getBS("#player_modal", "Modal").hide();
		});

		document.querySelector("#authoringFrame").addEventListener("load", () => {
			if (editorState.toggleMode) {
				$$invalidate(25, editorState.activator = false, editorState);
			}
		});

		AH.select("#preview").style.display = "none";
		AH.select("#authoringFrame").style.display = "none";

		AH.listen("body", "click", ".tabbutton", function (element) {
			AH.selectAll(".tabbutton", "removeClass", "active");
			element.classList.add("active");

			auth_store.update(item => {
				item.tabvalue = Number(element.getAttribute("data-tab"));
				return item;
			});
		});
	});

	// afterUpdate is called after updation of the varibale here it set the content type & also manage sortable event
	afterUpdate(async () => {
		let isFound = itemArray.indexOf(state.type);

		if (isFound > -1) {
			setContentType();
		}

		if (state.tabvalue == 6) {
			let sortable = new Sortable(AH.select("#sortable"),
			{
					animation: 150,
					handle: ".allowDraggable",
					onEnd(evt) {
						if (evt.oldIndex > evt.newIndex) {
							for (let index = evt.oldIndex; index > evt.newIndex; index--) {
								let tempValue = localstepData[index - 1];
								$$invalidate(2, localstepData[index - 1] = localstepData[index], localstepData);
								$$invalidate(2, localstepData[index] = tempValue, localstepData);
							}
						} else if (evt.oldIndex < evt.newIndex) {
							for (let index = evt.oldIndex; index < evt.newIndex; index++) {
								let tempValue = localstepData[index + 1];
								$$invalidate(2, localstepData[index + 1] = localstepData[index], localstepData);
								$$invalidate(2, localstepData[index] = tempValue, localstepData);
							}
						} else {
							$$invalidate(2, localstepData[evt.oldIndex] = localstepData[evt.newIndex], localstepData);
						}

						let swap_element = AH.selectAll(".step_swap");

						swap_element.forEach(el => {
							el.click();
						});

						AH.select(".insightTab6").click();

						let insight_timer = setTimeout(
							() => {
								AH.select(".insightTab7").click();
								clearTimeout(insight_timer);
							},
							10
						);
					}
				});
		}
	});

	// used for fetching the insight data from the api
	function getDataFromApi() {
		AH.activate(2);

		AH.ajax({
			type: "GET",
			url: baseUrl + "editor/index.php?action=getinsight&insightId=054oF",
			onEnd() {
				$$invalidate(25, editorState.activator = false, editorState);
				AH.activate(0);
				$$invalidate(15, show_dom = true);
				is_scene_load = true;
			}
		}).then(function (data) {
			data = JSON.parse(data);

			auth_store.update(item => {
				item.sceneData = data;
				return item;
			});

			createPagination();
			loadScene(12);

			if (AH.selectAll("#placeHolderRemediation").length) {
				let parent = AH.select("#placeHolderRemediation").parentElement;
				parent.classList.add("float-start");
				parent.classList.add("col-12");
				parent.style.zIndex = "9";
			}
		});
	}

	// responsible for loading the module on the basis of xml
	function loadModule(loadXml) {
		let new_xml = XMLToJSON(loadXml);
		parseXMLAuthoring(new_xml);
	}

	// create variable and store data in variable and used for parsing the xml
	function parseXMLAuthoring(INSIGHTXML) {
		$$invalidate(2, localstepData = []);
		$$invalidate(0, localcharacterData = []);
		$$invalidate(1, localcharacterChoice = []);
		$$invalidate(3, localscoreCategoryData = []);
		localassetData = [];
		$$invalidate(6, localassetsData = []);
		$$invalidate(4, localtabData = []);
		$$invalidate(5, localmodeData = []);
		insightData = JSON.parse(INSIGHTXML.smxml.__cdata);
		stepData = insightData.steps;
		scoreCategoryData = insightData.scoreCategories;
		assetData = insightData.assets;
		tabData = insightData.link;
		modeData = insightData.mode;
		$$invalidate(8, sceneName = INSIGHTXML.smxml._sceneName);
		sceneJson = INSIGHTXML.smxml._sceneJson;
		isSmartChat = INSIGHTXML.smxml._isSmartChat;
		$$invalidate(11, began = insightData.begin);
		$$invalidate(10, BGsrc = insightData.bgImage);
		$$invalidate(9, resultTitle = insightData.detail);

		// setting the pagination count according to the total scenes
		if (state.sceneData) {
			for (let index = 0; index < state.sceneData.scene.length; index++) {
				if (sceneName == state.sceneData.scene[index].title) {
					$$invalidate(7, defaultScene = index);
				}
			}
		}

		characterData = insightData.characters;

		// set all data of charaters like name id visiblity etc.
		for (let index = 0; index < characterData.length; index++) {
			$$invalidate(0, localcharacterData = [
				...localcharacterData,
				{
					visible: characterData[index].visible,
					name: characterData[index].name
				}
			]);

			$$invalidate(1, localcharacterChoice = [
				...localcharacterChoice,
				{
					visible: characterData[index].visible,
					name: characterData[index].name
				}
			]);
		}

		assetsData = insightData.assets;

		// set all data of assets like name id visiblity etc
		for (let index = 0; index < assetsData.length; index++) {
			$$invalidate(6, localassetsData = [
				...localassetsData,
				{
					name: assetsData[index].asset,
					visible: assetsData[index].visible,
					assets_click: assetData[index].assets_click,
					tooltip: assetData[index].tooltip,
					anim: assetData[index].anim,
					focus: assetData[index].focus
				}
			]);
		}

		// push all data into variables
		if (Object.keys(stepData).length) {
			for (let index = 0; index < stepData.length; index++) {
				if (typeof stepData[index].image == "undefined") {
					stepData[index].image = "";
				}

				$$invalidate(2, localstepData = [
					...localstepData,
					{
						id: stepData[index].id,
						name: stepData[index].name,
						allowChoices: stepData[index].allowChoices,
						camera: stepData[index].camera,
						voice: stepData[index].voice,
						message: stepData[index].message,
						stepIndex: stepData[index].stepIndex,
						guids: stepData[index].guids,
						choicesScore: stepData[index].choicesScore,
						state: stepData[index].state,
						speech: stepData[index].speech,
						auto: stepData[index].auto,
						choicesCategory: stepData[index].choicesCategory,
						condition: stepData[index].condition,
						image: stepData[index].image,
						choices: [],
						title: stepData[index].title,
						important_node: stepData[index].important_node,
						level_text: stepData[index].level_text
					}
				]);
			}

			for (let index = 0; index < localstepData.length; index++) {
				for (let sub_index = 0; sub_index < stepData[index].choices.length; sub_index++) {
					if (typeof stepData[index].choices[sub_index].fdbk_char_cam == "undefined") {
						stepData[index].choices[sub_index].fdbk_char_cam = stepData[index].choices[sub_index].camera;
					}

					if (typeof stepData[index].choices[sub_index].fdbk_char_voice == "undefined") {
						stepData[index].choices[sub_index].fdbk_char_voice = stepData[index].choices[sub_index].voice;
					}

					$$invalidate(
						2,
						localstepData[index].choices = [
							...localstepData[index].choices,
							{
								id: stepData[index].choices[sub_index].id,
								correct: stepData[index].choices[sub_index].correct,
								text: stepData[index].choices[sub_index].text,
								feedback: stepData[index].choices[sub_index].feedback,
								choicesScore: stepData[index].choices[sub_index].choicesScore,
								choicesCategory: stepData[index].choices[sub_index].choicesCategory,
								stepIndex: stepData[index].choices[sub_index].stepIndex,
								feedback_charact: stepData[index].choices[sub_index].feedback_charact,
								fdbk_char_cam: stepData[index].choices[sub_index].fdbk_char_cam,
								fdbk_char_voice: stepData[index].choices[sub_index].fdbk_char_voice
							}
						],
						localstepData
					);
				}
			}
		}

		if (Object.keys(scoreCategoryData).length) {
			for (let index = 0; index < scoreCategoryData.length; index++) {
				$$invalidate(3, localscoreCategoryData = [
					...localscoreCategoryData,
					{
						id: scoreCategoryData[index].id,
						name: scoreCategoryData[index].name,
						value: scoreCategoryData[index].value
					}
				]);
			}
		}

		if (Object.keys(assetData).length) {
			for (let index = 0; index < assetData.length; index++) {
				localassetData = [
					...localassetData,
					{
						src: assetData[index].src,
						title: assetData[index].title,
						icon: assetData[index].icon,
						text: assetData[index].text
					}
				];
			}
		}

		if (Object.keys(tabData).length) {
			for (let index = 0; index < tabData.length; index++) {
				$$invalidate(4, localtabData = [
					...localtabData,
					{
						title: tabData[index].title,
						name: tabData[index].name,
						guid: tabData[index].guid,
						focus: tabData[index].focus,
						dialog: tabData[index].dialog
					}
				]);
			}
		}

		$$invalidate(5, localmodeData = modeData ? modeData : 0);
	}

	// for uploading the image 
	function onChoiceImageSelect(event, i) {
		let files = event.target.files[0];
		const fd = new FormData();
		let rand = Math.floor(100 * Math.random()) + 1;
		let image_name = "uc_" + rand + "choice" + i;

		if (files.size > 32768) {
			fd.append("image", files, "/" + image_name + ".png");
			AH.select("#bgResult").nodeName && AH.select("#bgResult").setAttribute("src", curDomain + "labs/insight/Images/loading.gif");
			AH.select("#samplechoice_image" + i).nodeName && AH.select("#samplechoice_image" + i).setAttribute("src", curDomain + "labs/insight/Images/loading.gif");

			AH.ajax({
				type: "POST",
				url: baseUrl + "editor/index.php?func=choiceupload&folder=Choice_question_images",
				data: fd,
				formData: true
			}).then(function () {
				AH.select("#result_img").nodeName && AH.select("#result_img").setAttribute("value", curDomain + "labs/insight/Choice_question_images/" + image_name + ".png");
				AH.select("#choice_question_image" + i).nodeName && AH.select("#choice_question_image" + i).setAttribute("value", curDomain + "labs/insight/Choice_question_images/" + image_name + ".png");
				AH.select("#result_img").nodeName && AH.select("#result_img").click();
				AH.select("#choice_question_image" + i).nodeName && AH.select("#choice_question_image" + i).click();
			});
		} else {
			if (AH.select("#result_img").nodeName) {
				AH.select("#result_img").innerText = "File size is too small";
			}

			if (AH.select("#choice_question_image").nodeName) {
				AH.select("#choice_question_image").innerText = "File size is too small";
			}

			swal("File size is too small");
		}
	}

	// for setting the content type and content subtype
	function setContentType() {
		let content_type = "", content_subtype = "";

		switch (state.type) {
			case "terminal":
				content_type = "q,f";
				content_subtype = "13";
				break;
			case "lablink":
				content_type = "q";
				content_subtype = "25";
				break;
			case "playground":
				content_type = "q";
				content_subtype = "24";
				break;
			case "simulation":
				content_type = "q";
				content_subtype = "16";
				break;
			default:
				content_type = content_subtype = "";
				break;
		}

		if (state.content_type != content_type || state.content_subtype != content_subtype) {
			auth_store.update(item => {
				item.content_type = content_type;
				item.content_subtype = content_subtype;
				return item;
			});
		}
	}

	// For getting the snippet 
	function getSnippet() {
		AH.selectAll(".list_content, #not_found, #info_data, .search_list", "addClass", "h");
		AH.select("#not_found").innerText = Lang.no_record;

		if (state.content_type != "" || state.content_subtype != "") {
			if (editor.course) {
				AH.select("#list_process").classList.remove("h");

				AH.ajax({
					url: baseUrl + "editor/index.php?action=getSnippet&ajax=1",
					data: {
						course_code: editor.course.split(".")[0],
						content_type: state.content_type,
						content_subtype: state.content_subtype
					},
					type: "post"
				}).then(function (response) {
					if (response != 0) {
						let data = JSON.parse(response);
						let table = "";

						for (let index in data) {
							table += "<tr><td>" + index + "</td>";
							table += "<td>" + data[index]["snippet"] + "</td>";

							table += "<td class=\"text-center player_modal_tooltip\" data-bs-toggle=\"tooltip\" title=\"" + (itemIcons[state.content_subtype]
							? itemIcons[state.content_subtype].title
							: "") + "\"><i class=\"" + (itemIcons[state.content_subtype]
							? itemIcons[state.content_subtype].icon
							: "") + "\"></i></td></tr>";
						}

						AH.select("#table_list").innerHTML = table;

						if (table == "") {
							AH.selectAll("#not_found", "removeClass", "h");
						} else {
							AH.selectAll("#list_content_tbl, .search_list", "removeClass", "h");
						}

						let tooltip_timer = setTimeout(
							function () {
								AH.enableBsAll(".player_modal_tooltip", "Tooltip", { container: "#player_modal" });
								clearTimeout(tooltip_timer);
							},
							100
						);
					} else {
						AH.selectAll("#not_found", "removeClass", "h");
					}

					AH.select("#list_process").classList.add("h");
				}).catch(function () {
					AH.selectAll("#list_process, .search_list", "addClass", "h");
					AH.selectAll("#not_found", "removeClass", "h");
					AH.showmsg(Lang.unable_to_get);
					AH.activate(0);
				});
			} else {
				AH.selectAll("#not_found", "removeClass", "h");
				AH.select("#not_found").innerText = Lang.load_course;
			}
		}
	}

	// for searching in the table
	function searchTable(event) {
		let input_val = event.target.value, count = 0;
		let table_tr = AH.selectAll(".table_search tbody tr");

		for (let index = 0; index < table_tr.length; index++) {
			let text = table_tr[index].innerText;

			if (text && input_val && text.toLowerCase().indexOf(input_val.toLowerCase()) == -1) {
				table_tr[index].classList.add("h");
			} else {
				table_tr[index].classList.remove("h");
				count++;
			}
		}

		if (count > 0) {
			AH.select("#not_found").classList.add("h");
			AH.select("#list_content_tbl").classList.remove("h");
		} else {
			AH.select("#not_found").classList.remove("h");
			AH.select("#list_content_tbl").classList.add("h");
		}
	}

	// for creating the pagination on scene tab
	function createPagination() {
		if (state.sceneData.scene.length > 12 * data_active) {
			data_active = parseInt(data_active) + 1;
			let end = 12 * data_active;
			$$invalidate(13, menuLayout = [...menuLayout, { data_active, end }]);
		} else {
			$$invalidate(13, menuLayout = []);
		}
	}

	// whenever there is change in the knowledge item dropdown
	function handlePlayer(event) {
		AH.selectAll(".list_content, #not_found, .search_list", "addClass", "h");
		AH.selectAll("#info_data", "removeClass", "h");
		AH.select("#table_list").innerHTML = "";

		auth_store.update(item => {
			item.msg = "";
			return item;
		});
	}

	// for loading the scene
	function loadScene(end) {
		localpage_value = end;
		$$invalidate(14, sceneArr = []);

		state.sceneData && state.sceneData.scene.map((data, i) => {
			if (i < end && i < state.sceneData.scene.length) {
				if (i == defaultScene) {
					$$invalidate(14, sceneArr = [
						...sceneArr,
						{
							key: i,
							background: "#F0F0F0",
							alt: data.title,
							type: 0
						}
					]);
				} else if (data.by == user["user_guid"]) {
					$$invalidate(14, sceneArr = [...sceneArr, { key: i, alt: data.title, type: 1 }]);
				} else {
					$$invalidate(14, sceneArr = [...sceneArr, { key: i, alt: data.title, type: 2 }]);
				}
			}
		});

		auth_store.update(item => {
			item.layout = item.layout++;
			return item;
		});
	}

	// for updating the xml value this function is responsible
	function updateXmlValue(event, index, parentIndex = "", selector, value) {
		if (event) {
			value = event.target.value;
		}

		let xml = XMLToJSON(state.xml);

		switch (selector) {
			case "addItem":
				AH.getBS("#player_modal", "Modal").show();
				auth_store.update(item => {
					item.currentItem = index;
					
					return item;
				});
				break;
			case "setCharacter":
				$$invalidate(0, localcharacterData[index].name = value, localcharacterData);
				$$invalidate(1, localcharacterChoice[index].name = value, localcharacterChoice);
				sceneData = state.sceneData;
				sceneData.scene[defaultScene].characters[index].name = value;
				auth_store.update(item => {
					item.sceneData = sceneData;
					return item;
				});
				break;
			case "setCategoryName":
				$$invalidate(3, localscoreCategoryData[index].name = value, localscoreCategoryData);
				break;
			case "deleteStep":
				localstepData.splice(index, 1);
				break;
			case "deleteScene":
				swal({
					title: "Are you sure?",
					text: "Once deleted, you will not be able to recover this scene!",
					type: "warning",
					buttons: true,
					dangerMode: true
				}).then(function (isConfirm) {
					if (!isConfirm && index > 0) {
						state.sceneData.scene.splice(index, 1);
						var output = JSON.stringify(state.sceneData);
						AH.select("#pagination_btn1").click();

						AH.ajax({
							type: "POST",
							data: { myData: output },
							url: baseUrl + "editor/index.php?action=setinsight&insightId=054oF"
						}).then(() => {
							swal("Delete successfully");
						});
					}
				});
				break;
			case "addStep":
				var avaliableCharacter = 0;
				for (let increment = 0; increment < localcharacterData.length; increment++) {
					if (localcharacterData[increment].visible == 0) {
						avaliableCharacter = increment;
						break;
					}
				}
				$$invalidate(
					2,
					localstepData[localstepData.length] = {
						"id": localstepData.length,
						"name": avaliableCharacter,
						"allowChoices": 0,
						"camera": state.sceneData.scene[defaultScene].characters[avaliableCharacter].camera,
						"speech": 0,
						"auto": 0,
						"state": "talking",
						"voice": state.sceneData.scene[defaultScene].characters[avaliableCharacter].voice,
						"choices": [],
						"message": "",
						"level_text": "",
						"important_node": ""
					},
					localstepData
				);
				break;
			case "addChoice":
				var avaliableCharacterChoice = 0;
				for (let increment = 0; increment < localcharacterChoice.length; increment++) {
					if (localcharacterChoice[increment].visible == 0) {
						avaliableCharacterChoice = increment;
						break;
					}
				}
				$$invalidate(
					2,
					localstepData[index].choices[localstepData[index].choices.length] = {
						"id": localstepData[index].choices.length,
						"choicesScore": 0,
						"choicesCategory": 0,
						"correct": 0,
						"text": "",
						"feedback": "",
						"feedback_charact": avaliableCharacterChoice,
						"fdbk_char_cam": state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,
						"fdbk_char_voice": state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice
					},
					localstepData
				);
				break;
			case "deleteChoice":
				localstepData[parentIndex].choices.splice(index, 1);
				break;
			case "assetVisible":
				if (localassetsData[index].visible == 0) {
					$$invalidate(6, localassetsData[index].visible = 1, localassetsData);
				} else {
					$$invalidate(6, localassetsData[index].visible = 0, localassetsData);
				}
				sceneData = state.sceneData;
				sceneData.scene[defaultScene].assets[index].visible = value;
				auth_store.update(item => {
					item.sceneData = sceneData;
					return item;
				});
				break;
			case "setAssetsClick":
				$$invalidate(6, localassetsData[index].assets_click = parseInt(value), localassetsData);
				break;
			case "setTooltip":
				$$invalidate(6, localassetsData[index].tooltip = value, localassetsData);
				break;
			case "assetAnim":
				$$invalidate(6, localassetsData[index].anim = Number(value), localassetsData);
				$$invalidate(6, localassetsData[index].focus = state.sceneData.scene[defaultScene].anim[Number(value)].name, localassetsData);
				sceneData = state.sceneData;
				sceneData.scene[defaultScene].assets[index].anim = Number(value);
				auth_store.update(item => {
					item.sceneData = sceneData;
					return item;
				});
				break;
			case "updateChoiceType":
				//Added for alert switch blank page issue.
				if (localstepData[index].name == "") {
					$$invalidate(2, localstepData[index].name = 0, localstepData);
				}
				if (localstepData[index].image == "") {
					$$invalidate(2, localstepData[index].image = 0, localstepData);
				}
				var avaliableCharacterChoice = 0;
				for (let increment = 0; increment < localcharacterChoice.length; increment++) {
					if (localcharacterChoice[increment].visible == 0) {
						avaliableCharacterChoice = increment;
						break;
					}
				}
				$$invalidate(2, localstepData[index].allowChoices = parseInt(value), localstepData);
				if (localstepData[index].choices.length === 0) {
					if (value == 1 || value == 3) {
						$$invalidate(
							2,
							localstepData[index].choices[localstepData[index].choices.length] = {
								"id": localstepData[index].choices.length,
								"choicesScore": 0,
								"choicesCategory": 0,
								"correct": 0,
								"text": "",
								"feedback": "",
								"image": "",
								"feedback_charact": avaliableCharacterChoice,
								"fdbk_char_cam": state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].camera,
								"fdbk_char_voice": state.sceneData.scene[defaultScene].characters[avaliableCharacterChoice].voice
							},
							localstepData
						);
					}
				}
				if (value == 2 || value == 4 || value == 5) {
					$$invalidate(2, localstepData[index].guids = "", localstepData);
					$$invalidate(2, localstepData[index].cvalue = "", localstepData);
					$$invalidate(2, localstepData[index].choicesScore = 10, localstepData);
					$$invalidate(2, localstepData[index].choicesCategory = 0, localstepData);
					$$invalidate(2, localstepData[index].message = "", localstepData);
				}
				if (value == 7) {
					$$invalidate(2, localstepData[index].camera = 0, localstepData);
					$$invalidate(2, localstepData[index].name = "", localstepData);
					$$invalidate(2, localstepData[index].voice = 1, localstepData);
					$$invalidate(2, localstepData[index].image = "", localstepData);
				}
				break;
			case "updateStepChracter":
				$$invalidate(2, localstepData[index].voice = state.sceneData.scene[defaultScene].characters[value].voice, localstepData);
				$$invalidate(2, localstepData[index].camera = state.sceneData.scene[defaultScene].characters[value].camera, localstepData);
				$$invalidate(2, localstepData[index].name = parseInt(value), localstepData);
				break;
			case "updateFeedbackChracter":
				$$invalidate(2, localstepData[parentIndex].choices[index].feedback_charact = parseInt(value), localstepData);
				$$invalidate(2, localstepData[parentIndex].choices[index].fdbk_char_voice = state.sceneData.scene[defaultScene].characters[value].voice, localstepData);
				$$invalidate(2, localstepData[parentIndex].choices[index].fdbk_char_cam = state.sceneData.scene[defaultScene].characters[value].camera, localstepData);
				break;
			case "updateSpeech":
				if (localstepData[index].speech == 0) {
					$$invalidate(2, localstepData[index].speech = 1, localstepData);
				} else {
					$$invalidate(2, localstepData[index].speech = 0, localstepData);
				}
				break;
			case "updateAuto":
				if (localstepData[index].auto == 0) {
					$$invalidate(2, localstepData[index].auto = 1, localstepData);
				} else {
					$$invalidate(2, localstepData[index].auto = 0, localstepData);
				}
				break;
			case "setImageSrc":
				$$invalidate(2, localstepData[index].image = value, localstepData);
				break;
			case "updateIntroVoice":
				$$invalidate(2, localstepData[index].voice = parseInt(value), localstepData);
				break;
			case "setStepStatement":
				// For remove the html tag to be seen in smart chat scene in chat box
				if (sceneName == "Smart Chat") {
					if (value) {
						value = value.toString().replace(/<[^>]*>/gm, "");
					}
				}
				$$invalidate(2, localstepData[index].message = value, localstepData);
				break;
			case "setStepBTN":
				$$invalidate(2, localstepData[index].btn = value, localstepData);
				break;
			case "setStepanim":
				$$invalidate(2, localstepData[index].anim = value, localstepData);
				break;
			case "setStepCondition":
				$$invalidate(2, localstepData[index].condition = value, localstepData);
				break;
			case "setGuids":
				$$invalidate(2, localstepData[index].guids = value, localstepData);
				break;
			case "setChoiceText":
				$$invalidate(2, localstepData[parentIndex].choices[index].text = value, localstepData);
				break;
			case "setChoiceFeedback":
				$$invalidate(2, localstepData[parentIndex].choices[index].feedback = value, localstepData);
				break;
			case "setChoiceCategoryValue":
				$$invalidate(2, localstepData[parentIndex].choices[index].choicesScore = parseInt(event.target.value), localstepData);
				break;
			case "setChoiceStepIndex":
				if (event.target.value < 0 || event.target.value > localstepData.length) {
					$$invalidate(2, localstepData[parentIndex].choices[index].stepIndex = parentIndex, localstepData);
				} else {
					$$invalidate(2, localstepData[parentIndex].choices[index].stepIndex = event.target.value, localstepData);
				}
				break;
			case "setChoiceCorrect":
				$$invalidate(2, localstepData[parentIndex].choices[index].correct = parseInt(value), localstepData);
				break;
			case "setChoiceCorrectR":
				for (let dd = 0; dd < localstepData[parentIndex].choices.length; dd++) {
					if (index == dd) {
						$$invalidate(2, localstepData[parentIndex].choices[dd].correct = Number(value), localstepData);
					} else {
						$$invalidate(2, localstepData[parentIndex].choices[dd].correct = 0, localstepData);
					}
				}
				break;
			case "setChoiceCategory":
				$$invalidate(2, localstepData[parentIndex].choices[index].choicesCategory = Number(value), localstepData);
				break;
			case "setStepCategory":
				$$invalidate(2, localstepData[index].choicesCategory = parseInt(value), localstepData);
				break;
			case "setStepCategoryValue":
				$$invalidate(2, localstepData[index].choicesScore = event.target.value, localstepData);
				break;
			case "addCategory":
				$$invalidate(
					3,
					localscoreCategoryData[localscoreCategoryData.length] = {
						"id": localscoreCategoryData.length,
						"name": "",
						"value": "0"
					},
					localscoreCategoryData
				);
				break;
			case "deleteCategory":
				auth_store.update(item => {
					item.open = false;
					return item;
				});
				if (localscoreCategoryData.length > 1) {
					localscoreCategoryData.splice(index, 1);
				} else {
					swal("You cannot delete default node");
				}
				break;
			case "addtab":
				$$invalidate(
					4,
					localtabData[localtabData.length] = {
						"title": "",
						"name": "",
						"guid": "",
						"dialog": ""
					},
					localtabData
				);
				break;
			case "setTabTitle":
				$$invalidate(4, localtabData[index].title = value, localtabData);
				break;
			case "setTabDialog":
				$$invalidate(4, localtabData[index].dialog = value, localtabData);
				break;
			case "setTabName":
				$$invalidate(4, localtabData[index].name = value, localtabData);
				$$invalidate(4, localtabData[index].focus = state.sceneData.scene[defaultScene].anim[value].name, localtabData);
				break;
			case "setTabGuid":
				$$invalidate(4, localtabData[index].guid = value, localtabData);
				break;
			case "deleteTab":
				localtabData.splice(index, 1);
				break;
			case "setScene":
				$$invalidate(7, defaultScene = value);
				$$invalidate(8, sceneName = state.sceneData.scene[defaultScene].title);
				sceneJson = state.sceneData.scene[defaultScene].json;
				isSmartChat = state.sceneData.scene[defaultScene].is_smartchat == "1"
				? "1"
				: "0";
				let sceneCharacters = [];
				if (state.sceneData.scene[defaultScene].assets.length < 2) {
					AH.select(".insightTab4").style.display = "none";
					AH.select(".insightTab5").style.display = "none";
				} else {
					AH.select(".insightTab4").style.display = "block";
				}
				for (let i = 0; i < state.sceneData.scene[defaultScene].characters.length; i++) {
					sceneCharacters = [
						...sceneCharacters,
						{
							id: i,
							name: state.sceneData.scene[defaultScene].characters[i].name,
							visible: state.sceneData.scene[defaultScene].characters[i].visible
						}
					];
				}
				let sceneAssets = [];
				for (let i = 0; i < state.sceneData.scene[defaultScene].assets.length; i++) {
					sceneAssets = [
						...sceneAssets,
						{
							name: state.sceneData.scene[defaultScene].assets[i].asset,
							visible: state.sceneData.scene[defaultScene].assets[i].visible,
							anim: state.sceneData.scene[defaultScene].assets[i].anim,
							tooltip: state.sceneData.scene[defaultScene].assets[i].tooltip
						}
					];
				}
				$$invalidate(0, localcharacterData = sceneCharacters);
				$$invalidate(1, localcharacterChoice = sceneCharacters);
				$$invalidate(6, localassetsData = sceneAssets);
				$$invalidate(3, localscoreCategoryData = []);
				$$invalidate(
					3,
					localscoreCategoryData[localscoreCategoryData.length] = {
						"id": localscoreCategoryData.length,
						"name": "Mission",
						"value": "0"
					},
					localscoreCategoryData
				);
				$$invalidate(2, localstepData = []);
				if (state.sceneData.scene[defaultScene].anim.length < 1) {
					AH.select(".insightTab8").style.display = "none";
				} else {
					AH.select(".insightTab8").style.display = "block";
				}
				loadScene(localpage_value);
				break;
			case "updateMode":
				$$invalidate(5, localmodeData = parseInt(value));
				break;
			case "voiceData2":
				for (let indent = 0; indent < localstepData.length; indent++) {
					if (localstepData[indent].name == index) {
						$$invalidate(2, localstepData[indent].voice = parseInt(value), localstepData);
					}
				}
				$$invalidate(12, state.sceneData.scene[defaultScene].characters[index].voice = parseInt(value), state);
				break;
			case "visibleCharacter":
				if (localcharacterData[index].visible == 0) {
					$$invalidate(0, localcharacterData[index].visible = 1, localcharacterData);
				} else {
					$$invalidate(0, localcharacterData[index].visible = 0, localcharacterData);
				}
				sceneData = state.sceneData;
				sceneData.scene[defaultScene].characters[index].visible = value;
				auth_store.update(item => {
					item.sceneData = sceneData;
					return item;
				});
				$$invalidate(12, state.sceneData.scene[defaultScene].characters[index].visible = value, state);
				break;
			case "trigerchoiceimage":
				AH.select("#choiceimg" + index).click();
				break;
			case "titleUpdate":
				$$invalidate(9, resultTitle = value);
				break;
			case "BGupdate":
				$$invalidate(10, BGsrc = value);
				AH.select("#bgResult").setAttribute("src", value);
				break;
			case "beganupdate":
				$$invalidate(11, began = value);
				/* It not allowed to add more than one word at the name of Begin button */
				/*let begin = value.replace(/[^a-zA-Z]/gi, '');
began = begin;*/
				AH.select("#begin_Button").value = began;
				break;
			case "labelupdate":
				$$invalidate(2, localstepData[index].level_text = event.target.value, localstepData);
				break;
			case "updateNote":
				$$invalidate(2, localstepData[index].important_node = event.target.value, localstepData);
				break;
		}

		for (let index = 0; index < localscoreCategoryData.length; index++) {
			$$invalidate(3, localscoreCategoryData[index].value = 0, localscoreCategoryData);
		}

		for (let index = 0; index < localstepData.length; index++) {
			if (localstepData[index].allowChoices == 1 || localstepData[index].allowChoices == 3 || localstepData[index].allowChoices == 6) {
				for (let sub_index = 0; sub_index < localstepData[index].choices.length; sub_index++) {
					let choicesScoreIndex = localstepData[index].choices[sub_index].choicesCategory;
					$$invalidate(3, localscoreCategoryData[choicesScoreIndex].value += parseInt(localstepData[index].choices[sub_index].choicesScore), localscoreCategoryData);
					$$invalidate(2, localstepData[index].choices[sub_index].id = sub_index, localstepData);
				}
			}

			if (localstepData[index].allowChoices == 2 || localstepData[index].allowChoices == 4 || localstepData[index].allowChoices == 5) {
				var scoreIndex = localstepData[index].choicesCategory;
				$$invalidate(3, localscoreCategoryData[scoreIndex].value += parseInt(localstepData[index].choicesScore), localscoreCategoryData);
			}

			$$invalidate(2, localstepData[index].id = index, localstepData);
		}

		xml.smxml._sceneName = sceneName;
		xml.smxml._sceneJson = sceneJson;
		xml.smxml._isSmartChat = isSmartChat;

		let insightupdatedData = {
			"characters": localcharacterData,
			"steps": localstepData,
			"scoreCategories": localscoreCategoryData,
			"assets": localassetsData,
			"link": localtabData,
			"mode": localmodeData,
			"bgImage": BGsrc,
			"detail": resultTitle,
			"begin": began,
			"insight_intro": tinyMCE.get("stem").getContent({ format: "text" }).trim()
		};

		insightupdatedData = JSON.stringify(insightupdatedData, null, 4);
		xml.smxml.__cdata = insightupdatedData;
		xml = JSONToXML(xml);

		if (xml.indexOf("<!--[CDATA") > -1) {
			xml = xml.replace("<!--[CDATA", "<![CDATA").replace("]]-->", "]]>");
		}

		getChildXml(xml);
	}

	// for deleting the steps or mission
	function triggerDelete(event, type, index) {
		swal({
			text: Lang.del_confirmation,
			type: "warning",
			buttons: true,
			dangerMode: true
		}).then(function (isConfirm) {
			if (isConfirm) {
				updateXmlValue(event, index, "", type);
			}
		});
	}

	const writable_props = ["xml", "getChildXml", "user", "editorState", "itemIcons"];

	Object_1.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Insight> was created with unknown prop '${key}'`);
	});

	function select_change_handler() {
		state.type = select_value(this);
		$$invalidate(12, state);
	}

	const click_handler = event => {
		updateXmlValue(event, "", "", "setScene");
	};

	const click_handler_1 = event => {
		updateXmlValue(event, "", "", "setScene");
	};

	const click_handler_2 = (data, event) => {
		updateXmlValue(event, data.key, data.key, "deleteScene");
	};

	const click_handler_3 = event => {
		updateXmlValue(event, "", "", "setScene");
	};

	const click_handler_4 = data => {
		loadScene(data.end);
	};

	const click_handler_5 = event => {
		updateXmlValue(event, "select_Mode", "", "triggerForm");
	};

	function select_change_handler_1() {
		localmodeData = select_value(this);
		$$invalidate(5, localmodeData);
	}

	const change_handler = event => updateXmlValue(event, sceneTemp, "", "updateMode");

	function input_input_handler() {
		began = this.value;
		$$invalidate(11, began);
	}

	const change_handler_1 = event => updateXmlValue(event, 0, "", "beganupdate");

	const change_handler_2 = (index, event) => {
		updateXmlValue(event, index, "", "visibleCharacter");
	};

	function input1_input_handler(each_value_2, index) {
		each_value_2[index].name = this.value;
		$$invalidate(0, localcharacterData);
	}

	const change_handler_3 = (index, event) => updateXmlValue(event, index, "", "setCharacter");

	function select_change_handler_2(index) {
		state.sceneData.scene[defaultScene].characters[index].voice = select_value(this);
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_4 = (index, event) => updateXmlValue(event, index, "", "voiceData2");

	function select_change_handler_3(index) {
		state.sceneData.scene[defaultScene].characters[index].voice = select_value(this);
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_5 = (index, event) => updateXmlValue(event, index, "", "voiceData2");

	function input0_input_handler(each_value_3, index) {
		each_value_3[index].asset = this.value;
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_6 = (index, event) => {
		updateXmlValue(event, index, "", "assetVisible");
	};

	function select_change_handler_4(each_value_3, index) {
		each_value_3[index].anim = select_value(this);
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_7 = (index, event) => updateXmlValue(event, index, "", "assetAnim");

	function input2_input_handler(each_value_3, index) {
		each_value_3[index].tooltip = this.value;
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_8 = (index, event) => updateXmlValue(event, index, "", "setTooltip");

	function input3_input_handler(each_value_3, index) {
		each_value_3[index].assets_click = to_number(this.value);
		$$invalidate(12, state);
		$$invalidate(7, defaultScene);
	}

	const change_handler_9 = (index, event) => updateXmlValue(event, index, "", "setAssetsClick");

	function input0_input_handler_1(each_value_5, index) {
		each_value_5[index].name = this.value;
		$$invalidate(3, localscoreCategoryData);
	}

	const change_handler_10 = (index, event) => {
		updateXmlValue(event, index, "", "setCategoryName");
	};

	function input1_input_handler_1(each_value_5, index) {
		each_value_5[index].value = to_number(this.value);
		$$invalidate(3, localscoreCategoryData);
	}

	const click_handler_6 = (index, event) => {
		triggerDelete(event, "deleteCategory", index);
	};

	const click_handler_7 = event => {
		updateXmlValue(event, localscoreCategoryData.length, "", "addCategory");
	};

	const click_handler_8 = (index, event) => {
		updateXmlValue(event, index, "", "swapSteps");
	};

	function select_change_handler_5(each_value_6, index) {
		each_value_6[index].name = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_11 = (index, event) => updateXmlValue(event, index, "", "updateStepChracter");

	function select_change_handler_6(each_value_6, index) {
		each_value_6[index].name = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_12 = (index, event) => updateXmlValue(event, index, "", "updateStepChracter");

	function select_change_handler_7(each_value_6, index) {
		each_value_6[index].voice = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_13 = (index, event) => updateXmlValue(event, index, "", "updateIntroVoice");

	function select_change_handler_8(each_value_6, index) {
		each_value_6[index].allowChoices = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_14 = (index, event) => updateXmlValue(event, index, "", "updateChoiceType");

	const change_handler_15 = (index, event) => {
		updateXmlValue(event, index, "", "updateAuto");
	};

	function input_change_handler(each_value_6, index) {
		each_value_6[index].auto = this.value;
		$$invalidate(2, localstepData);
	}

	const click_handler_9 = (index, event) => {
		triggerDelete(event, "deleteStep", index);
	};

	const click_handler_10 = (index, event) => {
		updateXmlValue(event, index, "", "trigerchoiceimage");
	};

	const change_handler_16 = (index, event) => onChoiceImageSelect(event, index);

	function input1_input_handler_2(each_value_6, index) {
		each_value_6[index].image = this.value;
		$$invalidate(2, localstepData);
	}

	const click_handler_11 = (index, event) => {
		updateXmlValue(event, index, "", "setImageSrc");
	};

	const change_handler_17 = (index, event) => {
		updateXmlValue(event, index, "", "setStepStatement");
	};

	function input0_input_handler_2(each_value_6, index) {
		each_value_6[index].guids = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_18 = (index, event) => {
		updateXmlValue(event, index, "", "setGuids");
	};

	const click_handler_12 = (index, event) => {
		updateXmlValue(event, index, "", "addItem");
	};

	function select_change_handler_9(each_value_6, index) {
		each_value_6[index].choicesCategory = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_19 = (index, event) => updateXmlValue(event, index, "", "setStepCategory");

	function input1_input_handler_3(each_value_6, index) {
		each_value_6[index].choicesScore = to_number(this.value);
		$$invalidate(2, localstepData);
	}

	const change_handler_20 = (index, event) => {
		updateXmlValue(event, index, "", "setStepCategoryValue");
	};

	const change_handler_21 = (index, event) => {
		updateXmlValue(event, index, "", "updateSpeech");
	};

	function input_change_handler_1(each_value_6, index) {
		each_value_6[index].speech = this.value;
		$$invalidate(2, localstepData);
	}

	function input_input_handler_1(each_value_6, index) {
		each_value_6[index].condition = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_22 = (index, event) => {
		updateXmlValue(event, index, "", "setStepCondition");
	};

	function input_input_handler_2(each_value_6, index) {
		each_value_6[index].btn = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_23 = (index, event) => {
		updateXmlValue(event, index, "", "setStepBTN");
	};

	function select_change_handler_10(each_value_6, index) {
		each_value_6[index].anim = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_24 = (index, event) => {
		updateXmlValue(event, index, "", "setStepanim");
	};

	function input0_input_handler_3(each_value_7, key) {
		each_value_7[key].text = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_25 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceText");
	};

	function input1_input_handler_4(each_value_7, key) {
		each_value_7[key].feedback = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_26 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceFeedback");
	};

	function select_change_handler_11(each_value_7, key) {
		each_value_7[key].feedback_charact = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_27 = (key, index, event) => {
		updateXmlValue(event, key, index, "updateFeedbackChracter");
	};

	function select_change_handler_12(each_value_6, index) {
		each_value_6[index].name = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_28 = (key, index, event) => {
		updateXmlValue(event, key, index, "updateFeedbackChracter");
	};

	function select_change_handler_13(each_value_7, key) {
		each_value_7[key].choicesCategory = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_29 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceCategory");
	};

	function select_change_handler_14(each_value_7, key) {
		each_value_7[key].correct = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_30 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceCorrect");
	};

	function input_input_handler_3(each_value_7, key) {
		each_value_7[key].choicesScore = to_number(this.value);
		$$invalidate(2, localstepData);
	}

	const change_handler_31 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceCategoryValue");
	};

	function select_change_handler_15(each_value_7, key) {
		each_value_7[key].correct = select_value(this);
		$$invalidate(2, localstepData);
	}

	const change_handler_32 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceCorrectR");
	};

	function input0_input_handler_4(each_value_7, key) {
		each_value_7[key].choicesScore = to_number(this.value);
		$$invalidate(2, localstepData);
	}

	const change_handler_33 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceCategoryValue");
	};

	function input1_input_handler_5(each_value_7, key) {
		each_value_7[key].stepIndex = to_number(this.value);
		$$invalidate(2, localstepData);
	}

	const change_handler_34 = (key, index, event) => {
		updateXmlValue(event, key, index, "setChoiceStepIndex");
	};

	const click_handler_13 = (key, index, event) => {
		updateXmlValue(event, key, index, "deleteChoice");
	};

	const click_handler_14 = (index, event) => {
		updateXmlValue(event, index, "", "addChoice");
	};

	function input1_input_handler_6(each_value_6, index) {
		each_value_6[index].level_text = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_35 = (index, event) => {
		updateXmlValue(event, index, "", "labelupdate");
	};

	function input2_input_handler_1(each_value_6, index) {
		each_value_6[index].important_node = this.value;
		$$invalidate(2, localstepData);
	}

	const change_handler_36 = (index, event) => {
		updateXmlValue(event, index, "", "updateNote");
	};

	const click_handler_15 = event => {
		updateXmlValue(event, localstepData.length, "", "addStep");
	};

	const click_handler_16 = event => {
		updateXmlValue(event, sceneTemp, "", "addtab");
	};

	function input0_input_handler_5(each_value_15, index) {
		each_value_15[index].title = this.value;
		$$invalidate(4, localtabData);
	}

	const change_handler_37 = (index, event) => updateXmlValue(event, index, "", "setTabTitle");

	function select_change_handler_16(each_value_15, index) {
		each_value_15[index].name = select_value(this);
		$$invalidate(4, localtabData);
	}

	const change_handler_38 = (index, event) => updateXmlValue(event, index, "", "setTabName");

	function input1_input_handler_7(each_value_15, index) {
		each_value_15[index].dialog = this.value;
		$$invalidate(4, localtabData);
	}

	const change_handler_39 = (index, event) => updateXmlValue(event, index, "", "setTabDialog");

	function input2_input_handler_2(each_value_15, index) {
		each_value_15[index].guid = to_number(this.value);
		$$invalidate(4, localtabData);
	}

	const change_handler_40 = (index, event) => updateXmlValue(event, index, "", "setTabGuid");

	const click_handler_17 = (index, event) => {
		updateXmlValue(event, index, "", "deleteTab");
	};

	const change_handler_41 = e => onChoiceImageSelect(e, sceneTemp);

	function input1_input_handler_8() {
		BGsrc = this.value;
		$$invalidate(10, BGsrc);
	}

	const click_handler_18 = event => {
		updateXmlValue(event, sceneTemp, "", "BGupdate");
	};

	const click_handler_19 = event => {
		updateXmlValue(event, sceneTemp, "", "trigerchoiceimage");
	};

	function input2_input_handler_3() {
		resultTitle = this.value;
		$$invalidate(9, resultTitle);
	}

	const change_handler_42 = event => {
		updateXmlValue(event, sceneTemp, "", "titleUpdate");
	};

	$$self.$$set = $$props => {
		if ("xml" in $$props) $$invalidate(26, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(27, getChildXml = $$props.getChildXml);
		if ("user" in $$props) $$invalidate(28, user = $$props.user);
		if ("editorState" in $$props) $$invalidate(25, editorState = $$props.editorState);
		if ("itemIcons" in $$props) $$invalidate(29, itemIcons = $$props.itemIcons);
	};

	$$self.$capture_state = () => ({
		afterUpdate,
		beforeUpdate,
		onMount,
		writable,
		AH,
		XMLToJSON,
		JSONToXML,
		l: Lang,
		Loader,
		swal,
		Sortable,
		xml,
		getChildXml,
		user,
		editorState,
		itemIcons,
		category,
		itemArray,
		sceneTemp,
		characterData,
		localcharacterData,
		localcharacterChoice,
		insightData,
		stepData,
		isSmartChat,
		localstepData,
		scoreCategoryData,
		localscoreCategoryData,
		assetData,
		localassetData,
		tabData,
		localtabData,
		modeData,
		localmodeData,
		assetsData,
		localassetsData,
		defaultScene,
		sceneName,
		sceneJson,
		qxml,
		resultTitle,
		BGsrc,
		began,
		updateAnimation,
		sceneData,
		localpage_value,
		data_active,
		state,
		menuLayout,
		sceneArr,
		is_scene_load,
		show_dom,
		check_domain,
		curDomain,
		auth_store,
		unsubscribe,
		getDataFromApi,
		loadModule,
		parseXMLAuthoring,
		onChoiceImageSelect,
		removeTags,
		setContentType,
		getSnippet,
		searchTable,
		createPagination,
		handlePlayer,
		loadScene,
		updateXmlValue,
		triggerDelete
	});

	$$self.$inject_state = $$props => {
		if ("xml" in $$props) $$invalidate(26, xml = $$props.xml);
		if ("getChildXml" in $$props) $$invalidate(27, getChildXml = $$props.getChildXml);
		if ("user" in $$props) $$invalidate(28, user = $$props.user);
		if ("editorState" in $$props) $$invalidate(25, editorState = $$props.editorState);
		if ("itemIcons" in $$props) $$invalidate(29, itemIcons = $$props.itemIcons);
		if ("itemArray" in $$props) itemArray = $$props.itemArray;
		if ("sceneTemp" in $$props) $$invalidate(16, sceneTemp = $$props.sceneTemp);
		if ("characterData" in $$props) characterData = $$props.characterData;
		if ("localcharacterData" in $$props) $$invalidate(0, localcharacterData = $$props.localcharacterData);
		if ("localcharacterChoice" in $$props) $$invalidate(1, localcharacterChoice = $$props.localcharacterChoice);
		if ("insightData" in $$props) insightData = $$props.insightData;
		if ("stepData" in $$props) stepData = $$props.stepData;
		if ("isSmartChat" in $$props) isSmartChat = $$props.isSmartChat;
		if ("localstepData" in $$props) $$invalidate(2, localstepData = $$props.localstepData);
		if ("scoreCategoryData" in $$props) scoreCategoryData = $$props.scoreCategoryData;
		if ("localscoreCategoryData" in $$props) $$invalidate(3, localscoreCategoryData = $$props.localscoreCategoryData);
		if ("assetData" in $$props) assetData = $$props.assetData;
		if ("localassetData" in $$props) localassetData = $$props.localassetData;
		if ("tabData" in $$props) tabData = $$props.tabData;
		if ("localtabData" in $$props) $$invalidate(4, localtabData = $$props.localtabData);
		if ("modeData" in $$props) modeData = $$props.modeData;
		if ("localmodeData" in $$props) $$invalidate(5, localmodeData = $$props.localmodeData);
		if ("assetsData" in $$props) assetsData = $$props.assetsData;
		if ("localassetsData" in $$props) $$invalidate(6, localassetsData = $$props.localassetsData);
		if ("defaultScene" in $$props) $$invalidate(7, defaultScene = $$props.defaultScene);
		if ("sceneName" in $$props) $$invalidate(8, sceneName = $$props.sceneName);
		if ("sceneJson" in $$props) sceneJson = $$props.sceneJson;
		if ("qxml" in $$props) qxml = $$props.qxml;
		if ("resultTitle" in $$props) $$invalidate(9, resultTitle = $$props.resultTitle);
		if ("BGsrc" in $$props) $$invalidate(10, BGsrc = $$props.BGsrc);
		if ("began" in $$props) $$invalidate(11, began = $$props.began);
		if ("updateAnimation" in $$props) updateAnimation = $$props.updateAnimation;
		if ("sceneData" in $$props) sceneData = $$props.sceneData;
		if ("localpage_value" in $$props) localpage_value = $$props.localpage_value;
		if ("data_active" in $$props) data_active = $$props.data_active;
		if ("state" in $$props) $$invalidate(12, state = $$props.state);
		if ("menuLayout" in $$props) $$invalidate(13, menuLayout = $$props.menuLayout);
		if ("sceneArr" in $$props) $$invalidate(14, sceneArr = $$props.sceneArr);
		if ("is_scene_load" in $$props) is_scene_load = $$props.is_scene_load;
		if ("show_dom" in $$props) $$invalidate(15, show_dom = $$props.show_dom);
		if ("check_domain" in $$props) check_domain = $$props.check_domain;
		if ("curDomain" in $$props) $$invalidate(17, curDomain = $$props.curDomain);
		if ("auth_store" in $$props) auth_store = $$props.auth_store;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		localcharacterData,
		localcharacterChoice,
		localstepData,
		localscoreCategoryData,
		localtabData,
		localmodeData,
		localassetsData,
		defaultScene,
		sceneName,
		resultTitle,
		BGsrc,
		began,
		state,
		menuLayout,
		sceneArr,
		show_dom,
		sceneTemp,
		curDomain,
		onChoiceImageSelect,
		getSnippet,
		handlePlayer,
		loadScene,
		updateXmlValue,
		triggerDelete,
		category,
		editorState,
		xml,
		getChildXml,
		user,
		itemIcons,
		select_change_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		click_handler_3,
		click_handler_4,
		click_handler_5,
		select_change_handler_1,
		change_handler,
		input_input_handler,
		change_handler_1,
		change_handler_2,
		input1_input_handler,
		change_handler_3,
		select_change_handler_2,
		change_handler_4,
		select_change_handler_3,
		change_handler_5,
		input0_input_handler,
		change_handler_6,
		select_change_handler_4,
		change_handler_7,
		input2_input_handler,
		change_handler_8,
		input3_input_handler,
		change_handler_9,
		input0_input_handler_1,
		change_handler_10,
		input1_input_handler_1,
		click_handler_6,
		click_handler_7,
		click_handler_8,
		select_change_handler_5,
		change_handler_11,
		select_change_handler_6,
		change_handler_12,
		select_change_handler_7,
		change_handler_13,
		select_change_handler_8,
		change_handler_14,
		change_handler_15,
		input_change_handler,
		click_handler_9,
		click_handler_10,
		change_handler_16,
		input1_input_handler_2,
		click_handler_11,
		change_handler_17,
		input0_input_handler_2,
		change_handler_18,
		click_handler_12,
		select_change_handler_9,
		change_handler_19,
		input1_input_handler_3,
		change_handler_20,
		change_handler_21,
		input_change_handler_1,
		input_input_handler_1,
		change_handler_22,
		input_input_handler_2,
		change_handler_23,
		select_change_handler_10,
		change_handler_24,
		input0_input_handler_3,
		change_handler_25,
		input1_input_handler_4,
		change_handler_26,
		select_change_handler_11,
		change_handler_27,
		select_change_handler_12,
		change_handler_28,
		select_change_handler_13,
		change_handler_29,
		select_change_handler_14,
		change_handler_30,
		input_input_handler_3,
		change_handler_31,
		select_change_handler_15,
		change_handler_32,
		input0_input_handler_4,
		change_handler_33,
		input1_input_handler_5,
		change_handler_34,
		click_handler_13,
		click_handler_14,
		input1_input_handler_6,
		change_handler_35,
		input2_input_handler_1,
		change_handler_36,
		click_handler_15,
		click_handler_16,
		input0_input_handler_5,
		change_handler_37,
		select_change_handler_16,
		change_handler_38,
		input1_input_handler_7,
		change_handler_39,
		input2_input_handler_2,
		change_handler_40,
		click_handler_17,
		change_handler_41,
		input1_input_handler_8,
		click_handler_18,
		click_handler_19,
		input2_input_handler_3,
		change_handler_42
	];
}

class Insight extends SvelteComponentDev {
	constructor(options) {
		super(options);
		if (!document_1.getElementById("svelte-1aeqnok-style")) add_css();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				xml: 26,
				getChildXml: 27,
				user: 28,
				editorState: 25,
				itemIcons: 29
			},
			[-1, -1, -1, -1, -1, -1, -1]
		);

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Insight",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*xml*/ ctx[26] === undefined && !("xml" in props)) {
			console_1.warn("<Insight> was created without expected prop 'xml'");
		}

		if (/*getChildXml*/ ctx[27] === undefined && !("getChildXml" in props)) {
			console_1.warn("<Insight> was created without expected prop 'getChildXml'");
		}

		if (/*user*/ ctx[28] === undefined && !("user" in props)) {
			console_1.warn("<Insight> was created without expected prop 'user'");
		}

		if (/*editorState*/ ctx[25] === undefined && !("editorState" in props)) {
			console_1.warn("<Insight> was created without expected prop 'editorState'");
		}

		if (/*itemIcons*/ ctx[29] === undefined && !("itemIcons" in props)) {
			console_1.warn("<Insight> was created without expected prop 'itemIcons'");
		}
	}

	get xml() {
		throw new Error("<Insight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set xml(value) {
		throw new Error("<Insight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get getChildXml() {
		throw new Error("<Insight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set getChildXml(value) {
		throw new Error("<Insight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get user() {
		throw new Error("<Insight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set user(value) {
		throw new Error("<Insight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get editorState() {
		throw new Error("<Insight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<Insight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get itemIcons() {
		throw new Error("<Insight>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set itemIcons(value) {
		throw new Error("<Insight>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Insight;
//# sourceMappingURL=Insight-88152004.js.map
