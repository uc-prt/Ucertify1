{"version":3,"file":"Eval-617454e1.js","sources":["../../../clsSMEval/Eval.svelte"],"sourcesContent":["<script>\r\n    /**\r\n     *  File Name   : Eval.svelte\r\n     *  Description : Container for EvalPro Module\r\n     *  Author      : Pradeep Yadav\r\n     *  Version     : 1.2\r\n     *  Package     : svelte_items/svelte\r\n     *  Created     : 30 Feb 2021\r\n     *  Updated By  : Prabhat Kumar <prabhat.kumar@ucertify.com>\r\n     *  Updated Date: 12-May-2021\r\n     */\r\n    import { onMount, beforeUpdate, tick } from 'svelte';\r\n    import { Button, Dialog, Snackbar } from 'svelte-mui/src';\r\n    import {tag_player} from '../helper/helperFunctions';\r\n    import l from '../src/libs/editorLib/language';\r\n    import { writable } from 'svelte/store';\r\n    import { AH } from '../helper/HelperAI.svelte';\r\n    import Loader from '../helper/Loader.svelte';\r\n    import '../src/libs/codemirror.min.css';\r\n    import '../src/libs/monokai.css';\r\n    import '../src/libs/simplescrollbars.css';\r\n\r\n    export let toggleMode;\r\n    export let xml;\r\n    export let getChildXml = () => {};\r\n    export let setInlineEditor;\r\n    export let editorState;\r\n    let location_origin = (location.origin).replace('localhost', 'localhost:3000');\r\n    let evalpro_url = location_origin + '/layout/themes/bootstrap4/svelte_items/evalPro/index.php';\r\n    let all_databases = {\r\n            'mssql': [\"MSSQL\"], \r\n            'sql': [\"740DB\", \"C170PRE\", \"C995HSTK\", \"C995PRE\", \"DBFUND\", \"GSA1\", \"c995\", \"myDBs\", \"ucDB\", \"RECRUIT\"], \r\n            'psql': [\"gsa1\", \"mydbs\", \"postgresdb\", \"ucdb\", 'postgres_db', \"ucdb_db\", \"sandbox\"],\r\n        };\r\n    let lang_type = ([\"c\", \"c#\", \"c++\", \"java\", \"javascript\", \"mssql\", \"node.js\", \"php\", \"psql\", \"python\", \"r\", \"ruby\", \"sql\"]).sort();\r\n    let message = '';\r\n    let isPreview = \"\";\r\n    let aXml = \"\";\r\n    let language = \"\";\r\n    let windowHtml = \"\";\r\n    let showPre = parseInt(findAttribute(xml, \"showpre\", \"SMXML\"));\r\n    let showPost = parseInt(findAttribute(xml, \"showpost\", \"SMXML\"));\r\n    let showEditor = parseInt(findAttribute(xml, \"showeditor\", \"SMXML\"));\r\n    let qxml = \"\";\r\n    let xmlArr = [];\r\n    let defaultStartXml = '<SMXML type=\"24\" name=\"evalpro\" language=\"php\">';\r\n    let currentDB = 'myDBs';\r\n    let lastTestCaseHtml = false;\r\n    let editor;\r\n    let preEditor;\r\n    let postEditor;\r\n    let marker = [];\r\n    let preData = \"\";\r\n    let postData = \"\";\r\n    let langArr = [];\r\n    let state = {};\r\n    window.QXML = xml;\r\n    let hdd = writable({\r\n        open: false,\r\n        xml: '',\r\n        uxml: '',\r\n        module: '',\r\n        toggle: false,\r\n        toggleMode: false,\r\n        snackback: false,\r\n        lang_type: 'php',\r\n        xmlArr: [],\r\n        remediationToggle: false,\r\n        qxml: '',\r\n        titleData: \"\",\r\n        stemData: \"\",\r\n        remediationData: \"\",\r\n        perspective: \"Right\",\r\n        partial_match: \"1,1,1\",\r\n        ignore_special_char: \"0,0,0\",\r\n        case_insensitive: \"0,0,0\",\r\n        preShow: showPre || 0,\r\n        postShow: showPost || 0,\r\n        editorShow: showEditor || 2,\r\n        enableLines: 0,\r\n        databases: [],\r\n        output: \"\",\r\n        database_modal_open: false,\r\n        database: \"myDBs\",\r\n        preBlockShow: 0,\r\n        postBlockShow: 0,\r\n        is_graph: 0,\r\n        ignore_error: 0,\r\n        ignore_formatting: 0,\r\n        ignore_reset_db: 0,\r\n        is_pre_tag : 0,\r\n    })\r\n\r\n    /**\r\n     * To unsubscribe the store.\r\n     */\r\n    const unsubscribe = hdd.subscribe((items)=> {\r\n        state = items;\r\n    });\r\n\r\n    $: if (xml != state.xml) state.xml = xml;\r\n\r\n    /**\r\n     * Function call before render. Do all the necessory configuration before rendering.\r\n    */\r\n    onMount(()=> {\r\n        let smxml = xml.match(/<smxml(.*?)>/gim);\r\n        let type = smxml.toString().match(/type=\"(.*?)\"|type='(.*?)'/gim);\r\n        type = type[0].replace(/type=|\"/gim, '');\r\n        state.module = type;\r\n    \r\n        AH.select(AH.prevElm(\"#authoringLoadComponent\", \"br\"), 'remove');\r\n        let caseSensitive = xml.match(/case_sensitive='(.*?)'/gm);\r\n        let specialChar = xml.match(/special_char='(.*?)'/gm);\r\n        let partialMatch = xml.match(/partial_match='(.*?)'/gm);\r\n        if (caseSensitive && specialChar && partialMatch) {\r\n            state.ignore_special_char = specialChar[0].split(\"=\")[1].replace(/[\"']/g, \"\");\r\n            state.case_insensitive = caseSensitive[0].split(\"=\")[1].replace(/[\"']/g, \"\");\r\n            state.partial_match = partialMatch[0].split(\"=\")[1].replace(/[\"']/g, \"\");\r\n        }\r\n        langArr = xml.match(/<SMXML[\\s\\S]*?<\\/SMXML>/gim);\r\n        if (langArr.length == 1) {\r\n            language = langArr.toString().match(/language=\"(.*?)\"/gim);\r\n            language = language.toString().replace(/language=|\"/gi, '');\r\n            xmlArr[language] = xml;\r\n            state.lang_type = language;\r\n            state.xmlArr = xmlArr;\r\n        } else {\r\n            for (let i = 0; i < langArr.length; i++) {\r\n                language = langArr[i].match(/language=\"(.*?)\"/gim);\r\n                language = language.toString().replace(/language=|\"/gi, '');\r\n                xmlArr[language] = langArr[i];\r\n            }\r\n            state.xmlArr = xmlArr;\r\n        }\r\n        \r\n        getChildXml(xmlArr[state.lang_type]); //important\r\n        AH.select('#preview', 'hide');\r\n        state.xml = xml;\r\n        setDefaultXML(state.xml);\r\n        setTestCase()\r\n        if (typeof(CodeMirror) == \"function\") {\r\n            renderCodeMirror();\r\n        } else {\r\n            AH.ajax({\r\n                type: \"GET\",\r\n                url: itemUrl + \"src/libs/codemirror.js\",\r\n                dataType: \"script\",\r\n            }).then((data)=> {\r\n                AH.addScript(data, \"\", {target: \"body\"});\r\n                setTimeout(renderCodeMirror, 500);\r\n            })\r\n        }\r\n        \r\n        let delBtns = AH.selectAll(\".caseDelBtn\");\r\n        delBtns.forEach((event) => {\r\n            event.removeEventListener(\"click\", deleteCase);\r\n            event.addEventListener(\"click\", deleteCase);\r\n        });\r\n        AH.listen(document, 'click', '#answerCheck', ()=> {\r\n            remediationMode();\r\n        });\r\n        AH.bind(\"#enable-line\", \"keyup\", () => {\r\n            state.xml = generateXml();\r\n            getChildXml(state.xml);\r\n        });\r\n        AH.selectAll(\".MuiIconButton-label-122\", 'css', {display: \"inline !important\"});\r\n    })\r\n\r\n    /**\r\n     * Function call before update the dom. If anything change this will be called before render.\r\n    */\r\n    beforeUpdate(async ()=> {\r\n        if (toggleMode != state.toggleMode) {\r\n            state.toggleMode = toggleMode;\r\n            qxml = generateXml(true);\r\n            AH.select(\"#output\", 'html', \"\");\r\n            if (state.toggleMode == true) {\r\n                //Test mode on\r\n                renderPlayer();\r\n                AH.select('#headerTitle', 'html', l.preview);\r\n                AH.enableBsAll('[data-bs-toggle=\"tooltip\"]', 'Tooltip', {container: 'body'});\r\n                state.qxml = qxml;\r\n                state.titleData  = AH.select('#title').innerHTML;\r\n                state.stemData = AH.select('#stem').innerHTML;\r\n                state.remediationData = AH.select('#remediation').innerHTML;\r\n                await tick();\r\n                AH.insert(AH.select(AH.empty('#title'), 'hide'), '<div id=\"tilteShow\">' + state.titleData + '</div>', 'afterend');\r\n                AH.insert(AH.select(AH.empty('#stem'),'hide'), '<div id=\"stemShow\">' + get_ucsyntax(state.stemData) + '</div>', 'afterend');\r\n                AH.insert(AH.select(AH.empty('#remediation'),'hide'), '<div id=\"remediationShow\">' + get_ucsyntax(state.remediationData) + '</div>', 'afterend');\r\n                AH.selectAll('#externalInputs,#addTestCase', 'hide');\r\n                AH.selectAll(\".action_block\", 'removeClass', 'd-flex');\r\n                AH.selectAll(\".action_block, .language_select_button, .database_select_button, .pre-div\", 'hide');\r\n                AH.selectAll(\".selected_language\", 'removeClass', 'hidden');\r\n                // hide the pre and post block in case of preview\r\n                addPreBlock(0);\r\n                addPostBlock(0);\r\n                (state.stemData.match(/<uc:syntax/gm) || state.remediationData.match(/<uc:syntax/gm)) ? prettyPrint(): '';\r\n                isPreview = 1;\r\n                disableLine();\r\n                showPre = parseInt(findAttribute(xml, \"showpre\", \"SMXML\"));\r\n                showPost = parseInt(findAttribute(xml, \"showpost\", \"SMXML\"));\r\n                showEditor = parseInt(findAttribute(xml, \"showeditor\", \"SMXML\"));\r\n                if (showPre < 2) {\r\n                    preEditor.setOption(\"readOnly\", true);\r\n                    AH.select(\".pre-div .CodeMirror-scroll\").className = \"CodeMirror-scroll bg-light\"\r\n                } else {\r\n                    preEditor.setOption(\"readOnly\", false);\r\n                    AH.select(\".pre-div .CodeMirror-scroll\").className = \"CodeMirror-scroll\"\r\n                }\r\n\r\n                if (showPost < 2) {\r\n                    postEditor.setOption(\"readOnly\", true);\r\n                    AH.select(\".pre-div .CodeMirror-scroll\").className = \"CodeMirror-scroll bg-light\"\r\n                    // $(\".pre-div .CodeMirror-scroll\")[1].className = \"CodeMirror-scroll bg-light\"\r\n                } else {\r\n                    postEditor.setOption(\"readOnly\", false);\r\n                    AH.select(\".pre-div .CodeMirror-scroll\").className = \"CodeMirror-scroll\"\r\n                    // $(\".pre-div .CodeMirror-scroll\")[1].className = \"CodeMirror-scroll\"\r\n                }\r\n\r\n                if (showEditor < 2) {\r\n                    editor.setOption(\"readOnly\", true);\r\n                    AH.select(\".replEditor .CodeMirror-scroll\").className = \"CodeMirror-scroll bg-light\"\r\n                } else {\r\n                    editor.setOption(\"readOnly\", false);\r\n                    AH.select(\".replEditor .CodeMirror-scroll\").className = \"CodeMirror-scroll\"\r\n                }\r\n                AH.select(\".replEditor\", 'css', {\r\n                    \"minHeight\": \"125px\",\r\n                    \"height\": \"551px\",\r\n                    \"display\": \"block\",\r\n                });\r\n            } else { //Authoring Mode.\r\n                AH.select('#headerTitle', 'html', l.authoring);\r\n                AH.find('#authoringArea', 'form', {action: 'remove'});\r\n                AH.insert('#authoringArea', windowHtml, 'beforeend');\r\n                AH.find(document, '#tilteShow, #stemShow, #remediationShow, smxml', {action: 'remove'});\r\n                AH.select('#title', 'html', state.titleData);\r\n                AH.select('#stem', 'html', state.stemData);\r\n                AH.select('#remediation', 'html', state.remediationData);\r\n                AH.selectAll('#title,#stem,#remediation,#externalInputs,#addTestCase', 'show');\r\n                AH.selectAll(\".action_block\", 'addClass', 'd-flex')\r\n                AH.selectAll('.action_block', 'show');\r\n                AH.selectAll(\".language_select_button,.database_select_button\", 'show');\r\n                AH.selectAll(\".selected_language\", 'addClass', 'hidden');\r\n                unRenderPlayer();\r\n                isPreview = 0;\r\n                (state.module == \"24\") ? AH.select('#selectLanguage', 'show') : '';\r\n                if (editor) { //re-rendering codeMirror\r\n                    editor.toTextArea();\r\n                    preEditor.toTextArea();\r\n                    postEditor.toTextArea();\r\n                    let privXML = stringBetween(xml, \"editor\");\r\n                    renderCodeMirror();\r\n                    editor.setValue(privXML.trim());\r\n                }\r\n                setInlineEditor(\"#stem\");\r\n                setInlineEditor(\"#remediation\");\r\n            }\r\n        } \r\n        showHideInputBlock(state.lang_type);\r\n        if (state.toggleMode == false) {\r\n            // Update the pre, editor, post block \r\n            adjustEditorBlockUI();\r\n        }\r\n    })\r\n\r\n    /**\r\n     * Function to toggle the DB. If the lang is other than sql, psql and mssql then it will hide the database option.\r\n     * @param val : Boolean value to show and hide the database option.\r\n     */\r\n    function toggleDB(val) {\r\n        editorState.db_changed = val;\r\n    }\r\n\r\n    /**\r\n     * Function to add the pre code block.\r\n     * @param isPreBlockShow : Boolean value to show and hide the pre block.\r\n     */\r\n    function addPreBlock(isPreBlockShow) {\r\n        state.preBlockShow = (isPreBlockShow > -1) ? isPreBlockShow : !state.preBlockShow;\r\n        AH.selectAll(\".pre-div\", 'css', {\r\n            \"minHeight\": \"90px\",\r\n            \"height\": \"100px\",\r\n            \"display\": \"block\"\r\n        });\r\n        // Refresh the code mirror in case of show the preEditor area\r\n        if (!state.preBlockShow || isPreBlockShow) {\r\n            preEditor.setSize('100%', '100%');\r\n            var show = setInterval(function() {\r\n                preEditor.refresh();\r\n            }, 10);\r\n            setTimeout(()=> {\r\n                clearInterval(show);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to add the post code block.\r\n     * @param isPostBlockShow : Boolean value to show and hide the post block.\r\n     */\r\n    function addPostBlock(isPostBlockShow) {\r\n        state.postBlockShow = (isPostBlockShow > -1) ? isPostBlockShow : !state.postBlockShow;\r\n        AH.selectAll(\".post-div\", 'css', {\r\n            \"minHeight\": \"90px\",\r\n            \"height\": \"100px\",\r\n            \"display\": \"block\"\r\n        });\r\n        // Refresh the code mirror in case of show the preEditor area.\r\n        if (!state.postBlockShow || isPostBlockShow) {\r\n            postEditor.setSize('100%', '100%');\r\n            var show = setInterval(function() {\r\n                postEditor.refresh();\r\n            }, 10);\r\n            setTimeout(()=> {\r\n                clearInterval(show);\r\n            }, 100);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Change to open the language dialog.\r\n     */\r\n    function handleLanguageModalOpen() {\r\n        state.open = !state.open;\r\n    }\r\n\r\n    /**\r\n     * Function to show and hide the user input block.\r\n     * @param lang : If the language is psql, sql or mssql then no need to show it.\r\n     */\r\n    function showHideInputBlock(lang) {\r\n        if (lang == \"sql\" || lang == \"psql\" || lang == 'mssql') {\r\n            AH.select(AH.parent(\"#input\"),'hide');\r\n            AH.select(\"#output\", 'css', {height: '551px'});\r\n        } else {\r\n            AH.select(AH.parent(\"#input\"), 'show');\r\n            AH.select(\"#output\", 'css', {height: '425px'});\r\n        }\r\n        \r\n    }\r\n\r\n    /**\r\n     * Change to language change\r\n     * @param lang : Language from dropdown.\r\n     */\r\n    function handleLanguageSelection(lang) {\r\n        state.open = !state.open;\r\n        state.databases = all_databases[lang];\r\n\r\n        //start @sneh:added because the symbole like ++ were executed not been treated as string.\r\n        RegExp.escape = function(symbol) {\r\n            return symbol.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\r\n        };\r\n\r\n        let term_lang = new RegExp(RegExp.escape(state.lang_type), \"i\");\r\n        showHideInputBlock(lang);\r\n        if (state.xmlArr[lang]) {\r\n            state.xml = state.xmlArr[lang];\r\n            state.lang_type = lang;\r\n            editor.setOption(\"mode\", \"text/x-\" + term_lang);\r\n            windowHtml = state.xmlArr[lang].replace(/language=\"[\\s\\S]*?\" +/g, 'language=\"' + lang + '\"');\r\n            getChildXml(windowHtml);\r\n            parseXML(windowHtml);\r\n            setDefaultXML();\r\n            setTestCase();\r\n            AH.select(\"#output\", 'html', \"\");\r\n        } else {\r\n            let xml_group = Object.keys(state.xmlArr);\r\n            let newXML = state.xmlArr[xml_group[xml_group.length - 1]].replace(/language=\"[\\s\\S]*?\" +/i, 'language=\"' + lang + '\" ');\r\n            state.xml = newXML;\r\n            state.lang_type = lang;\r\n            \r\n            editor.setOption(\"mode\", \"text/x-\" + state.lang_type);\r\n            preEditor.setOption(\"mode\", \"text/x-\" + state.lang_type);\r\n            postEditor.setOption(\"mode\", \"text/x-\" + state.lang_type);\r\n            parseXML(newXML);\r\n            setDefaultXML();\r\n            setTestCase();\r\n            windowHtml = newXML;\r\n            getChildXml(windowHtml);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to show and hide the database dialog box.\r\n     */\r\n    function handleDatabaseModalOpen() {\r\n        state.database_modal_open = !state.database_modal_open;\r\n    }\r\n    \r\n    /**\r\n     * Function to handle the database selection.\r\n     * @param database : Database selected from dropdown.\r\n     */\r\n    function handleDatabaseItem(database) {\r\n        state.database_modal_open = !state.database_modal_open;\r\n        state.database = database;\r\n        currentDB = database;\r\n        setDefaultXML();\r\n    }\r\n\r\n    /**\r\n     * Function to adjust the Editor Block.\r\n     */\r\n    function adjustEditorBlockUI() {\r\n        let preBlockHeight = 0;\r\n        let postBlockHeight = 0;\r\n        if (preData && preData.trim().length) {\r\n            preBlockHeight = 141;\r\n            AH.selectAll(\".pre-div\", 'css', {\r\n                \"minHeight\": \"80px\",\r\n                \"height\": preBlockHeight + \"px\",\r\n                \"display\": \"block\"\r\n            });\r\n        } \r\n        if (postData && postData.trim().length) {\r\n            postBlockHeight = 141;\r\n            AH.selectAll(\".post-div\", 'css', {\r\n                \"minHeight\": \"80px\",\r\n                \"height\": postBlockHeight + \"px\",\r\n                \"display\": \"block\",\r\n            });\r\n        }\r\n        let editorBlockHeight = 427 - (preBlockHeight + postBlockHeight);\r\n        AH.selectAll(\".replEditor\", 'css', {\r\n            \"minHeight\": \"60px\",\r\n            \"height\": editorBlockHeight + \"px\",\r\n            \"display\": \"block\",\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to convert any string first character to uppercase.\r\n     * @param str : Any string.\r\n     */\r\n    function toTitleCase(str) {\r\n        return str.charAt(0).toUpperCase() + str.slice(1);\r\n    }\r\n    \r\n    /**\r\n     * Function to show the output block.\r\n     */\r\n    function showOutputData() {\r\n        let raw_btn_val = AH.select(\"#raw_btn\").value;\r\n        if (raw_btn_val == \"raw\") {\r\n            AH.select('#output').innerHTML = '<textarea class=\"w-100 border-0\" style=\"height:480px;\">' + state.output + '</textarea>';\r\n            return 1; \r\n        }\r\n\r\n        if (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql' || state.lang_type == 'c++') {\r\n            AH.select('#output').innerHTML = '<pre>' + state.output + '</pre>';\r\n        } else {\r\n            AH.select('#output').innerHTML = state.output;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to handle the enable disable the line.\r\n     */\r\n    function disableLine() {\r\n        let mode = {},\r\n            previousCode,\r\n            $usedLine,\r\n            //lineEnableNo,\r\n            language,\r\n            disableline;\r\n\r\n        try {\r\n            previousCode = editor.getValue();\r\n            $usedLine = editor.lineCount();\r\n            //lineEnableNo = enableline;\r\n            language = state.lang_type;\r\n            disableline = AH.select(\"#enable-line\").value;\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        if (typeof mode.review == \"undefined\") {\r\n            mode.review = 0;\r\n        }\r\n\r\n        if ((mode.test == 1 || mode.review || 1) && parseInt(disableline)) {\r\n            let $lineEnable = disableline;\r\n            if ($lineEnable) {\r\n                $lineEnable = $lineEnable.split(\",\");\r\n                $lineEnable.sort(function(a, b) {\r\n                    return a - b\r\n                });\r\n                let $line = [];\r\n                let $readOnly = [];\r\n                for (let j = 0; j < $lineEnable.length; j++) {\r\n                    if (!$line[j]) {\r\n                        $line[j] = [];\r\n                    }\r\n\r\n                    if (j == 0) {\r\n                        $line[j][0] = j;\r\n                        $line[j][1] = $lineEnable[j];\r\n                    } else {\r\n                        $line[j][0] = $line[j - 1][1];\r\n                        $line[j][1] = $lineEnable[j];\r\n                    }\r\n                }\r\n\r\n                let $i = 0;\r\n                for ($i = 0; $i < $lineEnable.length; $i++) {\r\n                    for (let $k = $line[$i][0]; $k <= $line[$i][1] - 2; $k++) {\r\n                        $k = parseInt($k);\r\n                        $readOnly.push($k);\r\n                        editor.addLineClass($k, 'wrap', 'bg-light');\r\n                    }\r\n\r\n                    marker.push(editor.markText({\r\n                        line: $line[$i][0],\r\n                        ch: 0\r\n                    }, {\r\n                        line: $line[$i][1] - 2\r\n                    }, {\r\n                        inclusiveRight: true,\r\n                        inclusiveLeft: true,\r\n                        readOnly: true\r\n                    }));\r\n                }\r\n\r\n                for (let $l = $line[$i - 1][1]; $l < $usedLine; $l++) {\r\n                    $l = parseInt($l);\r\n                    $readOnly.push($l);\r\n                    editor.addLineClass($l, 'wrap', 'bg-light');\r\n                }\r\n                // hide all bottom codes after enable line\r\n                if (language == 'python' || disableline == 1) {\r\n                    editor.markText({\r\n                        line: $line[$i - 1][1],\r\n                        ch: 0\r\n                    }, {\r\n                        line: $usedLine\r\n                    }, {\r\n                        inclusiveRight: true,\r\n                        inclusiveLeft: true,\r\n                        collapsed: true\r\n                    });\r\n                    editor.markText({\r\n                        line: $line[$i - 1][1],\r\n                        ch: 0\r\n                    }, {\r\n                        line: $line[$i - 1][1] + $usedLine\r\n                    }, {\r\n                        inclusiveRight: true,\r\n                        inclusiveLeft: true,\r\n                        readOnly: true\r\n                    });\r\n\r\n                }\r\n\r\n                if (language != 'python') {\r\n                    editor.markText({\r\n                        line: parseInt($line[$i - 1][1]),\r\n                        ch: 0\r\n                    }, {\r\n                        line: $usedLine\r\n                    }, {\r\n                        inclusiveRight: true,\r\n                        inclusiveLeft: true,\r\n                        collapsed: true\r\n                    });\r\n\r\n                    editor.markText({\r\n                        line: $line[$i - 1][1],\r\n                        ch: 0\r\n                    }, {\r\n                        line: $line[$i - 1][1] + $usedLine\r\n                    }, {\r\n                        inclusiveRight: true,\r\n                        inclusiveLeft: true,\r\n                        readOnly: true\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to render the code mirror.\r\n     */\r\n    function renderCodeMirror() {\r\n        createEditor();\r\n        setDefaultXML();\r\n        getChildXml(generateXml());\r\n        \r\n        if (document.getElementById(\"aXml\")) {\r\n            let xmlEditor = CodeMirror.fromTextArea(document.getElementById(\"aXml\"), {\r\n                lineNumbers: false,\r\n                mode: \"application/xml\",\r\n                autoCloseBrackets: true,\r\n                lineWrapping: true,\r\n                matchBrackets: true\r\n            });\r\n        }\r\n\r\n        editor.setOption(\"extraKeys\", { //Changing Tabs into 4 spaces \r\n            Tab: function(command) {\r\n                let spaces = Array(command.getOption(\"indentUnit\") + 1).join(\" \");\r\n                command.replaceSelection(spaces);\r\n            },\r\n            F11: function(command) {\r\n                command.setOption(\"fullScreen\", !command.getOption(\"fullScreen\"));\r\n            },\r\n            Esc: function(command) {\r\n                if (command.getOption(\"fullScreen\")) command.setOption(\"fullScreen\", false);\r\n            }\r\n        });\r\n        AH.bind(\".CodeMirror-linenumber\", 'click', function(event) {\r\n            \r\n            if (AH.prevElm(event.target, \".dot\")) {\r\n                AH.prevElm(event.target, \".dot\").remove();\r\n            } else {\r\n                AH.insert(event.target, '<div class=\"dot\" style=\"position:absolute; z-index: 9999;width: 7px; height: 7px; border-radius: 50%; top: 8px; background-color: red;\"></div>', 'beforebegin');\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to reset the database when reset button clicked.\r\n     */\r\n    function resetDB() {\r\n        AH.select(\"#evalProRunCode\", 'attr', {disabled: \"disabled\"});\r\n        AH.select(\"#output\").innerHTML = ('<div class=\"EvalbgBlue\"><div class=\"Evalloader\"><span>{</span><span>}</span></div></div>');\r\n        AH.ajax({\r\n            url: themeUrl + \"svelte_items/evalPro/index.php\",\r\n            type: 'POST',\r\n            data: {\r\n                'ajax': 1,\r\n                'in_editor': 0,\r\n                'user_guid': window.user_guid,\r\n                'db_name': currentDB,\r\n                'language': findAttribute(xml, 'language'),\r\n                'resetDB': state.lang_type == 'mssql' ? 2 : 1\r\n            }\r\n        }).then((data)=> {\r\n            AH.select('#output', 'html', \"Database reset complete!\");\r\n            AH.select(\"#evalProRunCode\", 'removeAttr', \"disabled\");\r\n        }).catch((rqst, err)=> {\r\n            AH.select(\"#output\", 'html',  \"Database reset complete!\");\r\n            AH.select(\"#evalProRunCode\", 'removeAttr', \"disabled\");\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to create the editor.\r\n     */\r\n    function createEditor() {\r\n        let params_config = {\r\n            lineNumbers: true,\r\n            mode: 'text/x-' + state.lang_type,\r\n            styleActiveLine: true,\r\n            autoCloseBrackets: true,\r\n            lineWrapping: true,\r\n            scrollbarStyle: \"simple\",\r\n            matchBrackets: true,\r\n            tabSize: 2,\r\n            gutters: [\"CodeMirror-linenumbers\", \"breakpoints\"]\r\n        };\r\n        preEditor = CodeMirror.fromTextArea(document.getElementById(\"pre-editor\"), params_config);\r\n        editor = CodeMirror.fromTextArea(document.getElementById(\"repl-editor\"), params_config);\r\n        postEditor = CodeMirror.fromTextArea(document.getElementById(\"post-editor\"), params_config);\r\n        parseXML();\r\n        editor.on(\"change\", function(event, line) {\r\n            if (!isPreview) {\r\n                let xml = generateXml(true);\r\n                getChildXml(xml);\r\n            } else {\r\n                saveEvalProAnswer();\r\n            }\r\n            checkLine(line);\r\n        });\r\n        preEditor.on(\"change\", function() {\r\n            if (!isPreview) {\r\n                let xml = generateXml(true);\r\n                getChildXml(xml);\r\n            } else {\r\n                saveEvalProAnswer();\r\n            }\r\n        });\r\n        postEditor.on(\"change\", function() {\r\n            if (!isPreview) {\r\n                let xml = generateXml(true);\r\n                getChildXml(xml);\r\n            } else {\r\n                saveEvalProAnswer();\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to check the answer when check answer button clicked.\r\n     */\r\n    function remediationMode() {\r\n        state.remediationToggle = true;\r\n        answerCheckEvalpro();\r\n    }\r\n\r\n    /**\r\n     * Function to check the line for marker.\r\n     * @param line : Line number.\r\n     */\r\n    function checkLine(line) {\r\n        marker.forEach((marker) => {\r\n            marker.clear();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to check the evalpro answer when check answer button clicked.\r\n     */\r\n    function answerCheckEvalpro() {\r\n        setDefaultXML('answer_check');\r\n        let uxml = generateXml(true);\r\n        AH.ajax({\r\n            url: evalpro_url, \r\n            data: {\r\n                \"uxml\": uxml,\r\n                \"ajax\": 1,\r\n                'in_editor': 1,\r\n                'user_guid': window.user_guid\r\n            }\r\n        }).then((response)=> {\r\n            response = JSON.parse(response);\r\n            if (response['ajaxRes'] == 1) {\r\n                AH.select('#remediationModel', 'html', response['html']);\r\n                message = \"Passed\";\r\n\r\n                if (response['answer'] == \"0\") {\r\n                    message = \"Failed\";\r\n                }\r\n\r\n                state.snackback = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to get the string between two string.\r\n     * @param data : Any string data.\r\n     * @param str_1 : First start string.\r\n     * @param str_2 : Second end string.\r\n     */\r\n    function stringBetween(data, str_1, str_2) {\r\n        let regEx = new RegExp(\"<\" + str_1 + \">([\\\\s\\\\S]*?)</\" + str_1 + \">\", \"gm\");\r\n        if (str_2) {\r\n            regEx = new RegExp(str_1 + \"([\\\\s\\\\S]*?)\" + str_2, \"gm\");\r\n        }\r\n\r\n        let matchedStr = regEx.exec(data);\r\n\r\n        if (matchedStr) {\r\n            return matchedStr[1];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to get the attribute value from xml.\r\n     * @param XML : XML.\r\n     * @param attr : Attribute name.\r\n     * @param tag : Tag name.\r\n     */\r\n    function findAttribute(XML, attr, tag = \"\") {\r\n        let regEx = new RegExp(\"<\" + tag + \".*?\" + attr + \"=\\\"(\\\\w+)\\\".*?>\", \"gm\");\r\n        let matchedStr = regEx.exec(XML);\r\n        if (matchedStr) {\r\n            return matchedStr[1];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to unRenderPlayer.\r\n     */\r\n    function unRenderPlayer() {\r\n        AH.empty('#authoringDiv player');\r\n        AH.find('#authoringDiv', 'player', {action: 'removeClass', actionData: 'hidecontent'});\r\n        AH.selectAll('#editor img').forEach((_elm)=> {\r\n            if (!_elm.getAttribute('header-logo') && !_elm.getAttribute('src').match(/\\/\\/s3.amazonaws.com\\/jigyaasa_content_static/gm)) {\r\n                _elm.setAttribute('src', _elm.getAttribute('src'));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to render the player.\r\n     */\r\n    function renderPlayer() {\r\n        AH.empty('#authoringDiv player');\r\n        tag_player(AH.select('#authoringDiv'));\r\n        AH.find('#authoringDiv', 'player', {action: 'addClass', actionData: 'hidecontent'});\r\n        AH.selectAll('#editor img').forEach((_elm)=> {\r\n            if (!_elm.getAttribute('header-logo') && !_elm.getAttribute('src').match(/\\/\\/s3.amazonaws.com\\/jigyaasa_content_static/gm)) {\r\n                _elm.setAttribute('src', '//s3.amazonaws.com/jigyaasa_content_static/' + _elm.getAttribute('src'));\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to check the output of the code when run button clicked.\r\n     * @param event : Event\r\n     * @param raw : Raw (not in use need to delete this)\r\n     */\r\n    function runCode(event, raw = false) {\r\n        AH.select(\"#output\", 'html', '<div class=\"EvalbgBlue\"><div class=\"Evalloader\"><span>{</span><span>}</span></div></div>');\r\n        event.target.disabled = true;\r\n        let code = preEditor.getValue();\r\n        code += \"\\n\" + editor.getValue();\r\n        if (state.lang_type != 'sql' || state.lang_type != 'mssql' || state.lang_type != 'psql') {\r\n            code += \"\\n\";\r\n            code += postEditor.getValue();\r\n        }\r\n        AH.ajax({\r\n            type: \"POST\",\r\n            url: evalpro_url,\r\n            data: {\r\n                code: code,\r\n                repltype: state.lang_type,\r\n                stdin: AH.select(\"#sampleInput\").value,\r\n                'run_code': 1,\r\n                'user_guid': window.user_guid,\r\n                'db_name': currentDB ? currentDB : \"myDBs\",\r\n                'is_graph': state.is_graph,\r\n                'ignore_error': state.ignore_error,\r\n                'ignore_formatting' : state.ignore_formatting,\r\n                'ignore_reset_db' : state.ignore_reset_db,\r\n                'is_pre_tag' : state.is_pre_tag\r\n            },\r\n            dataType: 'json',\r\n        }).then((res)=> {\r\n            res = typeof res != \"object\" ? JSON.parse(res) : res;\r\n            AH.select('#output', 'css', {\r\n                \"color\": \"black\",\r\n                \"background\": \"transparent\"\r\n            });\r\n            event.target.disabled = false;\r\n            if (res.status_message == \"Successful\") {\r\n                if (res.output) {\r\n                    state.output = res.output;\r\n                    let is_raw_data = AH.select(\"#raw_btn\").value;\r\n                    if (is_raw_data == \"raw\") {\r\n                        let oup = res.output;\r\n                        AH.select('#output', 'html', '<textarea style=\"height: 480px;\" class=\"w-100 border-0\">' + oup + '</textarea>');\r\n                        return 1;\r\n                    }\r\n\r\n                    if (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql' || state.lang_type == 'c++' || state.is_pre_tag == 1) {\r\n                        let oup = res.output;\r\n                        AH.select('#output', 'html', '<pre>' + oup + '</pre>');\r\n                    } else {\r\n                        if ((res.output).includes(\"image_data:\")) {\r\n                            let image_url = (res.output).split(\"image_data:\");\r\n                            AH.select(\"#output\", 'html', '<img src=\"data:image/jpg;base64, ' + image_url[1] + '\" />');\r\n                        } else if (state.lang_type == \"r\" || state.is_graph) {\r\n                            AH.select(\"#output\", 'html', \"<pre>\"+ res.output + \"</pre>\");\r\n                        } else {\r\n                            AH.select('#output', 'html', res.output);\r\n                        }\r\n                    }\r\n\r\n                    if (isPreview && (state.lang_type == 'sql' || state.lang_type == 'mssql' || state.lang_type == 'psql')) {\r\n                        let lang_name = state.lang_type;\r\n                        let uXML = AH.select(\"#special_module_user_xml\").value;\r\n                        let id_date = new Date;\r\n                        uXML = uXML.replace(\"</SMXML>\", '<backup id=\"' + lang_name + id_date.getTime() + '\">' + code.trim() + '</backup></SMXML>');\r\n                        if (/\\<output\\>/g.test(uXML)) {\r\n                            uXML = uXML.replace(/\\<output\\>[\\s\\S]*?\\<\\/output\\>/g, '<output>' + AH.select('#output').innerHTML + '</output>');\r\n                        } else {\r\n                            uXML = uXML.replace('</enableline>', '</enableline><output>' + AH.select('#output').innerHTML + '</output>');\r\n                        }\r\n\r\n                        AH.select(\"#special_module_user_xml\").val(uXML);\r\n                    }\r\n                } else {\r\n                    AH.select('#output', 'html', \"Your code didn't print anything.\");\r\n                }\r\n            } else {\r\n                // We need to focus on this for error handling and formating the message\r\n                AH.select('#output', 'html', \"<pre class='compilerPre'>\"+parseLineNumber(res.stderr)+\"</pre>\");\r\n                AH.select('#output', 'css', {\r\n                    \"color\": \"#EB3941\",\r\n                    \"background\": \"#FFF0F0\"\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to parse the line number.\r\n     * @param errorMsg : Error msg get after code run.\r\n     */\r\n    function parseLineNumber(errorMsg=\"\") {\r\n        let section = {\r\n            pre: (preEditor.getValue() != \"\" ) ? preEditor.lineCount() : 0,\r\n            editor: (editor.getValue() != \"\") ? editor.lineCount() : 0,\r\n            post: (postEditor.getValue() != \"\") ? postEditor.lineCount() : 0,\r\n        };\r\n        let showpre = state.preShow;\r\n        let showpost = state.postShow;\r\n        let showeditor = state.editorShow;\r\n        switch(state.lang_type) {\r\n            case 'sql':\r\n                let line = errorMsg.split('at line');\r\n                if (line[1]) {\r\n                    let lineNo = (line[1].trim()).substring(0, 2);\r\n                    lineNo = lineNo.replace(\":\", \"\");\r\n                    if ((!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && lineNo <= section.pre)\r\n                        || (showpost && lineNo >= (section.pre + section.editor))\r\n                        || (showeditor && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && showeditor && showpost) \r\n                        )  {\r\n                        lineNo = getSectionLine(+(lineNo), section);\r\n                        if(isNaN(lineNo)) {\r\n                            errorMsg = `${line[0]}${line[1].substr(2, line[1].length)}`;\r\n                        } else {\r\n                            errorMsg = `${line[0]}: ${lineNo} ${line[1].substr(2, line[1].length)}`;\r\n                        }\r\n                    } else {\r\n                        errorMsg = \"Unable to execute test cases, there are issues with your code. Please fix.\";\r\n                    }\r\n                }\r\n                break;\r\n            case 'java': {\r\n                let line = errorMsg.split('Solution.java:');\r\n                if (line[1]) {\r\n                    let lineNo = line[1].substr(0,2);\r\n                    lineNo = getSectionLine(lineNo, section);\r\n                    lineNo = isNaN(lineNo) ? lineNo.replace(\":\", \"\") : lineNo;\r\n                    if ((!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && lineNo <= section.pre)\r\n                        || (showpost && lineNo >= (section.pre + section.editor))\r\n                        || (showeditor && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && showeditor && showpost) \r\n                        ) {\r\n                        errorMsg =  errorMsg.replace(/ Line \\d*/, ` Line ${lineNo}`);\r\n                    } else {\r\n                        errorMsg = \"Unable to execute test cases, there are issues with your code. Please fix.\";\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n            case 'python' : {\r\n                // In case of exception error <module> tag is coming so remove this from code\r\n                let is_module = errorMsg.indexOf(\"<module>\");\r\n                let is_multiple_line = errorMsg.indexOf(\"line \", is_module);\r\n                if (is_module > -1 && is_multiple_line > -1) {\r\n                    errorMsg = errorMsg.substring(is_module + (\"<module>\".length));\r\n                }\r\n                let line = errorMsg.split('line');\r\n                if (line[1]) {\r\n                    line[1] = line[1].trim();\r\n                    let lineNo = line[1].substr(0, 2);\r\n                    lineNo = lineNo.replace(/,/g, '');\r\n                    if ((!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && lineNo <= section.pre)\r\n                        || (showpost && lineNo >= (section.pre + section.editor))\r\n                        || (showeditor && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && showeditor && showpost) \r\n                        )  {\r\n                        lineNo = getSectionLine(lineNo, section);\r\n                        errorMsg =  errorMsg.replace(/ line \\d*/, ` line ${lineNo}`);\r\n                    } else {\r\n                        errorMsg = \"Unable to execute test cases, there are issues with your code. Please fix.\";\r\n                    }\r\n                } \r\n            }\r\n            break;\r\n            case 'php': {\r\n                let line = errorMsg.split('in /home/ucertify');\r\n                if(line[1]) {\r\n                    let lineNo = (line[1].split(\"line\"));\r\n                    lineNo = getSectionLine(+lineNo[1], section);\r\n                    if (errorMsg.indexOf(\"unexpected end of file\") > -1) {\r\n                        errorMsg = errorMsg.split(\"on line\");\r\n                        errorMsg = errorMsg[0];\r\n                    } else if ((!showpre && !showeditor && !showpost && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && lineNo <= section.pre)\r\n                        || (showpost && lineNo >= (section.pre + section.editor))\r\n                        || (showeditor && lineNo > section.pre && lineNo <= (section.pre + section.editor))\r\n                        || (showpre && showeditor && showpost) \r\n                        )  {\r\n                        errorMsg = line[0] + \"on line \" + lineNo;\r\n                    } else {\r\n                        errorMsg = \"Unable to execute test cases, there are issues with your code. Please fix.\";\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n\r\n        }\r\n        return errorMsg;\r\n    }\r\n    \r\n    /**\r\n     * Function to get the selection line.\r\n     * @param lineNo : Line number of the error.\r\n     * @param section : Pre, Post or Editor section.\r\n     */\r\n    function getSectionLine(lineNo, section) {\r\n        if (lineNo <= section.pre) {\r\n            //No need here.\r\n        } else if (lineNo <= (section.pre + section.editor)) {\r\n            lineNo = lineNo - section.pre;\r\n            console.warn({section:'editor',lineNo});\r\n        } else if (lineNo <= (section.pre + section.editor + section.post)) {\r\n            lineNo = lineNo - (section.pre + section.editor);\r\n        }\r\n\r\n        return lineNo;\r\n    }\r\n    \r\n    /**\r\n     * Function to parse the XML.\r\n     * @param xml : XML.\r\n     */\r\n    function parseXML(xml) {\r\n        xml = xml ? xml : window.QXML;\r\n        currentDB = findAttribute(xml, \"db_name\", \"SMXML\") ? findAttribute(xml, \"db_name\", \"SMXML\") : \"myDBs\";\r\n        state.database = currentDB;\r\n        if (findAttribute(xml, \"language\") == 'sql' || findAttribute(xml, \"language\") == 'mssql' || findAttribute(xml, \"language\") == 'psql') {\r\n            window.onbeforeunload = function(event) {\r\n                resetDB();\r\n            };\r\n        }\r\n        let editorData = stringBetween(xml, \"editor\");\r\n        editor.setValue(editorData ? editorData.trim() : \"\");\r\n\r\n        preData = stringBetween(xml, \"pre\");\r\n        preEditor.setValue(preData ? preData.trim() : \"\");\r\n        \r\n\r\n        postData = stringBetween(xml, \"post\");\r\n        postEditor.setValue(postData ? postData.trim() : \"\");\r\n        showPre = parseInt(findAttribute(xml, \"showpre\", \"SMXML\"));\r\n        showPost = parseInt(findAttribute(xml, \"showpost\", \"SMXML\"));\r\n        // Need to verify the content guid for the showeditor is not 2\r\n        showEditor = 2; //parseInt(findAttribute(xml, \"showeditor\", \"SMXML\"));\r\n        let is_graph = findAttribute(xml, \"is_graph\", \"SMXML\") ? parseInt(findAttribute(xml, \"is_graph\", \"SMXML\")) : 0;\r\n        let ignore_error = findAttribute(xml, \"ignore_error\", \"SMXML\") ? parseInt(findAttribute(xml, \"ignore_error\", \"SMXML\")) : 0;\r\n        let ignore_formatting = findAttribute(xml, \"ignore_formatting\", \"SMXML\") ? parseInt(findAttribute(xml, \"ignore_formatting\", \"SMXML\")) : 0;\r\n        let ignore_reset_db = findAttribute(xml, \"ignore_reset_db\", \"SMXML\") ? parseInt(findAttribute(xml, \"ignore_reset_db\", \"SMXML\")) : 0;\r\n        let is_pre_tag   = findAttribute(xml, \"is_pre_tag\", \"SMXML\") ? parseInt(findAttribute(xml, \"is_pre_tag\", \"SMXML\")) : 0;\r\n        state.preShow = showPre ? showPre : 0;\r\n        state.postShow = showPost ? showPost : 0;\r\n        state.editorShow = showEditor ? showEditor : 0;\r\n        state.is_graph = is_graph;\r\n        state.ignore_error = ignore_error;\r\n        state.ignore_formatting = ignore_formatting;\r\n        state.ignore_reset_db  = ignore_reset_db;\r\n        state.is_pre_tag    = is_pre_tag;\r\n        state.enableLines = stringBetween(xml, \"enableline\");\r\n        AH.select(\"#enable-line\", 'value', state.enableLines || 0);\r\n\r\n        if ((state.lang_type == \"sql\" || state.lang_type == \"psql\") && currentDB == \"myDBs\") {\r\n            toggleDB(false);\r\n        } else {\r\n            toggleDB(true);\r\n        }\r\n        \r\n        if (preData && (preData.trim()).length) {\r\n            addPreBlock(1);\r\n        } \r\n        if (postData && (postData.trim()).length) {\r\n            addPostBlock(1);\r\n        }\r\n        return editorData;\r\n    }\r\n\r\n    /**\r\n     * Function to set Default XML.\r\n     * @param type : from where this is being called.\r\n     */\r\n    function setDefaultXML(type) {\r\n        let preAttr = ' showpre=\"' + state.preShow + '\"';\r\n        let postAttr = 'showpost=\"' + state.postShow + '\"';\r\n        let editorAttr = 'showeditor=\"' + state.editorShow + '\"';\r\n        let currDB = document.querySelector(\"#select_db\");\r\n        if (currDB && currDB.value != currentDB) {\r\n            toggleDB(true);\r\n            currentDB = currDB.value ? currDB.value : currentDB;\r\n        }\r\n        let showDb = '';\r\n        if (state.lang_type == 'sql' || state.lang_type == 'psql' || state.lang_type == 'mssql') {\r\n            showDb = 'db_name=\"' + currentDB + '\"';\r\n            state.databases = all_databases[state.lang_type];\r\n        }\r\n        defaultStartXml = \"<SMXML type=\\\"\" + state.module + \"\\\" name=\\\"evalpro\\\" case_sensitive=\\'\" + state.case_insensitive + \"\\' special_char=\\'\" + state.ignore_special_char +\"\\' partial_match=\\'\" + state.partial_match + \"\\' language=\\\"\" + state.lang_type + \"\\\"\" + preAttr + \" \" + postAttr + \" \" + editorAttr + \" \" + showDb + \" is_graph=\\\"\" + state.is_graph +  \"\\\" ignore_error=\\\"\" + state.ignore_error +  \"\\\" ignore_formatting=\\\"\" + state.ignore_formatting +   \"\\\" ignore_reset_db=\\\"\" + state.ignore_reset_db +  \"\\\" is_pre_tag=\\\"\" + state.is_pre_tag + \"\\\">\";\r\n        if (editor && type != \"answer_check\") {\r\n            generateXml();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to generate the xml after any update.\r\n     * @param isFormatted : Is formated or not.\r\n     */\r\n    function generateXml(isFormatted) {\r\n        aXml = \"\";\r\n        aXml = defaultStartXml + getCodeXml() + testCasesXml() + enableLineXml() + \"</SMXML>\";\r\n        if (isFormatted) {\r\n            return aXml;\r\n        }\r\n        getChildXml(aXml);\r\n        return aXml;\r\n    }\r\n\r\n    /**\r\n     * Function to save the evalpro answer.\r\n     */\r\n    function saveEvalProAnswer() {\r\n        let uXml = generateXml(1);\r\n        AH.select(\"#special_module_user_xml\", 'value', uXml);\r\n    }\r\n\r\n    /**\r\n     * Function to get the code xml.\r\n     */\r\n    function getCodeXml() {\r\n        let codeXml = \"\";\r\n        let pre_code = preEditor ? preEditor.getValue() : \"\";\r\n        let post_code = postEditor ? postEditor.getValue() : \"\";\r\n        if (editor) {\r\n            codeXml = editor.getValue();\r\n        }\r\n        return \"<pre>\" + pre_code + \"\\n</pre><editor>\" + codeXml + \"</editor><post>\\n\" + post_code + \"</post>\";\r\n    }\r\n\r\n    /**\r\n     * Function to set the testcases.\r\n     */\r\n    function setTestCase() {\r\n        let testMatch = stringBetween(state.xml, \"testcases\");\r\n        let testcaseString = testMatch.replace(/<\\/case>(\\n)*(\\s)*<case>/g, \";\").replace(/<\\/case>|<case>/g, \"\");\r\n        AH.select(\"#id1\", 'value', testcaseString);\r\n        let sample = stringBetween(state.xml, \"case\");\r\n        if (sample) {\r\n            sample = sample.replace(/\\|.*/g, \"\");\r\n            let inpValue = (/\\{|\\[|\\(/g).test(sample) ? sample.replace(/\\|.+/g, \"\") : sample.replace(/\\|.+/g, \"\").replace(/\\,/g, \"\\n\");\r\n            if (inpValue.indexOf('__sep__')) {\r\n                inpValue = inpValue.replace(/__sep__/g, \"\\n\");\r\n            }\r\n            AH.select(\"#sampleInput\", 'value', inpValue);\r\n            let caseStacks = testcaseString.split(\";\");\r\n            AH.select(\"#caseContainer\", 'html', \"\");\r\n            caseStacks.forEach((event, item) => {\r\n                let caseArr = event.split(\"|\");\r\n                addMore(caseArr[0], caseArr[1], item);\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to cancel the testcase modal.\r\n     */\r\n    function cancelTestCase() {\r\n        if (lastTestCaseHtml) {\r\n            AH.select('#caseContainer', 'html', lastTestCaseHtml);\r\n            bindBtns();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to open the testcase modal.\r\n     */\r\n    function onOpenTestCase() {\r\n        lastTestCaseHtml = document.getElementById('caseContainer').innerHTML;\r\n    }\r\n\r\n    /**\r\n     * Function to bind the buttons.\r\n     */\r\n    function bindBtns() {\r\n        let delBtns = document.querySelectorAll(\".caseDelBtn\");\r\n        delBtns.forEach((event) => {\r\n            event.removeEventListener(\"click\", deleteCase);\r\n            event.addEventListener(\"click\", deleteCase);\r\n        });\r\n        let part_match = document.querySelectorAll(\".partial_match .case_insensitive .ignore_special_char\");\r\n        part_match.forEach((event, index) => {\r\n            event.removeEventListener(\"click\", setDefaultXML);\r\n            event.addEventListener(\"click\", setDefaultXML);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Function to add more testcase when + button clicked from Add Testcase modal.\r\n     * @param inp : Input.\r\n     * @param oup : Output.\r\n     * @param i : optional parameter.\r\n     */\r\n    function addMore(inp = \"\", oup = \"\", i) {\r\n        let caseStack = document.createElement(\"div\"),\r\n        isSql = state.lang_type == \"sql\" || state.lang_type == \"psql\" ? \"h-imp\" : \"\";\r\n        caseStack.className = 'caseStack m-sm';\r\n        inp = (typeof inp == 'object') ? \"\" : inp;\r\n        let index = AH.select(\"#caseContainer\").children.length;\r\n        let case_insensitive = state.case_insensitive;\r\n        case_insensitive = case_insensitive.split(\",\");\r\n        let case_insensitive_checked = case_insensitive[i] == 1 ? 'checked=\"checked\"' : '';\r\n\r\n        let ignore_special_char = state.ignore_special_char;\r\n        ignore_special_char = ignore_special_char.split(\",\");\r\n        let ignore_special_char_checked = ignore_special_char[i] == 1 ? 'checked=\"checked\"' : '';\r\n\r\n        let partial_match = state.partial_match;\r\n        partial_match = partial_match.split(\",\");\r\n        let partial_match_checked = partial_match[i] == 1 ? 'checked=\"checked\"' : '';\r\n\r\n        caseStack.innerHTML = `<div class=\"w-100 p-3 mt-2 mb-2\" style=\"background: #f1f1f1\"><div class=\"w-100\"><h5 class=\"float-left p-1\" style=\"width: 90%\"><lable class=\"bage mr-4 test_case_label\">${l.testcase + (index + 1)}</lable><label class=\"container_eval mr-4\">${l.case_insensitive}<input class=\"case_insensitive\" type=\"checkbox\" value=\"${state.case_insensitive}\" ${case_insensitive_checked}><span class=\"checkmark_eval\"></span></label><label class=\"container_eval mr-4\">${l.ignore_special_char}<input class=\"ignore_special_char\" type=\"checkbox\" value=\"${state.ignore_special_char}\" ${ignore_special_char_checked}><span class=\"checkmark_eval\"></span></label><label class=\"container_eval\">${l.partial_match}<input class=\"partial_match\" type=\"checkbox\" value=\"${state.partial_match}\" ${partial_match_checked}><span class=\"checkmark_eval\"></span></label></h5><span tabIndex=\"0\" class=\"float-right p-2 icomoon-new-24px-delete-1 s5 pointer caseDelBtn\"></span></div><textarea class=\"form-control d-inline-block mr-md ${isSql}\" style=\"width: 48%;height: 100px;\" placeholder=\"${l.input_seperated_comma}\">${inp}</textarea>\r\n            <textarea class=\"form-control d-inline-block ml-md\" style=\"height: 100px;width:${(state.lang_type == \"sql\" || state.lang_type == \"psql\" || state.lang_type == \"mssql\" ? \"98%\" : \"48%\")}\" placeholder=\"${l.output}\">${oup}</textarea></div>`;\r\n        document.querySelector(\"#caseContainer\").appendChild(caseStack);\r\n        bindBtns();\r\n    }\r\n\r\n    /**\r\n     * Function to check the case insensitive.\r\n     */\r\n    function checkCaseInsensitive() {\r\n        let caseInsensitive = [];\r\n        let nodes = document.querySelectorAll(\".case_insensitive\");\r\n        for (let points of nodes) {\r\n            caseInsensitive.push(points.checked ? 1 : 0);\r\n        }\r\n\r\n        return caseInsensitive.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Function to check the special characters.\r\n     */\r\n    function checkSpecialChar() {\r\n        let specialChar = [];\r\n        let node = document.querySelectorAll(\".ignore_special_char\");\r\n        for (let point of node) {\r\n            specialChar.push(point.checked ? 1 : 0);\r\n        }\r\n\r\n        return specialChar.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Function to check the partial match.\r\n     */\r\n    function checkMatchPartial() {\r\n        let matchPartial = [];\r\n        let match_node = document.querySelectorAll(\".partial_match\");\r\n        for (let child of match_node) {\r\n            matchPartial.push(child.checked ? 1 : 0);\r\n        }\r\n\r\n        return matchPartial.join(\",\");\r\n    }\r\n\r\n    /**\r\n     * Function to get the value of is_graph, ignore_error, ignore_formatting, is_pre_tag\r\n    */\r\n    function getSettings() {\r\n        let is_graph = AH.select('.is_graph').checked ? 1 : 0;\r\n        let ignore_error = AH.select('.ignore_error').checked ? 1: 0;\r\n        let ignore_formatting = AH.select('.ignore_formatting').checked ? 1: 0;\r\n        let ignore_reset_db  = AH.select('.ignore_reset_db').checked ? 1 : 0;\r\n        let is_pre_tag = AH.select('.is_pre_tag').checked ? 1 : 0;\r\n        return { is_graph: is_graph, ignore_error: ignore_error, ignore_formatting: ignore_formatting, ignore_reset_db: ignore_reset_db, is_pre_tag: is_pre_tag };\r\n    }\r\n    /**\r\n     * Function to delete the testcases.\r\n     * @param event : Event parameter.\r\n     */\r\n    function deleteCase(event) {\r\n        if (AH.select(\"#caseContainer\").children.length == 1) {\r\n            AH.alert(\"you can not delete default node\");\r\n        } else {\r\n            let getParent = event.target.parentElement;\r\n            getParent = getParent.parentElement;\r\n            getParent = getParent.parentElement;\r\n            getParent.remove();\r\n            let counter = 1;\r\n            AH.selectAll(\".test_case_label\").forEach((_elm)=> {\r\n                _elm.textContent = (l.testcase + (counter++));\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Function to add the testcases.\r\n     */\r\n    function addTestCase() {\r\n        let tempXml = xml;\r\n        let case_match_insensitive = checkCaseInsensitive();\r\n        let casematch_specail_char = checkSpecialChar();\r\n        let partialmatch = checkMatchPartial();\r\n        let settings     = getSettings(); \r\n        state.case_insensitive = case_match_insensitive;\r\n        state.ignore_special_char = casematch_specail_char;\r\n        state.partial_match = partialmatch;\r\n        state.is_graph = settings.is_graph;\r\n        state.ignore_error = settings.ignore_error;\r\n        state.ignore_formatting = settings.ignore_formatting;\r\n        state.ignore_reset_db  = settings.ignore_reset_db;\r\n        state.is_pre_tag = settings.is_pre_tag;\r\n        tempXml = tempXml.replace(/case_sensitive='[\\s\\S]*?' +/g, \"case_sensitive='\" + case_match_insensitive + \"' \");\r\n        tempXml = tempXml.replace(/special_char='[\\s\\S]*?' +/g, \"special_char='\" + casematch_specail_char + \"' \");\r\n        tempXml = tempXml.replace(/partial_match='[\\s\\S]*?' +/g, \"partial_match='\" + partialmatch + \"' \");\r\n        tempXml = tempXml.replace(/is_graph=\"[\\s\\S]*?\"/g, 'is_graph=\"' + settings.is_graph + '\"');\r\n        tempXml = tempXml.replace(/ignore_error=\"[\\s\\S]*?\"/g, 'ignore_error=\"' + settings.ignore_error + '\"');\r\n        tempXml = tempXml.replace(/ignore_formatting=\"[\\s\\S]*?\"/g, 'ignore_formatting=\"' + settings.ignore_formatting + '\"');\r\n        tempXml = tempXml.replace(/ignore_reset_db=\"[\\s\\S]*?\"/g, 'ignore_reset_db=\"' + settings.ignore_reset_db + '\"');\r\n        tempXml = tempXml.replace(/is_pre_tag=\"[\\s\\S]*?\"/g, 'is_pre_tag=\"' + settings.is_pre_tag + '\"');\r\n        let caseStacks = AH.selectAll(\".caseStack\");\r\n        let caseArr = [];\r\n        caseStacks.forEach((e) => {\r\n            let inp = e.children[0].children[1].value;\r\n            let oup = e.children[0].children[2].value;\r\n            caseArr.push(inp + \"|\" + oup + \";\");\r\n        });\r\n        AH.select(\"#id1\", 'value', (caseArr.join(\"\")).replace(/;$/gm, \"\") );\r\n        let testCasesValue = document.querySelector(\"#id1\").value;\r\n        testCasesValue = \"<case>\" + testCasesValue.replace(/;/g, \"</case><case>\") + \"</case>\";\r\n        getChildXml(tempXml.replace(/<testcases>[\\s\\S]*?<\\/testcases>/g, \"<testcases>\" + testCasesValue + \"</testcases>\"));\r\n    }\r\n\r\n    /**\r\n     * Function to add the testcase in xml.\r\n     */\r\n    function testCasesXml() {\r\n        let testCasesXml = stringBetween(xml, \"testcases\");\r\n        return (testCasesXml ? (\"<testcases>\" + testCasesXml + \"</testcases>\") : \"\");\r\n    }\r\n\r\n    /**\r\n     * Function to add the enable line number in xml.\r\n     */\r\n    function enableLineXml() {\r\n        let enabledLine = AH.select(\"#enable-line\").value ? AH.select(\"#enable-line\").value : 0;\r\n        return (\"<enableline>\" + enabledLine + \"</enableline>\");\r\n    }\r\n\r\n    /**\r\n     * Function to handle the shortcut.\r\n     * @param event : Event parameter.\r\n     */\r\n    function onkeyTouch(event) {\r\n        //Added for ADA\r\n        if ((event.ctrlKey) && (event.shiftKey) && (event.keyCode == 13)) {\r\n            AH.select(\".evalProRunCode\").focus();\r\n            AH.select(\".evalProRunCode\").click();\r\n        } else if ((event.ctrlKey) && (event.shiftKey) && (event.keyCode == 32)) { \r\n            //ctrl+shift+space key\r\n            AH.select(\"#editor-footer\").focus();\r\n            AH.select(\"#editor-footer\").click();\r\n        }\r\n    }\r\n</script>\r\n<div tabIndex={l.zero} id=\"authoringArea\">\r\n    <div style=\"height: auto;\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"clearboth w-100\" style=\"padding-top: {10}px;\">\r\n                    <div id=\"editor-top\" style=\"width: 60%; min-height: 546px;\" class=\"float-left\">\r\n                        <div class=\"full-editor\" style=\"min-height: inherit;\">\r\n                            <div \r\n                                class=\"card card-default\" \r\n                                id=\"resizeable-editor\" \r\n                                style=\"margin:0; border-radius: 4px 4px 0 0; border-bottom: 0;\"\r\n                            >\r\n                                <div class=\"card-header editor-heading pt-md\" style=\"height:44px;\">\r\n                                    <div class=\"float-left\" style=\"margin: -9px -14px 0 -17px\">\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            tabIndex={l.zero} \r\n                                            class=\"btn btn-md btn-light mr px-2 pt-1 language_select_button font14\" \r\n                                            on:click={handleLanguageModalOpen}\r\n                                        > \r\n                                            {(state.lang_type) == \"php\" ? \"PHP\" : toTitleCase((state.lang_type))}\r\n                                            <span class=\"icomoon-arrow-down-2 font20 position-relative\" style=\"top: 3px;\"></span>\r\n                                        </button>\r\n                                        {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == \"psql\")}\r\n                                            <button \r\n                                                type=\"button\" \r\n                                                tabIndex={l.zero} \r\n                                                class=\"btn btn-md btn-light mr px-2 pt-1 database_select_button font14\" \r\n                                                on:click={handleDatabaseModalOpen}\r\n                                            > \r\n                                                {state.database}\r\n                                                <span class=\"icomoon-arrow-down-2 position-relative\" style=\"font-size: 20px;top:3px;\"></span>\r\n                                            </button>\r\n                                        {/if}\r\n                                        <span class=\"d-inline-block pt-2 pl-2 selected_language  h-imp font14\">\r\n                                            {(state.lang_type) == \"php\" ? \"PHP\" : toTitleCase((state.lang_type))}\r\n                                        </span>\r\n                                    </div>\r\n                                    <div class=\"float-right\" style=\"margin: -9px -14px 0 4px;\">\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            tabIndex={l.zero} \r\n                                            class=\"btn btn-md btn-light mr px-2 font14\" \r\n                                            id=\"addTestCase\" \r\n                                            name=\"addTestCase\" \r\n                                            on:click={onOpenTestCase} \r\n                                            data-bs-toggle=\"modal\" \r\n                                            data-bs-target=\"#testcaseActivator\"\r\n                                        >\r\n                                            {l.add_testcase}\r\n                                        </button>\r\n                                        {#if (state.lang_type =='sql' || state.lang_type == 'mssql' || state.lang_type == \"psql\")} \r\n                                            <button type=\"button\" on:click={resetDB} class=\"btn btn-light mr px-2 font14\">{l.resetDB}</button>\r\n                                        {/if}\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            tabIndex={l.zero} \r\n                                            class=\"evalProRunCode btn btn-light px-2 font14\" \r\n                                            on:click={runCode} \r\n                                            href=\"#output\" \r\n                                            id=\"evalProRunCode\" \r\n                                            name=\"submitcode\"\r\n                                        >\r\n                                            <i class=\"fa fa-play\"></i> \r\n                                            {(l.run).toUpperCase()}\r\n                                        </button>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <div \r\n                                    class=\"card-body\" \r\n                                    id=\"code-editor\" \r\n                                    style=\"overflow: none; border-bottom: 1px solid #dddddd; padding: 0px; min-height: 483px; height: 488px;\">\r\n                                    <div class=\"card-header editor-heading py-1 pr-2 d-flex align-items-center justify-content-between action_block font14\">\r\n                                        <span>Pre</span>\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            tabIndex={l.zero} \r\n                                            id=\"pre_editor_add_button\" \r\n                                            class=\"btn btn-sm btn-light px-2 pull-right font14\" \r\n                                            style=\"background-color: #fff\" \r\n                                            on:click={() => addPreBlock(-1)} \r\n                                        >\r\n                                            {state.preBlockShow ? \"Hide\" : \"Show\"}\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"{state.preBlockShow ? '' : 'h-imp'} pre-div\">\r\n                                        <textarea id='pre-editor' class=\"h\" placeholder={l.pre_code} name=\"pre-editor\"></textarea>    \r\n                                    </div>\r\n                                    <div style=\"height: 44px;\"class=\"card-header editor-heading pr-2 d-flex align-items-center justify-content-between action_block font14\">\r\n                                        <span class=\"d-inline span4\">Editor</span>\r\n                                        <div class=\"pull-right\">\r\n                                            <label tabIndex={l.zero} class=\"d-inline-block\" for=\"enable-line\">{l.enableline}:</label>\r\n                                            <input \r\n                                                type=\"text\" \r\n                                                placeholder={l.separate_by_quote} \r\n                                                class=\"form-control d-inline-block pt-1\" \r\n                                                style=\"margin-left: 10px; width: 125px\" \r\n                                                id=\"enable-line\" \r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                    <div class=\"replEditor\">\r\n                                        <textarea id='repl-editor' class=\"h\" placeholder={l.write_function_here} name=\"repl-editor\"></textarea>   \r\n                                    </div>\r\n                                    <div class=\"card-header editor-heading py-1 pr-2 d-flex align-items-center justify-content-between action_block font14\">\r\n                                        <span>Post</span>\r\n                                        <button \r\n                                            type=\"button\" \r\n                                            id=\"post_editor_add_button\" \r\n                                            class=\"btn btn-sm btn-light px-2 pull-right font14\" \r\n                                            style=\"background-color: #fff\" \r\n                                            on:click={() => addPostBlock(-1)}\r\n                                        >\r\n                                            {state.postBlockShow ? \"Hide\" : \"Show\"}\r\n                                        </button>\r\n                                    </div>\r\n                                    <div class=\"post-div {state.postBlockShow ? '' : 'h-imp'}\" >\r\n                                        <textarea id='post-editor' class=\"h\" placeholder={l.postcode} name=\"post-editor\"></textarea> \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"editor-footer\" class=\"float-right\" style=\"width: 39.5%; min-height: 120px; height: 585px\">\r\n                        <div>\r\n                            <div class=\"card card-default m-b\">\r\n                                <div class=\"card-header font14\" style=\"height:44px\">\r\n                                    {l.input}\r\n                                </div>\r\n                                <div id=\"input\" class=\"card-body p-0\">\r\n                                    <textarea \r\n                                        name=\"sampleInput\" \r\n                                        class=\"sampleInput\" \r\n                                        id=\"sampleInput\" \r\n                                        placeholder={l.seperate_by_enter_key} \r\n                                        style=\"margin: 0px; width: 100%; height: 80px; padding: 10px; resize: none; outline: none; border: 0px\"\r\n                                    ></textarea>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"card card-default\" style=\"margin-bottom: 0px\">   \r\n                                <div class=\"card-header pr-0 pt-1\" style=\"height: 44px;\">\r\n                                    <span class=\"pt-2 d-inline-block font14\" tabIndex={l.zero}>{l.output}</span>  \r\n                                    {#if !isPreview} \r\n                                        <select \r\n                                            id=\"raw_btn\" \r\n                                            class=\"form-select secure-icon d-inline-block mr-2 pull-right font14\" \r\n                                            name=\"raw_btn\" \r\n                                            style=\"height: 34px; width: 90px;\"\r\n                                            on:change={showOutputData}\r\n                                            on:blur={showOutputData}\r\n                                        >\r\n                                            <option value=\"html\" selected=\"selected\">HTML</option>\r\n                                            <option value=\"raw\">RAW</option>\r\n                                        </select>\r\n                                    {/if}\r\n                                </div>\r\n                                <div \r\n                                    id=\"output\" \r\n                                    tabIndex={l.zero} \r\n                                    class=\"test card-body output\" \r\n                                    style=\"resize: vertical; overflow: auto; padding: 10px; height: 342px; min-height: 342px\"\r\n                                >\r\n                                    <span></span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"card card-default\" id=\"test_card\" style=\"display: none;\">\r\n                                <div class=\"card-header\" style=\"height: 44px;\">\r\n                                    <a data-bs-toggle=\"tab\" id=\"testcase-tab\" class=\"inputOutput font14\" href=\"#testcase\">{l.testcases}</a>\r\n                                </div>\r\n                                <div id=\"testcase\" class=\"card-body in\" style=\"resize: none; overflow: auto; padding: 10px; height: 180px\">\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {#if (state.lang_type=='sql' || state.lang_type=='mssql' || state.lang_type == \"psql\")}\r\n            <Dialog class=\"remove_right_margin\" bind:visible={state.database_modal_open} width={225} aria-labelledby=\"simple-dialog-title\" style=\"background-color:#fff; border-radius: 5px;\">\r\n                <h4 class=\"mt-0 font21\">\r\n                    <div class=\"d-flex justify-content-between\">\r\n                        <div>Select Database</div>\r\n                        <span class=\"position-relative\" style=\"left: -16px; top: -10px; font-size: 20px; cursor: pointer;\" on:click = {handleDatabaseModalOpen}>X</span>\r\n                    </div>\r\n                </h4>\r\n                <div style=\"height: 500px; overflow-y: auto; padding-right: 18px;\">\r\n                    {#each state.databases as database} \r\n                        <div class=\"dropdown-item evalpro_dropdown\" tabindex=\"0\" on:click={handleDatabaseItem.bind(this, database)} key={database} style=\"height: 50px; line-height: 45px; cursor: pointer; padding-left: 20px;\">\r\n                            {database}\r\n                        </div>\r\n                    {/each}\r\n                </div>\r\n            </Dialog>\r\n        {/if}\r\n        <Dialog class=\"remove_right_margin\" bind:visible={state.open} width={225} style=\"background-color:#fff; border-radius: 5px;\">\r\n            <h4 class=\"mt-0 font21\">\r\n                <div class=\"d-flex justify-content-between\">\r\n                    <div>Select Language</div>\r\n                    <span class=\"position-relative\" style=\"left: -16px; top: -10px; font-size: 20px; cursor: pointer;\" on:click = {handleLanguageModalOpen}>X</span>\r\n                </div>\r\n            </h4>\r\n            <div style=\"height: 500px; overflow-y: auto; padding-right: 18px;\">\r\n                {#each lang_type as lang}\r\n                    <div class=\"dropdown-item evalpro_dropdown\" tabindex=\"0\" on:click={handleLanguageSelection.bind(this, lang)} key={lang} style=\"height:60px; cursor: pointer; padding-left: 20px\">\r\n                        <div class=\"text-center d-inline-block\" style=\"height: 50px; width: 50px; background: #ccc;border-radius: 50%;\">\r\n                            <img style=\"border-radius: 50%;height:50px;\" src={window.itemUrl + \"images/\" + (lang == \"c#\" ? \"csharp\" : lang ) + \"_lang.png\"} alt=\"Language\"/>\r\n                        </div>\r\n                        <div class=\"pl-1 d-inline-block\" style=\"padding: 15px;\">{lang.charAt(0).toUpperCase() + lang.slice(1)}</div>\r\n                    </div>\r\n                {/each}\r\n            </div>\r\n        </Dialog>\r\n        <div class=\"modal fade\" id=\"testcaseActivator\" tabIndex={l.minus_1} role=\"dialog\" aria-labelledby=\"testcaseActivatorLabel\">\r\n            <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n                <div class=\"modal-content\">\r\n                    <div class=\"modal-header\">\r\n                        <input class=\"form-control testCaseInput h-imp\" type=\"text\" id=\"id1\" />\r\n                        <h4>{l.add_testcase}</h4>\r\n                        <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" aria-label=\"Close\">\r\n                            <span aria-hidden=\"true\">&times;</span>\r\n                        </button>\r\n                    </div>\r\n                    <div class=\"modal-body overflow-auto mt-0 pt-0\" style=\"max-height:440px;\">\r\n                        <div id=\"setting\" class=\"setting\">\r\n                            <h5 class=\"float-left p-1\" style=\"width: 100%;padding: 18px !important;background: #f1f1f1;display: flex;justify-content: space-between;\">\r\n                                <lable class=\"mt-1\">{l.setting}: </lable>\r\n                                <label class=\"container_eval mr-4\">{l.is_graph}\r\n                                    <input class=\"is_graph\" type=\"checkbox\" value=\"{state.is_graph}\" data-attr=\"{state.is_graph}\" checked={state.is_graph}>\r\n                                    <span class=\"checkmark_eval\"></span>\r\n                                </label>\r\n                                <label class=\"container_eval mr-4\">{l.ignore_error}\r\n                                    <input class=\"ignore_error\" type=\"checkbox\" value=\"{state.ignore_error}\" checked={state.ignore_error}>\r\n                                    <span class=\"checkmark_eval\"></span>\r\n                                </label>\r\n                                <label class=\"container_eval\">{l.ignore_formatting}\r\n                                    <input class=\"ignore_formatting\" type=\"checkbox\" value=\"{state.ignore_formatting}\" checked={state.ignore_formatting}>\r\n                                    <span class=\"checkmark_eval\"></span>\r\n                                </label>\r\n                                <label class=\"container_eval\">{l.ignore_reset_db}\r\n                                    <input class=\"ignore_reset_db\" type=\"checkbox\" value=\"{state.ignore_reset_db}\" checked={state.ignore_reset_db}>\r\n                                    <span class=\"checkmark_eval\"></span>\r\n                                </label>\r\n                                <label class=\"container_eval\">{l.pre_tag}\r\n                                    <input class=\"is_pre_tag\" type=\"checkbox\" value=\"{state.is_pre_tag}\" checked={state.is_pre_tag}>\r\n                                    <span class=\"checkmark_eval\"></span>\r\n                                </label>\r\n                            </h5>\r\n                        </div>\r\n                        <div id=\"caseContainer\" class=\"float-right mt-sm overflow-auto\" style=\"width: 100%\">\r\n                            <div class=\"caseStack m-sm\">\r\n                                <h5 class=\"float-left\" style=\"width: auto\">\r\n                                    <span tabIndex={l.zero}>{l.select_case_match}</span>                           \r\n                                    <select\r\n                                        value={state.testcase_sensitive}\r\n                                        on:change={setDefaultXML}\r\n                                        on:blur={setDefaultXML}\r\n                                        style=\"margin: 2px 24px\"\r\n                                        class=\"v-bottom form-select\"\r\n                                        id=\"testcase_sensitive\" \r\n                                    >                               \r\n                                        <option value=\"0\">{l.case_insensitive}</option>\r\n                                        <option value=\"1\">{l.partial_matching}</option>\r\n                                        <option value=\"2\">{l.special_char}</option>\r\n                                    </select>\r\n                                </h5>\r\n                                <textarea style=\"height: 100px;\" class={state.lang_type == \"sql\" || state.lang_type == \"psql\" ? \"form-control width-md1 d-inline-block mr-md h-imp\" : \"form-control width-md1 d-inline-block mr-md\"} placeholder=\"Input seperated by ','\"></textarea>\r\n                                <textarea style=\"height; 100px;\" class={'form-control '+(state.lang_type == \"sql\" || state.lang_type == \"psql\" ? \"span9\" : \"width-md1\")+' d-inline-block ml-md'} placeholder=\"Output\"></textarea>\r\n                                <span tabIndex=\"0\" class=\"float-right icomoon-new-24px-delete-1 s5 pointer caseDelBtn\"></span>\r\n                            </div>\r\n                        </div>\r\n                        <div class=\"d-inline-flex pull-right\" style=\"width: 50px;\">\r\n                            <Button \r\n                                color=\"primary\" \r\n                                unelevated=\"true\"\r\n                                on:click={addMore} \r\n                                aria-label=\"Add\" \r\n                                style=\"height: 40px; width: 40px; border-radius: 50%\"\r\n                            >\r\n                                <spna class=\"icomoon-plus\"></spna>\r\n                            </Button>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"modal-footer\">\r\n                        <button type=\"button\" on:click={addTestCase} class=\"btn btn-light addTestCase\" data-bs-dismiss=\"modal\">{l.submit}</button>\r\n                        <button type=\"button\" class=\"btn btn-light\" on:click={cancelTestCase} data-bs-dismiss=\"modal\">{l.cancel}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <textarea id=\"special_module_user_xml\" class=\"h\"></textarea>\r\n    <Dialog bind:visible={state.remediationToggle} width={960} class=\"dialog bg-white\">\r\n        <div style=\"text-align: left;\">\r\n            <div class=\"font20\">{l.remediation}</div>\r\n        </div>\r\n        <div id=\"remediationModel\">\r\n            <center class=\"mt-xl\">\r\n                <Loader size = {60} thickness = {3} />\r\n                <h4>{l.calculate_answer}<br/>{l.please_wait}</h4>\r\n            </center>\r\n        </div>\r\n        <Snackbar\r\n            bind:visible={state.snackback} \r\n            bg=\"#333\" \r\n            bottom={true}  \r\n            timeout={3000} \r\n            style=\"position:fixed; bottom:50px\"\r\n        >\r\n            {message}\r\n        </Snackbar>\r\n        <div slot=\"footer\" class=\"svelteFooter\">\r\n            <Button\r\n                raised={true}\r\n                on:click = {()=>{ state.remediationToggle = false}}\r\n                class=\"bg-light\"\r\n            >\r\n                {l.cancel}\r\n            </Button>\r\n        </div>\r\n    </Dialog>\r\n    <input type=\"hidden\" id=\"ansModeAnswer\" value=\"\" />\r\n</div>\r\n<svelte:window on:keyup={onkeyTouch}  />"],"names":["ctx","database","l","zero","resetDB","database_modal_open","bind","this","databases","length","charAt","toUpperCase","slice","window","itemUrl","cancel","calculate_answer","please_wait","snackback","remediation","lang_type","toTitleCase","add_testcase","run","preBlockShow","enableline","postBlockShow","output","is_graph","ignore_error","ignore_formatting","ignore_reset_db","pre_tag","select_case_match","open","remediationToggle","input","testcases","setting","case_insensitive","partial_matching","special_char","submit","pre_code","separate_by_quote","write_function_here","postcode","seperate_by_enter_key","is_pre_tag","minus_1","testcase_sensitive","str","stringBetween","data","str_1","str_2","regEx","RegExp","matchedStr","exec","findAttribute","XML","attr","tag","getSectionLine","lineNo","section","pre","editor","console","warn","post","preEditor","postEditor","toggleMode","xml","getChildXml","setInlineEditor","editorState","evalpro_url","location","origin","replace","all_databases","mssql","sql","psql","sort","message","isPreview","aXml","language","windowHtml","showPre","parseInt","showPost","showEditor","qxml","xmlArr","defaultStartXml","currentDB","lastTestCaseHtml","marker","preData","postData","langArr","state","QXML","writable","uxml","module","toggle","titleData","stemData","remediationData","perspective","partial_match","ignore_special_char","preShow","postShow","editorShow","enableLines","subscribe","items","toggleDB","val","db_changed","addPreBlock","isPreBlockShow","AH","selectAll","minHeight","height","display","setSize","show","setInterval","refresh","setTimeout","clearInterval","addPostBlock","isPostBlockShow","showHideInputBlock","lang","select","parent","renderCodeMirror","params_config","lineNumbers","mode","styleActiveLine","autoCloseBrackets","lineWrapping","scrollbarStyle","matchBrackets","tabSize","gutters","CodeMirror","fromTextArea","document","getElementById","parseXML","on","event","line","saveEvalProAnswer","generateXml","forEach","clear","createEditor","setDefaultXML","setOption","[object Object]","command","spaces","Array","getOption","join","replaceSelection","prevElm","target","remove","insert","disabled","innerHTML","ajax","url","themeUrl","type","in_editor","user_guid","db_name","then","catch","rqst","err","onbeforeunload","editorData","setValue","trim","preAttr","postAttr","editorAttr","currDB","querySelector","value","showDb","isFormatted","codeXml","getValue","post_code","getCodeXml","testCasesXml","uXml","setTestCase","testcaseString","sample","inpValue","test","indexOf","caseStacks","split","item","caseArr","addMore","bindBtns","querySelectorAll","removeEventListener","deleteCase","addEventListener","index","inp","oup","i","caseStack","createElement","isSql","className","children","case_insensitive_checked","ignore_special_char_checked","partial_match_checked","testcase","input_seperated_comma","appendChild","alert","getParent","parentElement","counter","_elm","textContent","onMount","match","toString","caseSensitive","specialChar","partialMatch","dataType","addScript","listen","response","JSON","parse","answerCheckEvalpro","beforeUpdate","empty","tag_player","find","action","actionData","getAttribute","setAttribute","preview","enableBsAll","container","tick","get_ucsyntax","prettyPrint","previousCode","$usedLine","disableline","lineCount","error","log","review","$lineEnable","a","b","$line","j","$i","$k","addLineClass","push","markText","ch","inclusiveRight","inclusiveLeft","readOnly","$l","collapsed","disableLine","authoring","toTextArea","privXML","preBlockHeight","postBlockHeight","editorBlockHeight","adjustEditorBlockUI","escape","symbol","term_lang","xml_group","Object","keys","newXML","raw","code","repltype","stdin","run_code","res","color","background","status_message","includes","image_url","lang_name","uXML","id_date","Date","getTime","errorMsg","showpre","showpost","showeditor","substring","isNaN","substr","is_module","is_multiple_line","parseLineNumber","stderr","tempXml","case_match_insensitive","caseInsensitive","nodes","points","checked","checkCaseInsensitive","casematch_specail_char","node","point","checkSpecialChar","partialmatch","matchPartial","match_node","child","checkMatchPartial","settings","e","testCasesValue","ctrlKey","shiftKey","keyCode","focus","click"],"mappings":"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"}