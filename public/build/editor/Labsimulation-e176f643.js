
(function(l, r) { if (l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (window.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(window.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, g as globals, R as Snackbar, P as binding_callbacks, Q as bind, O as Dialog, v as validate_slots, o as onMount, Z as tick, a3 as onDestroy, A as AH, y as language, L as beforeUpdate, ag as tag_player, a7 as afterUpdate, U as Button, V as Checkbox, af as Textfield, w as writable, a8 as Loader, e as element, f as space, c as create_component, j as attr_dev, k as add_location, l as set_style, n as insert_dev, p as append_dev, m as mount_component, W as add_flush_callback, t as transition_in, a as transition_out, x as detach_dev, b as destroy_component, h as text, F as set_data_dev, B as noop } from './main-ad414885.js';
import { U as UCLIB_1 } from './UCLIB-99785e0e.js';

/* clsSMLabSimulation/Labsimulation.svelte generated by Svelte v3.29.0 */

const { console: console_1 } = globals;
const file = "clsSMLabSimulation/Labsimulation.svelte";

// (342:0) <Snackbar  bind:visible={state.snackback}  timeout={10} >
function create_default_slot_2(ctx) {
	let t;

	const block = {
		c: function create() {
			t = text(/*message*/ ctx[0]);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*message*/ 1) set_data_dev(t, /*message*/ ctx[0]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_2.name,
		type: "slot",
		source: "(342:0) <Snackbar  bind:visible={state.snackback}  timeout={10} >",
		ctx
	});

	return block;
}

// (352:1) <div slot="title" style="text-align: left;">
function create_title_slot(ctx) {
	let div0;
	let div1;

	const block = {
		c: function create() {
			div0 = element("div");
			div1 = element("div");
			div1.textContent = "Review";
			add_location(div1, file, 352, 2, 14159);
			attr_dev(div0, "slot", "title");
			set_style(div0, "text-align", "left");
			add_location(div0, file, 351, 1, 14112);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div0, anchor);
			append_dev(div0, div1);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div0);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_title_slot.name,
		type: "slot",
		source: "(352:1) <div slot=\\\"title\\\" style=\\\"text-align: left;\\\">",
		ctx
	});

	return block;
}

// (362:2) <Button    unelevated={true}             outlined={true}    color="primary"    on:Click={()=>{ state.remediationToggle = false }}   >
function create_default_slot_1(ctx) {
	let t_value = language.done + "";
	let t;

	const block = {
		c: function create() {
			t = text(t_value);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t, anchor);
		},
		p: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot_1.name,
		type: "slot",
		source: "(362:2) <Button    unelevated={true}             outlined={true}    color=\\\"primary\\\"    on:Click={()=>{ state.remediationToggle = false }}   >",
		ctx
	});

	return block;
}

// (361:1) <div slot="footer" class="svelteFooter">
function create_footer_slot(ctx) {
	let div;
	let button;
	let current;

	button = new Button({
			props: {
				unelevated: true,
				outlined: true,
				color: "primary",
				$$slots: { default: [create_default_slot_1] },
				$$scope: { ctx }
			},
			$$inline: true
		});

	button.$on("Click", /*Click_handler*/ ctx[6]);

	const block = {
		c: function create() {
			div = element("div");
			create_component(button.$$.fragment);
			attr_dev(div, "slot", "footer");
			attr_dev(div, "class", "svelteFooter");
			add_location(div, file, 360, 1, 14347);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			mount_component(button, div, null);
			current = true;
		},
		p: function update(ctx, dirty) {
			const button_changes = {};

			if (dirty & /*$$scope*/ 8388608) {
				button_changes.$$scope = { dirty, ctx };
			}

			button.$set(button_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(button.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(button.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			destroy_component(button);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_footer_slot.name,
		type: "slot",
		source: "(361:1) <div slot=\\\"footer\\\" class=\\\"svelteFooter\\\">",
		ctx
	});

	return block;
}

// (348:0) <Dialog       bind:visible={state.remediationToggle}  width={450} >
function create_default_slot(ctx) {
	let t0;
	let div;
	let center;
	let loader;
	let t1;
	let h4;
	let t2_value = language.calculate_answer + "";
	let t2;
	let br;
	let t3;
	let t4_value = language.please_wait + "";
	let t4;
	let t5;
	let current;
	loader = new Loader({ props: { size: 60 }, $$inline: true });

	const block = {
		c: function create() {
			t0 = space();
			div = element("div");
			center = element("center");
			create_component(loader.$$.fragment);
			t1 = space();
			h4 = element("h4");
			t2 = text(t2_value);
			br = element("br");
			t3 = space();
			t4 = text(t4_value);
			t5 = space();
			add_location(br, file, 357, 27, 14299);
			add_location(h4, file, 357, 3, 14275);
			attr_dev(center, "class", "mt-xl");
			add_location(center, file, 355, 2, 14225);
			attr_dev(div, "id", "remediationModel");
			add_location(div, file, 354, 1, 14195);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, div, anchor);
			append_dev(div, center);
			mount_component(loader, center, null);
			append_dev(center, t1);
			append_dev(center, h4);
			append_dev(h4, t2);
			append_dev(h4, br);
			append_dev(h4, t3);
			append_dev(h4, t4);
			insert_dev(target, t5, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(loader.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(loader.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(div);
			destroy_component(loader);
			if (detaching) detach_dev(t5);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_default_slot.name,
		type: "slot",
		source: "(348:0) <Dialog       bind:visible={state.remediationToggle}  width={450} >",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let div1;
	let center;
	let div0;
	let iframe;
	let iframe_allowfullscreen_value;
	let iframe_webkitallowfullscreen_value;
	let iframe_mozallowfullscreen_value;
	let t0;
	let input0;
	let t1;
	let input1;
	let t2;
	let button;
	let t3;
	let snackbar;
	let updating_visible;
	let t4;
	let dialog;
	let updating_visible_1;
	let current;

	function snackbar_visible_binding(value) {
		/*snackbar_visible_binding*/ ctx[5].call(null, value);
	}

	let snackbar_props = {
		timeout: 10,
		$$slots: { default: [create_default_slot_2] },
		$$scope: { ctx }
	};

	if (/*state*/ ctx[1].snackback !== void 0) {
		snackbar_props.visible = /*state*/ ctx[1].snackback;
	}

	snackbar = new Snackbar({ props: snackbar_props, $$inline: true });
	binding_callbacks.push(() => bind(snackbar, "visible", snackbar_visible_binding));

	function dialog_visible_binding(value) {
		/*dialog_visible_binding*/ ctx[7].call(null, value);
	}

	let dialog_props = {
		width: 450,
		$$slots: {
			default: [create_default_slot],
			footer: [create_footer_slot],
			title: [create_title_slot]
		},
		$$scope: { ctx }
	};

	if (/*state*/ ctx[1].remediationToggle !== void 0) {
		dialog_props.visible = /*state*/ ctx[1].remediationToggle;
	}

	dialog = new Dialog({ props: dialog_props, $$inline: true });
	binding_callbacks.push(() => bind(dialog, "visible", dialog_visible_binding));

	const block = {
		c: function create() {
			div1 = element("div");
			center = element("center");
			div0 = element("div");
			iframe = element("iframe");
			t0 = space();
			input0 = element("input");
			t1 = space();
			input1 = element("input");
			t2 = space();
			button = element("button");
			t3 = space();
			create_component(snackbar.$$.fragment);
			t4 = space();
			create_component(dialog.$$.fragment);
			attr_dev(iframe, "id", "authoringFrame");
			attr_dev(iframe, "title", "Hardware Lab");
			iframe.allowFullscreen = iframe_allowfullscreen_value = true;
			attr_dev(iframe, "webkitallowfullscreen", iframe_webkitallowfullscreen_value = true);
			attr_dev(iframe, "mozallowfullscreen", iframe_mozallowfullscreen_value = true);
			attr_dev(iframe, "height", "650");
			attr_dev(iframe, "width", "94%");
			attr_dev(iframe, "name", "authoringFrame");
			attr_dev(iframe, "data-authoring", "1");
			add_location(iframe, file, 324, 3, 13479);
			attr_dev(div0, "id", "frame");
			add_location(div0, file, 323, 2, 13459);
			add_location(center, file, 322, 1, 13448);
			attr_dev(input0, "type", "hidden");
			attr_dev(input0, "name", "labAnswer");
			attr_dev(input0, "id", "labAnswer");
			attr_dev(input0, "val", "0");
			add_location(input0, file, 337, 1, 13751);
			attr_dev(input1, "type", "hidden");
			attr_dev(input1, "id", "checkAnsStr");
			attr_dev(input1, "name", "checkAnsStr");
			input1.value = "";
			add_location(input1, file, 338, 1, 13816);
			attr_dev(button, "id", "clickRun");
			attr_dev(button, "name", "clickRun");
			set_style(button, "display", "none");
			add_location(button, file, 339, 1, 13885);
			attr_dev(div1, "id", "authoringArea");
			add_location(div1, file, 321, 0, 13422);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, div1, anchor);
			append_dev(div1, center);
			append_dev(center, div0);
			append_dev(div0, iframe);
			append_dev(div1, t0);
			append_dev(div1, input0);
			append_dev(div1, t1);
			append_dev(div1, input1);
			append_dev(div1, t2);
			append_dev(div1, button);
			insert_dev(target, t3, anchor);
			mount_component(snackbar, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(dialog, target, anchor);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			const snackbar_changes = {};

			if (dirty & /*$$scope, message*/ 8388609) {
				snackbar_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible && dirty & /*state*/ 2) {
				updating_visible = true;
				snackbar_changes.visible = /*state*/ ctx[1].snackback;
				add_flush_callback(() => updating_visible = false);
			}

			snackbar.$set(snackbar_changes);
			const dialog_changes = {};

			if (dirty & /*$$scope, state*/ 8388610) {
				dialog_changes.$$scope = { dirty, ctx };
			}

			if (!updating_visible_1 && dirty & /*state*/ 2) {
				updating_visible_1 = true;
				dialog_changes.visible = /*state*/ ctx[1].remediationToggle;
				add_flush_callback(() => updating_visible_1 = false);
			}

			dialog.$set(dialog_changes);
		},
		i: function intro(local) {
			if (current) return;
			transition_in(snackbar.$$.fragment, local);
			transition_in(dialog.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(snackbar.$$.fragment, local);
			transition_out(dialog.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div1);
			if (detaching) detach_dev(t3);
			destroy_component(snackbar, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(dialog, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function php_urlencode(str) {
	str = escape(str);

	return str.replace(/[*+\/@]|%20/g, function (s) {
		switch (s) {
			case "*":
				s = "%2A";
				break;
			case "+":
				s = "%2B";
				break;
			case "/":
				s = "%2F";
				break;
			case "@":
				s = "%40";
				break;
			case "%20":
				s = "+";
				break;
		}

		return s;
	});
}

// for getting the test form details
function getTestForm(xml, uxml, type) {
	switch (type) {
		case "17":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/labsimulation/?in_editor=1\"><textarea class=\"h\" name=\"qxml\" id=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\" id=\"uxml\">" + php_urlencode(uxml) + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
		case "18":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/relationship/?in_editor=1\"><textarea class=\"h\" name=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
		case "22":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/web/?in_editor=1\"><textarea class=\"h\" name=\"qxml\">" + xml + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
	}
}

// for getting the remediation form
function getRemediationForm(xml, uxml, type) {
	switch (type) {
		case "17":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/labsimulation/?in_editor=1\"><input type=\"hidden\" name=\"isReview\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\">" + php_urlencode(uxml) + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
		case "18":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/relationship/?in_editor=1\"><input type=\"hidden\" name=\"isReview\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
		case "22":
			return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/web/?in_editor=1\"><input type=\"hidden\" name=\"isReview\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + xml + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea><input type=\"hidden\" name=\"content_guid\" value=\"0\"/></form>";
	}
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Labsimulation", slots, []);
	let { editorState } = $$props;
	let { ucEditor } = $$props;
	let { showAns } = $$props;

	let xml = "",
		_module = "",
		qxml = "",
		uxml = "<smans></smans>",
		windowHtml = "",
		message = "";

	let state = {};

	let hdd = writable({
		xml: "",
		uxml: "",
		module: "0",
		stepIndex: 0,
		toggle: false,
		snackback: false,
		testMode: "0",
		remediationToggle: false,
		qxml: "",
		titleData: "",
		stemData: "",
		remediationData: "",
		remediationToggle: false,
		webAutogradeNotCalled: true,
		toggleMode: ""
	});

	const unsubscribe = hdd.subscribe(item => {
		$$invalidate(1, state = item);
	});

	// call before the rendering
	onMount(async () => {
		$$invalidate(1, state.xml = editorState.xml, state);
		let smxml = editorState.xml.match(/<smxml(.*?)>/gim);
		let type = smxml.toString().match(/type="(.*?)"|type='(.*?)'/gim);
		type = type.toString().replace(/type=|"/gim, "");
		$$invalidate(1, state.module = type, state);
		$$invalidate(2, editorState.activator = true, editorState);
		await tick();
		didMount();
	});

	// called immediately before the component is destroyed
	onDestroy(() => {
		AH.select("#testMode", "attr", { id: "answerCheck" }).innerHTML = language.remediation;
	});

	// call just after rendering
	function didMount() {
		setTimeout(
			function () {
				// getting the form details
				windowHtml = getAuthoringForm(editorState.xml, state.module.toString());

				// cheking the browser for the authoringFrame Height
				if ((/Edge/i).test(navigator.userAgent)) {
					AH.select("#authoringFrame", "attr", { height: window.innerHeight - 31 });
				} else {
					if ((/Mac/i).test(navigator.userAgent)) {
						AH.select("#authoringFrame", "attr", { height: window.innerHeight - 60 });
					} else {
						AH.select("#authoringFrame", "attr", { height: window.innerHeight + 12 });
					}
				}

				AH.select("#preview", "hide");

				// if find any form then remove from the authoring area
				AH.find("#authoringArea", "form", { action: "remove" });

				AH.insert("#authoringArea", windowHtml, "beforeend");

				setTimeout(
					function () {
						// submiting the form
						AH.find(document, "form[target=\"authoringFrame\"]").submit();

						$$invalidate(2, editorState.activator = true, editorState);
					},
					100
				);
			},
			200
		);

		// for answer checking
		AH.listen(document, "click", "#answerCheck", () => {
			remediationMode();
		});

		// for testmode
		AH.listen(document, "click", "#testMode", function () {
			testMode(1);
			AH.select("#testMode", "attr", { id: "answerCheck" }).innerHTML = language.remediation;
		});

		// for binding the onclick event in case of type 17 to show correct/incorrect
		setTimeout(
			function () {
				if (state.module == "17") {
					AH.bind("#authoringFrame", "load", () => {
						let frameDoc = AH.select("#authoringFrame").contentDocument;

						AH.listen(frameDoc, "click", "body", function (_this) {
							if (state.testMode == "1") {
								$$invalidate(0, message = AH.select("#labAnswer").value == "1"
								? "Correct"
								: "Incorrect");

								$$invalidate(1, state.snackback = true, state);
							}
						});

						$$invalidate(2, editorState.activator = false, editorState);
					});
				}
			},
			200
		);

		AH.listen("#clickRun", "click", () => {
			showAns(AH.select("#checkAnsStr").value);
		});
	}

	// calls whenever there is change in state or prop
	beforeUpdate(async () => {
		// checking for the remediation / test mode
		if (editorState.toggleMode != state.toggleMode) {
			if (editorState.toggleMode == true) {
				//Test Mode
				$$invalidate(1, state.testMode = 1, state);

				testMode(0);
			} else {
				//Authoring Mode
				$$invalidate(2, editorState.activator = true, editorState);

				$$invalidate(1, state.testMode = 0, state);
				AH.select("#headerTitle", "html", language.authoring);
				AH.select("#answerCheck", "css", { visibility: "hidden", display: "none" });
				AH.select("#authoringFrame", "attr", { "data-authoring": "1" });

				// if find any form then remove from the authoring area
				AH.find("#authoringArea", "form", { action: "remove" });

				// for getting the authoring form
				windowHtml = getAuthoringForm(state.qxml, state.module);

				AH.insert("#authoringArea", windowHtml, "beforeend");
				AH.selectAll("#tilteShow,#stemShow,#remediationShow", "remove");
				AH.select("#title", "html", state.titleData);
				AH.select("#stem", "html", state.stemData);
				AH.select("#remediation", "html", state.remediationData);
				AH.selectAll("#title,#stem,#remediation,#externalInputs", "show");
				unRenderPlayer();

				setTimeout(
					function () {
						// submit the authoring form details
						AH.select("form[target=\"authoringFrame\"]").submit();

						ucEditor.initEditor(false, "#authoringSection .ebook_item_text");
					},
					100
				);
			}

			$$invalidate(1, state.toggleMode = editorState.toggleMode, state);
		}
	});

	// getting the question xml
	function getQxml(fromRemed) {
		return new Promise((resolve, reject) => {
				try {
					let tempQxml;

					setTimeout(
						function () {
							if (state.module == "22") {
								tempQxml = fromRemed == "1"
								? state.qxml
								: AH.select("#authoringFrame")?.contentWindow.save_data?.();
							} else {
								tempQxml = fromRemed == "1"
								? state.qxml
								: AH.select("#authoringFrame")?.contentWindow.generateXML?.();
							}

							resolve(tempQxml);
						},
						50
					);
				} catch(error) {
					reject(error);
				}

				
			});
	}

	async function testMode(fromRemed) {
		$$invalidate(2, editorState.activator = true, editorState);
		AH.empty("#authoringFrame");

		// removing the form in the authoring area
		AH.find("#authoringArea", "form", { action: "remove" });

		//@Pradeep: calling havey process
		// getting the qxml
		qxml = await getQxml(fromRemed);

		console.log("qxml Fetched");

		// for rendering the player
		renderPlayer();

		AH.select("#headerTitle", "html", language.preview);

		AH.select("#answerCheck", "css", {
			visibility: "visible",
			display: "inline-block"
		});

		AH.select("#authoringFrame", "attr", { "data-authoring": "0" });

		// for getting the test form
		var testHtml = getTestForm(qxml, "<smans></smans>", state.module);

		// append in the authoring area
		AH.insert("#authoringArea", testHtml, "beforeend");

		AH.selectAll("#tilteShow, #stemShow, #remediationShow", "remove");

		// for getting the titleData, stemData , remediation data
		let titleData = AH.select("#title").innerHTML,
			stemData = AH.select("#stem").innerHTML,
			remediationData = AH.select("#remediation").innerHTML;

		AH.insert(AH.select(AH.empty("#title"), "hide"), "<div id=\"tilteShow\">" + titleData + "</div>", "afterend");
		AH.insert(AH.select(AH.empty("#stem"), "hide"), "<div id=\"stemShow\">" + stemData + "</div>", "afterend");
		AH.insert(AH.select(AH.empty("#remediation"), "hide"), "<div id=\"remediationShow\">" + remediationData + "</div>", "afterend");
		AH.select("#externalInputs", "hide");
		$$invalidate(1, state.qxml = qxml, state);
		$$invalidate(1, state.titleData = titleData, state);
		$$invalidate(1, state.stemData = stemData, state);
		$$invalidate(1, state.remediationData = remediationData, state);

		setTimeout(
			function () {
				// for submitting the form
				AH.selectAll("#stemShow .ebook_item_text, #remediationShow .ebook_item_text", "attr", { contenteditable: false });

				AH.select("form[target=\"authoringFrame\"]").submit();
			},
			200
		);
	}

	// getting the form details
	function getAuthoringForm(xml, type) {
		switch (type) {
			case "17":
				return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/labsimulation/?in_editor=1\"><input type=\"hidden\" name=\"authoringmode\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea></form>";
			case "18":
				return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/relationship/?in_editor=1\"><input type=\"hidden\" name=\"authoringmode\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + php_urlencode(xml) + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea></form>";
			case "22":
				return "<form method=\"post\" target=\"authoringFrame\" action=\"" + baseUrl + "sim/web/?in_editor=1\"><input type=\"hidden\" name=\"authoringmode\" value=\"1\"/><textarea class=\"h\" name=\"qxml\">" + xml + "</textarea><textarea class=\"h\" name=\"uxml\">" + uxml + "</textarea></form>";
		}
	}

	function unRenderPlayer() {
		AH.empty("#authoringDiv player");

		AH.find("#authoringDiv", "player", {
			action: "removeClass",
			actionData: "hidecontent"
		});

		AH.selectAll("#editor img").forEach(_this => {
			if (!_this.getAttribute("src").match(/\/\/s3.amazonaws.com\/jigyaasa_content_static/gm) && _this.getAttribute("id") != "editor-header-img") {
				_this.getAttribute("src", _this.getAttribute("src"));
			}
		});
	}

	function renderPlayer() {
		AH.empty("#authoringDiv player");
		tag_player(AH.select("#authoringDiv"));

		AH.find("#authoringDiv", "player", {
			action: "addClass",
			actionData: "hidecontent"
		});

		AH.selectAll("#editor img").forEach(_this => {
			if (!_this.getAttribute("src").match(/\/\/s3.amazonaws.com\/jigyaasa_content_static/gm) && _this.getAttribute("id") != "editor-header-img") {
				_this.getAttribute("src", "//s3.amazonaws.com/jigyaasa_content_static/" + _this.getAttribute("src"));
			}
		});
	}

	function reset() {
		switch (state.module) {
			case "18":
				AH.select("#authoringFrame").contentWindow.location.reload();
				break;
		}
	}

	// for getting uxml
	function remediationMode() {
		AH.select("#authoringFrame", "attr", { "data-authoring": "0" });

		try {
			if (state.module == "17") {
				// getting the uxml from the function getAnswerXMLLabsim() 
				uxml = AH.select("#authoringFrame").contentWindow.getAnswerXMLLabsim();

				uxml = uxml.uxml;
			} else if (state.module == "18") {
				uxml = AH.select("#authoringFrame").contentWindow.generateXML();
				uxml = JSON.stringify(uxml.xml);
			} else if (state.module == "22") {
				let tab_data = AH.select("#authoringFrame").contentWindow.webAutoEvaluate();

				if (tab_data) {
					$$invalidate(1, state.remediationToggle = true, state);
					$$invalidate(1, state.webAutogradeNotCalled = false, state);
					AH.select("#remediationModel", "html", tab_data);
					let answer = tab_data.replace(/\s=\s/gim, "=").match(/ans="(.*?)"/img);
					answer = answer ? answer.toString().replace(/ans=|"/img, "") : "";
					showAns(UCLIB_1.ucfirst(answer));
				}
			} else {
				uxml = AH.select("#authoringFrame").contentWindow.save_data();
			}
		} catch(err) {
			console.log(err);
		}

		if (state.webAutogradeNotCalled) {
			AH.find("#authoringArea", "form");

			// for getting the remediation form
			windowHtml = getRemediationForm(state.qxml, uxml, state.module);

			AH.insert("#authoringArea", windowHtml, "beforeend");

			setTimeout(
				function () {
					// submitting the form
					AH.select("form[target=\"authoringFrame\"]").submit();

					$$invalidate(2, editorState.activator = true, editorState);
				},
				100
			);
		}
	}

	const writable_props = ["editorState", "ucEditor", "showAns"];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console_1.warn(`<Labsimulation> was created with unknown prop '${key}'`);
	});

	function snackbar_visible_binding(value) {
		state.snackback = value;
		$$invalidate(1, state);
	}

	const Click_handler = () => {
		$$invalidate(1, state.remediationToggle = false, state);
	};

	function dialog_visible_binding(value) {
		state.remediationToggle = value;
		$$invalidate(1, state);
	}

	$$self.$$set = $$props => {
		if ("editorState" in $$props) $$invalidate(2, editorState = $$props.editorState);
		if ("ucEditor" in $$props) $$invalidate(3, ucEditor = $$props.ucEditor);
		if ("showAns" in $$props) $$invalidate(4, showAns = $$props.showAns);
	};

	$$self.$capture_state = () => ({
		onMount,
		beforeUpdate,
		afterUpdate,
		tick,
		onDestroy,
		Button,
		Dialog,
		Checkbox,
		Snackbar,
		Textfield,
		tag_player,
		writable,
		l: language,
		Loader,
		UCLIB: UCLIB_1,
		AH,
		editorState,
		ucEditor,
		showAns,
		xml,
		_module,
		qxml,
		uxml,
		windowHtml,
		message,
		state,
		hdd,
		unsubscribe,
		didMount,
		php_urlencode,
		getQxml,
		testMode,
		getAuthoringForm,
		getTestForm,
		getRemediationForm,
		unRenderPlayer,
		renderPlayer,
		reset,
		remediationMode
	});

	$$self.$inject_state = $$props => {
		if ("editorState" in $$props) $$invalidate(2, editorState = $$props.editorState);
		if ("ucEditor" in $$props) $$invalidate(3, ucEditor = $$props.ucEditor);
		if ("showAns" in $$props) $$invalidate(4, showAns = $$props.showAns);
		if ("xml" in $$props) xml = $$props.xml;
		if ("_module" in $$props) _module = $$props._module;
		if ("qxml" in $$props) qxml = $$props.qxml;
		if ("uxml" in $$props) uxml = $$props.uxml;
		if ("windowHtml" in $$props) windowHtml = $$props.windowHtml;
		if ("message" in $$props) $$invalidate(0, message = $$props.message);
		if ("state" in $$props) $$invalidate(1, state = $$props.state);
		if ("hdd" in $$props) hdd = $$props.hdd;
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		message,
		state,
		editorState,
		ucEditor,
		showAns,
		snackbar_visible_binding,
		Click_handler,
		dialog_visible_binding
	];
}

class Labsimulation extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, { editorState: 2, ucEditor: 3, showAns: 4 });

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Labsimulation",
			options,
			id: create_fragment.name
		});

		const { ctx } = this.$$;
		const props = options.props || {};

		if (/*editorState*/ ctx[2] === undefined && !("editorState" in props)) {
			console_1.warn("<Labsimulation> was created without expected prop 'editorState'");
		}

		if (/*ucEditor*/ ctx[3] === undefined && !("ucEditor" in props)) {
			console_1.warn("<Labsimulation> was created without expected prop 'ucEditor'");
		}

		if (/*showAns*/ ctx[4] === undefined && !("showAns" in props)) {
			console_1.warn("<Labsimulation> was created without expected prop 'showAns'");
		}
	}

	get editorState() {
		throw new Error("<Labsimulation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set editorState(value) {
		throw new Error("<Labsimulation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get ucEditor() {
		throw new Error("<Labsimulation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set ucEditor(value) {
		throw new Error("<Labsimulation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get showAns() {
		throw new Error("<Labsimulation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set showAns(value) {
		throw new Error("<Labsimulation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

export default Labsimulation;
//# sourceMappingURL=Labsimulation-e176f643.js.map
