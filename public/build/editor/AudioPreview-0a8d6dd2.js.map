{"version":3,"file":"AudioPreview-0a8d6dd2.js","sources":["../../../clsSMAudioRecorder/AudioPreview.svelte"],"sourcesContent":["<!--\n *  File Name   : AudioPreview.svelte\n *  Description : Container for all AudioRecorder Preview Module\n *  Author      : Rashmi Kumari\n *  Package     : pe-items\n *  Last update : 15-Feb-2021\n *  Last Updated By : Rashmi Kumari\n-->\n<script>\n    import { onMount, afterUpdate } from \"svelte\";\n    import { XMLToJSON, AH, onUserAnsChange} from '../helper/HelperAI.svelte';\n    import ItemHelper from '../helper/ItemHelper.svelte';\n    import l from '../src/libs/editorLib/language';\n    import \"./css/AudioStyle.min.css\";\n    export let xml;\n    export let uxml;\n    export let showAns;\n    export let isReview;\n    export let editorState;\n\n    let recognition;\n    let synth;\n    let previewResetClicked = 'no';\n    let areaLabelForPreviewStopButton = \"Play Audio\";\n    let areaLabelForPreviewModalContent;\n    let areaLabelForPreviewRecordButton = \"Start Recording\";\n    let previewTimeForRecording = 15;\n    let previewManageTimer;\n    let state = {\n        disabled: true,\n        cdata: '',\n        language: '',\n        correctAns: '',\n        xml: '',\n        status: '',\n        pointerEvents: \"auto\",\n        isReset: true,\n        showTranscript: false,\n        counter: 0,\n    }\n\n    // Called once throughout the programm execution\n    onMount(() => {\n        if (!(window.webkitSpeechRecognition || window.SpeechRecognition)) {\n            // shows the warning message that your browser does not support the speechRecognition\n            AH.alert(l.browser_support_msg);\n        }\n        if (xml != state.xml) {\n            // sets the state xml\n            state.xml = xml;\n            /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\n            resetValue();\n            // load the module according to the value of xml\n            loadModule(xml);\n        }\n    })\n\n    // Called every time when any state gets changed\n    $: {\n        loadModule(xml);\n\t\tif (isReview) {\n            setReview();\n\t\t} else {\n            unsetReview();\n        }\n\t}\n\n    // load the module according to the value of xml\n    function loadModule(loadXml) {\n        // contains json data of xml\n        let newXml = XMLToJSON(loadXml);\n        // parses the xml data and update the xml\n        parseXMLPreview(newXml);\n    }\n\n    // parses the xml data and update the xml\n    function parseXMLPreview(MYXML) {\n        try {\n            // used to set the value of the state language from the value of language key of xml json\n            state.language = MYXML.smxml._language,\n            // used to set the value of the state cdata from the value of cdata key of xml json\n            state.correctAns = MYXML.smxml.__cdata,\n            // used to set the value of the state showTranscript from the value of showTranscript key of xml json\n            state.showTranscript = ((MYXML.smxml._showTranscript == 'true') ? true: false);\n            if (uxml) {\n                // parses the user answer xml and update the xml\n                parseUserAns(uxml);\n            }\n        } catch(event) {\n            console.warn({\n                'error': event.message,\n                'function name': 'parseXMLPreview',\n                'File name': 'AudioPreview.svelte'\n            });\n        }\n    }\n\n    // parses the user answer xml and update the xml\n    function parseUserAns(userAns) {\n        // contains json data of user answer xml\n        let MYXML = XMLToJSON(userAns);\n        // used to set the value of the state language from the value of language key of the user answer xml json\n        state.language = MYXML.smans._language;\n        // used to set the value of the state cdata from the value of cdata key of the user answer xml json\n        state.cdata = MYXML.smans.__cdata;\n        // used to set the value of the state status from the value of status key of the user answer xml json\n        state.status = MYXML.smans._status;\n        // used to sets the value of the state disabled to false if the value of 'status' key of the user answer xml json is 'recordingStopped' otherwise 'true'\n        state.disabled = ((MYXML.smans._status == 'recordingStopped') ? false: true);\n        // used to set the value of the state isReset from the value of isReset key of user answer xml json\n        state.isReset = ((MYXML.smans._isReset == 'true') ? true: false);\n        // used to set the value of the state showTranscript from the value of showTranscript key of the user answer xml json\n        state.showTranscript = ((MYXML.smans._showTranscript == 'true') ? true: false);\n    }\n\n    /* reset the recorded data and disabled the reset and play button and updates the xml and re-render the component */\n    function resetValue() {\n        state.disabled = true;\n        state.cdata = '';\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n    }\n\n    // reset the previous recorded data\n    function manageData() {\n        // when reset modalbox open after click on reset button\n        if (previewResetClicked == 'yes') {\n            // reset the previously recorded data\n            resetAudioData();\n            previewResetClicked = 'no';\n        } else {\n            // when reset modalbox open after click on record button\n            state.cdata = '',\n            state.disabled = true,\n            state.status = '',\n            state.pauseRecording = ''\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n            let manage_data_timer = setTimeout(function() {\n                // called for start the recording\n                startRecording();\n                // clear the timeout\n                clearTimeout(manage_data_timer);\n            }, 120);\n        }\n    }\n\n    // disabled the reset and play button and blanks the value of cdata and xml of state\n    function resetAudioData() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        if (state.status == 'recording') {\n            /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n            recognition.stop();\n        }\n        state.cdata = '';\n        state.disabled = true;\n        state.xml = '';\n        state.status = '';\n        state.isReset = true;\n        // clears the timeout which is started when recording stared\n        clearTimeout(previewManageTimer);\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n        previewCheckState();\n    }\n\n    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n    function previewCheckState() {\n        setTimeout(function() {\n            let uXml = '<smans type=\"43\" name=\"AudioRecorder\" disabled=\"' + state.disabled + '\" status=\"' + state.status + '\" language=\"' + state.language + '\" isReset=\"' + state.isReset + '\" showTranscript=\"' + state.showTranscript + '\"><![CDATA[' + state.cdata + ']]></smans>';\n            AH.select(\"#special_module_user_xml\").value = uXml;\n            ISSPECIALMODULEUSERXMLCHANGE = 1;\n            // stores user answer xml data in uaXML variable of window object to access it globally\n            uxml = AH.select(\"#special_module_user_xml\").value;\n            // used for screen reader to read the message when user reached on play button\n            areaLabelForPreviewStopButton = AH.select('#stopButtonTooltip').getAttribute('data-original-title');\n            // used for screen reader to read the message when user reached on record button\n            areaLabelForPreviewRecordButton = AH.select('#recordButtonTooltip').getAttribute('data-original-title');\n            // used for screen reader to read the message when user open the reset modalbox\n            areaLabelForPreviewModalContent = AH.select('#previewDialogBody').innerText;\n            if (state.correctAns.trim() != '') {\n                // check the answer\n                checkAns();\n            }\n        }, 100);\n    }\n\n    // stops capturing incoming audio\n    function stopRecording() {\n        // handles with gif of recording and play and icon of record button\n        manageStopStatus();\n        clearTimeout(previewManageTimer);\n        state.status = 'recordingStopped';\n        state.disabled = false;\n        /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n        previewCheckState();\n        // hides recording gif\n        AH.selectAll('.previewRecordingOn', 'addClass', 'h');\n        // shows the initial state image\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\n        /* stops the speech recognition service from listening to incoming audio, and attempts to return a SpeechRecognitionResult using the audio captured so far. */\n        recognition.stop();\n    }\n\n    // ends recording after 15 sec\n    function previewManageTime() {\n        previewTimeForRecording = previewTimeForRecording - 1;\n        state.counter = state.counter + 1;\n        previewManageTimer = setTimeout(function() {\n            if (previewTimeForRecording > 0) {\n                // calls again the method previewManageTime for counting the second value\n                previewManageTime();\n            } else {\n                // stops the recording\n                stopRecording();\n            }\n        }, 1000);\n    }\n\n    // start the listening to incoming audio, enables reset button, stores the recognised data to cdata state and update the xml \n    function dictate() {\n        // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n        isSpeechRecognitionSupported();\n        /* starts the speech recognition service listening to incoming audio with intent to recognize grammars associated with the current SpeechRecognition. */\n        recognition.start();\n        // enables reset button\n        AH.select('#preview_container #resetButton').disabled = false;\n        // hides the initial state image of the audio container and play gif\n        AH.selectAll('.previewAudioPlaying, .previewInitialState', 'addClass', 'h');\n        // shows recording gif\n        AH.selectAll('.previewRecordingOn', 'removeClass', 'h');\n        /* The onresult property of the SpeechRecognition interface represents an event handler that will run when the speech recognition service returns a result — a word or phrase has been positively recognized and this has been communicated back to the app */\n        recognition.onresult = (event) => {\n            let speechToText = '';\n            for (let index_no = 0; index_no < event.results.length; index_no = index_no + 1) {\n                speechToText += event.results[index_no][0].transcript;\n            }\n            // sets the value of textual data into cdata state that is recognised by SpeechRecognition\n            state.cdata = speechToText.trim();\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n        }\n    }\n\n    // handles with gif of recording and play and icon of record button\n    function manageStopStatus() {\n        // hides the gif of recording and playing\n        AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\n        // shows the initial state image of the audio container\n        AH.selectAll('.previewInitialState', 'removeClass', 'h');\n        // removes the stop icon from recording button and adds start recording icon\n        AH.selectAll('#preview_recordButton span', 'removeClass', 'icomoon-24px-stop');\n        AH.selectAll('#preview_recordButton span', 'addClass', ['icomoon-circle-2', 'text-danger']);\n    }\n\n    // speak the text after defining some properties value and adding event\n    function isSpeechSynthesisSupported() {\n        // Returns a new SpeechSynthesisUtterance object instance\n        let utterThis = new SpeechSynthesisUtterance(state.cdata);\n        // array of available voices\n        let voiceForSpeech = synth.getVoices();\n        // sets the voice name according to the value of language state\n        let voice_name = ((state.language == 'de-DE') ? \"Google Deutsch\" : (state.language == 'fr-FR') ? \"Google français\" : (state.language == 'es-ES') ? \"Google español\" : (state.language == 'hi-IN') ? \"Google हिन्दी\": (state.language == 'ja-JP') ? \"Google 日本語\": (state.language == 'ko-KR') ? \"Google 한국의\": (state.language == 'it-IT') ? \"Google italiano\": \"Google US English\");\n        // event listener fired when the utterance has finished being spoken.\n        utterThis.addEventListener('end', function() {\n            // hides the gif of recording and play\n            AH.selectAll('.previewAudioPlaying, .previewRecordingOn', 'addClass', 'h');\n            // shows the initial state image of the audio container\n            AH.selectAll('.previewInitialState', 'removeClass', 'h');\n            // enables the play button\n            state.disabled = false;\n            /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n            previewCheckState();\n            // removes all utterances from the utterance queue.\n            synth.cancel();\n        });\n        for (let index_no = 0; index_no < voiceForSpeech.length; index_no = index_no + 1) {\n            if (voiceForSpeech[index_no].name == voice_name) {\n                //  sets the voice that will be used to speak the utterance.\n                utterThis.voice = voiceForSpeech[index_no];\n                // sets the pitch at which the utterance will be spoken at.\n                utterThis.pitch = 1;\n                // sets the speed at which the utterance will be spoken at.\n                utterThis.rate = 1;\n                // sets the language of the utterance\n                utterThis.lang = state.language;\n                // adds an utterance to the utterance queue; it will be spoken when any other utterances queued before it have been spoken.\n                synth.speak(utterThis);\n                break;\n            }\n        }\n    }\n\n    // starts the recording\n    function startRecording() {\n        switch(state.status) {\n            case 'recording':\n                // stops the recording when stop recording button clicked\n                stopRecording();\n                break;\n            case 'recordingStopped':\n                // for show the reset modalbox when start recording button clicked and recording is done previously\n                AH.getBS('#preview_confirm_modal','Modal').show();\n                // focus on reset modalbox for screen reader purpose\n                AH.select('.modal-body').focus();\n                break;\n            default:\n                dictate();\n                state.status = 'recording',\n                state.isReset = false,\n                // used for count the second after recording start\n                state.counter = 0;\n                // used for automatically end the recording after 15 sec\n                previewTimeForRecording = 15;\n                // ends recording after 15 sec\n                previewManageTime();\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                previewCheckState();\n                // adds the stop recording icon to record button\n                AH.selectAll('#preview_recordButton span', 'removeClass', ['icomoon-circle-2', 'text-danger']);\n                AH.selectAll('#preview_recordButton span', 'addClass', 'icomoon-24px-stop');\n        }\n    }\n\n    // checks if SpeechRecognition supported then defines some properties value of SpeechRecogniton and adds  some event listener as well\n    function isSpeechRecognitionSupported() {\n        if (window.webkitSpeechRecognition || window.SpeechRecognition) {\n            window.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n            // creates new recognition object\n            recognition = new SpeechRecognition();\n            //Controls whether continuous results are returned for each recognition\n            recognition.continuous = true;\n            // returns interim results \n            recognition.interimResults = true;\n            //  sets the language of the current SpeechRecognition\n            recognition.lang = state.language;\n            // used for globally access the recogniton \n            window.recognitionData = recognition;\n            recognition.addEventListener('end', function() {\n                if (!state.isReset) {\n                    // clears the timeout which is started when recording stared\n                    clearTimeout(previewManageTimer);\n                    // shows message that recording ended\n                    AH.alert(l.recording_ended);\n                    // handles with gif of recording and play and icon of record button\n                    manageStopStatus();\n                    // shows the initial state image of the audio container\n                    AH.selectAll('.previewInitialState', 'removeClass', 'h');\n                    state.status = 'recordingStopped';\n                    state.disabled = false;\n                    /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                    previewCheckState();\n                }\n            });\n        } else {\n            // shows the message that SpeechRecognition not supported\n\t\t\tAH.alert(l.browser_support_msg);\n            return;\n        }\n    }\n\n    //check that reset button is clicked or not\n    function setData() {\n        previewResetClicked = 'yes';\n    }\n\n    // reset the data of 'resetClicked' to 'no' when no button is clicked in modalbox\n    function modalResponse() {\n        previewResetClicked = 'no';\n    }\n\n    // called for speak the recorded text\n    function playRecording() {\n        if (window.speechSynthesis) {\n            synth = window.speechSynthesis;\n            if (state.cdata != '') {\n                // hides the initial state image of the audio container and recording gif\n                AH.selectAll('.previewRecordingOn, .previewInitialState', 'addClass', 'h');\n                // shows the play gif\n                AH.selectAll('.previewAudioPlaying', 'removeClass', 'h');\n                state.disabled = true;\n                /* used for check the answer, store the user answer xml and defines the title for stop button, record button and reset modal box for use it when screen reader used */\n                previewCheckState();\n                // removes all utterances from the utterance queue.\n                //synth.cancel();\n                // speak the recorded text after defining some properties value and adding event\n                isSpeechSynthesisSupported();\n            } else {\n                // hides the play and recording gif\n                AH.selectAll('.previewRecordingOn, .previewAudioPlaying', 'addClass', 'h');\n                // shows the initial state image of the audio container\n                AH.selectAll('.previewInitialState', 'removeClass', 'h');\n                // message for no data recorded\n\t\t\t\tAH.alert(l.no_data_msg);\n            }\n        } else {\n            // message for not supported speechSynthesis\n\t\t\tAH.alert(l.browser_support_msg);\n            return;\n        }\n    } \n\n    // checks the answer\n    function checkAns() {\n        let ans = \"\";\n        if  (state.correctAns.trim() != '') {\n            if (state.correctAns.toLowerCase() == state.cdata.toLowerCase()) {\n                // label of message\n                ans = l.correct;\n                AH.select(\"#answer\").checked = true;\n                state.useransstatus = true;\n            } else {\n                // label of message\n                ans = l.incorrect;\n                AH.select(\"#answer\").checked = false;\n                state.useransstatus = false;\n            }\n            // shows the answer\n            if (editorState) {\n                showAns(ans);\n            } else {\n                onUserAnsChange({uXml: uxml, ans: ans});\n            }\n        } else {\n            // message, no data found for match the answer\n            AH.alert(l.matching_msg);\n            return;\n        }\n    }\n    let answer_status;\n    function setReview() {\n        isReview = true;\n        state.pointerEvents = \"none\";\n        answer_status = true;\n        // check the answer\n        checkAns();\n        if (state.useransstatus == true) {\n            // change the user answer data container's text and border color to #50af50\n            AH.setCss('#preview_data_container', {'color': '#50af50'});\n        } else {\n            // change the user answer data container's text and border color to #c30f0f\n            AH.setCss('#preview_data_container', {'color': '#c30f0f'});\n        }\n        /* hides the answer container in which correct answer will be seen after click on correct answer button */\n        AH.selectAll(AH.parent(AH.selectAll('#preanswer_data_container')), 'addClass', 'h');\n        /* shows the answer container in which user answer will be seen after click on your answer button */\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'removeClass', 'h');\n    }\n\n    /* allows the user to perform the task, shows the recording end notification message, hides correct and your answer button */\n    function unsetReview() {\n        isReview = false;\n        state.pointerEvents = \"auto\";\n        answer_status = false;\n        // hides both container in which your answer and correct answer data will be seen\n        AH.selectAll(AH.parent(AH.selectAll('#preview_data_container')), 'addClass', 'h');\n    }\n\n    function handleReviewMode(mode) {\n        if(mode == 'c') {\n            answer_status = false;\n        } else if (mode == 'u') {\n            answer_status = true;\n        }\n    }\n</script>\n<!-- <link onload=\"this.rel='stylesheet'\" rel=\"preload\" as=\"style\" href={window.baseUrlTheme + \"clsSMAudioRecorder/css/AudioStyle.min.css\"} /> -->\n<div id=\"preview_container\" class=\"container\">\n    <div class=\"row\">\n        <ItemHelper \n            on:setReview = {setReview}\n            on:unsetReview = {unsetReview}\n            reviewMode={isReview}\n            handleReviewClick = {handleReviewMode}\n        />\n        {#if isReview}\n            {#if answer_status != true}\n                <div class=\"col-12 py-3\">\n                    <textarea \n                        id=\"preanswer_data_container\" \n                        name=\"cdata\" \n                        class=\"w-100 form-control border-success typeCorrect\" \n                        rows=\"2\" \n                        value={state.correctAns} \n                        readOnly=\"readonly\" \n                        tabindex=\"0\" \n                        aria-label=\"correct Answer is {state.correctAns}\"></textarea>\n                </div>\n            {:else}\n                <div class=\"col-12 py-3\">\n                    <textarea \n                        id=\"preview_data_container\" \n                        name=\"cdata\" \n                        class=\"w-100 form-control {(state.useransstatus == true) ? 'border-success typeCorrect' : 'border-danger typeIncorrect' }\" \n                        rows=\"2\" \n                        value={state.cdata} \n                        readOnly=\"readonly\" \n                        tabindex=\"0\" \n                        aria-label=\"Your answer is {state.cdata} which is {((state.cdata.toLowerCase().trim() == state.correctAns.toLowerCase().trim()) ? \"Correct\": \"Incorrect\")}\"></textarea>\n                </div>\n            {/if}\n            <div class=\"col-12 pb-3\" tabindex=\"0\" aria-label=\"matching is case insensitive\">\n                <b class=\"noteColor bolder\">{l.note_label}</b>\n                {l.insensitive_message}\n            </div>\n        {:else}\n            <div class=\"col-12 pb-3\">\n                <div class=\"\" tabindex=\"0\" aria-label=\"Recording will end after 15 sec\">\n                    <b class=\"noteColor bolder\">{l.note_label}</b>\n                    {l.recording_warning}\n                </div>\n            </div>\n            {#if state.showTranscript == true}\n                <div class=\"col-12 pb-3\">\n                    <div><label for=\"preview_show_transcript\"><b>{l.spoken_label}</b></label></div>\n                    <textarea id=\"preview_show_transcript\" name=\"preview_show_transcript\" class=\"w-100 form-control\" rows=\"2\" value={state.cdata} readOnly=\"readonly\" tabindex=\"0\" aria-label={l.spoken_label + \" \" + ((state.cdata.trim() != \"\") ? state.cdata.trim(): \"Nothing\")}></textarea>\n                </div>\n            {/if}\n            <div class=\"col-12 col-md-8 offset-md-2\">\n                <div class=\"border rounded shadow-sm\">\n                    <div class=\"p-2 tokenfield bg-light mb-3\" aria-label=\"Audio Recorder\" tabindex=\"0\"><b>{l.audio_recorder}</b></div>\n                    <div class=\"mx-auto text-danger recording_status initialState mb-3 d-flex mx-auto\">\n                        <span class=\"align-self-center mx-auto previewInitialState tokenfield\" aria-label=\"Click on record to start recording\" tabindex=\"0\">{l.starting_message}</span>\n                        <div class=\"h previewRecordingOn tokenfield\" aria-label=\"recording is on\" tabindex=\"0\">\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/6ba174bf48e9b6dc8d8bd19d13c9caa9_000Awg.gif\" alt=\"recording is on\" class=\"w-100 h-100 img_fit\"/>\n                        </div>\n                        <div class=\"h previewAudioPlaying tokenfield\" aria-label=\"Audio is playing\" tabindex=\"0\">\n                            <img src=\"//s3.amazonaws.com/jigyaasa_content_static/giphy_000AYi.gif\" alt=\"audio is playing\" class=\"w-100 h-100 img_fit\"/>\n                        </div>\n                    </div>\n                    <div id=\"controls_container\" class=\"bg-light text-center w-100 p-2 {(state.pointerEvents == 'none') ? 'pointerEventOff': 'pointerEventOn'}\">\n                        <button \n                            type=\"button\" \n                            name=\"preview_recordButton\" \n                            id=\"preview_recordButton\" \n                            on:click={startRecording} \n                            class=\"btn btn-light py-0\" \n                            aria-label=\"Click for {areaLabelForPreviewRecordButton}\"\n                        >\n                            <span class=\"icomoon-circle-2 s2 text-danger position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title={((state.status == \"recording\") ? \"Stop Recording\": \"Start Recording\")} id=\"recordButtonTooltip\" name=\"recordButtonTooltip\"></span>\n                        </button>\n                        <button \n                            type=\"button\" \n                            name=\"preview_stopButton\" \n                            id=\"preview_stopButton\" \n                            on:click={playRecording} \n                            disabled={state.disabled} \n                            class=\"btn btn-light py-0\" \n                            aria-label=\"Click for {areaLabelForPreviewStopButton}\"\n                        >\n                            <span class=\"icomoon-24px-autoplay-4 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" data-original-title=\"Play Audio\" id=\"stopButtonTooltip\" name=\"stopButtonTooltip\"></span>\n                        </button>\n                        <button \n                            type=\"button\" \n                            name=\"resetButton\" \n                            id=\"resetButton\" \n                            class=\"btn btn-light py-0\" \n                            disabled={state.isReset} \n                            on:click={setData} \n                            data-bs-toggle=\"modal\" \n                            data-bs-target=\"#preview_confirm_modal\" \n                            aria-label=\"Click on this button for override the previous recording\"\n                        >\n                            <span class=\"icomoon-new-24px-reset-1 position-relative top1\" data-bs-toggle=\"tooltip\" data-placement=\"top\" title=\"Reset Data\"></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        {/if}\n    </div>\n</div>\n<div class=\"preview_modal_container container\">\n    <div class=\"modal fade\" id=\"preview_confirm_modal\">\n        <div class=\"modal-dialog modal-md modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\">\n                    <h4 class=\"modal-title tokenfield\" aria-label=\"Confirmation Dialog box\" tabindex=\"0\">{l.confirm_label}</h4>\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\" tabindex=\"0\" aria-label=\"Click on this button for close the confirmation dialog box\">&times;</button>\n                </div>\n                <div class=\"modal-body tokenfield\" tabindex=\"0\" aria-label={areaLabelForPreviewModalContent} id=\"previewDialogBody\" name=\"previewDialogBody\">\n                    {l.modal_data}\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"preview_dismiss_modal btn btn-light pr-2\" data-bs-dismiss=\"modal\" on:click={modalResponse} tabindex=\"0\" aria-label=\"Click on this button for neglecte to override previous recording\">{l.no_label}</button>\n                    <button type=\"button\" class=\"preview_dismiss_done btn btn-primary\" data-bs-dismiss=\"modal\" on:click={manageData} tabindex=\"0\" aria-label=\"Click on this button for override the previous recording\">{l.yes_label}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>"],"names":["l","recording_warning","ctx","showTranscript","note_label","audio_recorder","starting_message","status","disabled","isReset","pointerEvents","insensitive_message","spoken_label","cdata","trim","useransstatus","toLowerCase","correctAns","modal_data","confirm_label","no_label","yes_label","recognition","synth","areaLabelForPreviewModalContent","previewManageTimer","answer_status","xml","uxml","showAns","isReview","editorState","previewResetClicked","areaLabelForPreviewStopButton","areaLabelForPreviewRecordButton","previewTimeForRecording","state","language","counter","loadModule","loadXml","MYXML","smxml","_language","__cdata","_showTranscript","userAns","XMLToJSON","smans","_status","_isReset","parseUserAns","event","console","warn","error","message","function name","File name","parseXMLPreview","previewCheckState","setTimeout","uXml","AH","select","value","ISSPECIALMODULEUSERXMLCHANGE","getAttribute","innerText","checkAns","stopRecording","manageStopStatus","clearTimeout","selectAll","stop","previewManageTime","dictate","window","webkitSpeechRecognition","SpeechRecognition","alert","browser_support_msg","continuous","interimResults","lang","recognitionData","addEventListener","recording_ended","isSpeechRecognitionSupported","start","onresult","speechToText","index_no","results","length","transcript","startRecording","getBS","show","focus","ans","correct","checked","incorrect","onUserAnsChange","matching_msg","setReview","setCss","color","parent","unsetReview","onMount","resetAudioData","pauseRecording","manage_data_timer","speechSynthesis","utterThis","SpeechSynthesisUtterance","voiceForSpeech","getVoices","voice_name","cancel","name","voice","pitch","rate","speak","isSpeechSynthesisSupported","no_data_msg","mode"],"mappings":"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"}