{"version":3,"file":"DrawingPreview-f3b43343.js","sources":["../../../clsSMDrawing/DrawingPreview.svelte"],"sourcesContent":["<!--\r\n *  File Name   : DrawingPreview.svelte\r\n *  Description : Responsible for Preview Side functionality\r\n *  Author      : Ayush Srivastava\r\n *  Package     : clsSMDrawing (Preview)\r\n *  Last update : 09-April-2021\r\n *  Last Updated By : Ayush Srivastava\r\n-->\r\n<script>\r\n    import { afterUpdate, onMount } from \"svelte\";\r\n\timport { AH , onUserAnsChange, XMLToJSON} from '../helper/HelperAI.svelte';\r\n    import l from '../src/libs/editorLib/language.js';\r\n    import swal from 'sweetalert';\r\n\timport { writable } from \"svelte/store\";\r\n    import '../src/libs/drawing.css';\r\n    \r\n    // exporting the variables\r\n    export let xml;\r\n\texport let uxml;\r\n\texport let isReview;\r\n\texport let showAns;\r\n\texport let editorState;\r\n    let bgImgPath = 'https://s3.amazonaws.com/jigyaasa_content_static/';\r\n    let xmlns = \"http://www.w3.org/2000/svg\";\r\n    // denotes that drawing is not sketching\r\n    let isDrawingPreview = false;\r\n    // allow to draw the drawing using compass\r\n    let isDrawCompassPreview = true;\r\n    // indicates that starting position should be store when perform using keyboard and compass\r\n    let isStoreStart = false;\r\n    // indicates that drawing is not started\r\n    let isDrawStop = 0;\r\n    // shows that is drawing started by keyboard\r\n    let startDrawingByKey = 0;\r\n    // used to creates an element wiloadth the specified namespace URI and qualified name\r\n    let scribble;\r\n    // denotes mouse co-ordinates\r\n    let preview_mouseX, preview_mouseY;\r\n    // scribble drawing tool is enable\r\n    let previewMode = 'scribble';\r\n    // strike color of drawing\r\n    let previewColor = '#00BCD4';\r\n    // stroke width of the drawing\r\n    let previewThickness = 5;\r\n    // contains object that have key type, index, mode, order and d\r\n    let previewScribblePath = [];\r\n    // shows number of drawing sketched with the help of drawing tools\r\n    let previewScribbleCount = 0;\r\n    // contains current mouse x position\r\n    let checkCurrentPositionX;\r\n    // contains current mouse y position\r\n    let checkCurrentPositionY;\r\n    // denoes no of undo done\r\n    let previewUndoCount = 0;\r\n    // contains undo data\r\n    let previewUndoList = [];\r\n    // contains redo data\r\n    let previewRedoList = [];\r\n    // contains the focusPoints\r\n    let accessibilityPointsPreview = [];\r\n    // number of focus point exist\r\n    let focusPointCountPreview = 1;\r\n    // used for not focus on perticular point\r\n    let lockFocus = 0;\r\n    // denotes that scribble drawing is not sketching\r\n    let isScribble = 0;\r\n    // for compass variable\r\n    // denotes x co-ordinate of the center\r\n    let cx;\r\n    // denotes y co-ordinate of the center\r\n    let cy;\r\n    // denotes x co-ordinate of the center of middle circle lies on rotationbar\r\n    let midCircle_cx;\r\n    // denotes y co-ordinate of the center of middle circle lies on rotationbar\r\n    let midCircle_cy;\r\n    // denotes x co-ordinate of the center of small middle circle lies on rotationbar\r\n    let midSmallCircle_cx;\r\n    // denotes y co-ordinate of the center of small middle circle lies on rotationbar\r\n    let midSmallCircle_cy;\r\n    // denotes x co-ordinate of the center of last circle lies on rotationbar\r\n    let lastCircle_cx;\r\n    // denotes y co-ordinate of the center of last circle lies on rotationbar\r\n    let lastCircle_cy;\r\n    // denotes x co-ordinate of the center of rotation indicator that can be seen after last circle on rotationbar\r\n    let lastSmallCircle_cx;\r\n    // denotes y co-ordinate of the center of rotation indicator that can be seen after last circle on rotationbar\r\n    let lastSmallCircle_cy;\r\n    // defines the compass radius\r\n    let previewCompassRadius = 100;\r\n    // denotes that compass is not moved\r\n    let isPreviewCompassMove = false;\r\n    // sets the default angle of compass\r\n    let previewCompassAngle = 90;\r\n    // denotes that compass radius not increased\r\n    let isPreviewRadiusIncrease = 0;\r\n    // denotes initial points co-ordinate\r\n    let initialPoint = { x: null, y: null };\r\n    // denotes final points co-ordinate\r\n    let finalPoint = { x: null, y: null };\r\n    // denotes no angle displaced\r\n    let compassAngleDisplacement = { start: null, end: null };\r\n    // denotes that is radius rotated\r\n    let isPreviewRadiusRotate = 0;\r\n    // y co-ordinate of the marked point\r\n    let cursorTop = 50;\r\n    // x co-ordinate of the marked point\r\n    let cursorLeft = 50;\r\n    // used for answer recording\r\n    let defaultXML = '';\r\n    let cdata = '';\r\n    // denotes that answer is incorrect\r\n    let isAnswerCorrect = false;\r\n    // for marking\r\n    let isMarking = 1;\r\n    // contains the co-ordinates of marked point\r\n    let markPoints = [];\r\n    // denotes array of drawing tools\r\n    let selectedToolsArray = [\"_scribble\", \"_line\", \"_compass\"];\r\n    // for user answer\r\n    let userAnsPath = [];\r\n    // initial layout of user answer xml\r\n    let userAnsXML = '<smans type=\"41\"></smans>';\r\n    // contains the x and y co-ordinate of the points marked by user\r\n    let userMarkingPoint = [];\r\n    // contains drawing sketched by user by the help of drawing tools\r\n    let userDrawPath = [];\r\n    // denotes that answer is incorrect\r\n    let userAnsCorrect = false;\r\n    // contains the co-ordinates of marked point\r\n    let markPointsData = [];\r\n    // for browsers\r\n    let is_mac = false;\r\n\r\n    let prev_store = writable({\r\n        // contains status of the answer\r\n        correctAnswer: false,\r\n            // contains the xml of the props\r\n        xml: '',\r\n        uxml : '', \r\n        // not used any where\r\n        openImg: false,\r\n        // not used any where\r\n        openDrag: false,\r\n        // denotes background image\r\n        bgImg: 'useraccount_000ANv.png',\r\n        // not used any where \r\n        cdata: '',\r\n        // contains cdata value of backgroundPoint of smxml \r\n        focusDATA: '',\r\n        // not used any where \r\n        userXML: '',\r\n        // stroke color of the drawing sketch by the help of drawing tools\r\n        lineColor: '#00BCD4',\r\n        // contains drawing tools array\r\n        selectedTools: selectedToolsArray,\r\n        // denotes remediation mode is off\r\n        remediationMode: 'off',\r\n        // width of the background image\r\n        imgWidth: \"600\",\r\n        // alt message of background image\r\n        alt: \"Triangle image\",\r\n        // sets color of the mark points\r\n        markPointColor: '#00ff00',\r\n\t});\r\n    \r\n    // subscribing the store in the state variable\r\n    let state = {};\r\n    const unsubscribe = prev_store.subscribe(value => {\r\n\t\tstate = value;\r\n\t});\r\n\r\n    // for adding all the necessary events and the css files\r\n    onMount(async() => {\r\n        state.uxml = uxml;\r\n        // checked for mac device\r\n        is_mac = (navigator.userAgent.indexOf(\"Mac\") != -1)\r\n        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n        updatePreviewCompassCalculation(160, 118, 100, 90);\r\n\r\n        AH.listen('body', 'click', '#set-review', function () {\r\n            setReview()\r\n        });\r\n\r\n        AH.listen('body', 'click', '#unset-review', function () {\r\n            unsetReview()\r\n        });\r\n\r\n        AH.listen('body', 'click', '#preview_reset_btn', function () {\r\n            swal({\r\n                text: l.reset_module,\r\n                icon: \"warning\",\r\n                buttons: true,\r\n            }).then((value) => {\r\n                if (value) {\r\n                    // reset all the activity and makes it in initial condition as it looks like just after load\r\n                    parseXMLForGettingData();\r\n                    reinitializeFoucsEvent();\r\n                }\r\n            });\r\n        });\r\n\r\n        /** Start of key events **/\r\n        // to stop scrolling of page by space and arrow keys\r\n        AH.bind('body', 'keydown', function (event) {\r\n            if (!editorState && (event.keyCode == 32 || event.keyCode == 37 || event.keyCode == 38 || event.keyCode == 39 || event.keyCode == 40)) {\r\n                return false;\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'keyup', '.previewKeySvg .previewDrawingPaths path', function (current, event) {\r\n            if (event.keyCode == 46 || (event.keyCode == 8 && is_mac)) {\r\n                // removes drawing on which keyup event triggered and update the user answer xml\r\n                eraser(current, previewScribblePath);\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'keyup', '.previewKeySvg', function (current, event) {\r\n            if (event.keyCode == 90 && event.ctrlKey && ! AH.select('#preview_undo').disabled) {\r\n                if (startDrawingByKey && isDrawStop) {\r\n                    // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n                    stopDraw();\r\n                }\r\n                // click the undo button\r\n                AH.select('#preview_undo').click();\r\n            }\r\n            if (event.keyCode == 89 && event.ctrlKey && ! AH.select('#preview_redo').disabled) {\r\n                if (startDrawingByKey && isDrawStop) {\r\n                    // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n                    stopDraw();\r\n                }\r\n                // click the redo button\r\n                AH.select('#preview_redo').click();\r\n            }\r\n            if (event.keyCode == 88 && event.ctrlKey) {\r\n                // click the clear screen (x) button\r\n                AH.select('#preview_clearScreen').click();\r\n            }\r\n            if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != 'compass' && previewMode != 'eraser') {\r\n                // hides the icon (+) used to sketch the drawing using keyboard\r\n                AH.select('#moveDrawIcon', 'removeClass', 'h');\r\n                // sets the cursor style to auto\r\n                AH.select('.previewKeySvg', 'css', {'cursor': 'auto'});\r\n            }\r\n            if (event.shiftKey && (event.keyCode == 13 || event.keyCode == 32) && AH.select('#moveDrawIcon').offsetHeight != 0) {\r\n                if (previewMode == 'markPoints') {\r\n                    // Creates an element with the specified namespace URI and qualified name.\r\n                    scribble = document.createElementNS(xmlns, 'circle');\r\n                    // sets the stroke color and width\r\n                    setPreviewColor(state.markPointColor, previewThickness);\r\n                    // adds a new attribute 'class' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'class', 'answer_mark');\r\n                    // adds a new attribute 'cx' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'cx', cursorLeft);\r\n                    // adds a new attribute 'cy' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'cy', cursorTop);\r\n                    // adds a new attribute 'r' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'r', '2px');\r\n                    // pushes the x and y co-ordinate of the mouse into markPoints array\r\n                    markPoints.push({\r\n                        x: cursorLeft,\r\n                        y: cursorTop\r\n                    });\r\n                    // prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons\r\n                    AH.select('.previewMarkingPaths').prepend(scribble);\r\n                    // checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' \r\n                    parseXMLForAnswer(false);\r\n                    // updates user answer xml\r\n                    createUXML();\r\n                } else {\r\n                    if (isDrawStop) {\r\n                        // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n                        stopDraw();\r\n                    } else {\r\n                        startDrawingByKey = 1;\r\n                        // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n                        clearMarking();\r\n                        // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n                        scribble = document.createElementNS(xmlns, 'path');\r\n                        // sets the stroke color and width\r\n                        setPreviewColor(previewColor, previewThickness);\r\n                        // adds a new attribute 'data-type' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'data-type', previewMode + '_' + previewScribbleCount);\r\n                        // adds a new attribute 'data-order' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'data-order', previewScribbleCount);\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', 'M' + cursorLeft + ' ' + cursorTop);\r\n                        // adds a new attribute 'tabindex' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'tabindex', '0');\r\n                        // contains the cursor left position\r\n                        checkCurrentPositionX = cursorLeft;\r\n                        // contains the cursor top position\r\n                        checkCurrentPositionY = cursorTop;\r\n                        // pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath\r\n                        previewScribblePath.push({\r\n                            // define that perticular sequence element will be removed or added on drawing board\r\n                            mode: 'add',\r\n                            // defines what is the sequence of perticular drawing on drawing board means when it is drawn then how many drawing already done and it starts with 0\r\n                            order: previewScribbleCount,\r\n                            // defines which drawing tool is used for sketch the drawing with its sequence on drawing board combind with underscore (_)\r\n                            type: previewMode + '_' + previewScribbleCount,\r\n                            // not used as its requirement completed by order key\r\n                            index: previewScribbleCount,\r\n                            // specify the position from where drawing will start\r\n                            d: 'M' + cursorLeft + ' ' + cursorTop\r\n                        });\r\n                        // indicates that drawing is sketched\r\n                        isDrawStop = 1;\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'keydown', '.previewKeySvg', function (current, event) {\r\n            if (AH.select('#moveDrawIcon').offsetHeight) {\r\n                // contains width of the background image\r\n                let imageWidth = AH.select('#svgImgPreview').clientWidth;\r\n                // contains width of the background image \r\n                let imageHeight = AH.select('#svgImgPreview').clientHeight;\r\n                if (event.shiftKey && (event.keyCode == 38 || event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 40) && !lockFocus) {\r\n                    switch (event.keyCode) {\r\n                        case 38:\r\n                            // decreases the value of variable cursorTop by 1 after down the up arrow key\r\n                            cursorTop--;\r\n                            break;\r\n                        case 40:\r\n                            // increases the value of variable cursorTop by 1 after down the down arrow key\r\n                            cursorTop++;\r\n                            break;\r\n                        case 39:\r\n                            // increases the value of variable cursorLeft by 1 after down the right arrow key\r\n                            cursorLeft++;\r\n                            break;\r\n                        case 37:\r\n                            // decreases the value of variable cursorLeft by 1 after down the left arrow key\r\n                            cursorLeft--;\r\n                            break;\r\n                    }\r\n                    if (cursorTop < 0 || cursorLeft > imageWidth || cursorLeft < 0 || cursorTop > imageHeight) {\r\n                        return;\r\n                    }\r\n                    // sets the top and left position of the icon (+) used for sketch the drawing\r\n                    AH.select('#moveDrawIcon', 'css', {\r\n                        \"top\": cursorTop + 'px',\r\n                        \"left\": cursorLeft + 'px'\r\n                    });\r\n                    if (startDrawingByKey) {\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop);\r\n                        if (previewMode != 'line') {\r\n                            // adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                            previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop;\r\n                        }\r\n                        // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                        AH.select('.previewDrawingPaths').prepend(scribble);\r\n                        // sets the value of the variable isDrawStop by 1 to indicate that sketching of the drawing is stopped\r\n                        isDrawStop = 1;\r\n                    }\r\n                }\r\n                if (event.shiftKey && event.keyCode == 76) {\r\n                    if (!lockFocus) {\r\n                        // fixed the mark point from where drawing will be start when performed via keyboard\r\n                        lockFocus = 1;\r\n                        startDrawingByKey = 1;\r\n                        // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n                        clearMarking();\r\n                        // contains the x co-ordinate of the mark point circle after converting it into number from string\r\n                        cursorLeft = Number(AH.select('.currentFocusPoint').getAttribute('cx'));\r\n                        // contains the y co-ordinate of the mark point circle after converting it into number from string\r\n                        cursorTop = Number(AH.select('.currentFocusPoint').getAttribute('cy'));\r\n                        // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n                        scribble = document.createElementNS(xmlns, 'path');\r\n                        // sets the stroke color and width\r\n                        setPreviewColor(previewColor, previewThickness);\r\n                        // adds a new attribute 'data-type' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'data-type', previewMode + '_' + previewScribbleCount);\r\n                        // adds a new attribute 'data-order' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'data-order', previewScribbleCount);\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', 'M' + cursorLeft + ' ' + cursorTop);\r\n                        // adds a new attribute 'tabindex' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'tabindex', '0');\r\n                        // assign the value of current x position\r\n                        checkCurrentPositionX = cursorLeft;\r\n                        // assign the value of current y position\r\n                        checkCurrentPositionY = cursorTop;\r\n                        // pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath\r\n                        previewScribblePath.push({\r\n                            mode: 'add',\r\n                            order: previewScribbleCount,\r\n                            type: previewMode + '_' + previewScribbleCount,\r\n                            index: previewScribbleCount,\r\n                            d: 'M' + cursorLeft + ' ' + cursorTop\r\n                        });\r\n                    } else {\r\n                        // unlock the focus point\r\n                        lockFocus = 0;\r\n                        // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n                        stopDraw();\r\n                    }\r\n                }\r\n                if (event.keyCode == 9 && lockFocus && (previewMode == 'line' || previewMode == 'scribble')) {\r\n                    let drawLine = setTimeout(function () {\r\n                        if (!AH.select('.currentFocusPoint').nodeName) {\r\n                            return;\r\n                        }\r\n                        // contains the x co-ordinate of the mark point circle after converting it into number from string\r\n                        cursorLeft = Number(AH.select('.currentFocusPoint').getAttribute('cx'));\r\n                        // contains the y co-ordinate of the mark point circle after converting it into number from string\r\n                        cursorTop = Number(AH.select('.currentFocusPoint').getAttribute('cy'));\r\n                        if (isNaN(cursorLeft) && isNaN(cursorTop)) {\r\n                            return;\r\n                        }\r\n                        if (previewMode == 'scribble' || previewMode == 'line') {\r\n                            // indicates that scribble drawing is sketching\r\n                            isScribble = 1;\r\n                        }\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop);\r\n                        // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                        AH.select('.previewDrawingPaths').prepend(scribble);\r\n                        clearTimeout(drawLine);\r\n                    }, 10)\r\n                }\r\n                if (event.keyCode == 68 && lockFocus && isScribble) {\r\n                    let draw_scribble = setTimeout(function () {\r\n                        if (isNaN(cursorLeft) && isNaN(cursorTop)) {\r\n                            return;\r\n                        }\r\n                        // adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                        previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop;\r\n                        // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                        AH.select('.previewDrawingPaths').prepend(scribble);\r\n                        clearTimeout(draw_scribble);\r\n                        // indicates that scribble drawing is not sketching\r\n                        isScribble = 0;\r\n                    }, 10)\r\n                }\r\n\r\n            }\r\n        });\r\n        \r\n        AH.listen('body', 'keydown', '.previewKeySvg .drawingCompassCenter', function (current, event) {\r\n            // change the center position of the compass element\r\n            compassKeyEvent('move', event);\r\n        });\r\n\r\n        AH.listen('body', 'keydown', '.previewKeySvg .mid_circle', function (current, event) {\r\n            // change the radius of the compass element\r\n            compassKeyEvent('radius', event);\r\n        });\r\n\r\n        AH.listen('body', 'keydown', '.previewKeySvg .midSmallCircle', function (current, event) {\r\n            // change the angle of the compass element when focus is on small middle circle\r\n            compassKeyEvent('rotate', event);\r\n        });\r\n\r\n        AH.listen('body', 'keydown', '.previewKeySvg .lastCircle', function (current, event) {\r\n            // change the angle of the compass element when focus is on last circle\r\n            compassKeyEvent('draw', event);\r\n        });\r\n        \r\n        AH.listen('body', 'keydown', '.focusPoints', function (current, event) {\r\n            if (event.shiftKey && event.keyCode == 13) {\r\n                return false;\r\n            }\r\n            if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != 'markPoints' && previewMode != 'eraser') {\r\n                // contains the x co-ordinate of the mark point circle after converting it into number from string\r\n                cursorLeft = Number(AH.select('.currentFocusPoint').getAttribute('cx'));\r\n                // contains the y co-ordinate of the mark point circle after converting it into number from string\r\n                cursorTop = Number(AH.select('.currentFocusPoint').getAttribute('cy'));\r\n                if (previewMode != 'compass') {\r\n                    // sets the position of the icon (+) used to sketch the drawing by the help of keyboard\r\n                    AH.select('#moveDrawIcon', 'css', {\r\n                        \"top\": cursorTop + 'px',\r\n                        \"left\": cursorLeft + 'px'\r\n                    });\r\n                } else {\r\n                    // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                    updatePreviewCompassCalculation(cursorLeft, cursorTop, previewCompassRadius, previewCompassAngle);\r\n                }\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'keyup', '.previewKeySvg .lastCircle', function (current, event) {\r\n            if (!isDrawCompassPreview && isStoreStart && event.keyCode == 16) {\r\n                // stores the drawing sketched by user using keyboard and sets the user answer xml\r\n                storeCompassPathByKey();\r\n            }\r\n        });\r\n\r\n        /** End of key events **/\r\n        \r\n        AH.bind('.previewKeySvg .lastCircle', 'blur', function() {\r\n            if (!isDrawCompassPreview && isStoreStart) {\r\n                // stores the drawing sketched by user using keyboard and sets the user answer xml\r\n                storeCompassPathByKey();\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'mousedown', '#previewSvg .midSmallCircle', function () {\r\n            if (previewMode == \"compass\") {\r\n                // indicates that radius rotated\r\n                isPreviewRadiusRotate = 1;\r\n                // updates the value of compass radius and angle\r\n                checkPreviewRadiusAndAngle();\r\n                // contains the value of start angle\r\n                compassAngleDisplacement.start = previewCompassAngle;\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'mousedown', '#previewSvg .drawingCompassCenter', function () {\r\n            if (previewMode == \"compass\") {\r\n                // sets the x and y co-ordinate of the mouse position\r\n                setPreviewMouseCoordinates(event)\r\n                // contains x co-ordinate of the mouse\r\n                cx = preview_mouseX;\r\n                // contains y co-ordinate of the mouse\r\n                cy = preview_mouseY;\r\n                // contains radius of the compass\r\n                previewCompassRadius = AH.select('.drawingCompassRoute').getAttribute('r');\r\n                // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);\r\n                // indicates that compass is moved\r\n                isPreviewCompassMove = true;\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'mousedown', '#previewSvg .mid_circle', function () {\r\n            if (previewMode == \"compass\") {\r\n                // allows to change the value of radius of the compass\r\n                isPreviewRadiusIncrease = 1;\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'mousedown', '#previewSvg .lastCircle', function (current, event) {\r\n            compassLastcircleEvent(event);\r\n        });\r\n\r\n        AH.listen('body', 'keydown', '#previewSvg .lastCircle', function (current, event) {\r\n            compassLastcircleEvent(event);\r\n        });\r\n\r\n        // Mouse down event\r\n        AH.listen('body', 'mousedown', '#previewSvg', function (current, event) {\r\n            // sets the cursor style as crosshair (+)\r\n            AH.select('#previewSvg', 'css' , {'cursor': 'crosshair'});\r\n            // hides the icon used to sketch the drawing by the help of keyboard\r\n            AH.select('#moveDrawIcon', 'addClass' , 'h');\r\n            if (startDrawingByKey && isDrawStop || lockFocus) {\r\n                // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n                stopDraw();\r\n            }\r\n            switch (previewMode) {\r\n                case 'line':\r\n                case 'scribble':\r\n                    // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n                    clearMarking();\r\n                    // denotes that drawing is on going\r\n                    isDrawingPreview = true;\r\n                    // sets the x and y co-ordinate of the mouse position\r\n                    setPreviewMouseCoordinates(event);\r\n                    // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n                    scribble = document.createElementNS(xmlns, 'path');\r\n                    // sets the stroke color and width\r\n                    setPreviewColor(previewColor, previewThickness);\r\n                    // adds a new attribute 'data-type' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'data-type', previewMode + '_' + previewScribbleCount);\r\n                    // adds a new attribute 'data-order' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'data-order', previewScribbleCount);\r\n                    // adds a new attribute 'd' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'd', 'M' + preview_mouseX + ' ' + preview_mouseY);\r\n                    // adds a new attribute 'tabindex' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'tabindex', '0');\r\n                    // contains the x co-ordinate of the mouse\r\n                    checkCurrentPositionX = preview_mouseX;\r\n                    // contains the y co-ordinate of the mouse\r\n                    checkCurrentPositionY = preview_mouseY;\r\n                    // pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath\r\n                    previewScribblePath.push({\r\n                        mode: 'add',\r\n                        order: previewScribbleCount,\r\n                        type: previewMode + '_' + previewScribbleCount,\r\n                        index: previewScribbleCount,\r\n                        d: 'M' + preview_mouseX + ' ' + preview_mouseY\r\n                    });\r\n                    break;\r\n                case 'eraser':\r\n                    // removes drawing on which keyup event triggered and update the user answer xml\r\n                    eraser('.currentSvg', previewScribblePath);\r\n                    break;\r\n                case 'markPoints':\r\n                    if (!isMarking) {\r\n                        // sets the x and y co-ordinate of the mouse position\r\n                        setPreviewMouseCoordinates(event);\r\n                        // Creates an element with the specified namespace URI and qualified name.\r\n                        scribble = document.createElementNS(xmlns, 'circle');\r\n                        // sets the stroke color and width\r\n                        setPreviewColor(state.markPointColor, previewThickness);\r\n                        // adds a new attribute 'class' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'class', 'answer_mark');\r\n                        // adds a new attribute 'cx' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'cx', preview_mouseX);\r\n                        // adds a new attribute 'cy' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'cy', preview_mouseY);\r\n                        // adds a new attribute 'r' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'r', '2px');\r\n                        // pushes the x and y co-ordinate of mouse into markPoints array\r\n                        markPoints.push({\r\n                            x: preview_mouseX,\r\n                            y: preview_mouseY\r\n                        });\r\n                        // prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons\r\n                        AH.select('.previewMarkingPaths').prepend(scribble);\r\n                        // checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' \r\n                        parseXMLForAnswer(false);\r\n                        // updates user answer xml\r\n                        createUXML();\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // Mouse Move event\r\n        AH.listen('body', 'mousemove', '#previewSvg', function (current, event) {\r\n            switch (previewMode) {\r\n                case 'line':\r\n                    if (isDrawingPreview) {\r\n                        // sets the x and y co-ordinate of the mouse position\r\n                        setPreviewMouseCoordinates(event);\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + preview_mouseX + ' ' + preview_mouseY);\r\n                        if (!(checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY)) {\r\n                            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                            AH.select('.previewDrawingPaths').prepend(scribble);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'scribble':\r\n                    if (isDrawingPreview) {\r\n                        // sets the x and y co-ordinate of the mouse position\r\n                        setPreviewMouseCoordinates(event);\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + preview_mouseX + ' ' + preview_mouseY);\r\n                        // adds value of variables preview_mouseX and preview_mouseY separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                        previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + preview_mouseX + ' ' + preview_mouseY;\r\n                        if (!((previewScribblePath[previewScribbleCount].d.split('L').length - 1) < 3)) {\r\n                            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                            AH.select('.previewDrawingPaths').prepend(scribble);\r\n                        }\r\n                    }\r\n                    break;\r\n                case 'compass':\r\n                    // sets the x and y co-ordinate of the mouse position\r\n                    setPreviewMouseCoordinates(event)\r\n                    if (isPreviewCompassMove) {\r\n                        // contains the x co-ordinate of the mouse \r\n                        cx = preview_mouseX;\r\n                        // contains the y co-ordinate of the mouse \r\n                        cy = preview_mouseY;\r\n                        // contains radius of the compass\r\n                        previewCompassRadius = AH.select('.drawingCompassRoute').getAttribute('r');\r\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                        updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);\r\n                    }\r\n                    if (isPreviewRadiusIncrease) {\r\n                        // updates the value of compass radius and angle\r\n                        checkPreviewRadiusAndAngle();\r\n                        // calculates the radius by the help of start and end points co-ordinate of the rotation bar\r\n                        previewCompassRadius = 2 * Math.sqrt(Math.pow(preview_mouseX - initialPoint.x, 2) + Math.pow(preview_mouseY - initialPoint.y, 2))\r\n                        if (previewCompassRadius < 80) {\r\n                            // sets the value 80 of the variable previewCompassRadius\r\n                            previewCompassRadius = 80;\r\n                        }\r\n                        if (previewCompassRadius > 360) {\r\n                            // sets the value 360 of the variable previewCompassRadius\r\n                            previewCompassRadius = 360;\r\n                        }\r\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                        updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);\r\n                    }\r\n\r\n                    if (isPreviewRadiusRotate) {\r\n                        // updates the value of compass radius and angle\r\n                        checkPreviewRadiusAndAngle();\r\n                        // calculates the angle by the help of start and end points co-ordinate of the rotation bar\r\n                        previewCompassAngle = Math.atan2(preview_mouseY - initialPoint.y, preview_mouseX - initialPoint.x) * 180 / Math.PI;\r\n                        if (previewCompassAngle < 0) {\r\n                            // adds 360 into the value of the variable previewCompassAngle\r\n                            previewCompassAngle = 360 + previewCompassAngle;\r\n                        }\r\n                        // contains the value of end angle\r\n                        compassAngleDisplacement.end = previewCompassAngle;\r\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                        updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);\r\n                    }\r\n                    if (isDrawingPreview) {\r\n                        if (!(AH.select('#previewSvg .lastCircle').classList.contains('lastCircle_hover') || AH.select('#previewSvg .lastbigcircle').classList.contains('lastCircle_hover'))) {\r\n                            // trigger the event mouseleave on the element have id previewSvg\r\n                            previewMouseLeave(event);\r\n                        } else {\r\n                            // adds a new attribute 'd' (with a namespace null)\r\n                            scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\r\n                            // adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                            previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\r\n                            if (!((previewScribblePath[previewScribbleCount].d.split('L').length - 1) < 4)) {\r\n                                // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                                AH.select('.previewDrawingPaths').prepend(scribble);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n\r\n        // Mouse Up Event\r\n        AH.listen('body', 'mouseup', '#previewSvg', function (current, event) {\r\n            previewMouseLeave(event);\r\n        });\r\n\r\n        // Mouse leave Event\r\n        AH.bind('#previewSvg', 'mouseleave', function (event) {\r\n            previewMouseLeave(event);\r\n        });\r\n\r\n        // For toolbar\r\n        AH.listen('body', 'click', '.preview_toolbar', function (current, event) {\r\n            toolbarAction(current, event);\r\n        });\r\n\r\n        AH.listen('body', 'keyup', '.preview_toolbar', function (current, event) {\r\n            toolbarAction(current, event);\r\n        });\r\n\r\n        \r\n        AH.listen('body', 'mouseover', '.previewDrawingPaths path', function (current) {\r\n            if (previewMode == 'eraser') {\r\n                // removes the class currentSvg from the element 'path' inside the element have class 'previewDrawingPaths'\r\n                AH.selectAll('.previewDrawingPaths path', 'removeClass' , 'currentSvg');\r\n                // adds the class 'currentSvg' to the element 'path' inside the element have class 'previewDrawingPaths' on which mouseover\r\n                current.classList.add('currentSvg');\r\n            }\r\n        });\r\n\r\n        AH.listen('body', 'mouseout', '.previewDrawingPaths path', function (current) {\r\n            if (previewMode == 'eraser') {\r\n                // removes the class 'currentSvg' to the element 'path' inside the element have class 'previewDrawingPaths' on which mouseout\r\n                current.classList.remove('currentSvg');\r\n            }\r\n        });\r\n\r\n        // last circle events\r\n        AH.listen('body', 'mousemove', '#previewSvg .lastCircle', function (current) {\r\n            // adds the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\r\n            current.classList.add(\"lastCircle_hover\");\r\n            // shows the rotational indicator\r\n            AH.selectAll('#previewSvg .lastCircleMid', 'attr' , {'opacity': 1});\r\n        });\r\n        \r\n        AH.listen('body', 'mouseout', '#previewSvg .lastCircle', function (current) {\r\n            // removes the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\r\n            current.classList.remove(\"lastCircle_hover\");\r\n            // hides the rotational indicator\r\n            AH.selectAll('#previewSvg .lastCircleMid', 'attr' , {'opacity': 0});\r\n        });\r\n\r\n        AH.listenAll('#previewSvg .lastCircle', 'focus', function (current) {\r\n            // adds the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\r\n            current.target.classList.add(\"lastCircle_hover\");\r\n            // shows the rotational indicator\r\n            AH.selectAll('#previewSvg .lastCircleMid', 'attr' , {'opacity': 1});\r\n        });\r\n        \r\n        AH.listenAll('#previewSvg .lastCircle', 'blur',function (current) {\r\n            // removes the class 'lastCircle_hover' to the last circle on compass rotation bar lies on route of the compass\r\n            current.target.classList.remove(\"lastCircle_hover\");\r\n            // hides the rotational indicator\r\n            AH.selectAll('#previewSvg .lastCircleMid', 'attr' , {'opacity': 0});\r\n        });\r\n\r\n        // for changing the active buttons\r\n        AH.listen('body', 'click', '.preview_btn', function (current) {\r\n            // removes the class active from drawing tools, delete and  'Mark Points' buttons\r\n            AH.selectAll('.preview_btn, #mark_points', 'removeClass', 'active');\r\n            // adds the class active which is clicked\r\n            current.classList.add('active');\r\n        });\r\n\r\n        // for clearing the screen\r\n        AH.listen('body', 'click', '#preview_clearScreen', function () {\r\n            // makes drawing container empty in which drawing is done by using drawing tools\r\n            AH.selectAll('.previewDrawingPaths path', 'remove');\r\n            // sets the value of variable 'previewUndoCount' to  0\r\n            previewUndoCount = 0;\r\n            // sets the value of variable 'previewScribbleCount' to  0\r\n            previewScribbleCount = 0;\r\n            // makes array 'previewScribblePath' empty to denote that no drawing is sketched\r\n            previewScribblePath = [];\r\n            // contains copy of array previewScribblePath\r\n            let tempArrayContainer = arrayCopy(previewScribblePath);\r\n            // stores the drawing sketched by user and sets the user answer xml\r\n            storeUserPaths(tempArrayContainer);\r\n            // disabled the undo, redo, cross (x) buttons\r\n            AH.select('#preview_undo').disabled = true;\r\n            AH.select('#preview_redo').disabled = true;\r\n            AH.select('#preview_clearScreen').disabled = true;\r\n        });\r\n\r\n        // for undo\r\n        AH.listen('body', 'click', '#preview_undo', function (current) {\r\n            if (previewUndoCount == 1) {\r\n                // disabled the undo button\r\n                current.disabled = true;\r\n            }\r\n            // enabled the redo button\r\n            AH.select('#preview_redo').disabled = false;\r\n            if (previewScribblePath[previewScribblePath.length - 1].mode == 'add') {\r\n                // removes the element that have data-order attribute and value of this attribute is equals to subtacting 1 from the value of length of the array previewScribblePath, means removes the last drawing sketched by the help of drawing tools\r\n                AH.selectAll('#previewSvg [data-order=\"' + (previewScribblePath.length - 1) + '\"]', 'remove');\r\n            } else if (previewScribblePath[previewScribblePath.length - 1].mode == 'remove') {\r\n                // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n                scribble = document.createElementNS(xmlns, 'path');\r\n                // sets the stroke color and width\r\n                setPreviewColor(previewColor, previewThickness);\r\n                // adds a new attribute 'data-type' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'data-type', previewScribblePath[previewScribblePath.length - 1].type);\r\n                // adds a new attribute 'data-order' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'data-order', (previewScribblePath[previewScribblePath.length - 1].order));\r\n                // adds a new attribute 'd' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribblePath.length - 1].d);\r\n                // adds a new attribute 'tabindex' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'tabindex', '0');\r\n                if (previewMode == 'eraser') {\r\n                    // adds a new attribute 'class' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'class', 'eraserHover');\r\n                }\r\n                // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                AH.select('.previewDrawingPaths').prepend(scribble);\r\n            }\r\n            // pushes the last data of array previewScribblePath into array previewUndoList\r\n            previewUndoList.push(previewScribblePath.pop());\r\n            // contains copy of array previewScribblePath\r\n            let tempArrayContainer = arrayCopy(previewScribblePath);\r\n            // stores the drawing sketched by user and sets the user answer xml\r\n            storeUserPaths(tempArrayContainer);\r\n            // decreases the value of the variable previewScribbleCount by 1\r\n            previewScribbleCount--;\r\n            // decreases the value of the variable previewUndoCount by 1\r\n            previewUndoCount--;\r\n            \r\n            AH.select('#preview_clearScreen').disabled = (AH.selectAll('.previewDrawingPaths path').length == 0);\r\n            if (previewScribblePath.length == 0) {\r\n                // disabled the undo button\r\n                current.disabled = true;\r\n            }\r\n        });\r\n\r\n        // for redo\r\n        AH.listen('body', 'click', '#preview_redo', function (current) {\r\n            // increases the value of the variable previewScribbleCount by 1\r\n            previewScribbleCount++;\r\n            if (previewUndoList.length > 0) {\r\n                // pushes the last data of array previewUndoList into array previewRedoList\r\n                previewRedoList.push(previewUndoList.pop());\r\n            }\r\n            if (previewRedoList[previewRedoList.length - 1].mode == 'add') {\r\n                // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n                scribble = document.createElementNS(xmlns, 'path');\r\n                // sets the stroke color and width\r\n                setPreviewColor(previewColor, previewThickness);\r\n                // adds a new attribute 'data-type' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'data-type', previewRedoList[previewRedoList.length - 1].type);\r\n                // adds a new attribute 'data-order' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'data-order', (previewRedoList[previewRedoList.length - 1].order));\r\n                // adds a new attribute 'd' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'd', previewRedoList[previewRedoList.length - 1].d);\r\n                // adds a new attribute 'tabindex' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'tabindex', '0');\r\n                if (previewMode == 'eraser') {\r\n                    // adds a new attribute 'class' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'class', 'eraserHover');\r\n                }\r\n                // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                AH.select('.previewDrawingPaths').prepend(scribble);\r\n            } else if (previewRedoList[previewRedoList.length - 1].mode == 'remove') {\r\n                // removes the element that have data-order attribute and value of this attribute is equals to the value of order key of the last index value of array previewRedoList, means removes the last drawing stored in array previewRedoList\r\n                AH.selectAll('#previewSvg [data-order=\"' + (previewRedoList[previewRedoList.length - 1].order) + '\"]', 'remove');\r\n            }\r\n            // increases the value of the variable previewUndoCount by 1\r\n            previewUndoCount++;\r\n            // pushes the last data of array previewRedoList into array previewScribblePath\r\n            previewScribblePath.push(previewRedoList.pop());\r\n            // contains copy of array previewScribblePath\r\n            let tempArrayContainer = arrayCopy(previewScribblePath);\r\n            // stores the drawing sketched by user and sets the user answer xml\r\n            storeUserPaths(tempArrayContainer);\r\n            \r\n            AH.select('#preview_clearScreen').disabled = (AH.selectAll('.previewDrawingPaths path').length == 0);\r\n            if (previewUndoList.length == 0) {\r\n                // disabled the redo button\r\n                current.disabled = true;\r\n            }\r\n\r\n            // enabled the undo button\r\n            AH.select('#preview_undo').disabled = false;\r\n        });\r\n\r\n        AH.listen('body', 'click', '#mark_points', function (current, event) {\r\n            markPointEvent(event);\r\n        });\r\n\r\n        AH.listen('body', 'keyup', '#mark_points', function (current, event) {\r\n            markPointEvent(event);\r\n        });\r\n\r\n    });\r\n\r\n    // call the function after update in the store/state\r\n    afterUpdate(async()=>{\r\n        // for changing the xml and loading the module according to the xml\r\n        if (state.xml != xml) {\r\n            parseXMLForGettingData();\r\n            state.xml = xml;\r\n            reinitializeFoucsEvent();\r\n            checkUserAns();\r\n        }\r\n        // for calling the setreview and unsetreview function on change of review mode\r\n        if (state.review != isReview && editorState) {\r\n            prev_store.update( (item) => {\r\n                item.review = isReview;\r\n                return item;\r\n            });\r\n            if (isReview) {\r\n                setReview();\r\n            } else {\r\n                unsetReview();\r\n            }\r\n        }\r\n    });\r\n\r\n    // function responsible for the compass lastcircle keyevent\r\n    function compassLastcircleEvent(event) {\r\n        if (isScribble) {\r\n            stopDraw();\r\n        }\r\n        if (event.shiftKey) {\r\n            if (!isDrawCompassPreview) return;\r\n            // sets the value  false of the variable isDrawCompassPreview\r\n            isDrawCompassPreview = false;\r\n            // sets the value true of the variable isStoreStart to store the starting position\r\n            isStoreStart = true;\r\n            // adds class lastCircle_hover to the last circle on the rotation bar\r\n            AH.selectAll('#previewSvg .lastCircle', 'addClass', 'lastCircle_hover');\r\n        }\r\n        if ((previewMode == \"compass\" && event.type == \"mousedown\") || (event.shiftKey)) {\r\n            // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n            clearMarking();\r\n            // sets the cursor style to grabbing when mouse reached inside last circle on the rotation bar\r\n            AH.selectAll('#previewSvg .lastCircle','css', {'cursor': 'grabbing'});\r\n            if (isDrawCompassPreview || event.type == \"mousedown\") {\r\n                // indicates that drawing is sketching\r\n                isDrawingPreview = true;\r\n                // indicates that radius is rotating\r\n                isPreviewRadiusRotate = 1;\r\n            }\r\n            // updates the value of compass radius and angle\r\n            checkPreviewRadiusAndAngle();\r\n            // contains the value of start angle\r\n            compassAngleDisplacement.start = previewCompassAngle;\r\n            // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n            scribble = document.createElementNS(xmlns, 'path');\r\n            // sets the stroke color and width\r\n            setPreviewColor(previewColor, previewThickness);\r\n            // adds a new attribute 'data-type' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'data-type', previewMode + '_' + previewScribbleCount);\r\n            // adds a new attribute 'data-order' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'data-order', previewScribbleCount);\r\n            // adds a new attribute 'd' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'd', 'M' + lastCircle_cx + ' ' + lastCircle_cy);\r\n            // adds a new attribute 'tabindex' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'tabindex', '0');\r\n            // contains current x position\r\n            checkCurrentPositionX = lastCircle_cx;\r\n            // contains current y position\r\n            checkCurrentPositionY = lastCircle_cy;\r\n            // pushes object having keys mode, order, type, index and d with their values into  array previewScribblePath\r\n            previewScribblePath.push({\r\n                mode: 'add',\r\n                order: previewScribbleCount,\r\n                type: previewMode + '_' + previewScribbleCount,\r\n                index: previewScribbleCount,\r\n                d: 'M' + lastCircle_cx + ' ' + lastCircle_cy\r\n            });\r\n        }\r\n    }\r\n\r\n    // for adding the focus and blur event\r\n    function reinitializeFoucsEvent() {\r\n        AH.listenAll('.focusPoints', 'focus', function (event) {\r\n            // removes the class currentFocusPoint from the elements have class focusPoints\r\n            AH.selectAll('.focusPoints', 'removeClass', 'currentFocusPoint');\r\n            // adds the class currentFocusPoint to the element which got the focus and have class focusPoints \r\n            event.target.classList.add('currentFocusPoint');\r\n        });\r\n        AH.listenAll('.focusPoints', 'blur', function () {\r\n            // removes the class currentFocusPoint from the elements have class focusPoints\r\n            AH.selectAll('.focusPoints', 'removeClass', 'currentFocusPoint');\r\n        });\r\n    }\r\n\r\n    // for adding the mark point from the key event\r\n    function markPointEvent(event) {\r\n        if (event.screenX == undefined) {\r\n                return;\r\n        }\r\n        if (startDrawingByKey && isDrawStop) {\r\n            // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n            stopDraw();\r\n        }\r\n        if ((event.keyCode == 13 || event.keyCode == 32 || event.screenX === 0)) {\r\n            // stops the events from being bubbled\r\n            event.preventDefault();\r\n            // joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order\r\n            markFinalPoints();\r\n            if (isMarking) {\r\n                // hides plus icon (+) that is used for sketch the graph via keyboard\r\n                AH.select('#moveDrawIcon', 'addClass', 'h');\r\n                // sets the cursor style to crosshair (+)\r\n                AH.select('#previewSvg', 'css', {'cursor': 'crosshair'});\r\n            } else {\r\n                // shows plus icon (+) that is used for sketch the graph via keyboard\r\n                AH.select('#moveDrawIcon', 'removeClass', 'h');\r\n\r\n                // sets the cursor style to auto\r\n                AH.select('#previewSvg', 'css', {'cursor': 'auto'});\r\n\r\n            }\r\n        } else if (event.type == 'click' && event.screenX !== 0) {\r\n            // joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order\r\n            markFinalPoints();\r\n        }\r\n    }\r\n\r\n    // this function calls whenever there is click on toolbar buttons\r\n    function toolbarAction(current, event) {\r\n        if (isScribble) {\r\n            stopDraw();\r\n        }\r\n        if (event.type == 'click' || (event.keyCode == 13 || event.keyCode == 32)) {\r\n            // assign the value of the data-title attribute of the drawing tool buttons or of delete button on which is clicked or on which keyuped\r\n            previewMode = current.getAttribute('data-title');\r\n            // sets the style of the cursor to crosshair (+)\r\n            AH.select('#previewSvg', 'css', {'cursor': 'crosshair'});\r\n            // hides the icon (+) that is used for sketch the drawing by the help of keyboard\r\n            AH.select('#moveDrawIcon', 'addClass', 'h');\r\n            // sets the value 0 of variable startDrawingByKey to indicate that drawing is not started by the keyboard\r\n            startDrawingByKey = 0;\r\n            // sets the value of the variable isDrawStop by 0 to indicate that sketching of the drawing either not started or in progress\r\n            isDrawStop = 0;\r\n            if (previewMode == 'eraser') {\r\n                // adds the class eraserHover to the element path that contains the drawing sketched by the help of drawing tools\r\n                AH.selectAll('.previewDrawingPaths path', 'addClass', 'eraserHover');\r\n            } else {\r\n                // removes the class eraserHover to the element path that contains the drawing sketched by the help of drawing tools\r\n                AH.selectAll('.previewDrawingPaths path', 'removeClass', 'eraserHover');\r\n            }\r\n            // hides the compass element\r\n            AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n            if (previewMode == 'compass') {\r\n                // shows the compass tool\r\n                AH.selectAll('.drawingCompassSvg', 'removeClass', 'h');\r\n            }\r\n            // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n            clearMarking();\r\n        }\r\n        if ((event.keyCode == 13 || event.keyCode == 32) && previewMode != 'eraser' && previewMode != 'compass') {\r\n            // hides the icon (+), which is used to sketch the drawing using keyboard\r\n            AH.select('#moveDrawIcon', 'removeClass', 'h');\r\n            // sets the cursor style auto\r\n            AH.select('#previewSvg', 'css', {'cursor': 'auto'});\r\n        }\r\n        if (startDrawingByKey && isDrawStop) {\r\n            // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n            stopDraw();\r\n        }\r\n    }\r\n\r\n    // this function calls when we are leaving the drawable area or on mouseup\r\n    function previewMouseLeave(event) {\r\n        switch (previewMode) {\r\n                case 'line':\r\n                case 'scribble':\r\n                    if (isDrawingPreview) {\r\n                        // sets the x and y co-ordinate of the mouse position\r\n                        setPreviewMouseCoordinates(event);\r\n                        if (lockFocus && ((checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY && previewMode == 'line') || (previewMode == 'scribble' && ((previewScribblePath[previewScribbleCount].d.split('L').length - 1) < 3)))) {\r\n                            // removes the last element from the array previewScribblePath\r\n                            previewScribblePath.pop();\r\n                        }\r\n                        if ((checkCurrentPositionX == preview_mouseX && checkCurrentPositionY == preview_mouseY && previewMode == 'line') || (previewMode == 'scribble' && ((previewScribblePath[previewScribbleCount].d.split('L').length - 1) < 3))) {\r\n                            // removes the last element from the array previewScribblePath\r\n                            previewScribblePath.pop();\r\n                        } else {\r\n                            // adds a new attribute 'd' (with a namespace null)\r\n                            scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + preview_mouseX + ' ' + preview_mouseY);\r\n                            // adds value of variables preview_mouseX and preview_mouseY separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                            previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + preview_mouseX + ' ' + preview_mouseY;\r\n                            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                            AH.select('.previewDrawingPaths').prepend(scribble);\r\n                            // increases the value of the variable previewScribbleCount by 1 \r\n                            previewScribbleCount++;\r\n                            // increases the value of the variable previewUndoCount by 1 \r\n                            previewUndoCount++;\r\n                            // makes array previewUndoList blank\r\n                            previewUndoList = [];\r\n                            // enabled clear screen and undo button\r\n                            AH.select('#preview_clearScreen').disabled = false;\r\n                            AH.select('#preview_undo').disabled = false;\r\n                            // disabled redo button\r\n                            AH.select('#preview_redo').disabled = true;\r\n                        }\r\n                    }\r\n                    // sets the value false of the variable isDrawingPreview \r\n                    isDrawingPreview = false;\r\n                    break;\r\n                case 'compass':\r\n                    // indicates that radius is not increased\r\n                    isPreviewRadiusIncrease = 0;\r\n                    // indicates that radius is not rotated\r\n                    isPreviewRadiusRotate = 0;\r\n                    if (isPreviewCompassMove) {\r\n                        // sets the x and y co-ordinate of the mouse position\r\n                        setPreviewMouseCoordinates(event)\r\n                        // contains the x co-ordinate of the mouse position\r\n                        cx = preview_mouseX;\r\n                        // contains the y co-ordinate of the mouse position\r\n                        cy = preview_mouseY;\r\n                        // contains radius of the compass\r\n                        previewCompassRadius = AH.select('.drawingCompassRoute').getAttribute('r');\r\n                        // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                        updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle);\r\n                        // indicates that compass is not moved\r\n                        isPreviewCompassMove = false;\r\n                    }\r\n                    if (isDrawingPreview) {\r\n                        if ((previewScribblePath[previewScribbleCount].d.split('L').length - 1) < 4) {\r\n                            // removes the last element from the array previewScribblePath\r\n                            previewScribblePath.pop();\r\n                        } else {\r\n                            // adds a new attribute 'd' (with a namespace null)\r\n                            scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\r\n                            // adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                            previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\r\n                            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                            AH.select('.previewDrawingPaths').prepend(scribble);\r\n                            // increases the value of the variable previewScribbleCount by 1\r\n                            previewScribbleCount++;\r\n                            // increases the value of the variable previewUndoCount by 1\r\n                            previewUndoCount++;\r\n                            // makes array previewUndoList blank\r\n                            previewUndoList = [];\r\n                            // enabled clear screen (x) and undo button\r\n                            AH.select('#preview_clearScreen').disabled = false;\r\n                            AH.select('#preview_undo').disabled = false;\r\n                            // disabled the redo button\r\n                            AH.select('#preview_redo').disabled = true;\r\n                        }\r\n                        // sets value false of variable isDrawingPreview\r\n                        isDrawingPreview = false\r\n                    }\r\n                    // sets the cursor style to grab when it lies on last circle on the rotation bar\r\n                    AH.selectAll('#previewSvg .lastCircle', 'css' , {'cursor': 'grab'});\r\n                    break;\r\n            }\r\n            // contains copy of array previewScribblePath\r\n            let tempArrayContainer = arrayCopy(previewScribblePath);\r\n            // stores the drawing sketched by user and sets the user answer xml\r\n            storeUserPaths(tempArrayContainer);\r\n    }\r\n\r\n    // checks the answer and shows the status of the answer\r\n    function setReview() {\r\n        isReview = true;\r\n        if (startDrawingByKey && isDrawStop || lockFocus) {\r\n            // stop the drawing and store the drawing sketched by the user and sets the user answer xml\r\n            stopDraw();\r\n        }\r\n        if (!isDrawCompassPreview && isStoreStart) {\r\n            // stores the drawing sketched by user using keyboard and sets the user answer xml\r\n            storeCompassPathByKey();\r\n        }\r\n        // checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' \r\n        parseXMLForAnswer(true);\r\n        // contains the value of state array selectedTools at index 0 after removing the first character \r\n        previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\r\n        // removes the class active from drawing tools, delete, and 'Mark Points' or 'Finish Marking' buttons\r\n        AH.selectAll('.preview_btn,#mark_points', 'removeClass', 'active');\r\n        // adds the class active to the drawing tool button which exist at index 0 in state array selectedTools\r\n        AH.select('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n        if (previewMode == 'compass') {\r\n            // shows the compass tool\r\n            AH.selectAll('.drawingCompassSvg', 'removeClass', 'h');\r\n        } else {\r\n            // hides the compass tool\r\n            AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n        }\r\n\r\n        state.remediationMode = 'on'\r\n        \r\n        AH.selectAll('.previewBtnGrp', 'addClass', 'h');\r\n        // sets the value 'none' of the variable previewMode\r\n        previewMode = 'none';\r\n        // not allowed user to perform the task\r\n        AH.selectAll('.preview_drawing_container', 'css', {pointerEvents: \"none\"});\r\n        // removes the class previewKeySvg from the svg element have id previewSvg\r\n        AH.select('#previewSvg', 'removeClass', 'previewKeySvg');\r\n\r\n        // removes the marked points and also the path that is sketched by the help of mark points\r\n        AH.selectAll('.previewMarkingPaths .answer_mark', 'remove');\r\n        // updates user answer xml\r\n        createUXML();\r\n        // draw the marked points and the lines connecting to these points\r\n        addMarkPointOnLoad(JSON.parse(markPointsData));\r\n        // sets the tabindex and aria-label to the elements have class 'answer_mark' and tag name is path\r\n        AH.selectAll('path.answer_mark','attr',{\r\n            'tabindex': '0',\r\n            'aria-labelledby': 'answerLine'\r\n        })\r\n        if (state.correctAnswer) {\r\n            // append the title element inside the element previewMarkingPaths with correct message\r\n            AH.insert('.previewMarkingPaths','<title id=\"answerLine\">' + l.ans_correct + '</title>', 'beforeend');\r\n            // sets the stroke color of the mark points to #0F9D58\r\n            AH.selectAll('.answer_mark', 'css', {'stroke': '#0F9D58'});\r\n        } else {\r\n            // append the title element inside the element previewMarkingPaths with incorrect message\r\n            AH.insert('.previewMarkingPaths','<title id=\"answerLine\">' + l.ans_incorrect + '</title>', 'beforeend');\r\n            // sets the stroke color of the mark points to red\r\n            AH.selectAll('.answer_mark', 'css', {'stroke': '#FF0000'});\r\n            // sets the stroke color of the answer point to #0F9D58\r\n            AH.selectAll('.answer_circle', 'css', {'stroke': '#0F9D58'});\r\n        }\r\n    }\r\n\r\n    // allowed user to perform the task and changes the stroke color of mark points \r\n    function unsetReview() {\r\n        isReview = false;\r\n        // allowed user to perform the task\r\n        AH.selectAll('.preview_drawing_container','css', {pointerEvents : \"\"});\r\n        // shows all buttons\r\n        AH.selectAll('.previewBtnGrp', 'removeClass', 'h')\r\n        // adds the class previewKeySvg to the svg element have id previewSvg\r\n        AH.select('#previewSvg','addClass', 'previewKeySvg');\r\n        // contains the value of state array selectedTools at index 0 after removing the first character\r\n        previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\r\n        // it's also used below in this function so it can be removed\r\n        AH.selectAll('.preview_btn,#mark_points', 'removeClass', 'active');\r\n        // it's also used below in this function so it can be removed\r\n        AH.select('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n        if (previewMode == 'compass') {\r\n            // shows compass tool\r\n            AH.selectAll('.drawingCompassSvg', 'removeClass', 'h');\r\n            // sets the style of the cursor to crosshair (+)\r\n            AH.select('#previewSvg', 'css', {'cursor': 'crosshair'});\r\n            // hides the icon (+) which is used to sketch the drawing using keyboard\r\n            AH.select('#moveDrawIcon', 'addClass', 'h');\r\n        } else {\r\n            // hides compass tool\r\n            AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n        }\r\n        // removes the class active from drawing tools, delete, and 'Mark Points' or 'Finish Marking' buttons\r\n        AH.selectAll('.preview_btn,#mark_points', 'removeClass', 'active');\r\n        // adds the class active to the drawing tool button which exist at index 0 in state array selectedTools\r\n        AH.selectAll('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n        // removes the correct answer circle that can be seen on remediation mode in green stroke color\r\n        AH.selectAll('.correct_answer_container .answer_mark', 'remove');\r\n        // enables the element have id mark_points and updates its text as 'Mark Points'\r\n        AH.select('#mark_points').innerText = 'Mark Points';\r\n        AH.select('#mark_points').disabled = false;\r\n        // sets the value of the variable 'isMarking' to 1\r\n        isMarking = 1;\r\n        state.remediationMode = 'off';\r\n        // removes the title element inside the element have class previewMarkingPaths\r\n        AH.selectAll('.previewMarkingPaths title', 'remove');\r\n        // sets the value state markPointColor into the value of attribute stroke of the element have class answer_mark and removes attribute tabindex\r\n        AH.selectAll('.answer_mark', 'css', {'stroke' : state.markPointColor});\r\n        AH.selectAll('.answer_mark','removeAttr','tabindex');\r\n    }\r\n\r\n    // parses the xml and updates the values of variables and states and width, src, alt of the background image, shows the enabled drawing tools and sets the mark point position and draw the lines using mark points\r\n    function parseXMLForGettingData() {\r\n        try {\r\n            // contains json data of the xml\r\n            defaultXML = XMLToJSON(xml);\r\n            if (defaultXML.smxml._markPointColor == undefined) {\r\n                // sets the value of the key markPointColor to #00ff00 of json defaultXML\r\n                defaultXML.smxml._markPointColor = '#00ff00';\r\n            }\r\n            if (defaultXML.smxml._color == undefined) {\r\n                // sets the value of the key color to rgb(0, 188, 212) of json defaultXML\r\n                defaultXML.smxml._color = 'rgb(0, 188, 212)';\r\n            }\r\n\r\n            prev_store.update((item) => {\r\n                // sets the value of state bgImg to the value of key bgimg of json defaultXML\r\n                item.bgImg = defaultXML.smxml._bgimg;\r\n                // sets the value of state alt to the value of key imgAlt of json defaultXML\r\n                item.alt = defaultXML.smxml._imgAlt;\r\n                // sets the value of state imgWidth to the value of key width of json defaultXML\r\n                item.imgWidth = defaultXML.smxml._width;\r\n                // sets the value of state lineColor to the value of key color of json defaultXML\r\n                item.lineColor = defaultXML.smxml._color;\r\n                // sets the value of state focusDATA to the value of subkey cdata of key backgroundPoint of json defaultXML\r\n                item.focusDATA = defaultXML.smxml.backgroundPoint.__cdata;\r\n                // sets the value of state markPointColor to the value of key markPointColor of json defaultXML\r\n                item.markPointColor = defaultXML.smxml._markPointColor;\r\n                // sets the value of state selectedTools to the value of key 'selectedDrawingType' after joining it with commam of json defaultXML\r\n                item.selectedTools = defaultXML.smxml.div._selectedDrawingType.split(',');\r\n                return item;\r\n            })\r\n                \r\n            // makes array 'accessibilityPoints' to empty\r\n            accessibilityPointsPreview = [];\r\n            // assign the value 1 to the variable focusPointCountPreview\r\n            focusPointCountPreview = 1;\r\n            // assign the value of state focusDATA into variable updatedFocusCDATA\r\n            let updatedFocusCDATA = state.focusDATA;\r\n            // replaces the character '!' to ',' and wraps the value into square bracket\r\n            updatedFocusCDATA = '[' + updatedFocusCDATA.replace(/!/g, ',') + ']';\r\n            // contains javascript object \r\n            updatedFocusCDATA = JSON.parse(updatedFocusCDATA);\r\n            // removes the element circle, path and title from element have class 'backgroundFocusPathPreview' and 'backgroundFocusPointPreview'\r\n            AH.selectAll('.backgroundFocusPointPreview circle,.backgroundFocusPathPreview path, .backgroundFocusPointPreview title', 'remove');\r\n            for (let index = 0; index < updatedFocusCDATA.length; index++) {\r\n                // pushes data of multi dimesion array updatedFocusCDATA specified at perticular row and column where value of row and column is equals to the value of variable 'index' into array previewScribblePath\r\n                accessibilityPointsPreview.push(updatedFocusCDATA[index][index]);\r\n            }\r\n            for (let index = 0; index < updatedFocusCDATA.length; index++) {\r\n                for (let subPoints = 0; subPoints < updatedFocusCDATA[index][index].length; subPoints++) {\r\n                    // updates the value of key x of multi dimention array object 'accessibilityPointsPreview' where row and column values are value of variable 'index' and 'subPoints' with the value of key x of multi dimention array updatedFocusCDATA object where row and column values are the value of variables 'index' and 'subPoints'\r\n                    accessibilityPointsPreview[index][subPoints].x = updatedFocusCDATA[index][index][subPoints].x;\r\n                    // updates the value of key y of multi dimention array object 'accessibilityPointsPreview' where row and column values are value of variable 'index' and 'subPoints' with the value of key y of multi dimention array object updatedFocusCDATA where row and column values are the value of variables 'index' and 'subPoints'\r\n                    accessibilityPointsPreview[index][subPoints].y = updatedFocusCDATA[index][index][subPoints].y;\r\n                    // Creates an element with the specified namespace URI and qualified name.\r\n                    scribble = document.createElementNS(xmlns, 'circle');\r\n                    // sets the stroke color and width\r\n                    setPreviewColor('#808080', previewThickness);\r\n                    // adds a new attribute 'aria-labelledby' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'aria-labelledby', 'focusPoint_' + focusPointCountPreview + '_title focusPoint_' + focusPointCountPreview + '_desc');\r\n                    // adds a new attribute 'tabindex' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'tabindex', '0');\r\n                    // adds a new attribute 'class' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'class', 'focusPoints');\r\n                    // adds a new attribute 'data-focusOrder' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'data-focusOrder', focusPointCountPreview);\r\n                    // adds a new attribute 'cx' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'cx', accessibilityPointsPreview[index][subPoints].x);\r\n                    // adds a new attribute 'cy' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'cy', accessibilityPointsPreview[index][subPoints].y);\r\n                    // adds a new attribute 'r' (with a namespace null)\r\n                    scribble.setAttributeNS(null, 'r', '2px');\r\n                    // place the scribble element before very first element inside the element have class 'backgroundFocusPointPreview'\r\n                    AH.select('.backgroundFocusPointPreview').append(scribble);\r\n                    // adds title and description of focus point for screen reader\r\n                    AH.insert('.backgroundFocusPointPreview', '<title id=\"focusPoint_' + focusPointCountPreview + '_title\">You are on the ' + focusPointCountPreview + ' Point </title><desc id=\"focusPoint_' + focusPointCountPreview + '_desc\">Press shift + tab to move towards the previous point or tab to move towards the next points</desc>', 'beforeend');\r\n                    // increases the value of variable 'focusPointCountPreview' by 1\r\n                    focusPointCountPreview++;\r\n                }\r\n                // join the marked points and sets the color and width of the stroke \r\n                joinMarkedPoint(accessibilityPointsPreview[index], 1);\r\n            }\r\n            // contains the stroke color\r\n            previewColor = state.lineColor;\r\n            // makes array previewScribblePath blank for remove the drawing sketched by the help of drawing tools\r\n            previewScribblePath = [];\r\n            // sets the value true of the variable isDrawCompassPreview\r\n            isDrawCompassPreview = true;\r\n            // sets the value false of the variable isStoreStart\r\n            isStoreStart = false;\r\n            // sets the value 0 of the variable isDrawStop\r\n            isDrawStop = 0;\r\n            // shows that drawing is not start via keyboard\r\n            startDrawingByKey = 0;\r\n            // shows number of drawing sketched with the help of drawing tools\r\n            previewScribbleCount = 0;\r\n            // counts the number of undo can be done\r\n            previewUndoCount = 0;\r\n            // makes array previewUndoList blank to remove the all undo done\r\n            previewUndoList = [];\r\n            // makes array previewRedoList blank to remove the all redo done\r\n            previewRedoList = [];\r\n            // sets the value of the variable 'isMarking' to 1\r\n            isMarking = 1;\r\n            // makes array markPoints blank to remove the mark point\r\n            markPoints = [];\r\n            // removes the first character from the string exist in state array selectedTools at index 0\r\n            previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\r\n            if (editorState) {\r\n                // removes drawing sketched by the help of drawing tools and marked points and also lines that is drawn automatically using mark points\r\n                AH.selectAll('.previewMarkingPaths .answer_mark,.previewDrawingPaths path', 'remove');\r\n            }\r\n            if (previewMode == 'compass') {\r\n                // shows the compass tool\r\n                AH.selectAll('.drawingCompassSvg', 'removeClass', 'h');\r\n                // sets the cursor style to crosshair (+)\r\n                AH.select('#previewSvg','css', {'cursor': 'crosshair'});\r\n                // hides icon (+) used for sketch the drawing using keyboard\r\n                AH.select('#moveDrawIcon','addClass','h');\r\n            } else {\r\n                // hides the compass element\r\n                AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n            }\r\n            // enabled the button have id mark_points and update its text to 'Mark Points' \r\n            AH.select('#mark_points').disabled = false;\r\n            AH.select('#mark_points').innerText = \"Mark Points\";\r\n\r\n            // disabled the undo, redo and clear screen (x) buttons\r\n            AH.select('#preview_undo').disabled = true;\r\n            AH.select('#preview_redo').disabled = true;\r\n            AH.select('#preview_clearScreen').disabled = true;\r\n            // removes the drawing tool buttons\r\n            AH.selectAll('.geometryToolPreview', 'addClass', 'h');\r\n            for (let toolsIndex = 0; toolsIndex < state.selectedTools.length; toolsIndex++) {\r\n                // shows the drawing tools buttons that exist in state array selectedTools\r\n                AH.select('#preview' + state.selectedTools[toolsIndex], 'removeClass', 'h')\r\n            }\r\n            // removes the class active from drawing tools, delete and 'Mark Points' buttons\r\n            AH.selectAll('.preview_btn,#mark_points','removeClass', 'active');\r\n            // adds the class active to scribble drawing tool button\r\n            AH.select('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n            // sets the width of the background image container\r\n            AH.selectAll('.preview_drawing_toolbar, .centerImgPreview','attr', {'style' :'width:' + (Number(state.imgWidth) + 2) + 'px'});\r\n            // sets the width, src and alt message of the background image\r\n            AH.select('.centerImg #svgImgPreview', 'attr', {\r\n                'src': bgImgPath + '' + state.bgImg,\r\n                'alt': state.alt,\r\n                'width': state.imgWidth,\r\n            });\r\n\r\n            AH.enableBsAll('.tooltip_btn', 'Tooltip', {\r\n                container:'body'\r\n            });\r\n        } catch (error) {\r\n            console.warn({\r\n                error,\r\n                func: 'parseXMLForGettingData @271'\r\n            });\r\n        }\r\n    }\r\n\r\n    // joins the marked points by the help of line that starts with first mark point and ends at last masked point by moving in sequencial order\r\n    function markFinalPoints() {\r\n        // hides the compass container\r\n        AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n        // removes the class 'eraserHover' from the element 'path' inside the element have id 'previewSvg'\r\n        AH.selectAll('#previewSvg path', 'removeClass' , 'eraserHover');\r\n        if (isMarking) {\r\n            // removes the class active from the drawing tools and delete buttons\r\n            AH.selectAll('.preview_btn','removeClass','active');\r\n            // sets the text of the button 'Mark Points' to 'Finish MArking' and adds class active to it\r\n            AH.select('#mark_points').innerText = \"Finish Marking\";\r\n            AH.select('#mark_points', 'addClass', 'active');\r\n            // sets the value of the variable 'isMarking' to 0\r\n            isMarking = 0;\r\n            // removes the mark points and lines\r\n            AH.selectAll('.previewMarkingPaths .answer_mark', 'remove');\r\n            // makes array userMarkingPoint to empty\r\n            userMarkingPoint = [];\r\n            // makes array markPoints to empty\r\n            markPoints = [];\r\n            if (!editorState) {\r\n                // removes the correct answer circle that can be seen on remediation mode in green stroke color\r\n                AH.selectAll('.correct_answer_container .answer_mark', 'remove');\r\n            }\r\n            // sets value of variable 'previewMode' to 'markPoints'\r\n            previewMode = 'markPoints';\r\n        } else {\r\n            // stes the test of the button 'Finish Marking' to 'Mark Points' and adds class active to it\r\n            AH.select('#mark_points').innerText = \"Mark Points\";\r\n            AH.select('#mark_points', 'removeClass', 'active');\r\n            if (markPoints.length >= 1) {\r\n                // join the marked points and sets the color and width of the stroke \r\n                joinMarkedPoint(markPoints);\r\n                if (state.remediationMode == 'on') {\r\n                    // checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' \r\n                    parseXMLForAnswer();\r\n                }\r\n            }\r\n            // contains the value of index 0 of state array selectedTools after removing the first character\r\n            previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\r\n            // hides the icon (+) used to sketch the drawing by the help of keyboard\r\n            AH.select('#moveDrawIcon', 'addClass', 'h');\r\n            // styles the cursor to crosshair (+)\r\n            AH.select('#previewSvg', 'css', {'cursor': 'crosshair'});\r\n            // adds the active class to the drawing tool exist at index 0 in state array selectedTools\r\n            AH.select('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n            if (previewMode == 'compass') {\r\n                // shows the compass tool\r\n                AH.selectAll('.drawingCompassSvg', 'removeClass', 'h');\r\n            } else {\r\n                // hides the compass tool\r\n                AH.selectAll('.drawingCompassSvg', 'addClass', 'h');\r\n            }\r\n            // sets the value of the variable 'isMarking' to 1\r\n            isMarking = 1;\r\n        }\r\n    }\r\n\r\n    // draw the marked points and the lines connecting to these points\r\n    function addMarkPointOnLoad(array) {\r\n        for (let index = 0; index < array.length; index++) {\r\n            // Creates an element with the specified namespace URI and qualified name.\r\n            scribble = document.createElementNS(xmlns, 'circle');\r\n            // sets the stroke color and width\r\n            setPreviewColor(state.markPointColor, previewThickness);\r\n            // adds a new attribute 'class' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'class', 'answer_mark');\r\n            // adds a new attribute 'cx' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'cx', array[index].x);\r\n            // adds a new attribute 'cy' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'cy', array[index].y);\r\n            // adds a new attribute 'r' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'r', '2px');\r\n            // prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons\r\n            AH.select('.previewMarkingPaths').prepend(scribble);\r\n        }\r\n        // join the marked points and sets the color and width of the stroke \r\n        joinMarkedPoint(array);\r\n    }\r\n\r\n    function checkAns (uaXML) {  \r\n        uaXML = XMLToJSON(uaXML);      \r\n        // contains the json data of user answer xml\r\n        if (uaXML.smans.userDrawPath == undefined) {\r\n            // sets the value of userDataPath to blank that indicates that no drawing is sketched\r\n            uaXML.smans.userDrawPath = '';\r\n        }\r\n        // contains drawing data sketched by the help of drawing tools in the form of javascript object \r\n        userDrawPath = JSON.parse(uaXML.smans.userDrawPath);\r\n        // defines the value true or false of the variable userAnsCorrect according to the value of ansCorrect of user answer xml\r\n        userAnsCorrect = uaXML.smans.ansCorrect.toLowerCase() == 'true' ? true : false;\r\n        return userAnsCorrect; \r\n    }\r\n\r\n    // used to load the module according to the data of smxml and smans xml\r\n    function loadModule(uaXML, drawMark) {\r\n        // contains the x and y co-ordinate of the points marked by user\r\n        userAnsCorrect = checkAns(uaXML);\r\n        uaXML = XMLToJSON(uaXML);\r\n        userMarkingPoint = JSON.parse(uaXML.smans.markpoints);\r\n        // contains json data of xml props\r\n        defaultXML = XMLToJSON(xml);\r\n        // contains cdata of drawing of smxml that have to be performed by the help of drawing tools for correct answer\r\n        cdata = defaultXML.smxml.div.__cdata;\r\n        // replace the character '!' with ',' from cdata and wrap it in square bracket\r\n        cdata = '[' + cdata.replace(/!/g, ',') + ']';\r\n        // converts cdata string into javascript object\r\n        cdata = JSON.parse(cdata);\r\n        // draw the marked points and the lines connecting to these points\r\n        addMarkPointOnLoad(userMarkingPoint);\r\n        // creates the drawing sketched by user\r\n        createUserPath();\r\n        // checks the answer is correct or incorrect\r\n        checkCorrectAnswer(userMarkingPoint, drawMark);\r\n        // sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)\r\n        setStatusOfAns(userAnsCorrect, userMarkingPoint, drawMark);\r\n    }\r\n\r\n    // this function is used for copying the array and modifying them\r\n    function arrayCopy(array) {\r\n        // creates a temporary array\r\n        let tempArray = [];\r\n        for (let index = 0; index < array.length; index++) {\r\n            // pushes default initialized object into array tempArray\r\n            tempArray.push({\r\n                mode: \"mode\",\r\n                order: 2,\r\n                type: \"scribble_0\",\r\n                index: 0,\r\n                d: \"path\"\r\n            });\r\n            // update the value of mode key of array tempArray at index specified in variable 'index' with the value of mode key of array passed in argument at index specified in variable 'index'\r\n            tempArray[index].mode = array[index].mode;\r\n            // update the value of order key of array tempArray at index specified in variable 'index' with the value of order key of array passed in argument at index specified in variable 'index'\r\n            tempArray[index].order = array[index].order;\r\n            // update the value of type key of array tempArray at index specified in variable 'index' with the value of type key of array passed in argument at index specified in variable 'index'\r\n            tempArray[index].type = array[index].type;\r\n            // update the value of index key of array tempArray at index specified in variable 'index' with the value of index key of array passed in argument at index specified in variable 'index'\r\n            tempArray[index].index = array[index].index;\r\n            // update the value of d key of array tempArray at index specified in variable 'index' with the value of d key of array passed in argument at index specified in variable 'index'\r\n            tempArray[index].d = array[index].d;\r\n        }\r\n        // retuns array after copied data from array passed in arguments\r\n        return tempArray;\r\n    }\r\n\r\n    // removes drawing on which keyup event triggered and update the user answer xml\r\n    function eraser(curClass, curArray) {\r\n        if (AH.select(curClass).getAttribute(\"data-order\") != undefined) {\r\n            // makes array previewUndoList blank\r\n            previewUndoList = [];\r\n            // a temporary variable used of \r\n            let tempArrayContainer = '';\r\n            // find the index of the drawing on which keyup event fired exist in array curArray\r\n            let currentIndex = curArray.indexOf(curArray[AH.select(curClass).getAttribute(\"data-order\")]);\r\n            // contains current element from array curArray after converting it into string and wraping in square bracket\r\n            let convertJSONtoArray = '[' + JSON.stringify(curArray[currentIndex]) + ']';\r\n            // contains copy of array convertJSONtoArray\r\n            tempArrayContainer = arrayCopy(JSON.parse(convertJSONtoArray));\r\n            // adds the value remove of mode key exist at index 0 in array tempArrayContainer\r\n            tempArrayContainer[0].mode = \"remove\";\r\n            // pushes the data of array 'tempArrayContainer' exist on index 0 into array curArray\r\n            curArray.push(tempArrayContainer[0]);\r\n            // contains copy of array curArray\r\n            let eraserArrayContainer = arrayCopy(curArray);\r\n            // stores the drawing sketched by user and sets the user answer xml\r\n            storeUserPaths(eraserArrayContainer);\r\n            // increases the value of the variable previewScribbleCount by 1\r\n            previewScribbleCount++;\r\n            // increases the value of the variable previewUndoCount by 1\r\n            previewUndoCount++;\r\n            // removes the current drawing on which keyup event fired\r\n            AH.select(curClass, 'remove');\r\n            // disabled the redo button\r\n            AH.select('#preview_redo').disabled = true;\r\n            // enables undo button\r\n            AH.select('#preview_undo').disabled = false;\r\n            if (AH.selectAll('.previewDrawingPaths path').length == 0) {\r\n                // disabled the clear screen button (x)\r\n                AH.select('#preview_clearScreen').disabled = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    // stores the drawing sketched by user and sets the user answer xml\r\n    function storeUserPaths(drawPathArray) {\r\n        // makes array userAnsPath blank\r\n        userAnsPath = [];\r\n        // creates the variable subindex and assign the value 0\r\n        let subindex = 0;\r\n        for (let index = 0; index < drawPathArray.length; index++) {\r\n            subindex = index + 1;\r\n            while (subindex < drawPathArray.length) {\r\n                if (drawPathArray[index].type == drawPathArray[subindex].type) {\r\n                    if (drawPathArray[index].mode == \"add\" && drawPathArray[subindex].mode == \"remove\") {\r\n                        // sets the value null of mode key of array drawPathArray have index defined in variable 'index'\r\n                        drawPathArray[index].mode = null;\r\n                        // sets the value null of mode key of array drawPathArray have index defined in variable 'subindex'\r\n                        drawPathArray[subindex].mode = null;\r\n                    }\r\n                }\r\n                // increases the value of the variable subindex by 1\r\n                subindex++;\r\n            }\r\n        }\r\n        for (let index = 0; index < drawPathArray.length; index++) {\r\n            // Return an array of all the values in the drawPathArray array whose value of mode key is not null\r\n            drawPathArray = drawPathArray.filter(function (element) {\r\n                return element.mode != null;\r\n            });\r\n        }\r\n        // pushes data of array drawPathArray into array userAnsPath\r\n        userAnsPath.push(drawPathArray);\r\n        // updates user answer xml\r\n        createUXML();\r\n    }\r\n\r\n    // creates user answer xml\r\n    function createUXML() {\r\n        // makes array markPointsData empty\r\n        markPointsData = [];\r\n        if (markPoints.length == 0) {\r\n            // contains the x and y co-ordinate of the points marked by user\r\n            markPointsData = JSON.stringify(userMarkingPoint)\r\n        } else {\r\n            // contains the x and y co-ordinate of the points marked by user\r\n            markPointsData = JSON.stringify(markPoints);\r\n        }\r\n        // contains proforma of user answer xml with points marked by user, drawing sketched by user and state of answer  \r\n        userAnsXML = '<smans type=\"41\"><markpoints>' + markPointsData + '</markpoints><userDrawPath>' + JSON.stringify(userAnsPath[0]) + '</userDrawPath><ansCorrect>' + isAnswerCorrect + '</ansCorrect></smans>';\r\n        // defined that user answer xml changed\r\n        window.ISSPECIALMODULEUSERXMLCHANGE = 1;\r\n        // sets the user answer xml\r\n        state.uxml = userAnsXML;\r\n        var ans = checkAns(userAnsXML);\r\n        onUserAnsChange({uXml: userAnsXML, ans: ans });\r\n    }\r\n\r\n    // creates the drawing sketched by user\r\n    function createUserPath() {\r\n        if (userDrawPath.length) {\r\n            // enables the cross and undo buttons \r\n            AH.select('#preview_undo').disabled = false;\r\n            AH.select('#preview_undo').disabled = false;\r\n\r\n        }\r\n        for (let index = 0; index < userDrawPath.length; index++) {\r\n            // sets the type key value of the object exist at index defined in variable 'index' of array userDrawPath by adding the value of variable 'index' in its previous value\r\n            userDrawPath[index].type = userDrawPath[index].type.substr(0, userDrawPath[index].type.indexOf('_')) + '_' + index;\r\n            // sets the order key value of the object exist at index defined in variable 'index' of array userDrawPath by adding the value of variable 'index'\r\n            userDrawPath[index].order = index;\r\n            // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n            scribble = document.createElementNS(xmlns, 'path');\r\n            // sets the stroke color and width\r\n            setPreviewColor(previewColor, previewThickness);\r\n            // adds a new attribute 'data-type' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'data-type', userDrawPath[index].type);\r\n            // adds a new attribute 'data-order' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'data-order', userDrawPath[index].order);\r\n            // adds a new attribute 'd' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'd', userDrawPath[index].d);\r\n            // adds a new attribute 'tabindex' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'tabindex', '0');\r\n            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n            AH.select('.previewDrawingPaths').prepend(scribble);\r\n        }\r\n        // sets the value of the variable 'previewScribbleCount' to  the value of length of the array 'userDrawPath'\r\n        previewScribbleCount = userDrawPath.length;\r\n        // contains copy of array userDrawPath\r\n        previewScribblePath = arrayCopy(userDrawPath);\r\n    }\r\n\r\n    // join the marked points and sets the color and width of the stroke \r\n    function joinMarkedPoint(markArray, focusPoint) {\r\n        if (markArray.length == 0) {\r\n            return;\r\n        }\r\n        // Creates an element with the value of variable xmlns namespace URI and 'path' name\r\n        scribble = document.createElementNS(xmlns, 'path');\r\n        // sets the starting position of the drawing\r\n        let pointStartValues = 'M ' + markArray[0].x + ' ' + markArray[0].y;\r\n        // variable for end point\r\n        let pointEndValues = '';\r\n        for (let index = 1; index < markArray.length; index++) {\r\n            // adds the value of x and y into previous value of the variable pointEndValues from the array 'markArray' at index defined in variable 'index'\r\n            pointEndValues += ' L ' + markArray[index].x + ' ' + markArray[index].y;\r\n        }\r\n        // adds a new attribute 'd' (with a namespace null)\r\n        scribble.setAttributeNS(null, 'd', pointStartValues + '' + pointEndValues);\r\n        if (focusPoint) {\r\n            // sets the stroke color and width\r\n            setPreviewColor('rgb(128, 128, 128)', previewThickness);\r\n            // prepend the element assigned into variable 'scribble' in background focus container element\r\n            AH.select('.backgroundFocusPathPreview').prepend(scribble);\r\n        } else {\r\n            // sets the stroke color and width\r\n            setPreviewColor(state.markPointColor, previewThickness);\r\n            // adds a new attribute 'class' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'class', 'answer_mark');\r\n            // prepend the element stored into variable scribble in mark point container in which drawings are stored done by the help of 'Mark Poin' And 'Finish Marking' buttons\r\n            AH.select('.previewMarkingPaths').prepend(scribble);\r\n        }\r\n    }\r\n\r\n    // checks the answer and updates the status and enables 'Mark Points' button and also updates its text as 'Mark Points' \r\n    function parseXMLForAnswer(drawMark) {\r\n        // contains the json data of the xml of props\r\n        defaultXML = XMLToJSON(state.xml);\r\n        // contains the value of cdata inside div of smxml\r\n        cdata = defaultXML.smxml.div.__cdata;\r\n        // replaces the character '!' with ',' and wraps in square bracket of the value of cdata variable\r\n        cdata = '[' + cdata.replace(/!/g, ',') + ']';\r\n        // parses the cdata string value into javascript object\r\n        cdata = JSON.parse(cdata);\r\n        // creates an array markPointsAnsData\r\n        let markPointsAnsData = [];\r\n        // assign the value of array markPoints into array markPointsAnsData\r\n        markPointsAnsData = markPoints;\r\n        if (!editorState) {\r\n            if (uxml) {\r\n                if (markPoints.length == 0) {\r\n                    // contains the x and y co-ordinate of the points marked by user\r\n                    markPointsAnsData = userMarkingPoint;\r\n                }\r\n            }\r\n        }\r\n        // checks the answer is correct or incorrect\r\n        checkCorrectAnswer(markPointsAnsData, drawMark);\r\n        // sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)\r\n        setStatusOfAns(isAnswerCorrect, markPointsAnsData, drawMark);\r\n        if (drawMark) {\r\n            // enables the element have id mark_points and updates its text as 'Mark Points'\r\n            AH.select('#mark_points').innerText = 'Mark Points';\r\n            AH.select('#mark_points').disabled = false;\r\n            // sets the value of the variable 'isMarking' to 1\r\n            isMarking = 1;\r\n        }\r\n    }\r\n\r\n    // stores the drawing sketched by user using keyboard and sets the user answer xml\r\n    function storeCompassPathByKey() {\r\n        // removes the class lastCircle_hover from the last circle that exist on rotation bar of the compass\r\n        AH.selectAll('#previewSvg .lastCircle', 'removeClass', 'lastCircle_hover');\r\n        // sets the style of the cursor to grab when cursor lies inside last circle\r\n        AH.selectAll('#previewSvg .lastCircle', 'css', {'cursor': 'grab'});\r\n        // sets the value true of variable isDrawCompassPreview\r\n        isDrawCompassPreview = true;\r\n        if (previewScribblePath[previewScribbleCount].d.indexOf('L') == -1) {\r\n            // removes the last element from the array previewScribblePath\r\n            previewScribblePath.pop();\r\n        } else {\r\n            // adds a new attribute 'd' (with a namespace null)\r\n            scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\r\n            // adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n            previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\r\n            // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools \r\n            AH.select('.previewDrawingPaths').prepend(scribble);\r\n            // increases the value of variable previewScribbleCount by 1\r\n            previewScribbleCount++;\r\n            // increases the value of variable previewUndoCount by 1\r\n            previewUndoCount++;\r\n            // makes array previewUndoList blank \r\n            previewUndoList = [];\r\n            // enables the cross (x) and undo button\r\n            AH.select('#preview_undo').disabled = false;\r\n            AH.select('#preview_clearScreen').disabled = false;\r\n\r\n            // disabled the redo button\r\n            AH.select('#preview_redo').disabled = true;\r\n        }\r\n        // contains copy of array previewScribblePath\r\n        let tempArrayContainer = arrayCopy(previewScribblePath);\r\n        // stores the drawing sketched by user and sets the user answer xml\r\n        storeUserPaths(tempArrayContainer);\r\n    }\r\n\r\n    // removes the all mark points and sets the value of the variable 'isMArking' to 1\r\n    function clearMarking() {\r\n        // removes the mark points and lines \r\n        AH.selectAll('.previewMarkingPaths .answer_mark', 'remove');\r\n        if (!editorState) {\r\n            // removes the correct answer circle that can be seen on remediation mode in green stroke color\r\n            AH.selectAll('.correct_answer_container .answer_mark', 'remove');\r\n        }\r\n        // makes array markPoints empty\r\n        markPoints = [];\r\n        // sets the text 'Mark Points' of the element having id 'mark_points' and enabled that element\r\n        AH.select('#mark_points').innerText = 'Mark Points';\r\n        AH.select('#mark_points').disabled = false;\r\n        // sets the value of variable isMArking to 1 that indicates that mark can be draw\r\n        isMarking = 1;\r\n    }\r\n\r\n    // checks the answer is correct or incorrect\r\n    function checkCorrectAnswer(markArray, drawMark) {\r\n        // creates correctAnswer array\r\n        let correctAnswer = [];\r\n        if (drawMark) {\r\n            for (let index = 0; index < cdata.length; index++) {\r\n                // Creates an element with the specified namespace URI and qualified name.\r\n                scribble = document.createElementNS(xmlns, 'circle');\r\n                // sets the stroke color and width\r\n                setPreviewColor('#0F9D58', '2');\r\n                // adds a new attribute 'class' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'class', 'answer_mark answer_circle');\r\n                // adds a new attribute 'cx' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'cx', cdata[index].x);\r\n                // adds a new attribute 'cy' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'cy', cdata[index].y);\r\n                // adds a new attribute 'r' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'r', cdata[index].r);\r\n                // prepend the created element with the value of variable 'xmlns' namespace URI and circle name in element have class 'correct_answer_container'\r\n                AH.select('.correct_answer_container').prepend(scribble);\r\n            }\r\n        }\r\n        if (cdata.length == 0 || markArray.length == 0) {\r\n            // sets the value of variable 'isAnswerCorrect' to false\r\n            isAnswerCorrect = false;\r\n            return;\r\n        }\r\n        // sets the value of the variable 'lineCount' according to the length of the array markArray\r\n        let lineCount = (markArray.length == 1) ? markArray.length : markArray.length - 1;\r\n        for (let cdataIndex = 0; cdataIndex < cdata.length; cdataIndex++) {\r\n            for (let index = 0; index < lineCount; index++) {\r\n                if ((lineCount == 1 && markArray.length == 1) && checkIntersection(markArray[index].x, markArray[index].y, 0, 0, cdata[cdataIndex].x, cdata[cdataIndex].y, cdata[cdataIndex].r)) {\r\n                    // push data 'Match' into array correctAnswer\r\n                    correctAnswer.push(\"Match\");\r\n                    break;\r\n                }\r\n                if ((lineCount >= 1 && markArray.length > 1) && checkIntersection(markArray[index].x, markArray[index].y, markArray[index + 1].x, markArray[index + 1].y, cdata[cdataIndex].x, cdata[cdataIndex].y, cdata[cdataIndex].r)) {\r\n                    // push data 'Match' into array correctAnswer\r\n                    correctAnswer.push(\"Match\");\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        if (correctAnswer.length == cdata.length) {\r\n            // sets the value of variable 'isAnswerCorrect' to true\r\n            isAnswerCorrect = true;\r\n        } else {\r\n            // sets the value of variable 'isAnswerCorrect' to false\r\n            isAnswerCorrect = false;\r\n        }\r\n        // makes correctAnswer array empty\r\n        correctAnswer = [];\r\n    }\r\n\r\n    // sets the status of the answer ( correct or incorrect message with showing the UI that indicates correct or incorrect)\r\n    function setStatusOfAns(isAnswerCorrect, markArray, drawMark) {\r\n        if (isAnswerCorrect) {\r\n            // stes the value of the state correctAnswer to true\r\n            state.correctAnswer = true;\r\n            if (drawMark) {\r\n                if (cdata.length && markArray.length) {\r\n                    // join the marked points and sets the color and width of the stroke \r\n                    joinMarkedPoint(markArray);\r\n                }\r\n                // sets the stroke color of element have class 'answer_mark' to #0F9D58\r\n                AH.selectAll('.answer_mark', 'css', {'stroke': '#0F9D58'});\r\n            \r\n                // sets the value of the message variable to correct\r\n                if (editorState) {\r\n                    // shows correct\r\n                    showAns(l.correct);\r\n                }\r\n            }\r\n        } else {\r\n            state.correctAnswer = false;\r\n\r\n            if (drawMark) {\r\n                if (cdata.length && markArray.length) {\r\n                    // join the marked points and sets the color and width of the stroke \r\n                    joinMarkedPoint(markArray);\r\n                }\r\n                // sets the stroke color of the mark points and lines that are draw using mark points to #ff0000\r\n                AH.selectAll('.answer_mark', 'css', {'stroke': '#ff0000'});\r\n                AH.selectAll('.answer_circle', 'css', {'stroke': '#0F9D58'});\r\n                \r\n                if (editorState) {\r\n                    // shows answer incorrect\r\n                    showAns(l.incorrect);\r\n                }\r\n            }\r\n        }\r\n        // check or uncheck the element have id 'answer' according to the value of variable isAnswerCorrect\r\n       // AH.select(\"#answer\").checked = state.correctAnswer;\r\n        onUserAnsChange({uXml: userAnsXML, ans: state.correctAnswer});\r\n    }\r\n\r\n    // Center of the circle (cx, cy)\r\n    // Radius of circle: r\r\n    // First Point (ax,ay) and second Point (bx,by)\r\n    function checkIntersection(ax, ay, bx, by, cx, cy, r) {\r\n        ax -= cx;\r\n        ay -= cy;\r\n        bx -= cx;\r\n        by -= cy;\r\n        let a = (bx - ax) * (bx - ax) + (by - ay) * (by - ay)\r\n        let b = 2 * (ax * (bx - ax) + ay * (by - ay));\r\n        let c = ax * ax + ay * ay - r * r;\r\n        // Applying Shri Dharacharya method by comparing the quadratic values a, b, c\r\n        let disc = b * b - 4 * a * c;\r\n        if (disc <= 0) {\r\n            return false;\r\n        }\r\n        let t1 = (-b + Math.sqrt(disc)) / (2 * a);\r\n        let t2 = (-b - Math.sqrt(disc)) / (2 * a);\r\n        if ((0 < t1 && t1 < 1) || (0 < t2 && t2 < 1)) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // updates the value of compass radius and angle\r\n    function checkPreviewRadiusAndAngle() {\r\n        // contains the value of initial x co-ordinate of compass rotation bar \r\n        initialPoint.x = Number(AH.select('.compassRotationBar').getAttribute('x1'));\r\n        // contains the value of initial y co-ordinate of compass rotation bar\r\n        initialPoint.y = Number(AH.select('.compassRotationBar').getAttribute('y1'));\r\n        // contains the value of final x co-ordinate of compass rotation bar\r\n        finalPoint.x = Number(AH.select('.compassRotationBar').getAttribute('x2'));\r\n        // contains the value of final y co-ordinate of compass rotation bar\r\n        finalPoint.y = Number(AH.select('.compassRotationBar').getAttribute('y2'));\r\n        // // contains the length of compass rotation bar\r\n        previewCompassRadius = Number(AH.select('.drawingCompassRoute').getAttribute('r'));\r\n        // contains the value of compass angle using the co-ordinates of the initial and final points\r\n        previewCompassAngle = Math.atan2(finalPoint.y - initialPoint.y, finalPoint.x - initialPoint.x) * 180 / Math.PI;\r\n    }\r\n\r\n    // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n    function updatePreviewCompassCalculation(cx, cy, previewCompassRadius, previewCompassAngle) {\r\n        // sets the center of x of middle circle lies on compass rotationbar\r\n        midCircle_cx = cx + (previewCompassRadius / 2) * Math.cos(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of y of middle circle lies on compass rotationbar\r\n        midCircle_cy = cy + (previewCompassRadius / 2) * Math.sin(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of x of small middle circle lies on compass rotationbar\r\n        midSmallCircle_cx = cx + ((3 * previewCompassRadius) / 4) * Math.cos(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of y of small middle circle lies on compass rotationbar\r\n        midSmallCircle_cy = cy + ((3 * previewCompassRadius) / 4) * Math.sin(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of x of last circle lies on compass rotationbar\r\n        lastCircle_cx = cx + (previewCompassRadius) * Math.cos(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of y of last circle lies on compass rotationbar\r\n        lastCircle_cy = cy + (previewCompassRadius) * Math.sin(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of x of rotation icon that can be seen just in front of the last circle to indication that move the rotationbar in these directions to draw the circular curve\r\n        lastSmallCircle_cx = cx + ((5 * previewCompassRadius) / 4) * Math.cos(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center of x of rotation icon that can be seen just in front of the last circle to indication that move the rotationbar in these directions to draw the circular curve\r\n        lastSmallCircle_cy = cy + ((5 * previewCompassRadius) / 4) * Math.sin(previewCompassAngle * (Math.PI / 180));\r\n        // sets the center co-ordinate of the compass and of its route\r\n        AH.selectAll('.drawingCompassRoute,.drawingCompassCenter', 'attr', {\r\n            'cx': cx,\r\n            'cy': cy\r\n        });\r\n        // sets the radius of the compass or length of the rotationbar\r\n        AH.selectAll('.drawingCompassRoute', 'attr', {'r': previewCompassRadius});\r\n        // sets the co-ordinates of start and end points of the compass rotation bar\r\n        AH.selectAll('.compassRotationBar', 'attr', {\r\n            'x1': cx,\r\n            'y1': cy,\r\n            'x2': lastCircle_cx,\r\n            'y2': lastCircle_cy\r\n        });\r\n        // sets the values of the center of the rotation indicator and rotate it in 3D dimention for defined variables value that can be seen after hover on the last circle lies on rotation bar\r\n        AH.selectAll('#previewSvg .lastCircleMid', 'attr', {\r\n            'cx': lastSmallCircle_cx,\r\n            'cy': lastSmallCircle_cy,\r\n            \"transform\": \"rotate(\" + previewCompassAngle + \",\" + lastSmallCircle_cx + \",\" + lastSmallCircle_cy + \")\"\r\n        });\r\n        // sets the center of the last circle lies on rotation bar\r\n        AH.selectAll('#previewSvg .lastCircle', 'attr', {\r\n            'cx': lastCircle_cx,\r\n            'cy': lastCircle_cy\r\n        });\r\n        // sets the values of the center of small middle circle and rotate it in 3D dimention for defined variables value\r\n        AH.selectAll('#previewSvg .midSmallCircle', 'attr', {\r\n            'cx': midSmallCircle_cx,\r\n            'cy': midSmallCircle_cy,\r\n            \"transform\": \"rotate(\" + previewCompassAngle + \",\" + midSmallCircle_cx + \",\" + midSmallCircle_cy + \")\"\r\n        });\r\n        // sets the values of the center of middle circle and rotate it in 3D dimention for defined variables value\r\n        AH.selectAll('#previewSvg .mid_circle', 'attr', {\r\n            'cx': midCircle_cx,\r\n            'cy': midCircle_cy,\r\n            \"transform\": \"rotate(\" + previewCompassAngle + \",\" + midCircle_cx + \",\" + midCircle_cy + \")\"\r\n        });\r\n        // assign the value of variable previewCompassAngle into variable curAngle\r\n        let curAngle = previewCompassAngle;\r\n        if (curAngle < 0) {\r\n            // adds 360 degree value in it's previous value of variable curAngle\r\n            curAngle = 360 + curAngle;\r\n        }\r\n        // sets the message about angle for screen reader\r\n        AH.select('#compassRotationTitle').innerText = \"Compass Angle, Your Current Angle is \" + curAngle.toFixed(0) + \" degree\";\r\n        // sets the message about radius for screen reader\r\n        AH.select('#compassRadiusTitle').innerText = \"Compass Radius, Your Current Radius is \" + (previewCompassRadius * 0.02649).toFixed(1) + \"cm\";\r\n    }\r\n\r\n    // sets the x and y co-ordinate of the mouse position\r\n    function setPreviewMouseCoordinates(event) {\r\n        // contains the size of element having id 'authoringSvg' and its position relative to the viewport\r\n        let boundary = document.getElementById('previewSvg').getBoundingClientRect();\r\n        // sets the x position of the mouse co-ordinate\r\n        preview_mouseX = event.clientX - boundary.left;\r\n        // sets the y position of the mouse co-ordinate\r\n        preview_mouseY = event.clientY - boundary.top;\r\n    }\r\n\r\n    // sets the stroke color and width\r\n    function setPreviewColor(previewColor, previewThickness) {\r\n        // sets the stroke color of the drawing\r\n        scribble.style.stroke = previewColor;\r\n        // sets the stroke width of the drawing\r\n        scribble.style.strokeWidth = previewThickness;\r\n        scribble.style.fill = 'none';\r\n    }\r\n\r\n    // changes the value of radius, angle, and center of the compass when it is performed via keyboard\r\n    function compassKeyEvent(mode, event) {\r\n        if ( ! AH.select('.drawingCompassSvg').classList.contains('h') && previewMode == \"compass\") {\r\n            // contains width of the background image\r\n            let imageWidth = AH.select('#svgImgPreview').clientWidth;\r\n            // contains width of the background image \r\n            let imageHeight = AH.select('#svgImgPreview').clientHeight;\r\n            // updates the value of compass radius and angle\r\n            checkPreviewRadiusAndAngle();\r\n            if (event.shiftKey && (event.keyCode == 38 || event.keyCode == 37 || event.keyCode == 39 || event.keyCode == 40)) {\r\n                if (mode == 'radius') {\r\n                    switch (event.keyCode) {\r\n                        case 38:\r\n                            // increases the radius value by 1 after down the key shift and up arrow\r\n                            previewCompassRadius++;\r\n                            break;\r\n                        case 37:\r\n                            // decreases the radius value by 1 after down the key shift and left arrow\r\n                            previewCompassRadius--;\r\n                            break;\r\n                        case 39:\r\n                            // increases the radius value by 1 after down the key shift and right arrow\r\n                            previewCompassRadius++;\r\n                            break;\r\n                        case 40:\r\n                            // decreases the radius value by 1 after down the key shift and down arrow\r\n                            previewCompassRadius--;\r\n                            break;\r\n                    }\r\n                }\r\n                if (mode == 'move') {\r\n                    switch (event.keyCode) {\r\n                        case 38:\r\n                            // decreases the value of y co-ordinate of compass center by 1 after down the key shift and up arrow\r\n                            initialPoint.y--;\r\n                            break;\r\n                        case 37:\r\n                            // decreases the value of x co-ordinate of compass center by 1 after down the key shift and left arrow\r\n                            initialPoint.x--;\r\n                            break;\r\n                        case 39:\r\n                            // increases the value of x co-ordinate of compass center by 1 after down the key shift and right arrow\r\n                            initialPoint.x++;\r\n                            break;\r\n                        case 40:\r\n                            // increases the value of y co-ordinate of compass center by 1 after down the key shift and down arrow\r\n                            initialPoint.y++;\r\n                            break;\r\n                    }\r\n                }\r\n                if ((mode == 'rotate' || mode == 'draw')) {\r\n                    switch (event.keyCode) {\r\n                        case 38:\r\n                            // increases the value of compass angle by 1 after down the key shift and up arrow\r\n                            previewCompassAngle++;\r\n                            break;\r\n                        case 39:\r\n                            // decreases the value of compass angle by 1 after down the key shift and right arrow\r\n                            previewCompassAngle--;\r\n                            break;\r\n                        case 37:\r\n                            // increases the value of compass angle by 1 after down the key shift and left arrow\r\n                            previewCompassAngle++;\r\n                            break;\r\n                        case 40:\r\n                            // decreases the value of compass angle by 1 after down the key shift and down arrow\r\n                            previewCompassAngle--;\r\n                            break;\r\n                    }\r\n                }\r\n                if (mode == 'draw') {\r\n                    if (AH.select('#previewSvg .lastCircle').classList.contains('lastCircle_hover') || AH.select('#previewSvg .lastbigcircle').classList.contains('lastCircle_hover')) {\r\n                        // adds a new attribute 'd' (with a namespace null)\r\n                        scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy);\r\n                        // adds value of variables lastCircle_cx and lastCircle_cy separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                        previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + lastCircle_cx + ' ' + lastCircle_cy;\r\n                        // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                        AH.select('.previewDrawingPaths').prepend(scribble);\r\n                    }\r\n                }\r\n                if (initialPoint.x < 10 || previewCompassRadius < 80 || previewCompassRadius > 360 || initialPoint.x > imageWidth || initialPoint.y < 10 || initialPoint.y > imageHeight) {\r\n                    return;\r\n                }\r\n                // updates the position of rotationbar and change the center position of the circles that lies on rotationbar\r\n                updatePreviewCompassCalculation(initialPoint.x, initialPoint.y, previewCompassRadius, previewCompassAngle);\r\n            }\r\n        }\r\n    }\r\n\r\n    // stop the drawing and store the drawing sketched by the user and sets the user answer xml \r\n    function stopDraw() {\r\n        if ((checkCurrentPositionX == cursorLeft && checkCurrentPositionY == cursorTop && previewMode == 'line') || (previewMode == 'scribble' && previewScribblePath[previewScribbleCount].d.indexOf('L') == -1)) {\r\n            // removes the last element from the array previewScribblePath\r\n            previewScribblePath.pop();\r\n        } else {\r\n            if (!(isNaN(cursorLeft) && isNaN(cursorTop))) {\r\n                // adds a new attribute 'd' (with a namespace null)\r\n                scribble.setAttributeNS(null, 'd', previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop);\r\n                // adds value of variables cursorLeft and cursorTop separated by space with prefix 'L' in the previous value of the key 'd' at index specified in the variable previewScribbleCount of array previewScribblePath\r\n                previewScribblePath[previewScribbleCount].d = previewScribblePath[previewScribbleCount].d + ' L' + cursorLeft + ' ' + cursorTop;\r\n                // prepend the element stored into variable scribble in drawing container in which drawings are stored sketched by the help of drawing tools\r\n                AH.select('.previewDrawingPaths').prepend(scribble);\r\n            }\r\n            // increases the value of the variable previewScribbleCount by 1\r\n            previewScribbleCount++;\r\n            // increases the value of the variable previewUndoCount by 1\r\n            previewUndoCount++;\r\n            // makes array previewUndoList blank\r\n            previewUndoList = [];\r\n            // enables undo and cross (x) buttons\r\n            AH.select('#preview_undo').disabled = false;\r\n            AH.select('#preview_clearScreen').disabled = false;\r\n\r\n            // disabled redo button\r\n            AH.select('#preview_redo').disabled = true;\r\n        }\r\n        // indicates that scribble drawing is not sketching\r\n        isScribble = 0;\r\n        // sets the value of variable startDrawingByKey to 0\r\n        startDrawingByKey = 0;\r\n        // sets the value of variable isDrawStop to 0\r\n        isDrawStop = 0;\r\n        // sets the value of variable lockFocus to 0\r\n        lockFocus = 0;\r\n        // contains copy of array previewScribblePath\r\n        let tempArrayContainer = arrayCopy(previewScribblePath);\r\n        // stores the drawing sketched by user and sets the user answer xml\r\n        storeUserPaths(tempArrayContainer);\r\n    }\r\n\r\n    // function for opening the shortcut modal\r\n    function openShortcut() {\r\n        AH.getBS('#drawing_shortcut_modal', 'Modal').show();\r\n    }\r\n\r\n    // function for checking the user ans and loading the module on the basis of it\r\n    function checkUserAns() {\r\n        if (typeof (editorState) == 'undefined') {\r\n            // removes the reset button\r\n            AH.selectAll('.reset_group', 'remove');\r\n            if (uxml) {\r\n                if (uxml.search('<smans type=\"41\">') == -1 || uxml.search('<smans type=\"41\"></smans>') == 0 || uxml.search('undefined') != -1) {\r\n                    // blanks the user answer xml\r\n                    state.uxml = '';\r\n                    // AH.select(\"#special_module_user_xml\", 'value', \"\");\r\n                } else {\r\n                    if (isReview) {\r\n                        AH.selectAll('.previewBtnGrp', 'addClass', 'h');\r\n                        // sets the value 'none' of the variable previewMode\r\n                        previewMode = 'none';\r\n                        // not allowed user to perform the task\r\n                        AH.selectAll('.preview_drawing_container', 'css', {pointerEvents: \"none\"});\r\n                        // removes the class previewKeySvg from the svg element have id previewSvg\r\n                        AH.select('#previewSvg', 'removeClass', 'previewKeySvg');\r\n                    } else {\r\n                        // allowed user to perform the task\r\n                        AH.selectAll('.preview_drawing_container','css', {pointerEvents : \"\"});\r\n                        // shows all buttons\r\n                        AH.selectAll('.previewBtnGrp', 'removeClass', 'h')\r\n                        // adds the class previewKeySvg to the svg element have id previewSvg\r\n                        AH.select('#previewSvg','addClass', 'previewKeySvg');\r\n                        // contains the value of state array selectedTools at index 0 after removing the first character\r\n                        previewMode = state.selectedTools[0].substr(-(state.selectedTools[0].length - 1));\r\n                        // it's also used below in this function so it can be removed\r\n                        AH.selectAll('.preview_btn,#mark_points', 'removeClass', 'active');\r\n                        // it's also used below in this function so it can be removed\r\n                        AH.select('#preview' + state.selectedTools[0], 'addClass', 'active');\r\n                    }\r\n                    loadModule(state.uxml, isReview);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n</script>\r\n<main id=\"drawingPreviewMain\">\r\n    <div id=\"drawing_shortcut_modal\" class=\"modal fade\" tabIndex=\"-1\">\r\n        <div class=\"modal-dialog modal-dialog-centered\">\r\n            <div class=\"modal-content\">\r\n                <div class=\"modal-header\">\r\n                    <h4 class=\"modal-title\">{l.shortcuts}</h4>\r\n                    <button type=\"button\" class=\"close\" data-bs-dismiss=\"modal\">&times;</button>\r\n                </div>\r\n                <div class=\"modal-body overflow-y\">\r\n                    <!-- svelte-ignore a11y-unknown-role -->\r\n\r\n                    <table role=\"shortcut\" class=\"shortcutTable m-0 p-2 border-0 common-shortcut-table table-striped font15\">\r\n                        <tbody tabindex=\"0\" role=\"shortcut\">\r\n                            <tr tabindex=\"0\" role=\"shortcut\"><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.keys}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3 font-weight-bold\">{l.des_txt}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\"><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.ctrl_z}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.undo}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.ctrl_x}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.cut}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.ctrl_y}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.redo}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.enter}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.enable_tool}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.shift_enter}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.start_stop_tool}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.shift_arrow}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.compass_tools}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.locking}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.locking_txt}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.draw_key}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.draw_txt}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.tab}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.focus_next}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.shift_tab}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.focus_prev}</span></div></td></tr>\r\n                            <tr tabindex=\"0\" role=\"shortcut\" ><td class=\"py-1 font-weight-bold w-50 pr-0\">{l.esc}</td><td class=\"py-1\"><div class=\"d-flex\"><span class=\"pl-3\">{l.exit_txt}</span></div></td></tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div class=\"modal-footer\">\r\n                    <button type=\"button\" class=\"btn btn-light\" data-bs-dismiss=\"modal\">{l.close}</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"drawing_module_container svelte_items_testing\">\r\n        <button type=\"button\" class=\"h h-imp\" id=\"set-review\"></button>\r\n        <button type=\"button\" class=\"h h-imp\" id=\"unset-review\"></button>\r\n        <center class=\"preview_drawing_container\">\r\n            <div class=\"mt-2 mb-3 previewBtnGrp\">\r\n                <div class=\"btn-toolbar preview_drawing_toolbar\" role=\"toolbar\" aria-label={l.drawing_tools}>\r\n                    <div class=\"btn-group mr-2\" role=\"group\" tabIndex=\"0\" aria-label={l.draw_tools}>\r\n                        <button type=\"button\" data-title=\"scribble\" tabIndex=\"0\" aria-label={l.scribble_tool} title={l.scribble} name=\"preview_scribble\" id=\"preview_scribble\" class=\"geometryToolPreview tooltip_btn btn btn-light preview_toolbar preview_btn\"><i class=\"icomoon-pencil\"></i></button>\r\n                        <button type=\"button\" data-title=\"line\" tabIndex=\"0\" aria-label={l.line_tool} title={l.line} name=\"preview_line\" id=\"preview_line\" class=\"geometryToolPreview btn btn-light tooltip_btn preview_toolbar preview_btn\">/</button>\r\n                        <button type=\"button\" data-title=\"compass\" tabIndex=\"0\" aria-label={l.compass_tool} title={l.compass} name=\"preview_compass\" id=\"preview_compass\" class=\"geometryToolPreview tooltip_btn btn btn-light preview_toolbar preview_btn\"><i class=\"icomoon-compass1\"></i></button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-2\" role=\"group\" tabIndex=\"0\" aria-label={l.removing_tools}>\r\n                        <button type=\"button\" data-title=\"eraser\" tabIndex=\"0\" aria-label={l.delete_tool} title={l.delete_tool} name=\"eraser\" id=\"preview_eraser\" class=\"btn btn-light tooltip_btn preview_toolbar preview_btn\"><i class=\"icomoon-delete-sm\"></i></button>\r\n                        <button type=\"button\"  title={l.clear_screen} tabIndex=\"0\" aria-label={l.clear_screen} name=\"clearScreen\" id=\"preview_clearScreen\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-close-2\"></i></button>\r\n                        <button type=\"button\" title={l.redo} name=\"redo\" tabIndex=\"0\" aria-label={l.redo} id=\"preview_redo\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-redo-2\"></i></button>\r\n                        <button type=\"button\" title={l.undo} name=\"undo\" tabIndex=\"0\" aria-label={l.undo} id=\"preview_undo\" disabled=\"disabled\" class=\"btn btn-light tooltip_btn\"><i class=\"icomoon-undo-2\"></i></button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-2 marking_group\" role=\"group\" aria-label={l.marking_tools}>\r\n                        <button type=\"button\" title={l.mark_finish_point} name=\"mark_points\" tabIndex=\"0\" aria-label={l.mark_ans_point} id=\"mark_points\" class=\"btn tooltip_btn btn-light\">{l.mark_pnt}</button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-2 reset_group\" role=\"group\" aria-label={l.reset}>\r\n                        <button type=\"button\" title={l.reset} name=\"preview_reset_btn\" tabIndex=\"0\" aria-label={l.reset_btn} id=\"preview_reset_btn\" class=\"btn tooltip_btn btn-light\"><i class=\"icomoon-new-24px-reset-1\"></i></button>\r\n                    </div>\r\n                    <div class=\"btn-group mr-2\" role=\"group\" aria-label={l.shortcuts}>\r\n                        <button type=\"button\" title={l.shortcuts} name=\"shortcut_modal_btn\" aria-label={l.shortcuts} tabIndex=\"0\" id=\"shortcut_modal_btn\" class=\"tooltip_btn btn btn-primary\" on:click={openShortcut}>{l.shortcuts}</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div>\r\n                <div id=\"centerImg\" class=\"centerImg centerImgPreview my-auto relative ml-0\">\r\n                    <img class=\"border\" alt=\"\" src={bgImgPath + state.bgImg} id=\"svgImgPreview\" />\r\n                    <div>\r\n                        <span class=\"icomoon-plus s2 move_icon position-absolute h\" id=\"moveDrawIcon\"></span>\r\n                    </div>\r\n                    <svg width=\"100%\" height=\"100%\" id=\"previewSvg\" class=\"previewKeySvg\" tabIndex=\"0\" aria-labelledby=\"previewSvgTitle\">\r\n                        <title id=\"previewSvgTitle\">{state.alt}</title>\r\n                        <g class=\"backgroundFocusPathPreview\"></g>\r\n                        <g class=\"previewDrawingPaths\"></g>\r\n                        <g class=\"correct_answer_container\"></g>\r\n                        <g class=\"backgroundFocusPointPreview\"></g>\r\n                        <g class=\"previewMarkingPaths\"></g>\r\n                        <svg class=\"drawingCompassSvg h\" focusable=\"false\">\r\n                            <svg>\r\n                                <g>\r\n                                    <circle class=\"drawingCompassRoute compass_route\" cx=\"267.984375\" cy=\"173\" r=\"80\" fill-opacity=\"0\" stroke=\"#C9C9C9\" stroke-dasharray=\"2,10\" stroke-width=\"2\"></circle>\r\n                                    <g>\r\n                                        <line class=\"compassRotationBar compass_radius\" x1=\"267.984375\" y1=\"173\" x2=\"267.984375\" y2=\"253\" stroke=\"#C9C9C9\" stroke-width=\"2\"></line>\r\n                                    </g>\r\n                                    <g >\r\n                                        <circle tabIndex=\"0\" class=\"drawingCompassCenter compass_center\" cx=\"267.984375\" cy=\"173\" r=\"17\" aria-labelledby=\"compassCenterTitle compassCenterDesc\" focusable=\"true\" fill=\"url(#previewDrawingCenter)\" stroke=\"#C9C9C9\"></circle>\r\n                                        <title id=\"compassCenterTitle\">{l.compass_center}</title>\r\n                                        <desc id=\"compassCenterDesc\">{l.shift_arrow_use}</desc>\r\n                                        <defs>\r\n                                            <pattern id=\"previewDrawingCenter\" width=\"20\" height=\"20\" fill=\"red\">\r\n                                                <svg x=\"0px\" y=\"0px\" viewBox=\"1 -3 21 35\" width=\"33\" height=\"41\">\r\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M3.22,15.1L1,12l2.22-3.1C3.22,10.97,3.22,13.03,3.22,15.1z\" />\r\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M8.9,3.22L12,1l3.1,2.22C13.03,3.22,10.97,3.22,8.9,3.22z\" />\r\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M15.1,20.78L12,23l-3.1-2.22C10.97,20.78,13.03,20.78,15.1,20.78z\" />\r\n                                                    <path fill=\"#808080\" class=\"st0\" d=\"M20.78,8.9L23,12l-2.22,3.1C20.78,13.03,20.78,10.97,20.78,8.9z\" />\r\n                                                    <circle cx=\"12\" cy=\"12\" r=\"2\" fill=\"#333333\" />\r\n                                                </svg>\r\n                                            </pattern>\r\n                                        </defs>\r\n                                    </g>\r\n                                    <g>\r\n                                        <circle class=\"compass_radius_icon mid_circle\" cx=\"267.984375\" cy=\"213\" r=\"17\" fill=\"url(#previewDrawingRadius)\" transform=\"rotate(90,160,168)\" aria-labelledby=\"compassRadiusTitle compassRadiusDesc\" tabIndex=\"0\" focusable=\"true\" stroke=\"#C9C9C9\"></circle>\r\n                                        <title id=\"compassRadiusTitle\">{l.compass_radius + (previewCompassRadius * 0.02649).toFixed(2)}</title>\r\n                                        <desc id=\"compassRadiusDesc\">{l.shift_arrow_radius}</desc>\r\n                                        <defs>\r\n                                            <pattern id=\"previewDrawingRadius\" width=\"20\" height=\"20\">\r\n                                                <svg x=\"0px\" y=\"0px\" viewBox=\"1 -5 21 34\" width=\"33\" height=\"33\">\r\n                                                    <g>\r\n                                                        <g>\r\n                                                            <rect x=\"8.53\" y=\"1.11\" width=\"1.5\" height=\"21.79\" />\r\n                                                        </g>\r\n                                                        <g>\r\n                                                            <rect x=\"13.97\" y=\"1.11\" width=\"1.5\" height=\"21.79\" />\r\n                                                        </g>\r\n                                                    </g>\r\n                                                    <g>\r\n                                                        <g>\r\n                                                            <path d=\"M5.87,16.87L1,12l4.87-4.87C5.87,10.38,5.87,13.62,5.87,16.87z\" />\r\n                                                        </g>\r\n                                                        <g>\r\n                                                            <path d=\"M18.13,16.87L23,12l-4.87-4.87C18.13,10.38,18.13,13.62,18.13,16.87z\" />\r\n                                                        </g>\r\n                                                    </g>\r\n                                                </svg>\r\n                                            </pattern>\r\n                                        </defs>\r\n                                    </g>\r\n                                    <g>\r\n                                        <circle class=\"compass_rotation midSmallCircle\" cx=\"267.984375\" cy=\"233\" r=\"8\" fill=\"url(#previewMidSmallCircle_icon)\" area-label=\"Compass Angle Use Shift and arrow keys to increase or decrease the radius\" aria-labelledby=\"compassRotationTitle compassRotationDesc\" tabIndex=\"0\" focusable=\"true\" transform=\"rotate(90,160,193)\"></circle>\r\n                                        <title id=\"compassRotationTitle\">{l.compass_angle + previewCompassAngle + l.degree}</title>\r\n                                        <desc id=\"compassRotationDesc\">{l.shift_arrow_angle}</desc>\r\n                                        <defs>\r\n                                            <pattern id=\"previewMidSmallCircle_icon\" width=\"20\" height=\"20\">\r\n                                                <svg width=\"16px\" height=\"16px\" viewBox=\"0 0 14 14\" version=\"1.1\">\r\n                                                    <path fill=\"#000\" opacity=\"0.8\" d=\"M7,14 C3.13400675,14 0,10.8659932 0,7 C0,3.13400675 3.13400675,0 7, 0 C10.8659932,0 14,3.13400675 14,7 C14,10.8659932 10.8659932,14 7, 14 Z M4.66666667,8.16666667 L7,11.6666667 L9.33333333,8.16666667 L4.66666667,8.16666667 Z M4.66666667,5.83333333 L9.33333333,5.83333333 L7,2.33333333 L4.66666667,5.83333333 Z\"></path>\r\n                                                </svg>\r\n                                            </pattern>\r\n                                        </defs>\r\n                                    </g>\r\n                                    <g>\r\n                                        <circle class=\"drawing-compass-pointer lastCircle\" cx=\"267.984375\" cy=\"253\" r=\"3\" fill={state.lineColor}></circle>\r\n                                        <circle class=\"drawing-compass-pointer-border lastCircle lastbigcircle\" aria-labelledby=\"compassAngleTitle compassAngleDesc\" cx=\"267.984375\" cy=\"253\" r=\"17\" tabIndex=\"0\" focusable=\"true\" fill-opacity=\"0\" stroke=\"#C9C9C9\"></circle>\r\n                                        <title id=\"compassAngleTitle\">{l.compass_draw}</title>\r\n                                        <desc id=\"compassAngleDesc\">{l.shift_arrow_draw}</desc>\r\n                                    </g>\r\n                                    <g>\r\n                                        <circle class=\"lastCircleMid\" fill=\"url(#previewLastCircleMid_icon)\" transform=\"rotate(90,160,243)\" cx=\"267.984375\" cy=\"293\" r=\"12\" opacity=\"0\"></circle>\r\n                                        <defs>\r\n                                            <pattern id=\"previewLastCircleMid_icon\" width=\"20\" height=\"20\">\r\n                                                <svg width=\"24\" height=\"23\" viewBox=\"0 0 11 27\" version=\"1.1\" enableBackground=\"new 0 0 8 24\">\r\n                                                    <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\" opacity=\"0.5\">\r\n                                                        <g transform=\"translate(-516.000000, -445.000000)\" fill=\"#333333\" fillRule=\"nonzero\">\r\n                                                            <g transform=\"translate(207.000000, 318.000000)\">\r\n                                                                <g transform=\"translate(313.742737, 140.576561) rotate(-2.000000) translate(-313.742737, -140.576561) translate(308.242737, 127.076561)\">\r\n                                                                    <path d=\"M3.76491276,22.4309727 C5.88207272,19.902578 7.10843487, 16.447736 7.10843487,12.7446281 C7.10843487,9.90533039 6.38974128, 7.20188959 5.07542401,4.93464319 L1.71316547,5.67221801 L4.9100909, 0.48305188 L10.1719173,3.81663137 L7.11351005,4.48755064 C8.4088902, 6.93966677 9.10843487,9.78181395 9.10843487,12.7446281 C9.10843487, 16.6677555 7.87827881,20.3638018 5.71250857,23.1972812 L8.63385425, 24.3467251 L2.93165771,26.8255625 L0.595287046,21.1838396 L3.76491276, 22.4309727 Z\" class=\"\"></path>\r\n                                                                </g>\r\n                                                            </g>\r\n                                                        </g>\r\n                                                    </g>\r\n                                                </svg>\r\n                                            </pattern>\r\n                                        </defs>\r\n                                    </g>\r\n                                </g>\r\n                            </svg>\r\n                        </svg>\r\n                    </svg>\r\n                </div>\r\n            </div>\r\n        </center>\r\n    </div>\r\n</main>"],"names":["l","mark_pnt","shortcuts","ctx","alt","compass_center","shift_arrow_use","compass_radius","toFixed","shift_arrow_radius","compass_angle","degree","shift_arrow_angle","compass_draw","shift_arrow_draw","keys","des_txt","ctrl_z","undo","ctrl_x","cut","ctrl_y","redo","enter","enable_tool","shift_enter","start_stop_tool","shift_arrow","compass_tools","locking","locking_txt","draw_key","draw_txt","tab","focus_next","shift_tab","focus_prev","esc","exit_txt","close","scribble_tool","scribble","line_tool","line","compass_tool","compass","draw_tools","delete_tool","clear_screen","removing_tools","mark_finish_point","mark_ans_point","marking_tools","reset","reset_btn","drawing_tools","bgImgPath","bgImg","lineColor","xmlns","arrayCopy","array","tempArray","index","length","push","mode","order","type","d","checkIntersection","ax","ay","bx","by","cx","cy","r","a","b","disc","t1","Math","sqrt","t2","preview_mouseX","preview_mouseY","checkCurrentPositionX","checkCurrentPositionY","midCircle_cx","midCircle_cy","midSmallCircle_cx","midSmallCircle_cy","lastCircle_cx","lastCircle_cy","lastSmallCircle_cx","lastSmallCircle_cy","xml","uxml","isReview","showAns","editorState","isDrawingPreview","isDrawCompassPreview","isStoreStart","isDrawStop","startDrawingByKey","previewMode","previewColor","previewScribblePath","previewScribbleCount","previewUndoCount","previewUndoList","previewRedoList","accessibilityPointsPreview","focusPointCountPreview","lockFocus","isScribble","previewCompassRadius","isPreviewCompassMove","previewCompassAngle","isPreviewRadiusIncrease","initialPoint","x","y","finalPoint","isPreviewRadiusRotate","cursorTop","cursorLeft","defaultXML","cdata","isAnswerCorrect","isMarking","markPoints","userAnsPath","userAnsXML","userMarkingPoint","userDrawPath","userAnsCorrect","markPointsData","is_mac","prev_store","writable","correctAnswer","openImg","openDrag","focusDATA","userXML","selectedTools","remediationMode","imgWidth","markPointColor","state","subscribe","value","compassLastcircleEvent","event","stopDraw","shiftKey","AH","selectAll","clearMarking","cursor","checkPreviewRadiusAndAngle","document","createElementNS","setPreviewColor","setAttributeNS","reinitializeFoucsEvent","listenAll","target","classList","add","markPointEvent","undefined","screenX","keyCode","preventDefault","markFinalPoints","select","toolbarAction","current","getAttribute","previewMouseLeave","setPreviewMouseCoordinates","split","pop","prepend","disabled","updatePreviewCompassCalculation","storeUserPaths","setReview","storeCompassPathByKey","parseXMLForAnswer","substr","pointerEvents","createUXML","addMarkPointOnLoad","JSON","parse","tabindex","aria-labelledby","insert","ans_correct","stroke","ans_incorrect","unsetReview","innerText","parseXMLForGettingData","XMLToJSON","smxml","_markPointColor","_color","update","item","_bgimg","_imgAlt","_width","backgroundPoint","__cdata","div","_selectedDrawingType","updatedFocusCDATA","replace","subPoints","append","joinMarkedPoint","toolsIndex","style","Number","src","width","enableBsAll","container","error","console","warn","func","checkAns","uaXML","smans","ansCorrect","toLowerCase","eraser","curClass","curArray","tempArrayContainer","currentIndex","indexOf","convertJSONtoArray","stringify","drawPathArray","subindex","filter","element","window","ISSPECIALMODULEUSERXMLCHANGE","ans","onUserAnsChange","uXml","markArray","focusPoint","pointStartValues","pointEndValues","drawMark","markPointsAnsData","checkCorrectAnswer","setStatusOfAns","lineCount","cdataIndex","correct","incorrect","atan2","PI","cos","sin","x1","y1","x2","y2","transform","curAngle","boundary","getElementById","getBoundingClientRect","clientX","left","clientY","top","previewThickness","strokeWidth","fill","compassKeyEvent","contains","imageWidth","clientWidth","imageHeight","clientHeight","isNaN","onMount","navigator","userAgent","listen","swal","text","reset_module","icon","buttons","then","bind","ctrlKey","click","offsetHeight","drawLine","setTimeout","nodeName","clearTimeout","draw_scribble","pow","remove","opacity","afterUpdate","search","markpoints","createUserPath","review","getBS","show"],"mappings":"u6BAkvE4LA,EAAEC,eAMyBD,EAAEE,gBAWpKC,KAAMC,UAeaJ,EAAEK,qBACJL,EAAEM,sBAeAN,EAAEO,gBAAyC,OAAvBJ,MAAgCK,QAAQ,SAC9DR,EAAES,yBA0BET,EAAEU,cAAgBP,KAAsBH,EAAEW,aAC5CX,EAAEY,wBAYHZ,EAAEa,mBACJb,EAAEc,kHAxI1Bd,EAAEE,gIAQ2DF,EAAEe,uDAAoFf,EAAEgB,mDACxFhB,EAAEiB,yDAAqEjB,EAAEkB,gDACxElB,EAAEmB,yDAAqEnB,EAAEoB,+CACzEpB,EAAEqB,yDAAqErB,EAAEsB,gDACzEtB,EAAEuB,0DAAoEvB,EAAEwB,2DACxExB,EAAEyB,kEAA0EzB,EAAE0B,+DAC9E1B,EAAE2B,kEAA0E3B,EAAE4B,6DAC9E5B,EAAE6B,8DAAsE7B,EAAE8B,2DAC1E9B,EAAE+B,+DAAuE/B,EAAEgC,wDAC3EhC,EAAEiC,0DAAkEjC,EAAEkC,0DACtElC,EAAEmC,gEAAwEnC,EAAEoC,0DAC5EpC,EAAEqC,0DAAkErC,EAAEsC,6DAKxFtC,EAAEuC,wrIAYEvC,EAAEwC,+BAAsBxC,EAAEyC,4PAC9BzC,EAAE0C,2BAAkB1C,EAAE2C,oRACnB3C,EAAE4C,8BAAqB5C,EAAE6C,6PAH/B7C,EAAE8C,0IAMG9C,EAAE+C,6BAAoB/C,EAAE+C,2MAC7D/C,EAAEgD,wDAAuChD,EAAEgD,gNAC5ChD,EAAEsB,oEAA2CtB,EAAEsB,sKAC/CtB,EAAEkB,oEAA2ClB,EAAEkB,+LAJdlB,EAAEiD,sDAOnCjD,EAAEkD,wFAA+DlD,EAAEmD,0KADjCnD,EAAEoD,8FAIpCpD,EAAEqD,kFAAyDrD,EAAEsD,yKAD7BtD,EAAEqD,6CAIlCrD,EAAEE,kEAAiDF,EAAEE,qLADjCF,EAAEE,2GAlBiBF,EAAEuD,0GAyB1CC,EAAYrD,KAAMsD,6oHA0E0DtD,KAAMuD,82HAhFkEvD,0CAMpJqD,EAAYrD,KAAMsD,wCAKjBtD,KAAMC,mCA+BaJ,EAAEO,gBAAyC,OAAvBJ,MAAgCK,QAAQ,kCA2B1DR,EAAEU,cAAgBP,KAAsBH,EAAEW,sCAWYR,KAAMuD,u9HAlzE9HF,EAAY,oDACZG,EAAQ,sCAwgDHC,EAAUC,OAEXC,aACKC,EAAQ,EAAGA,EAAQF,EAAMG,OAAQD,IAEtCD,EAAUG,MACNC,KAAM,OACNC,MAAO,EACPC,KAAM,aACNL,MAAO,EACPM,EAAG,SAGPP,EAAUC,GAAOG,KAAOL,EAAME,GAAOG,KAErCJ,EAAUC,GAAOI,MAAQN,EAAME,GAAOI,MAEtCL,EAAUC,GAAOK,KAAOP,EAAME,GAAOK,KAErCN,EAAUC,GAAOA,MAAQF,EAAME,GAAOA,MAEtCD,EAAUC,GAAOM,EAAIR,EAAME,GAAOM,SAG/BP,WA6VFQ,EAAkBC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,OAK3CC,IAFJL,GAAME,IAFNJ,GAAMI,KAIeF,EAAKF,KAD1BG,GAAME,IAFNJ,GAAMI,KAGuCF,EAAKF,GAC9CO,EAAI,GAAKR,GAAME,EAAKF,GAAMC,GAAME,EAAKF,IAGrCQ,EAAOD,EAAIA,EAAI,EAAID,GAFfP,EAAKA,EAAKC,EAAKA,EAAKK,EAAIA,MAG5BG,GAAQ,SACD,MAEPC,IAAOF,EAAIG,KAAKC,KAAKH,KAAU,EAAIF,GACnCM,IAAOL,EAAIG,KAAKC,KAAKH,KAAU,EAAIF,UAClC,EAAIG,GAAMA,EAAK,GAAO,EAAIG,GAAMA,EAAK,wBAh4D1C3C,EAEA4C,EAAgBC,EAYhBC,EAEAC,EAiBAb,EAEAC,EAEAa,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,EAEAC,OArEOC,WACHC,eACAC,cACAC,kBACAC,KAIJC,GAAmB,EAEnBC,GAAuB,EAEvBC,GAAe,EAEfC,EAAa,EAEbC,EAAoB,EAMpBC,EAAc,WAEdC,EAAe,UAIfC,KAEAC,EAAuB,EAMvBC,EAAmB,EAEnBC,KAEAC,KAEAC,KAEAC,EAAyB,EAEzBC,EAAY,EAEZC,EAAa,EAuBbC,EAAuB,IAEvBC,GAAuB,EAEvBC,EAAsB,GAEtBC,GAA0B,EAE1BC,IAAiBC,EAAG,KAAMC,EAAG,MAE7BC,IAAeF,EAAG,KAAMC,EAAG,MAI3BE,GAAwB,EAExBC,GAAY,GAEZC,GAAa,GAEbC,GAAa,GACbC,GAAQ,GAERC,IAAkB,EAElBC,GAAY,EAEZC,MAIAC,MAEAC,GAAa,4BAEbC,MAEAC,MAEAC,IAAiB,EAEjBC,MAEAC,IAAS,EAETC,GAAaC,GAEbC,eAAe,EAEf9C,IAAK,GACLC,KAAO,GAEP8C,SAAS,EAETC,UAAU,EAEVxF,MAAO,yBAEPyE,MAAO,GAEPgB,UAAW,GAEXC,QAAS,GAETzF,UAAW,UAEX0F,eArCsB,YAAa,QAAS,YAuC5CC,gBAAiB,MAEjBC,SAAU,MAEVlJ,IAAK,iBAELmJ,eAAgB,YAIhBC,MACgBX,GAAWY,WAAUC,QAC3CF,GAAQE,eAowBGC,GAAuBC,MACxBvC,GACAwC,KAEAD,EAAME,cACDvD,SAELA,GAAuB,EAEvBC,GAAe,EAEfuD,EAAGC,UAAU,0BAA2B,WAAY,qBAEpC,WAAfrD,GAA0C,aAAdiD,EAAMxF,MAAyBwF,EAAME,YAElEG,KAEAF,EAAGC,UAAU,0BAA0B,OAAQE,OAAU,cACrD3D,GAAsC,aAAdqD,EAAMxF,QAE9BkC,GAAmB,EAEnBwB,GAAwB,GAG5BqC,KAIA1H,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EAh6BD,GAk6BfnE,EAAS8H,eAAe,KAAM,YAAa5D,EAAc,IAAMG,GAE/DrE,EAAS8H,eAAe,KAAM,aAAczD,GAE5CrE,EAAS8H,eAAe,KAAM,IAAK,IAAM1E,EAAgB,IAAMC,GAE/DrD,EAAS8H,eAAe,KAAM,WAAY,KAE1ChF,EAAwBM,EAExBL,EAAwBM,EAExBe,EAAoB5C,MAChBC,KAAM,MACNC,MAAO2C,EACP1C,KAAMuC,EAAc,IAAMG,EAC1B/C,MAAO+C,EACPzC,EAAG,IAAMwB,EAAgB,IAAMC,cAMlC0E,KACLT,EAAGU,UAAU,eAAgB,kBAAmBb,GAE5CG,EAAGC,UAAU,eAAgB,cAAe,qBAE5CJ,EAAMc,OAAOC,UAAUC,IAAI,wBAE/Bb,EAAGU,UAAU,eAAgB,mBAEzBV,EAAGC,UAAU,eAAgB,cAAe,iCAK3Ca,GAAejB,GACCkB,MAAjBlB,EAAMmB,UAGNrE,GAAqBD,GAErBoD,KAEkB,IAAjBD,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAmC,IAAlBpB,EAAMmB,SAErDnB,EAAMqB,iBAENC,KACI9C,IAEA2B,EAAGoB,OAAO,gBAAiB,WAAY,KAEvCpB,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,gBAG3CH,EAAGoB,OAAO,gBAAiB,cAAe,KAG1CpB,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,WAG1B,SAAdN,EAAMxF,MAAqC,IAAlBwF,EAAMmB,SAEtCG,eAKCE,GAAcC,EAASzB,GACxBvC,GACAwC,KAEc,SAAdD,EAAMxF,MAAqC,IAAjBwF,EAAMoB,SAAkC,IAAjBpB,EAAMoB,UAEvDrE,EAAc0E,EAAQC,aAAa,cAEnCvB,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,cAE3CH,EAAGoB,OAAO,gBAAiB,WAAY,KAEvCzE,EAAoB,EAEpBD,EAAa,EACM,UAAfE,EAEAoD,EAAGC,UAAU,4BAA6B,WAAY,eAGtDD,EAAGC,UAAU,4BAA6B,cAAe,eAG7DD,EAAGC,UAAU,qBAAsB,WAAY,KAC5B,WAAfrD,GAEAoD,EAAGC,UAAU,qBAAsB,cAAe,KAGtDC,MAEkB,IAAjBL,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAiC,UAAfrE,GAA0C,WAAfA,IAE3EoD,EAAGoB,OAAO,gBAAiB,cAAe,KAE1CpB,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,UAE3CxD,GAAqBD,GAErBoD,cAKC0B,GAAkB3B,UACfjD,OACK,WACA,WACGL,IAEAkF,GAA2B5B,GACvBxC,IAAe7B,GAAyBF,GAAkBG,GAAyBF,GAAiC,QAAfqB,GAA0C,YAAfA,GAA+BE,EAAoBC,GAAsBzC,EAAEoH,MAAM,KAAKzH,OAAS,EAAK,IAEpO6C,EAAoB6E,MAEnBnG,GAAyBF,GAAkBG,GAAyBF,GAAiC,QAAfqB,GAA0C,YAAfA,GAA+BE,EAAoBC,GAAsBzC,EAAEoH,MAAM,KAAKzH,OAAS,EAAK,EAEtN6C,EAAoB6E,OAGpBjJ,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOgB,EAAiB,IAAMC,GAE/GuB,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOgB,EAAiB,IAAMC,EAE1HyE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CqE,IAEAC,IAEAC,KAEA+C,EAAGoB,OAAO,wBAAwBS,UAAW,EAC7C7B,EAAGoB,OAAO,iBAAiBS,UAAW,EAEtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,IAI9CtF,GAAmB,YAElB,UAEDmB,GAA0B,EAE1BK,GAAwB,EACpBP,IAEAiE,GAA2B5B,GAE3BjF,EAAKU,EAELT,EAAKU,MAELgC,EAAuByC,EAAGoB,OAAO,wBAAwBG,aAAa,MAEtEO,GAAgClH,EAAIC,EAAI0C,EAAsBE,GAE9DD,GAAuB,GAEvBjB,IACKO,EAAoBC,GAAsBzC,EAAEoH,MAAM,KAAKzH,OAAS,EAAK,EAEtE6C,EAAoB6E,OAGpBjJ,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,GAE9Ge,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,EAEzHiE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CqE,IAEAC,IAEAC,KAEA+C,EAAGoB,OAAO,wBAAwBS,UAAW,EAC7C7B,EAAGoB,OAAO,iBAAiBS,UAAW,EAEtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,GAG1CtF,GAAmB,GAGvByD,EAAGC,UAAU,0BAA2B,OAASE,OAAU,SAMnE4B,GAFyBlI,EAAUiD,aAMlCkF,SACL5F,GAAW,IACPO,GAAqBD,GAAcW,IAEnCyC,MAECtD,GAAwBC,GAEzBwF,KAGJC,IAAkB,GAElBtF,EAAc6C,GAAMJ,cAAc,GAAG8C,SAAS1C,GAAMJ,cAAc,GAAGpF,OAAS,IAE9E+F,EAAGC,UAAU,4BAA6B,cAAe,UAEzDD,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc,GAAI,WAAY,UACxC,WAAfzC,EAEAoD,EAAGC,UAAU,qBAAsB,cAAe,KAGlDD,EAAGC,UAAU,qBAAsB,WAAY,SAGnDR,GAAMH,gBAAkB,SAExBU,EAAGC,UAAU,iBAAkB,WAAY,KAE3CrD,EAAc,OAEdoD,EAAGC,UAAU,6BAA8B,OAAQmC,cAAe,SAElEpC,EAAGoB,OAAO,cAAe,cAAe,iBAGxCpB,EAAGC,UAAU,oCAAqC,UAElDoC,KAEAC,GAAmBC,KAAKC,MAAM5D,KAE9BoB,EAAGC,UAAU,mBAAmB,QAC5BwC,SAAY,IACZC,kBAAmB,eAEnBjD,GAAMT,eAENgB,EAAG2C,OAAO,uBAAuB,0BAA4B1M,EAAE2M,YAAc,WAAY,aAEzF5C,EAAGC,UAAU,eAAgB,OAAQ4C,OAAU,cAG/C7C,EAAG2C,OAAO,uBAAuB,0BAA4B1M,EAAE6M,cAAgB,WAAY,aAE3F9C,EAAGC,UAAU,eAAgB,OAAQ4C,OAAU,YAE/C7C,EAAGC,UAAU,iBAAkB,OAAQ4C,OAAU,sBAKhDE,SACL3G,GAAW,GAEX4D,EAAGC,UAAU,6BAA6B,OAAQmC,cAAgB,KAElEpC,EAAGC,UAAU,iBAAkB,cAAe,KAE9CD,EAAGoB,OAAO,cAAc,WAAY,iBAEpCxE,EAAc6C,GAAMJ,cAAc,GAAG8C,SAAS1C,GAAMJ,cAAc,GAAGpF,OAAS,IAE9E+F,EAAGC,UAAU,4BAA6B,cAAe,UAEzDD,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc,GAAI,WAAY,UACxC,WAAfzC,GAEAoD,EAAGC,UAAU,qBAAsB,cAAe,KAElDD,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,cAE3CH,EAAGoB,OAAO,gBAAiB,WAAY,MAGvCpB,EAAGC,UAAU,qBAAsB,WAAY,KAGnDD,EAAGC,UAAU,4BAA6B,cAAe,UAEzDD,EAAGC,UAAU,WAAaR,GAAMJ,cAAc,GAAI,WAAY,UAE9DW,EAAGC,UAAU,yCAA0C,UAEvDD,EAAGoB,OAAO,gBAAgB4B,UAAY,cACtChD,EAAGoB,OAAO,gBAAgBS,UAAW,EAErCxD,GAAY,MACZoB,GAAMH,gBAAkB,UAExBU,EAAGC,UAAU,6BAA8B,UAE3CD,EAAGC,UAAU,eAAgB,OAAQ4C,OAAWpD,GAAMD,iBACtDQ,EAAGC,UAAU,eAAe,aAAa,qBAIpCgD,SAGD/E,GAAagF,EAAUhH,GACiB6E,MAApC7C,GAAWiF,MAAMC,kBAEjBlF,GAAWiF,MAAMC,gBAAkB,WAERrC,MAA3B7C,GAAWiF,MAAME,SAEjBnF,GAAWiF,MAAME,OAAS,oBAG9BvE,GAAWwE,QAAQC,IAEfA,EAAK7J,MAAQwE,GAAWiF,MAAMK,OAE9BD,EAAKlN,IAAM6H,GAAWiF,MAAMM,QAE5BF,EAAKhE,SAAWrB,GAAWiF,MAAMO,OAEjCH,EAAK5J,UAAYuE,GAAWiF,MAAME,OAElCE,EAAKpE,UAAYjB,GAAWiF,MAAMQ,gBAAgBC,QAElDL,EAAK/D,eAAiBtB,GAAWiF,MAAMC,gBAEvCG,EAAKlE,cAAgBnB,GAAWiF,MAAMU,IAAIC,qBAAqBpC,MAAM,KAC9D6B,KAIXpG,KAEAC,EAAyB,MAErB2G,EAAoBtE,GAAMN,UAE9B4E,EAAoB,IAAMA,EAAkBC,QAAQ,KAAM,KAAO,IAEjED,EAAoBxB,KAAKC,MAAMuB,GAE/B/D,EAAGC,UAAU,2GAA4G,kBAChHjG,EAAQ,EAAGA,EAAQ+J,EAAkB9J,OAAQD,IAElDmD,EAA2BjD,KAAK6J,EAAkB/J,GAAOA,YAEpDA,EAAQ,EAAGA,EAAQ+J,EAAkB9J,OAAQD,aACzCiK,EAAY,EAAGA,EAAYF,EAAkB/J,GAAOA,GAAOC,OAAQgK,IAExE9G,EAA2BnD,GAAOiK,GAAWrG,EAAImG,EAAkB/J,GAAOA,GAAOiK,GAAWrG,EAE5FT,EAA2BnD,GAAOiK,GAAWpG,EAAIkG,EAAkB/J,GAAOA,GAAOiK,GAAWpG,EAE5FnF,EAAW2H,SAASC,gBAAgB1G,EAAO,UAE3C2G,GAAgB,UArxCT,GAuxCP7H,EAAS8H,eAAe,KAAM,kBAAmB,cAAgBpD,EAAyB,qBAAuBA,EAAyB,SAE1I1E,EAAS8H,eAAe,KAAM,WAAY,KAE1C9H,EAAS8H,eAAe,KAAM,QAAS,eAEvC9H,EAAS8H,eAAe,KAAM,kBAAmBpD,GAEjD1E,EAAS8H,eAAe,KAAM,KAAMrD,EAA2BnD,GAAOiK,GAAWrG,GAEjFlF,EAAS8H,eAAe,KAAM,KAAMrD,EAA2BnD,GAAOiK,GAAWpG,GAEjFnF,EAAS8H,eAAe,KAAM,IAAK,OAEnCR,EAAGoB,OAAO,gCAAgC8C,OAAOxL,GAEjDsH,EAAG2C,OAAO,+BAAgC,yBAA2BvF,EAAyB,0BAA4BA,EAAyB,uCAAyCA,EAAyB,4GAA6G,aAElUA,IAGJ+G,GAAgBhH,EAA2BnD,GAAQ,GAGvD6C,EAAe4C,GAAM9F,UAErBmD,KAEAN,GAAuB,EAEvBC,GAAe,EAEfC,EAAa,EAEbC,EAAoB,EAEpBI,EAAuB,EAEvBC,EAAmB,EAEnBC,KAEAC,KAEAmB,GAAY,EAEZC,MAEA1B,EAAc6C,GAAMJ,cAAc,GAAG8C,SAAS1C,GAAMJ,cAAc,GAAGpF,OAAS,IAC1EqC,GAEA0D,EAAGC,UAAU,8DAA+D,UAE7D,WAAfrD,GAEAoD,EAAGC,UAAU,qBAAsB,cAAe,KAElDD,EAAGoB,OAAO,cAAc,OAAQjB,OAAU,cAE1CH,EAAGoB,OAAO,gBAAgB,WAAW,MAGrCpB,EAAGC,UAAU,qBAAsB,WAAY,KAGnDD,EAAGoB,OAAO,gBAAgBS,UAAW,EACrC7B,EAAGoB,OAAO,gBAAgB4B,UAAY,cAGtChD,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,wBAAwBS,UAAW,EAE7C7B,EAAGC,UAAU,uBAAwB,WAAY,aACxCmE,EAAa,EAAGA,EAAa3E,GAAMJ,cAAcpF,OAAQmK,IAE9DpE,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc+E,GAAa,cAAe,KAG3EpE,EAAGC,UAAU,4BAA4B,cAAe,UAExDD,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc,GAAI,WAAY,UAE3DW,EAAGC,UAAU,8CAA8C,QAASoE,MAAS,UAAYC,OAAO7E,GAAMF,UAAY,GAAK,OAEvHS,EAAGoB,OAAO,4BAA6B,QACnCmD,IAAO9K,EAAY,GAAKgG,GAAM/F,MAC9BrD,IAAOoJ,GAAMpJ,IACbmO,MAAS/E,GAAMF,WAGnBS,EAAGyE,YAAY,eAAgB,WAC3BC,UAAU,eAETC,GACLC,QAAQC,MACJF,MAAAA,EACAG,KAAM,0CAMT3D,KAELnB,EAAGC,UAAU,qBAAsB,WAAY,KAE/CD,EAAGC,UAAU,mBAAoB,cAAgB,eAC7C5B,IAEA2B,EAAGC,UAAU,eAAe,cAAc,UAE1CD,EAAGoB,OAAO,gBAAgB4B,UAAY,iBACtChD,EAAGoB,OAAO,eAAgB,WAAY,UAEtC/C,GAAY,EAEZ2B,EAAGC,UAAU,oCAAqC,UAElDxB,MAEAH,MACKhC,GAED0D,EAAGC,UAAU,yCAA0C,UAG3DrD,EAAc,eAGdoD,EAAGoB,OAAO,gBAAgB4B,UAAY,cACtChD,EAAGoB,OAAO,eAAgB,cAAe,UACrC9C,GAAWrE,QAAU,IAErBkK,GAAgB7F,IACa,MAAzBmB,GAAMH,iBAEN4C,MAIRtF,EAAc6C,GAAMJ,cAAc,GAAG8C,SAAS1C,GAAMJ,cAAc,GAAGpF,OAAS,IAE9E+F,EAAGoB,OAAO,gBAAiB,WAAY,KAEvCpB,EAAGoB,OAAO,cAAe,OAAQjB,OAAU,cAE3CH,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc,GAAI,WAAY,UACxC,WAAfzC,EAEAoD,EAAGC,UAAU,qBAAsB,cAAe,KAGlDD,EAAGC,UAAU,qBAAsB,WAAY,KAGnD5B,GAAY,YAKXiE,GAAmBxI,WACfE,EAAQ,EAAGA,EAAQF,EAAMG,OAAQD,IAEtCtB,EAAW2H,SAASC,gBAAgB1G,EAAO,UAE3C2G,GAAgBd,GAAMD,eA77CP,GA+7Cf9G,EAAS8H,eAAe,KAAM,QAAS,eAEvC9H,EAAS8H,eAAe,KAAM,KAAM1G,EAAME,GAAO4D,GAEjDlF,EAAS8H,eAAe,KAAM,KAAM1G,EAAME,GAAO6D,GAEjDnF,EAAS8H,eAAe,KAAM,IAAK,OAEnCR,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAG9CyL,GAAgBrK,YAGXiL,GAAUC,UAGiBjE,OAFhCiE,EAAQ9B,EAAU8B,IAERC,MAAMvG,eAEZsG,EAAMC,MAAMvG,aAAe,IAG/BA,GAAe6D,KAAKC,MAAMwC,EAAMC,MAAMvG,cAEtCC,GAAyD,QAAxCqG,EAAMC,MAAMC,WAAWC,cACjCxG,YAwDFyG,GAAOC,EAAUC,MACgCvE,MAAlDf,EAAGoB,OAAOiE,GAAU9D,aAAa,eAEjCtE,SAEIsI,EAAqB,GAErBC,EAAeF,EAASG,QAAQH,EAAStF,EAAGoB,OAAOiE,GAAU9D,aAAa,gBAE1EmE,EAAqB,IAAMnD,KAAKoD,UAAUL,EAASE,IAAiB,IAExED,EAAqB1L,EAAU0I,KAAKC,MAAMkD,IAE1CH,EAAmB,GAAGpL,KAAO,SAE7BmL,EAASpL,KAAKqL,EAAmB,IAIjCxD,GAF2BlI,EAAUyL,IAIrCvI,IAEAC,IAEAgD,EAAGoB,OAAOiE,EAAU,UAEpBrF,EAAGoB,OAAO,iBAAiBS,UAAW,EAEtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,EACkB,GAApD7B,EAAGC,UAAU,6BAA6BhG,SAE1C+F,EAAGoB,OAAO,wBAAwBS,UAAW,aAMhDE,GAAe6D,GAEpBrH,UAEIsH,EAAW,UACN7L,EAAQ,EAAGA,EAAQ4L,EAAc3L,OAAQD,QAC9C6L,EAAW7L,EAAQ,EACZ6L,EAAWD,EAAc3L,QACxB2L,EAAc5L,GAAOK,MAAQuL,EAAcC,GAAUxL,MACpB,OAA7BuL,EAAc5L,GAAOG,MAAiD,UAAhCyL,EAAcC,GAAU1L,OAE9DyL,EAAc5L,GAAOG,KAAO,KAE5ByL,EAAcC,GAAU1L,KAAO,MAIvC0L,YAGC7L,EAAQ,EAAGA,EAAQ4L,EAAc3L,OAAQD,IAE9C4L,EAAgBA,EAAcE,iBAAiBC,UACpB,MAAhBA,EAAQ5L,QAIvBoE,GAAYrE,KAAK0L,GAEjBvD,cAIKA,KAELzD,MAGIA,GAFqB,GAArBN,GAAWrE,OAEMsI,KAAKoD,UAAUlH,IAGf8D,KAAKoD,UAAUrH,IAGpCE,GAAa,gCAAkCI,GAAiB,8BAAgC2D,KAAKoD,UAAUpH,GAAY,IAAM,8BAAgCH,GAAkB,wBAEnL4H,OAAOC,6BAA+B,MAEtCxG,GAAMtD,KAAOqC,WACT0H,EAAMnB,GAASvG,IACnB2H,GAAiBC,KAAM5H,GAAiB0H,IAAAA,aAsCnC/B,GAAgBkC,EAAWC,MACR,GAApBD,EAAUpM,cAIdvB,EAAW2H,SAASC,gBAAgB1G,EAAO,YAEvC2M,EAAmB,KAAOF,EAAU,GAAGzI,EAAI,IAAMyI,EAAU,GAAGxI,EAE9D2I,EAAiB,WACZxM,EAAQ,EAAGA,EAAQqM,EAAUpM,OAAQD,IAE1CwM,GAAkB,MAAQH,EAAUrM,GAAO4D,EAAI,IAAMyI,EAAUrM,GAAO6D,EAG1EnF,EAAS8H,eAAe,KAAM,IAAK+F,EAAmB,GAAKC,GACvDF,GAEA/F,GAAgB,qBAhqDD,GAkqDfP,EAAGoB,OAAO,+BAA+BQ,QAAQlJ,KAGjD6H,GAAgBd,GAAMD,eArqDP,GAuqDf9G,EAAS8H,eAAe,KAAM,QAAS,eAEvCR,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,aAKzCwJ,GAAkBuE,GAEvBvI,GAAagF,EAAUzD,GAAMvD,KAE7BiC,GAAQD,GAAWiF,MAAMU,IAAID,QAE7BzF,GAAQ,IAAMA,GAAM6F,QAAQ,KAAM,KAAO,IAEzC7F,GAAQoE,KAAKC,MAAMrE,QAEfuI,KAEJA,EAAoBpI,GACfhC,GACGH,GACyB,GAArBmC,GAAWrE,SAEXyM,EAAoBjI,IAKhCkI,GAAmBD,EAAmBD,GAEtCG,GAAexI,GAAiBsI,EAAmBD,GAC/CA,IAEAzG,EAAGoB,OAAO,gBAAgB4B,UAAY,cACtChD,EAAGoB,OAAO,gBAAgBS,UAAW,EAErCxD,GAAY,YAKX4D,KAELjC,EAAGC,UAAU,0BAA2B,cAAe,oBAEvDD,EAAGC,UAAU,0BAA2B,OAAQE,OAAU,SAE1D3D,GAAuB,GAC0C,GAA7DM,EAAoBC,GAAsBzC,EAAEmL,QAAQ,KAEpD3I,EAAoB6E,OAGpBjJ,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,GAE9Ge,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,EAEzHiE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CqE,IAEAC,IAEAC,KAEA+C,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,wBAAwBS,UAAW,EAG7C7B,EAAGoB,OAAO,iBAAiBS,UAAW,GAK1CE,GAFyBlI,EAAUiD,aAM9BoD,KAELF,EAAGC,UAAU,oCAAqC,UAC7C3D,GAED0D,EAAGC,UAAU,yCAA0C,UAG3D3B,MAEA0B,EAAGoB,OAAO,gBAAgB4B,UAAY,cACtChD,EAAGoB,OAAO,gBAAgBS,UAAW,EAErCxD,GAAY,WAIPsI,GAAmBN,EAAWI,OAE/BzH,QACAyH,UACSzM,EAAQ,EAAGA,EAAQmE,GAAMlE,OAAQD,IAEtCtB,EAAW2H,SAASC,gBAAgB1G,EAAO,UAE3C2G,GAAgB,UAAW,KAE3B7H,EAAS8H,eAAe,KAAM,QAAS,6BAEvC9H,EAAS8H,eAAe,KAAM,KAAMrC,GAAMnE,GAAO4D,GAEjDlF,EAAS8H,eAAe,KAAM,KAAMrC,GAAMnE,GAAO6D,GAEjDnF,EAAS8H,eAAe,KAAM,IAAKrC,GAAMnE,GAAOc,GAEhDkF,EAAGoB,OAAO,6BAA6BQ,QAAQlJ,MAGnC,GAAhByF,GAAMlE,QAAmC,GAApBoM,EAAUpM,mBAE/BmE,IAAkB,OAIlByI,EAAiC,GAApBR,EAAUpM,OAAeoM,EAAUpM,OAASoM,EAAUpM,OAAS,UACvE6M,EAAa,EAAGA,EAAa3I,GAAMlE,OAAQ6M,YACvC9M,EAAQ,EAAGA,EAAQ6M,EAAW7M,QACjB,GAAb6M,GAAsC,GAApBR,EAAUpM,QAAgBM,EAAkB8L,EAAUrM,GAAO4D,EAAGyI,EAAUrM,GAAO6D,EAAG,EAAG,EAAGM,GAAM2I,GAAYlJ,EAAGO,GAAM2I,GAAYjJ,EAAGM,GAAM2I,GAAYhM,IAEzKkE,EAAc9E,KAAK,kBAGlB2M,GAAa,GAAKR,EAAUpM,OAAS,GAAMM,EAAkB8L,EAAUrM,GAAO4D,EAAGyI,EAAUrM,GAAO6D,EAAGwI,EAAUrM,EAAQ,GAAG4D,EAAGyI,EAAUrM,EAAQ,GAAG6D,EAAGM,GAAM2I,GAAYlJ,EAAGO,GAAM2I,GAAYjJ,EAAGM,GAAM2I,GAAYhM,IAElNkE,EAAc9E,KAAK,gBAO3BkE,GAFAY,EAAc/E,QAAUkE,GAAMlE,OAQlC+E,cAIK4H,GAAexI,EAAiBiI,EAAWI,GAC5CrI,OAEAqB,GAAMT,eAAgB,MAClByH,IACItI,GAAMlE,QAAUoM,EAAUpM,QAE1BkK,GAAgBkC,GAGpBrG,EAAGC,UAAU,eAAgB,OAAQ4C,OAAU,YAG3CvG,GAEAD,EAAQpG,EAAE8Q,gBAIlBtH,GAAMT,eAAgB,MAElByH,IACItI,GAAMlE,QAAUoM,EAAUpM,QAE1BkK,GAAgBkC,GAGpBrG,EAAGC,UAAU,eAAgB,OAAQ4C,OAAU,YAC/C7C,EAAGC,UAAU,iBAAkB,OAAQ4C,OAAU,YAE7CvG,GAEAD,EAAQpG,EAAE+Q,aAMtBb,GAAiBC,KAAM5H,GAAY0H,IAAKzG,GAAMT,yBA4BzCoB,KAELzC,GAAaC,EAAI0G,OAAOtE,EAAGoB,OAAO,uBAAuBG,aAAa,OAEtE5D,GAAaE,EAAIyG,OAAOtE,EAAGoB,OAAO,uBAAuBG,aAAa,OAEtEzD,GAAWF,EAAI0G,OAAOtE,EAAGoB,OAAO,uBAAuBG,aAAa,OAEpEzD,GAAWD,EAAIyG,OAAOtE,EAAGoB,OAAO,uBAAuBG,aAAa,WAEpEhE,EAAuB+G,OAAOtE,EAAGoB,OAAO,wBAAwBG,aAAa,WAE7E9D,EAAiG,IAA3EtC,KAAK8L,MAAMnJ,GAAWD,EAAIF,GAAaE,EAAGC,GAAWF,EAAID,GAAaC,GAAWzC,KAAK+L,aAIvGpF,GAAgClH,EAAIC,EAAI0C,EAAsBE,GAEnE/B,EAAed,EAAM2C,EAAuB,EAAKpC,KAAKgM,IAAI1J,GAAuBtC,KAAK+L,GAAK,MAE3FvL,EAAed,EAAM0C,EAAuB,EAAKpC,KAAKiM,IAAI3J,GAAuBtC,KAAK+L,GAAK,MAE3FtL,EAAoBhB,EAAO,EAAI2C,EAAwB,EAAKpC,KAAKgM,IAAI1J,GAAuBtC,KAAK+L,GAAK,MAEtGrL,EAAoBhB,EAAO,EAAI0C,EAAwB,EAAKpC,KAAKiM,IAAI3J,GAAuBtC,KAAK+L,GAAK,MAEtGpL,EAAgBlB,EAAM2C,EAAwBpC,KAAKgM,IAAI1J,GAAuBtC,KAAK+L,GAAK,MAExFnL,EAAgBlB,EAAM0C,EAAwBpC,KAAKiM,IAAI3J,GAAuBtC,KAAK+L,GAAK,MAExFlL,EAAqBpB,EAAO,EAAI2C,EAAwB,EAAKpC,KAAKgM,IAAI1J,GAAuBtC,KAAK+L,GAAK,MAEvGjL,EAAqBpB,EAAO,EAAI0C,EAAwB,EAAKpC,KAAKiM,IAAI3J,GAAuBtC,KAAK+L,GAAK,MAEvGlH,EAAGC,UAAU,6CAA8C,QACjDrF,GAAAA,EACAC,GAAAA,IAGVmF,EAAGC,UAAU,uBAAwB,QAASnF,EAAKyC,IAEnDyC,EAAGC,UAAU,sBAAuB,QAChCoH,GAAMzM,EACN0M,GAAMzM,EACN0M,GAAMzL,EACN0L,GAAMzL,IAGViE,EAAGC,UAAU,6BAA8B,QACvCrF,GAAMoB,EACNnB,GAAMoB,EACNwL,UAAa,UAAYhK,EAAsB,IAAMzB,EAAqB,IAAMC,EAAqB,MAGzG+D,EAAGC,UAAU,0BAA2B,QACpCrF,GAAMkB,EACNjB,GAAMkB,IAGViE,EAAGC,UAAU,8BAA+B,QACxCrF,GAAMgB,EACNf,GAAMgB,EACN4L,UAAa,UAAYhK,EAAsB,IAAM7B,EAAoB,IAAMC,EAAoB,MAGvGmE,EAAGC,UAAU,0BAA2B,QACpCrF,GAAMc,EACNb,GAAMc,EACN8L,UAAa,UAAYhK,EAAsB,IAAM/B,EAAe,IAAMC,EAAe,UAGzF+L,EAAWjK,EACXiK,EAAW,IAEXA,EAAW,IAAMA,GAGrB1H,EAAGoB,OAAO,yBAAyB4B,UAAY,wCAA0C0E,EAASjR,QAAQ,GAAK,UAE/GuJ,EAAGoB,OAAO,uBAAuB4B,UAAY,2CAAoE,OAAvBzF,GAAgC9G,QAAQ,GAAK,cAIlIgL,GAA2B5B,OAE5B8H,EAAWtH,SAASuH,eAAe,cAAcC,wBAErDvM,EAAiBuE,EAAMiI,QAAUH,EAASI,KAE1CxM,EAAiBsE,EAAMmI,QAAUL,EAASM,aAIrC1H,GAAgB1D,EAAcqL,GAEnCxP,EAAS2L,MAAMxB,OAAShG,EAExBnE,EAAS2L,MAAM8D,YAAcD,EAC7BxP,EAAS2L,MAAM+D,KAAO,gBAIjBC,GAAgBlO,EAAM0F,OACpBG,EAAGoB,OAAO,sBAAsBR,UAAU0H,SAAS,MAAuB,WAAf1L,OAE1D2L,EAAavI,EAAGoB,OAAO,kBAAkBoH,YAEzCC,EAAczI,EAAGoB,OAAO,kBAAkBsH,gBAE9CtI,KACIP,EAAME,WAA8B,IAAjBF,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,aAClF,UAAR9G,SACQ0F,EAAMoB,cACL,OAED1D,kBAEC,OAEDA,kBAEC,OAEDA,kBAEC,OAEDA,UAIA,QAARpD,SACQ0F,EAAMoB,cACL,GAEDtD,GAAaE,eAEZ,GAEDF,GAAaC,eAEZ,GAEDD,GAAaC,eAEZ,GAEDD,GAAaE,OAIZ,UAAR1D,GAA4B,QAARA,SACb0F,EAAMoB,cACL,OAEDxD,kBAEC,OAEDA,kBAEC,OAEDA,kBAEC,OAEDA,UAIA,QAARtD,IACI6F,EAAGoB,OAAO,2BAA2BR,UAAU0H,SAAS,qBAAuBtI,EAAGoB,OAAO,8BAA8BR,UAAU0H,SAAS,uBAE1I5P,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,GAE9Ge,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,EAEzHiE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,IAG9CiF,GAAaC,EAAI,IAAML,EAAuB,IAAMA,EAAuB,KAAOI,GAAaC,EAAI2K,GAAc5K,GAAaE,EAAI,IAAMF,GAAaE,EAAI4K,SAI7J3G,GAAgCnE,GAAaC,EAAGD,GAAaE,EAAGN,EAAsBE,cAMzFqC,KACAtE,GAAyByC,IAAcxC,GAAyBuC,IAA4B,QAAfpB,GAA0C,YAAfA,IAA0F,GAA7DE,EAAoBC,GAAsBzC,EAAEmL,QAAQ,KAE1L3I,EAAoB6E,OAEdgH,MAAM1K,KAAe0K,MAAM3K,MAE7BtF,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,IAE3GlB,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,GAEtHgC,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,IAG9CqE,IAEAC,IAEAC,KAEA+C,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,wBAAwBS,UAAW,EAG7C7B,EAAGoB,OAAO,iBAAiBS,UAAW,GAG1CvE,EAAa,EAEbX,EAAoB,EAEpBD,EAAa,EAEbW,EAAY,EAIZ0E,GAFyBlI,EAAUiD,WAh+DvC8L,iBACInJ,GAAMtD,KAAOA,MAEb0C,IAAiD,GAAvCgK,UAAUC,UAAUrD,QAAQ,OAEtC3D,GAAgC,IAAK,IAAK,IAAK,IAE/C9B,EAAG+I,OAAO,OAAQ,QAAS,0BACvB/G,QAGJhC,EAAG+I,OAAO,OAAQ,QAAS,4BACvBhG,QAGJ/C,EAAG+I,OAAO,OAAQ,QAAS,iCACvBC,GACIC,KAAMhT,EAAEiT,aACRC,KAAM,UACNC,SAAS,IACVC,MAAM1J,IACDA,IAEAsD,KACAxC,YAOZT,EAAGsJ,KAAK,OAAQ,oBAAqBzJ,OAC5BvD,IAAiC,IAAjBuD,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,gBAC5G,KAIfjB,EAAG+I,OAAO,OAAQ,QAAS,qDAAsDzH,EAASzB,IACjE,IAAjBA,EAAMoB,SAAmC,GAAjBpB,EAAMoB,SAAgBpC,KAE9CuG,GAAO9D,EAASxE,MAIxBkD,EAAG+I,OAAO,OAAQ,QAAS,2BAA4BzH,EAASzB,GACvC,IAAjBA,EAAMoB,SAAiBpB,EAAM0J,UAAavJ,EAAGoB,OAAO,iBAAiBS,WACjElF,GAAqBD,GAErBoD,KAGJE,EAAGoB,OAAO,iBAAiBoI,SAEV,IAAjB3J,EAAMoB,SAAiBpB,EAAM0J,UAAavJ,EAAGoB,OAAO,iBAAiBS,WACjElF,GAAqBD,GAErBoD,KAGJE,EAAGoB,OAAO,iBAAiBoI,SAEV,IAAjB3J,EAAMoB,SAAiBpB,EAAM0J,SAE7BvJ,EAAGoB,OAAO,wBAAwBoI,QAEhB,IAAjB3J,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAiC,WAAfrE,GAA2C,UAAfA,IAE5EoD,EAAGoB,OAAO,gBAAiB,cAAe,KAE1CpB,EAAGoB,OAAO,iBAAkB,OAAQjB,OAAU,WAE9CN,EAAME,UAA8B,IAAjBF,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAA6D,GAA3CjB,EAAGoB,OAAO,iBAAiBqI,eAC1E,cAAf7M,GAEAlE,EAAW2H,SAASC,gBAAgB1G,EAAO,UAE3C2G,GAAgBd,GAAMD,eA7Mf,GA+MP9G,EAAS8H,eAAe,KAAM,QAAS,eAEvC9H,EAAS8H,eAAe,KAAM,KAAMvC,IAEpCvF,EAAS8H,eAAe,KAAM,KAAMxC,IAEpCtF,EAAS8H,eAAe,KAAM,IAAK,OAEnClC,GAAWpE,MACP0D,EAAGK,GACHJ,EAAGG,KAGPgC,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CwJ,IAAkB,GAElBG,MAEI3F,EAEAoD,MAEAnD,EAAoB,EAEpBuD,KAEAxH,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EA5Ob,GA8OHnE,EAAS8H,eAAe,KAAM,YAAa5D,EAAc,IAAMG,GAE/DrE,EAAS8H,eAAe,KAAM,aAAczD,GAE5CrE,EAAS8H,eAAe,KAAM,IAAK,IAAMvC,GAAa,IAAMD,IAE5DtF,EAAS8H,eAAe,KAAM,WAAY,KAE1ChF,EAAwByC,GAExBxC,EAAwBuC,GAExBlB,EAAoB5C,MAEhBC,KAAM,MAENC,MAAO2C,EAEP1C,KAAMuC,EAAc,IAAMG,EAE1B/C,MAAO+C,EAEPzC,EAAG,IAAM2D,GAAa,IAAMD,KAGhCtB,EAAa,OAM7BsD,EAAG+I,OAAO,OAAQ,UAAW,2BAA4BzH,EAASzB,MAC1DG,EAAGoB,OAAO,iBAAiBqI,kBAEvBlB,EAAavI,EAAGoB,OAAO,kBAAkBoH,YAEzCC,EAAczI,EAAGoB,OAAO,kBAAkBsH,gBAC1C7I,EAAME,WAA8B,IAAjBF,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,WAAmB5D,UACzGwC,EAAMoB,cACL,GAEDjD,gBAEC,GAEDA,gBAEC,GAEDC,gBAEC,GAEDA,QAGJD,GAAY,GAAKC,GAAasK,GAActK,GAAa,GAAKD,GAAYyK,SAI9EzI,EAAGoB,OAAO,gBAAiB,OACvB6G,IAAOjK,GAAY,KACnB+J,KAAQ9J,GAAa,OAErBtB,IAEAjE,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,IACxF,QAAfpB,IAEAE,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,IAG1HgC,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CgE,EAAa,MAGjBmD,EAAME,UAA6B,IAAjBF,EAAMoB,UACnB5D,GAoCDA,EAAY,EAEZyC,OApCAzC,EAAY,EACZV,EAAoB,EAEpBuD,KAEAjC,GAAaqG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAEjEvD,GAAYsG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAEhE7I,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EAzUb,GA2UHnE,EAAS8H,eAAe,KAAM,YAAa5D,EAAc,IAAMG,GAE/DrE,EAAS8H,eAAe,KAAM,aAAczD,GAE5CrE,EAAS8H,eAAe,KAAM,IAAK,IAAMvC,GAAa,IAAMD,IAE5DtF,EAAS8H,eAAe,KAAM,WAAY,KAE1ChF,EAAwByC,GAExBxC,EAAwBuC,GAExBlB,EAAoB5C,MAChBC,KAAM,MACNC,MAAO2C,EACP1C,KAAMuC,EAAc,IAAMG,EAC1B/C,MAAO+C,EACPzC,EAAG,IAAM2D,GAAa,IAAMD,OASnB,GAAjB6B,EAAMoB,SAAgB5D,IAA6B,QAAfT,GAAwC,YAAfA,QACzD8M,EAAWC,uBACN3J,EAAGoB,OAAO,sBAAsBwI,WAIrC3L,GAAaqG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAEjEvD,GAAYsG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAC5DoH,MAAM1K,KAAe0K,MAAM3K,MAGZ,YAAfpB,GAA4C,QAAfA,IAE7BU,EAAa,GAGjB5E,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,IAE3GgC,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAC1CmR,aAAaH,OACd,OAEc,IAAjB7J,EAAMoB,SAAiB5D,GAAaC,OAChCwM,EAAgBH,uBACZhB,MAAM1K,KAAe0K,MAAM3K,MAI/BlB,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAO2D,GAAa,IAAMD,GAEtHgC,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAC1CmR,aAAaC,GAEbxM,EAAa,KACd,SAMf0C,EAAG+I,OAAO,OAAQ,UAAW,iDAAkDzH,EAASzB,GAEpFwI,GAAgB,OAAQxI,MAG5BG,EAAG+I,OAAO,OAAQ,UAAW,uCAAwCzH,EAASzB,GAE1EwI,GAAgB,SAAUxI,MAG9BG,EAAG+I,OAAO,OAAQ,UAAW,2CAA4CzH,EAASzB,GAE9EwI,GAAgB,SAAUxI,MAG9BG,EAAG+I,OAAO,OAAQ,UAAW,uCAAwCzH,EAASzB,GAE1EwI,GAAgB,OAAQxI,MAG5BG,EAAG+I,OAAO,OAAQ,UAAW,yBAA0BzH,EAASzB,MACxDA,EAAME,UAA6B,IAAjBF,EAAMoB,eACjB,EAEW,IAAjBpB,EAAMoB,SAAkC,IAAjBpB,EAAMoB,SAAiC,cAAfrE,GAA8C,UAAfA,IAE/EqB,GAAaqG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAEjEvD,GAAYsG,OAAOtE,EAAGoB,OAAO,sBAAsBG,aAAa,OAC7C,WAAf3E,EAEAoD,EAAGoB,OAAO,gBAAiB,OACvB6G,IAAOjK,GAAY,KACnB+J,KAAQ9J,GAAa,OAIzB6D,GAAgC7D,GAAYD,GAAWT,EAAsBE,OAKzFuC,EAAG+I,OAAO,OAAQ,QAAS,uCAAwCzH,EAASzB,IACnErD,GAAwBC,GAAiC,IAAjBoD,EAAMoB,SAE/CgB,QAMRjC,EAAGsJ,KAAK,6BAA8B,oBAC7B9M,GAAwBC,GAEzBwF,QAIRjC,EAAG+I,OAAO,OAAQ,YAAa,0CACR,WAAfnM,IAEAmB,GAAwB,EAExBqC,SAMRJ,EAAG+I,OAAO,OAAQ,YAAa,gDACR,WAAfnM,IAEA6E,GAA2B5B,OAE3BjF,EAAKU,EAELT,EAAKU,MAELgC,EAAuByC,EAAGoB,OAAO,wBAAwBG,aAAa,MAEtEO,GAAgClH,EAAIC,EAAI0C,EAAsBE,GAE9DD,GAAuB,MAI/BwC,EAAG+I,OAAO,OAAQ,YAAa,sCACR,WAAfnM,IAEAc,GAA0B,MAIlCsC,EAAG+I,OAAO,OAAQ,YAAa,oCAAqCzH,EAASzB,GACzED,GAAuBC,MAG3BG,EAAG+I,OAAO,OAAQ,UAAW,oCAAqCzH,EAASzB,GACvED,GAAuBC,MAI3BG,EAAG+I,OAAO,OAAQ,YAAa,wBAAyBzH,EAASzB,UAE7DG,EAAGoB,OAAO,cAAe,OAASjB,OAAU,cAE5CH,EAAGoB,OAAO,gBAAiB,WAAa,MACpCzE,GAAqBD,GAAcW,IAEnCyC,KAEIlD,OACC,WACA,WAEDsD,KAEA3D,GAAmB,EAEnBkF,GAA2B5B,GAE3BnH,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EAzgBT,GA2gBPnE,EAAS8H,eAAe,KAAM,YAAa5D,EAAc,IAAMG,GAE/DrE,EAAS8H,eAAe,KAAM,aAAczD,GAE5CrE,EAAS8H,eAAe,KAAM,IAAK,IAAMlF,EAAiB,IAAMC,GAEhE7C,EAAS8H,eAAe,KAAM,WAAY,KAE1ChF,EAAwBF,EAExBG,EAAwBF,EAExBuB,EAAoB5C,MAChBC,KAAM,MACNC,MAAO2C,EACP1C,KAAMuC,EAAc,IAAMG,EAC1B/C,MAAO+C,EACPzC,EAAG,IAAMgB,EAAiB,IAAMC,cAGnC,SAED6J,GAAO,cAAetI,aAErB,aACIuB,KAEDoD,GAA2B5B,GAE3BnH,EAAW2H,SAASC,gBAAgB1G,EAAO,UAE3C2G,GAAgBd,GAAMD,eA1iBnB,GA4iBH9G,EAAS8H,eAAe,KAAM,QAAS,eAEvC9H,EAAS8H,eAAe,KAAM,KAAMlF,GAEpC5C,EAAS8H,eAAe,KAAM,KAAMjF,GAEpC7C,EAAS8H,eAAe,KAAM,IAAK,OAEnClC,GAAWpE,MACP0D,EAAGtC,EACHuC,EAAGtC,IAGPyE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAE1CwJ,IAAkB,GAElBG,UAOhBrC,EAAG+I,OAAO,OAAQ,YAAa,wBAAyBzH,EAASzB,UACrDjD,OACC,OACGL,IAEAkF,GAA2B5B,GAE3BnH,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOgB,EAAiB,IAAMC,GACzGC,GAAyBF,GAAkBG,GAAyBF,GAEtEyE,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,cAIjD,WACG6D,IAEAkF,GAA2B5B,GAE3BnH,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOgB,EAAiB,IAAMC,GAE/GuB,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOgB,EAAiB,IAAMC,EACnHuB,EAAoBC,GAAsBzC,EAAEoH,MAAM,KAAKzH,OAAS,EAAK,GAExE+F,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,cAIjD,UAED+I,GAA2B5B,GACvBrC,IAEA5C,EAAKU,EAELT,EAAKU,MAELgC,EAAuByC,EAAGoB,OAAO,wBAAwBG,aAAa,MAEtEO,GAAgClH,EAAIC,EAAI0C,EAAsBE,IAE9DC,KAEA0C,SAEA7C,EAAuB,EAAIpC,KAAKC,KAAKD,KAAK4O,IAAIzO,EAAiBqC,GAAaC,EAAG,GAAKzC,KAAK4O,IAAIxO,EAAiBoC,GAAaE,EAAG,KAC1HN,EAAuB,QAEvBA,EAAuB,IAEvBA,EAAuB,SAEvBA,EAAuB,KAG3BuE,GAAgCnE,GAAaC,EAAGD,GAAaE,EAAGN,EAAsBE,IAGtFM,KAEAqC,SAEA3C,EAAqG,IAA/EtC,KAAK8L,MAAM1L,EAAiBoC,GAAaE,EAAGvC,EAAiBqC,GAAaC,GAAWzC,KAAK+L,IAC5GzJ,EAAsB,OAEtBA,EAAsB,IAAMA,GAKhCqE,GAAgCnE,GAAaC,EAAGD,GAAaE,EAAGN,EAAsBE,IAEtFlB,IACMyD,EAAGoB,OAAO,2BAA2BR,UAAU0H,SAAS,qBAAuBtI,EAAGoB,OAAO,8BAA8BR,UAAU0H,SAAS,qBAK5I5P,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,GAE9Ge,EAAoBC,GAAsBzC,EAAIwC,EAAoBC,GAAsBzC,EAAI,KAAOwB,EAAgB,IAAMC,EAClHe,EAAoBC,GAAsBzC,EAAEoH,MAAM,KAAKzH,OAAS,EAAK,GAExE+F,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,IAR9C8I,GAAkB3B,QAiBtCG,EAAG+I,OAAO,OAAQ,UAAW,wBAAyBzH,EAASzB,GAC3D2B,GAAkB3B,MAItBG,EAAGsJ,KAAK,cAAe,uBAAwBzJ,GAC3C2B,GAAkB3B,MAItBG,EAAG+I,OAAO,OAAQ,QAAS,6BAA8BzH,EAASzB,GAC9DwB,GAAcC,EAASzB,MAG3BG,EAAG+I,OAAO,OAAQ,QAAS,6BAA8BzH,EAASzB,GAC9DwB,GAAcC,EAASzB,MAI3BG,EAAG+I,OAAO,OAAQ,YAAa,sCAAuCzH,GAC/C,UAAf1E,IAEAoD,EAAGC,UAAU,4BAA6B,cAAgB,cAE1DqB,EAAQV,UAAUC,IAAI,kBAI9Bb,EAAG+I,OAAO,OAAQ,WAAY,sCAAuCzH,GAC9C,UAAf1E,GAEA0E,EAAQV,UAAUoJ,OAAO,iBAKjChK,EAAG+I,OAAO,OAAQ,YAAa,oCAAqCzH,GAEhEA,EAAQV,UAAUC,IAAI,oBAEtBb,EAAGC,UAAU,6BAA8B,QAAUgK,QAAW,OAGpEjK,EAAG+I,OAAO,OAAQ,WAAY,oCAAqCzH,GAE/DA,EAAQV,UAAUoJ,OAAO,oBAEzBhK,EAAGC,UAAU,6BAA8B,QAAUgK,QAAW,OAGpEjK,EAAGU,UAAU,0BAA2B,kBAAmBY,GAEvDA,EAAQX,OAAOC,UAAUC,IAAI,oBAE7Bb,EAAGC,UAAU,6BAA8B,QAAUgK,QAAW,OAGpEjK,EAAGU,UAAU,0BAA2B,iBAAiBY,GAErDA,EAAQX,OAAOC,UAAUoJ,OAAO,oBAEhChK,EAAGC,UAAU,6BAA8B,QAAUgK,QAAW,OAIpEjK,EAAG+I,OAAO,OAAQ,QAAS,yBAA0BzH,GAEjDtB,EAAGC,UAAU,6BAA8B,cAAe,UAE1DqB,EAAQV,UAAUC,IAAI,aAI1Bb,EAAG+I,OAAO,OAAQ,QAAS,mCAEvB/I,EAAGC,UAAU,4BAA6B,UAE1CjD,EAAmB,EAEnBD,EAAuB,EAEvBD,KAIAiF,GAFyBlI,EAAUiD,IAInCkD,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,wBAAwBS,UAAW,KAIjD7B,EAAG+I,OAAO,OAAQ,QAAS,0BAA2BzH,GAC1B,GAApBtE,IAEAsE,EAAQO,UAAW,GAGvB7B,EAAGoB,OAAO,iBAAiBS,UAAW,EAC0B,OAA5D/E,EAAoBA,EAAoB7C,OAAS,GAAGE,KAEpD6F,EAAGC,UAAU,6BAA+BnD,EAAoB7C,OAAS,GAAK,KAAM,UACjB,UAA5D6C,EAAoBA,EAAoB7C,OAAS,GAAGE,OAE3DzB,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EA3wBL,GA6wBXnE,EAAS8H,eAAe,KAAM,YAAa1D,EAAoBA,EAAoB7C,OAAS,GAAGI,MAE/F3B,EAAS8H,eAAe,KAAM,aAAe1D,EAAoBA,EAAoB7C,OAAS,GAAGG,OAEjG1B,EAAS8H,eAAe,KAAM,IAAK1D,EAAoBA,EAAoB7C,OAAS,GAAGK,GAEvF5B,EAAS8H,eAAe,KAAM,WAAY,KACvB,UAAf5D,GAEAlE,EAAS8H,eAAe,KAAM,QAAS,eAG3CR,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,IAG9CuE,EAAgB/C,KAAK4C,EAAoB6E,OAIzCI,GAFyBlI,EAAUiD,IAInCC,IAEAC,IAEAgD,EAAGoB,OAAO,wBAAwBS,SAAgE,GAApD7B,EAAGC,UAAU,6BAA6BhG,OACtD,GAA9B6C,EAAoB7C,SAEpBqH,EAAQO,UAAW,MAK3B7B,EAAG+I,OAAO,OAAQ,QAAS,0BAA2BzH,GAElDvE,IACIE,EAAgBhD,OAAS,GAEzBiD,EAAgBhD,KAAK+C,EAAgB0E,OAEe,OAApDzE,EAAgBA,EAAgBjD,OAAS,GAAGE,MAE5CzB,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EAzzBL,GA2zBXnE,EAAS8H,eAAe,KAAM,YAAatD,EAAgBA,EAAgBjD,OAAS,GAAGI,MAEvF3B,EAAS8H,eAAe,KAAM,aAAetD,EAAgBA,EAAgBjD,OAAS,GAAGG,OAEzF1B,EAAS8H,eAAe,KAAM,IAAKtD,EAAgBA,EAAgBjD,OAAS,GAAGK,GAE/E5B,EAAS8H,eAAe,KAAM,WAAY,KACvB,UAAf5D,GAEAlE,EAAS8H,eAAe,KAAM,QAAS,eAG3CR,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,IACiB,UAApDwE,EAAgBA,EAAgBjD,OAAS,GAAGE,MAEnD6F,EAAGC,UAAU,4BAA+B/C,EAAgBA,EAAgBjD,OAAS,GAAGG,MAAS,KAAM,UAG3G4C,IAEAF,EAAoB5C,KAAKgD,EAAgByE,OAIzCI,GAFyBlI,EAAUiD,IAInCkD,EAAGoB,OAAO,wBAAwBS,SAAgE,GAApD7B,EAAGC,UAAU,6BAA6BhG,OAC1D,GAA1BgD,EAAgBhD,SAEhBqH,EAAQO,UAAW,GAIvB7B,EAAGoB,OAAO,iBAAiBS,UAAW,KAG1C7B,EAAG+I,OAAO,OAAQ,QAAS,yBAA0BzH,EAASzB,GAC1DiB,GAAejB,MAGnBG,EAAG+I,OAAO,OAAQ,QAAS,yBAA0BzH,EAASzB,GAC1DiB,GAAejB,SAMvBqK,iBAknBoBlF,EAAOyB,EAhnBnBhH,GAAMvD,KAAOA,IACb+G,SACAxD,GAAMvD,IAAMA,MACZuE,UA8vCwB,IAAhBnE,IAER0D,EAAGC,UAAU,eAAgB,UACzB9D,KACyC,GAArCA,EAAKgO,OAAO,sBAA0E,GAA5ChO,EAAKgO,OAAO,+BAAkE,GAA7BhO,EAAKgO,OAAO,iBAEvG1K,GAAMtD,KAAO,QAGTC,GACA4D,EAAGC,UAAU,iBAAkB,WAAY,KAE3CrD,EAAc,OAEdoD,EAAGC,UAAU,6BAA8B,OAAQmC,cAAe,SAElEpC,EAAGoB,OAAO,cAAe,cAAe,mBAGxCpB,EAAGC,UAAU,6BAA6B,OAAQmC,cAAgB,KAElEpC,EAAGC,UAAU,iBAAkB,cAAe,KAE9CD,EAAGoB,OAAO,cAAc,WAAY,iBAEpCxE,EAAc6C,GAAMJ,cAAc,GAAG8C,SAAS1C,GAAMJ,cAAc,GAAGpF,OAAS,IAE9E+F,EAAGC,UAAU,4BAA6B,cAAe,UAEzDD,EAAGoB,OAAO,WAAa3B,GAAMJ,cAAc,GAAI,WAAY,WA9qB3D2F,EAgrBOvF,GAAMtD,KAhrBNsK,EAgrBYrK,EA9qBnCuC,GAAiBoG,GAASC,GAC1BA,EAAQ9B,EAAU8B,GAClBvG,GAAmB8D,KAAKC,MAAMwC,EAAMC,MAAMmF,YAE1ClM,GAAagF,EAAUhH,GAEvBiC,GAAQD,GAAWiF,MAAMU,IAAID,QAE7BzF,GAAQ,IAAMA,GAAM6F,QAAQ,KAAM,KAAO,IAEzC7F,GAAQoE,KAAKC,MAAMrE,IAEnBmE,GAAmB7D,eAmIfC,GAAazE,SAEb+F,EAAGoB,OAAO,iBAAiBS,UAAW,EACtC7B,EAAGoB,OAAO,iBAAiBS,UAAW,WAGjC7H,EAAQ,EAAGA,EAAQ0E,GAAazE,OAAQD,IAE7C0E,GAAa1E,GAAOK,KAAOqE,GAAa1E,GAAOK,KAAK8H,OAAO,EAAGzD,GAAa1E,GAAOK,KAAKoL,QAAQ,MAAQ,IAAMzL,EAE7G0E,GAAa1E,GAAOI,MAAQJ,EAE5BtB,EAAW2H,SAASC,gBAAgB1G,EAAO,QAE3C2G,GAAgB1D,EA3nDD,GA6nDfnE,EAAS8H,eAAe,KAAM,YAAa9B,GAAa1E,GAAOK,MAE/D3B,EAAS8H,eAAe,KAAM,aAAc9B,GAAa1E,GAAOI,OAEhE1B,EAAS8H,eAAe,KAAM,IAAK9B,GAAa1E,GAAOM,GAEvD5B,EAAS8H,eAAe,KAAM,WAAY,KAE1CR,EAAGoB,OAAO,wBAAwBQ,QAAQlJ,GAG9CqE,EAAuB2B,GAAazE,OAEpC6C,EAAsBjD,EAAU6E,IA9JhC2L,GAEA1D,GAAmBlI,GAAkBgI,GAErCG,GAAejI,GAAgBF,GAAkBgI,OA7nB7ChH,GAAM6K,QAAUlO,GAAYE,IAC5BwC,GAAWwE,QAASC,IAChBA,EAAK+G,OAASlO,EACPmH,KAEPnH,EACA4F,KAEAe,qMA6uCR/C,EAAGuK,MAAM,0BAA2B,SAASC"}