{
  "version": 3,
  "file": "bundle_q1.css",
  "sources": [
    "DragNDropPreview.svelte"
  ],
  "sourcesContent": [
    "<!--\r\n *  File Name   : DragNDropPreview.svelte\r\n *  Description : Responsible for Preview Side functionality\r\n *  Author      : Ayush Srivastava\r\n *  Package     : Drag and Drop (Preview)\r\n *  Last update : 20-Jan-2021\r\n *  Last Updated By : Ayush Srivastava\r\n-->\r\n<script>\r\n\t// Importing all the required components\r\n\timport { onMount, beforeUpdate } from 'svelte';\r\n\timport { XMLToJSON, AH } from '../helper/HelperAI.svelte';\r\n\timport ItemHelper from '../helper/ItemHelper.svelte';\r\n\timport { writable } from \"svelte/store\";\r\n\timport DND from './libs/preview/dndString';\r\n\timport TextboxPreview from './libs/preview/TextboxPreview.svelte';\r\n\timport DragPreview from './libs/preview/DragPreview.svelte';\r\n\timport DropPreview from './libs/preview/DropPreview.svelte';\r\n\timport SelectPreview from './libs/preview/SelectPreview.svelte';\r\n\timport RadioPreview from './libs/preview/RadioPreview.svelte';\r\n\timport MultilineboxPreview from './libs/preview/MultilineboxPreview.svelte';\r\n\timport CheckboxPreview from './libs/preview/CheckboxPreview.svelte';\r\n\timport TabheadPreview from './libs/preview/TabheadPreview.svelte';\r\n\timport LabelPreview from './libs/preview/LabelPreview.svelte';\r\n\timport HotspotPreview from './libs/preview/HotspotPreview.svelte';\r\n\timport MenulistPreview from './libs/preview/MenulistPreview.svelte';\r\n\timport ButtonPreview from './libs/preview/ButtonPreview.svelte';\r\n\timport StepPreview from './libs/preview/StepPreview.svelte';\r\n\timport TabPreview from './libs/preview/TabPreview.svelte';\r\n    import l from '../../lib/Lang';\r\n\r\n\r\n\t// exporting the variables\r\n\texport let xml;\r\n\texport let uxml;\r\n\texport let isReview;\r\n\texport let showAns;\r\n\texport let editorState;\r\n\t\r\n\t// initializing the variable\r\n\tlet QXML = \"\";\r\n\tlet image_loaded = 0;\r\n\tlet bgImg = \"\";\r\n\tlet imgHeight = \"\";\r\n\tlet imgWidth = \"\";\r\n\tlet step = [];\r\n\tlet alt = \"\";\r\n\tlet totalcorrectans = 0;\r\n\tlet borderclass = \"\";\r\n\tlet borderclassname = 'img-bordered';\r\n\tlet container_id = 'dndmainPreview';\r\n\tlet moduleType = 1;\r\n\tlet state = {};\r\n\r\n\t// writable for preview\r\n\tlet preview_store = writable({\r\n\t\txml: '',\r\n\t\tcheck: \"checked\",\r\n\t\ttotalcorrectans: \"\",\r\n\t\treview : false,\r\n\t\tdata: [],\r\n\t})\r\n\r\n\t// subscribing to the store\r\n\tconst unsubscribe = preview_store.subscribe(value => {\r\n\t\tstate = value;\r\n\t});\r\n\r\n\t// this is called for the first time use for binding the events\r\n\tonMount( function() {\r\n\t\tif (window.inNative) {\r\n\t\t\tif (typeof window.getHeight == \"function\") {\t\r\n\t\t\t\twindow.getHeight && window.getHeight();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (xml) {\r\n\t\t\tAH.setCss( document.getElementById('dndsteps'), {\r\n\t\t\t\tdisplay: 'none'\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tAH.listen(document, 'click', '.record', function(current_element) {\r\n\t\t\tif (!current_element.classList.contains('lab_disable'))\r\n            current_element.setAttribute(\"clicked\", 1);\r\n        });\r\n\r\n\t\tAH.listen('body', 'click', '#reviewUserAns', function() {\r\n\t\t\t// for your ans\r\n\t\t\tAH.selectAll('#sm_controller button', 'removeClass', 'active');\r\n\t\t\tAH.addClass('#sm_controller .your-ans', 'active');\r\n\t\t\tyourAnswer();\r\n\t\t});\r\n\r\n\t\tAH.listen('body', 'click', '#reviewCorrectAns', function() {\r\n\t\t\t// for correct ans\r\n\t\t\tAH.selectAll('#sm_controller button', 'removeClass', 'active');\r\n\t\t\tAH.addClass('#sm_controller .correct-ans', 'active');\r\n\t\t\tcorrectAnswer();\r\n\t\t});\r\n\r\n\t\tAH.listen(document, 'click', '#'+ container_id, function() {\r\n\t\t\tdisplayAns();\r\n\t\t});\r\n\r\n\t\tAH.listen(document, 'keyup', '#'+ container_id, function() {\r\n\t\t\tdisplayAns();\r\n\t\t});\r\n\r\n\t\tAH.listen(document, 'change', '#'+ container_id, function() {\r\n\t\t\tdisplayAns();\r\n\t\t});\r\n\r\n\t\tAH.listen(document, 'mouseup', '#'+ container_id, function() {\r\n\t\t\tdisplayAns();\r\n\t\t});\r\n\t\t\r\n\t\t// prevent to open context menu\r\n\t\tAH.bind('body', 'contextmenu', function(event) {\r\n\t\t\tevent.preventDefault()\r\n\t\t});\r\n\t\t\r\n\t})\r\n\r\n\t// call everytime when updating will happen\r\n\tbeforeUpdate(async() => {\r\n\t\t// if there is change in xml\r\n\t\tif (state.xml != xml) {\r\n\t\t\tloadModule(xml);\r\n\t\t}\r\n\r\n\t\t// run only in case of editor no need to run it in case of preview\r\n\t\tif (state.review != isReview && editorState) {\r\n\t\t\tif (isReview) {\r\n\t\t\t\tdisplayAns();\r\n\t\t\t\tDND.modeOn(1);\r\n\t\t\t\tDND.showansdrag(\"#\" + container_id, 'u', 1);\r\n\t\t\t\tAH.selectAll('#sm_controller button', 'removeClass', 'active');\r\n\t\t\t\tAH.addClass('#sm_controller .your-ans', 'active');\r\n\t\t\t} else {\r\n\t\t\t\tDND.modeOn(0);\r\n\t\t\t}\r\n\t\t\tpreview_store.update( (item) => {\r\n\t\t\t\titem.review = isReview;\r\n\t\t\t\treturn item;\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\t// for checking the answer and creating the user ans\r\n\tfunction displayAns() {\r\n\t\tlet ans = DND.checkAns(\"#\"+ container_id);\r\n\t\tif (editorState) {\r\n\t\t\tshowAns(ans);\r\n\t\t}\r\n\t}\r\n\r\n\t// call whenever there is change in xml and changes the module accordingly\r\n\tfunction loadModule(loadXml) {\r\n\t\tlet newXml = XMLToJSON(loadXml);\r\n\t\tparseXMLPreview(newXml);\r\n\t\ttotalcorrectans = setTotalCorrectAns(newXml);\r\n\t\tpreview_store.update( (item) => {\r\n\t\t\titem.xml = loadXml;\r\n\t\t\titem.totalcorrectans = totalcorrectans;\r\n\t\t\titem.data = loadNestedModule(newXml);\r\n\t\t\treturn item;\r\n\t\t});\r\n\r\n\t\tcheckImages();\r\n\t\trefreshModule();\r\n\t}\r\n\r\n\t// whenever the module will refresh means there is change in xml it will called \r\n\tfunction refreshModule() {\r\n\t\tlet dnd_timeout = setTimeout(function() {\r\n\t\t\tDND.readyThis(\"#\"+ container_id);\r\n\t\t\tDND.showansdrag(\"#\" +container_id, 'u');\r\n\t\t\tif (isReview) {\r\n\t\t\t\t// if review mode is on\r\n\t\t\t\tdisplayAns(); // display the answe\r\n\t\t\t\tDND.modeOn(1); // for showing correct answer and your answer tab\r\n\t\t\t\tDND.showansdrag(\"#\" + container_id, 'u', 1);\r\n\t\t\t\tAH.selectAll('#sm_controller button', 'removeClass', 'active');\r\n\t\t\t\tAH.addClass('#sm_controller .your-ans', 'active');\r\n\t\t\t} else {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tDND.modeOn(0);\r\n\t\t\t\t\tif (typeof(showAns) == 'undefined') {\r\n\t\t\t\t\t\tdisplayAns();\r\n\t\t\t\t\t}\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\tconsole.log({err: err});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tclearTimeout(dnd_timeout);\r\n\t\t}, 500);\r\n\t}\r\n\r\n\t// parse the xml for preview\r\n\tfunction parseXMLPreview(MYXML) {\r\n\t\ttry {\r\n\t\t\t// getting he required data\r\n\t\t\tQXML = MYXML;\r\n\t\t\tbgImg = MYXML.smxml._bgimg;\r\n\t\t\tmoduleType = MYXML.smxml._type || 1;\r\n\t\t\talt = (MYXML.smxml._alt) ? MYXML.smxml._alt : \"\";\r\n\t\t\timgHeight = MYXML.smxml._height;\r\n\t\t\timgWidth = MYXML.smxml._width;\r\n\t\t\tborderclass = (MYXML.smxml._borderrequired == 1) ? borderclassname : '';\r\n\t\t\tstep = MYXML.smxml.step;\r\n\t\t\tif (Array.isArray(step) == false && step) {\r\n\t\t\t\tstep = [];\r\n\t\t\t\tstep[0] = QXML.smxml.step;\r\n\t\t\t}\r\n\t\t} catch (error) {\r\n            console.log({\r\n\t\t\t\terror,\r\n\t\t\t\tfun: 'parseXMLPreview',\r\n\t\t\t\tfile: 'DragNDropPreview.svelte'\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\t// setting the container height and width on the basis of image height and width\r\n\tfunction checkImages(is_image_load) {\t\t\r\n\t\tlet container = document.querySelectorAll(\"#\" + container_id + \" img\");\r\n\t\tif (container.length > 0) {\r\n\t\t\tcontainer.forEach(function (value) {\r\n\t\t\t\tif (value.complete) {\r\n\t\t\t\t\tlet originalHeight = value.clientHeight > value.naturalHeight ? value.clientHeight : value.naturalHeight;\r\n\t\t\t\t\tlet originalWidth = value.clientWidth > value.naturalWidth ? value.clientWidth : value.naturalWidth;\r\n\t\t\t\t\tif (Number(originalWidth) != 0 || Number(originalHeight) != 0 || (typeof from_myproject != \"undefined\" && from_myproject ==  1)) {\r\n\t\t\t\t\t\tAH.setCss(\"#\" + container_id, {\r\n\t\t\t\t\t\t\theight: ((imgHeight && imgHeight >= originalHeight) ? imgHeight : originalHeight) + \"px\",\r\n\t\t\t\t\t\t\twidth: ((imgWidth && imgWidth >= originalWidth) ? imgWidth : originalWidth) + \"px\"\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t}\r\n\t\tif (is_image_load == 1 || is_image_load == 2) {\r\n\t\t\timage_loaded = 1;\r\n\t\t\tif (window.inNative) {\r\n\t\t\t\twindow.postMessage(`height___${ AH.select(\"#\" + container_id+\">img\").naturalHeight }`)\r\n\t\t\t}\r\n\t\t\trefreshModule();\r\n\t\t}\r\n\t}\r\n\r\n\t// for getting the total no of correct answers\r\n\tfunction setTotalCorrectAns(qXml) {\r\n\t\tvar item = qXml ? qXml.smxml : null;\r\n\t\tvar count = 0;\r\n\t\t// if there is xml\r\n\t\tif(item) {\r\n\t\t\t// iterating throgh the xml and store the elements in item \r\n\t\t\tfor (let i in item) {\r\n\t\t\t\tif (Array.isArray(item[i]) == false) {\r\n\t\t\t\t\tlet arr = [];\r\n\t\t\t\t\tarr.push(item[i]);\r\n\t\t\t\t\titem[i] = arr;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t/** Counting the total length of the element **/\r\n\t\t\tif (item['drop']) {\r\n\t\t\t\tcount = count+item['drop'].length;\r\n\t\t\t}\r\n\t\t\tif (item['select']) {\r\n\t\t\t\tcount = count+item['select'].length;\r\n\t\t\t}\r\n\t\t\tif (item['textbox']) {\r\n\t\t\t\tcount = count+item['textbox'].length;\r\n\t\t\t}\r\n\t\t\tif (item['checkbox']) {\r\n\t\t\t\tcount = count+item['checkbox'].length;\r\n\t\t\t}\r\n\t\t\tif (item['radio']) {\r\n\t\t\t\titem['radio'].map(function(data) {\r\n\t\t\t\t\tif(parseInt(data._correctans) == 1) {\r\n\t\t\t\t\t\tcount = count+1;\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tif (item['hotspot']) {\r\n\t\t\t\titem['hotspot'].map(function(data) {\r\n\t\t\t\t\tlet innerText = JSON.parse(((data.__text)?data.__text:data.__cdata));\r\n\t\t\t\t\tcount = count+Object.keys(innerText).length;\r\n\t\t\t\t})\r\n\t\t\t}\r\n\r\n\t\t\tif (item['jscript']) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\teval.call(window, item['jscript'][0]);\r\n\t\t\t\t} catch (e) {\r\n\t\t\t\t\tconsole.log(e);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn count;\r\n\t\t}\r\n\t}\r\n\r\n\t// convert object to lower case\r\n\tfunction objToLower(obj) {\r\n\t\tlet newX = {};\r\n\t\tfor ( let index in obj ) {\r\n\t\t\tnewX[index.toLowerCase()] = obj[index];\r\n\t\t}\r\n\t\treturn newX;\r\n\t}\r\n\r\n\t// return the data of the nested module according to the xml\r\n\tfunction loadNestedModule(qXml) {\r\n\t\tvar smxml = qXml ? qXml.smxml : null;\r\n\t\tvar customDrag = [], customDrop = [];\r\n\t\tif (smxml) {\r\n\t\t\tif (smxml.div) {\r\n\t\t\t\tsmxml.div.map(function(data,i){\r\n\t\t\t\t\tdata = objToLower(data);\r\n\t\t\t\t\tif (data._anskey == \"\" || data._anskey == undefined) {\r\n\t\t\t\t\t\t/*added this condition because key was diffrent with id*/\r\n\t\t\t\t\t\tif (data._key.indexOf(\"key\") <= -1) {\r\n\t\t\t\t\t\t\tdata._id = \"ID\"+data._key;\r\n\t\t\t\t\t\t\tdata._key = \"key\"+data._key;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/********/\r\n\t\t\t\t\t\tcustomDrag.push(data);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tlet id = data._id.split(\"ID\");\r\n\t\t\t\t\t\t/*added this condition because key was diffrent with id*/\r\n\t\t\t\t\t\tif (data._key.indexOf(\"key\") <= -1) {\r\n\t\t\t\t\t\t\tdata._id = \"ID\"+data._key;\r\n\t\t\t\t\t\t\tdata._key = \"key\"+data._key;\r\n\t\t\t\t\t\t\tdata._anskey = \"ID\"+data._anskey;\r\n\t\t\t\t\t\t\t/********/\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tlet key = data._key.split(\"key\");\r\n\t\t\t\t\t\t\tif (id[1] == key[1]) {\r\n\t\t\t\t\t\t\t\tlet k = data._anskey.split(\"key\");\r\n\t\t\t\t\t\t\t\tlet k2 = k[1];\r\n\t\t\t\t\t\t\t\tif (k2) data._anskey = \"ID\"+k2;\r\n\t\t\t\t\t\t\t} else if (parseInt(id[1]) != parseInt(key[1])) {\r\n\t\t\t\t\t\t\t\tif (data._anskey.indexOf(\"ID\") <= -1) {\r\n\t\t\t\t\t\t\t\t\tdata._anskey = \"ID\"+key[1];\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcustomDrop.push(data);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\treturn [smxml, customDrag, customDrop];\r\n\t\t}\r\n\t}\r\n\r\n\t// for the correct answer\r\n\tfunction correctAnswer() {\r\n\t\tDND.showansdrag('#'+container_id, 'c',1);\r\n\t}\r\n\r\n\t// for showing the user ans\r\n\tfunction yourAnswer() {\r\n\t\tDND.showansdrag('#'+container_id, 'u',1);\r\n\t}\r\n\r\n\t// call on the setreview function\r\n\tfunction setReview() {\r\n\t\tdisplayAns();\r\n\t\tisReview = true;\r\n\t\tDND.modeOn(1);\r\n\t}\r\n\r\n\t// unset review function\r\n\tfunction unsetReview() {\r\n\t\tisReview = false;\r\n\t\tDND.modeOn(0);\r\n\t}\r\n\r\n\t// for changing the load stte\r\n\tfunction changeLoadState() {\r\n        AH.select('#pre_sample_image').remove();\r\n        image_loaded = 1;\r\n    }\r\n</script>\r\n\r\n<link onload=\"this.rel='stylesheet'\" rel=\"preload\" as=\"style\" href={themeUrl + 'pe-items/clsSMDragNDrop/css/dragndrop.min.css'} >\r\n<div>\r\n\t<ItemHelper \r\n\t\ton:setReview = {setReview}\r\n\t\ton:unsetReview = {unsetReview}\r\n\t/>\r\n\t\r\n\t<div id=\"dndsteps\" class=\"h\" >\r\n\t\t<input id=\"base\" type=\"radio\" on:click={() => DND.setStep('base')} defaultValue=\"1\" defaultChecked name=\"rbs\" class=\"baseradio dndradio\" /> \r\n\t\t{l.base_steps}\r\n\t\t{#if step && step.length}\r\n\t\t\t{#each step as data, index}\r\n\t\t\t\t<span key={index}>\r\n\t\t\t\t\t<input \r\n\t\t\t\t\t\tid={\"step_dnd\" + data._id} \r\n\t\t\t\t\t\ttype=\"radio\" \r\n\t\t\t\t\t\ton:click={() => DND.setStep(\"dnd\" + data._id)} \r\n\t\t\t\t\t\tdefaultValue=\"1\" \r\n\t\t\t\t\t\tname=\"rbs\" \r\n\t\t\t\t\t\tclass=\"baseradio dndradio\" \r\n\t\t\t\t\t/>\r\n\t\t\t\t\t{\"dnd\" + data._id}\r\n\t\t\t\t</span>\r\n\t\t\t{/each}\r\n\t\t{/if}\t\r\n\t</div>\r\n\r\n\t<center>\r\n\t\t<div \r\n\t\t\tclass=\"btn-group mb-xl clearfix review h\" \r\n\t\t\tid=\"sm_controller\"\r\n\t\t\tstyle=\"margin-top: 20px;\"\r\n\t\t>\r\n\t\t\t<button \r\n\t\t\t\ttype=\"button\" \r\n\t\t\t\tclass=\"btn btn-light correct-ans\" \r\n\t\t\t\tid=\"reviewCorrectAns\" \r\n\t\t\t>{l.correct_answer}</button>\r\n\t\t\t<button \r\n\t\t\t\ttype=\"button\" \r\n\t\t\t\tclass=\"btn active your-ans btn-light\" \r\n\t\t\t\tid=\"reviewUserAns\" \r\n\t\t\t>\r\n\t\t\t\t{l.your_answer}\r\n\t\t\t</button>\r\n\t\t</div>\r\n                    \r\n\t\t<div\r\n\t\t\tid={container_id}\r\n\t\t\tzoom=\"\"\r\n\t\t\ttotalcorrectans = {totalcorrectans}\r\n\t\t\tclass=\"container_div\"\r\n\t\t>\r\n\t\t\t{#if bgImg}\r\n\t\t\t\t<img on:error={(e)=>{e.target.onerror = null; e.target.src=\"https://s3.amazonaws.com/jigyaasa_content_static/\" + bgImg}} height={imgHeight+\"px\"} width={imgWidth+\"px\"} src={window.inNative ? \"____s3.amazonaws.com__jigyaasa_content_static__\"+bgImg.replace(/\\//g,'__') : \"//s3.amazonaws.com/jigyaasa_content_static/\"+bgImg} class={borderclass} alt={alt ? alt : l.sample_img} on:load={() => {checkImages(1)}}/>\r\n\t\t\t{:else}\r\n                <img id=\"pre_sample_image\" src=\"//s3.amazonaws.com/jigyaasa_content_static/bg_000PLn.png\" alt=\"{l.sample_img}\" on:load={changeLoadState}/>\r\n            {/if}\r\n\r\n\t\t\t{#if state.data && image_loaded}\r\n\t\t\t\t<DragPreview modules={state.data[0].drag} containerID={container_id} />\r\n\t\t\t\t<DragPreview modules={state.data[1]} containerID={container_id} />\r\n\t\t\t\t<DropPreview modules={state.data[0].drop} containerID={container_id} uxml={uxml}/>\r\n\t\t\t\t<DropPreview modules={state.data[2]} containerID={container_id} uxml={uxml}/>\r\n\t\t\t\t<SelectPreview modules={state.data[0].select} containerID={container_id}  uxml={uxml}/>\r\n\t\t\t\t<TextboxPreview modules={state.data[0].textbox} containerID={container_id} uxml={uxml}/>\r\n\t\t\t\t<RadioPreview modules={state.data[0].radio} containerID={container_id} uxml={uxml}/>\r\n\t\t\t\t<MultilineboxPreview modules={state.data[0].multilinebox} containerID={container_id} />\r\n\t\t\t\t<CheckboxPreview modules={state.data[0].checkbox} containerID={container_id} uxml={uxml} />\r\n\t\t\t\t<TabheadPreview modules={state.data[0].tabhead} containerID={container_id} />\r\n\t\t\t\t<LabelPreview modules={state.data[0].label} containerID={container_id} />\r\n\t\t\t\t<HotspotPreview modules={state.data[0].hotspot} module_type={moduleType} containerID={container_id} uxml={uxml} />\r\n\t\t\t\t<MenulistPreview modules={state.data[0].menulist} containerID={container_id} />\r\n\t\t\t\t<ButtonPreview modules={state.data[0].button} containerID={container_id} />\r\n\t\t\t\t<StepPreview modules={state.data[0].step} containerID={container_id} {checkImages} uxml={uxml}/>\r\n\t\t\t\t<TabPreview modules={state.data[0].tab} containerID={container_id} {checkImages} uxml={uxml}/>\r\n\t\t\t\t{#if state.data[0].hotspot}\r\n\t\t\t\t\t<img class=\"targetImg\" tabindex=\"0\" alt=\"target_img\" src={themeUrl +\"pe-items/images/target.png\"} style=\"display: none\" />\r\n\t\t\t\t{/if}\r\n\t\t\t{/if}\r\n\t\t</div>\r\n\t</center>\r\n</div>\r\n\r\n<style>\r\n\t#dndsteps {\r\n\t\ttext-align: center;\r\n\t\tborder: 1px solid #999999;\r\n\t\tbackground-color: #DDDDDD;\r\n\t\twidth: 100%;\r\n\t}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AAudC,SAAS,eAAC,CAAC,AACV,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,gBAAgB,CAAE,OAAO,CACzB,KAAK,CAAE,IAAI,AACZ,CAAC"
}